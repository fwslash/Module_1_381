
tester_sdcard.elf:     file format elf32-littlenios2
tester_sdcard.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x00007f60 memsz 0x00007f60 flags r-x
    LOAD off    0x00008f80 vaddr 0x01007f80 paddr 0x01009b24 align 2**12
         filesz 0x00001ba4 memsz 0x00001ba4 flags rw-
    LOAD off    0x0000b6c8 vaddr 0x0100b6c8 paddr 0x0100b6c8 align 2**12
         filesz 0x00000000 memsz 0x000002e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00007c40  010001b8  010001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000188  01007df8  01007df8  00008df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ba4  01007f80  01009b24  00008f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  0100b6c8  0100b6c8  0000b6c8  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0000ab24  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000978  00000000  00000000  0000ab50  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000134c  00000000  00000000  0000b4c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001c9a4  00000000  00000000  0000c814  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000553e  00000000  00000000  000291b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000e5de  00000000  00000000  0002e6f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001530  00000000  00000000  0003ccd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001866  00000000  00000000  0003e204  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000045d4  00000000  00000000  0003fa6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00044040  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f8  00000000  00000000  00044070  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000470db  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000470de  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000470ea  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000470eb  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  000470ec  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  000470f0  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  000470f4  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000c  00000000  00000000  000470f8  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002c  00000000  00000000  00047104  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0009cb12  00000000  00000000  00047130  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010001b8 l    d  .text	00000000 .text
01007df8 l    d  .rodata	00000000 .rodata
01007f80 l    d  .rwdata	00000000 .rwdata
0100b6c8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
01000200 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
01007f80 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
01001c50 l     F .text	00000058 std
01001d5c l     F .text	00000008 __fp_lock
01001d64 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
01002d24 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
01002d84 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
01002e84 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
01002fa4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
01003084 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
010031e0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0100340c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
01009b14 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
010036a8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
01008930 l     O .rwdata	00001060 JTAG
01009990 l     O .rwdata	00000030 audio_0
010099c0 l     O .rwdata	0000002c character_lcd_0
010099ec l     O .rwdata	00000038 ps2_0
01009a24 l     O .rwdata	00000048 video_character_buffer_with_dma_0
01009a6c l     O .rwdata	00000054 video_pixel_buffer_dma
01009ac0 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
01003a90 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
01003cc8 l     F .text	0000022c altera_avalon_jtag_uart_irq
01003ef4 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
01004570 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
01006d58 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
01006f44 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
01007240 l     F .text	000000dc alt_file_locked
010074a4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
01007be0 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
01007d94 l     F .text	00000040 alt_sim_halt
01002ac8 g     F .text	00000070 _isatty_r
01003240 g     F .text	0000006c alt_main
0100620c g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
01000318 g     F .text	000000a0 _puts_r
0100b718 g     O .bss	00000100 alt_irq
01004de8 g     F .text	00000058 alt_up_ps2_disable_read_interrupt
01002b38 g     F .text	00000078 _lseek_r
01009b24 g       *ABS*	00000000 __flash_rwdata_start
010046e8 g     F .text	00000034 alt_up_character_lcd_send_cmd
0100b9a8 g       *ABS*	00000000 __alt_heap_start
01002704 g     F .text	00000068 __sseek
01001cb8 g     F .text	000000a4 __sinit
01005430 g     F .text	00000114 alt_up_char_buffer_string
01004c00 g     F .text	00000034 read_CE_bit
01001db8 g     F .text	00000068 __sfmoreglue
010032cc g     F .text	00000020 __malloc_unlock
01004f94 g     F .text	000000b0 alt_up_ps2_read_data_byte_timeout
01005360 g     F .text	000000d0 alt_up_char_buffer_draw
010011a0 g     F .text	000000e0 memmove
01001da8 g     F .text	00000010 _cleanup
010055e0 g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
00000000  w      *UND*	00000000 __errno
0100466c g     F .text	0000007c get_DDRAM_addr
010055a0 g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
01000000 g     F .entry	0000001c __reset
01000020 g       *ABS*	00000000 __flash_exceptions_start
01002a54 g     F .text	00000074 _fstat_r
0100b6d4 g     O .bss	00000004 errno
0100b6dc g     O .bss	00000004 alt_argv
01011aec g       *ABS*	00000000 _gp
01005780 g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
010087b0 g     O .rwdata	00000180 alt_fd_list
01006e80 g     F .text	00000094 alt_find_dev
01001100 g     F .text	000000a0 memcpy
01004880 g     F .text	0000004c alt_up_character_lcd_write_fd
01005544 g     F .text	0000005c alt_up_char_buffer_clear
01001d9c g     F .text	0000000c _cleanup_r
01007008 g     F .text	00000078 alt_io_redirect
01007df8 g       *ABS*	00000000 __DTOR_END__
010003b8 g     F .text	00000014 puts
01005830 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
0100410c g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
01002ee4 g     F .text	000000c0 isatty
01005ebc g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
010078a0 g     F .text	00000090 alt_icache_flush
0100b6c8 g     O .bss	00000004 __malloc_top_pad
01000440 g     F .text	0000049c __sfvwrite_r
01001874 g     F .text	00000070 _sbrk_r
010066a0 g     F .text	000000d0 helper_plot_pixel
01002bb0 g     F .text	00000078 _read_r
01009b0c g     O .rwdata	00000004 alt_max_fd
01002930 g     F .text	00000110 _fclose_r
01004c34 g     F .text	00000034 read_num_bytes_available
01001c1c g     F .text	00000034 fflush
0100b6cc g     O .bss	00000004 __malloc_max_sbrked_mem
01007080 g     F .text	000001c0 alt_irq_register
01004b9c g     F .text	00000034 read_RI_bit
01005864 g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
010030f0 g     F .text	000000f0 lseek
01009af0 g     O .rwdata	00000004 _global_impure_ptr
01001280 g     F .text	000005f4 _realloc_r
0100b9a8 g       *ABS*	00000000 __bss_end
010059c8 g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
0100759c g     F .text	0000010c alt_tick
01004c9c g     F .text	0000002c read_data_byte
01001d84 g     F .text	00000018 __fp_lock_all
01007504 g     F .text	00000098 alt_alarm_stop
01004bd0 g     F .text	00000030 read_RE_bit
0100b6e4 g     O .bss	00000004 alt_irq_active
010000ec g     F .exceptions	000000cc alt_irq_handler
01008788 g     O .rwdata	00000028 alt_dev_null
01004b68 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
01004e40 g     F .text	00000078 alt_up_ps2_write_data_byte
01006c60 g     F .text	00000044 alt_dcache_flush_all
010065dc g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
01009b24 g       *ABS*	00000000 __ram_rwdata_end
01009b04 g     O .rwdata	00000008 alt_dev_list
01003588 g     F .text	00000120 write
01006770 g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
01007f80 g       *ABS*	00000000 __ram_rodata_end
01002db0 g     F .text	000000d4 fstat
0100b9a8 g       *ABS*	00000000 end
010051b4 g     F .text	000000a8 alt_up_ps2_write_fd
0100529c g     F .text	00000084 alt_up_char_buffer_init
01003c10 g     F .text	000000b8 altera_avalon_jtag_uart_init
01007df4 g       *ABS*	00000000 __CTOR_LIST__
01800000 g       *ABS*	00000000 __alt_stack_pointer
010045e4 g     F .text	00000088 alt_avalon_timer_sc_init
01004330 g     F .text	00000240 altera_avalon_jtag_uart_write
01001ca8 g     F .text	00000004 __sfp_lock_acquire
0100101c g     F .text	000000e4 memchr
01004790 g     F .text	00000078 alt_up_character_lcd_write
0100203c g     F .text	00000314 _free_r
01007be4 g     F .text	000001b0 __call_exitprocs
01009af8 g     O .rwdata	00000004 __malloc_sbrk_base
010001b8 g     F .text	0000004c _start
0100b6e8 g     O .bss	00000004 _alt_tick_rate
0100b6ec g     O .bss	00000004 _alt_nticks
010032ec g     F .text	00000120 read
0100373c g     F .text	00000354 alt_sys_init
010049f4 g     F .text	000000b0 alt_up_character_lcd_shift_display
01007aac g     F .text	00000134 __register_exitproc
010050c0 g     F .text	00000058 alt_up_ps2_clear_fifo
01004aa4 g     F .text	00000090 alt_up_character_lcd_erase_pos
01003fa4 g     F .text	00000074 altera_avalon_jtag_uart_close
01007f80 g       *ABS*	00000000 __ram_rwdata_start
01007df8 g       *ABS*	00000000 __ram_rodata_start
0100b6f0 g     O .bss	00000028 __malloc_current_mallinfo
01003ac8 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
010077e8 g     F .text	000000b8 alt_get_fd
010028c0 g     F .text	00000070 _close_r
0100797c g     F .text	00000074 memcmp
01003b78 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0100b9a8 g       *ABS*	00000000 __alt_stack_base
01003bc0 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
010018e4 g     F .text	0000013c __swsetup_r
01001e20 g     F .text	000000f0 __sfp
01008380 g     O .rwdata	00000408 __malloc_av_
01001cb4 g     F .text	00000004 __sinit_lock_release
010027e8 g     F .text	00000060 __sread
010076c8 g     F .text	00000120 alt_find_file
01006ca4 g     F .text	000000b4 alt_dev_llist_insert
010032ac g     F .text	00000020 __malloc_lock
010034cc g     F .text	000000bc sbrk
01001a20 g     F .text	000001fc _fflush_r
0100b6c8 g       *ABS*	00000000 __bss_start
01002664 g     F .text	00000098 memset
01000204 g     F .text	00000114 main
0100b6e0 g     O .bss	00000004 alt_envp
0100b6d0 g     O .bss	00000004 __malloc_max_total_mem
010057d8 g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
01005320 g     F .text	00000040 alt_up_char_buffer_open_dev
01003b20 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
01004944 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
010026fc g     F .text	00000008 __sclose
01800000 g       *ABS*	00000000 __alt_heap_limit
01002a40 g     F .text	00000014 fclose
01005044 g     F .text	0000007c alt_up_ps2_read_data_byte
0100b818 g     O .bss	00000190 _atexit0
010008dc g     F .text	00000740 _malloc_r
01009b10 g     O .rwdata	00000004 alt_errno
01002418 g     F .text	000000b8 _fwalk
0100525c g     F .text	00000040 alt_up_ps2_open_dev
01004750 g     F .text	00000040 alt_up_character_lcd_open_dev
01001f10 g     F .text	0000012c _malloc_trim_r
01004d94 g     F .text	00000054 alt_up_ps2_enable_read_interrupt
01007df8 g       *ABS*	00000000 __CTOR_END__
0100471c g     F .text	00000034 alt_up_character_lcd_init
010079f0 g     F .text	000000bc strcmp
01007df8 g       *ABS*	00000000 __flash_rodata_start
01007df8 g       *ABS*	00000000 __DTOR_LIST__
01003708 g     F .text	00000034 alt_irq_init
0100346c g     F .text	00000060 alt_release_fd
01004c68 g     F .text	00000034 read_data_valid
01004b34 g     F .text	00000034 alt_up_character_lcd_cursor_off
01004f28 g     F .text	0000006c alt_up_ps2_write_data_byte_with_ack
01007930 g     F .text	00000014 atexit
01002848 g     F .text	00000078 _write_r
01009aec g     O .rwdata	00000004 _impure_ptr
0100b6d8 g     O .bss	00000004 alt_argc
01006e1c g     F .text	00000064 _do_dtors
01000020 g       .exceptions	00000000 alt_irq_entry
01001d6c g     F .text	00000018 __fp_unlock_all
01009afc g     O .rwdata	00000008 alt_fs_list
01000020 g       *ABS*	00000000 __ram_exceptions_start
01009b24 g       *ABS*	00000000 _edata
0100b9a8 g       *ABS*	00000000 _end
010001b8 g       *ABS*	00000000 __ram_exceptions_end
01004018 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0100276c g     F .text	0000007c __swrite
01009af4 g     O .rwdata	00000004 __malloc_trim_threshold
010076a8 g     F .text	00000020 altera_nios2_qsys_irq_init
00000000 g       *ABS*	00000000 __alt_mem_onchip
01007944 g     F .text	00000038 exit
01002350 g     F .text	000000c8 _fwalk_reent
01004cc8 g     F .text	000000cc alt_up_ps2_init
01800000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
01001cac g     F .text	00000004 __sfp_lock_release
01000000 g       *ABS*	00000000 __alt_mem_sdram
01004808 g     F .text	00000078 alt_up_character_lcd_string
01007dd4 g     F .text	00000020 _exit
01006b0c g     F .text	00000154 alt_alarm_start
010024d0 g     F .text	00000194 __smakebuf_r
01004eb8 g     F .text	00000070 alt_up_ps2_wait_for_ack
010003cc g     F .text	00000074 strlen
0100731c g     F .text	00000188 open
01006f14 g     F .text	00000030 alt_icache_flush_all
010048cc g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
01009b18 g     O .rwdata	00000004 alt_priority_mask
01005118 g     F .text	0000009c alt_up_ps2_read_fd
01009b1c g     O .rwdata	00000008 alt_alarm_list
01006db8 g     F .text	00000064 _do_ctors
01002c28 g     F .text	000000fc close
01003004 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
01001cb0 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

01000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 1000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 100000c:	00bffd16 	blt	zero,r2,1000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000010:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000014:	08406e14 	ori	at,at,440
    jmp r1
 1000018:	0800683a 	jmp	at
 100001c:	00000000 	call	0 <__alt_mem_onchip>

Disassembly of section .exceptions:

01000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000ec0 	call	10000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000306 	br	1000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 100008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 100009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 10000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 10000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000e8:	ef80083a 	eret

010000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000ec:	defff904 	addi	sp,sp,-28
 10000f0:	dfc00615 	stw	ra,24(sp)
 10000f4:	df000515 	stw	fp,20(sp)
 10000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 10000fc:	0005313a 	rdctl	r2,ipending
 1000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 1000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 100010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000110:	00800044 	movi	r2,1
 1000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1000118:	e0ffff17 	ldw	r3,-4(fp)
 100011c:	e0bffe17 	ldw	r2,-8(fp)
 1000120:	1884703a 	and	r2,r3,r2
 1000124:	1005003a 	cmpeq	r2,r2,zero
 1000128:	1000171e 	bne	r2,zero,1000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 100012c:	e0bffd17 	ldw	r2,-12(fp)
 1000130:	00c04074 	movhi	r3,257
 1000134:	18edc604 	addi	r3,r3,-18664
 1000138:	100490fa 	slli	r2,r2,3
 100013c:	10c5883a 	add	r2,r2,r3
 1000140:	11800017 	ldw	r6,0(r2)
 1000144:	e0bffd17 	ldw	r2,-12(fp)
 1000148:	00c04074 	movhi	r3,257
 100014c:	18edc604 	addi	r3,r3,-18664
 1000150:	100490fa 	slli	r2,r2,3
 1000154:	10c5883a 	add	r2,r2,r3
 1000158:	10800104 	addi	r2,r2,4
 100015c:	11000017 	ldw	r4,0(r2)
 1000160:	e17ffd17 	ldw	r5,-12(fp)
 1000164:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000168:	0005313a 	rdctl	r2,ipending
 100016c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 1000170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1000174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1000178:	e0bfff17 	ldw	r2,-4(fp)
 100017c:	1004c03a 	cmpne	r2,r2,zero
 1000180:	103fe21e 	bne	r2,zero,100010c <alt_irq_handler+0x20>
 1000184:	00000706 	br	10001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1000188:	e0bffe17 	ldw	r2,-8(fp)
 100018c:	1085883a 	add	r2,r2,r2
 1000190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1000194:	e0bffd17 	ldw	r2,-12(fp)
 1000198:	10800044 	addi	r2,r2,1
 100019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 10001a0:	003fdd06 	br	1000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 10001a4:	e037883a 	mov	sp,fp
 10001a8:	dfc00117 	ldw	ra,4(sp)
 10001ac:	df000017 	ldw	fp,0(sp)
 10001b0:	dec00204 	addi	sp,sp,8
 10001b4:	f800283a 	ret

Disassembly of section .text:

010001b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 10001b8:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 10001bc:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 10001c0:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 10001c4:	00bffd16 	blt	zero,r2,10001bc <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10001c8:	06c06034 	movhi	sp,384
    ori sp, sp, %lo(__alt_stack_pointer)
 10001cc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 10001d0:	06804074 	movhi	gp,257
    ori gp, gp, %lo(_gp)
 10001d4:	d686bb14 	ori	gp,gp,6892
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10001d8:	00804034 	movhi	r2,256
    ori r2, r2, %lo(__bss_start)
 10001dc:	10adb214 	ori	r2,r2,46792

    movhi r3, %hi(__bss_end)
 10001e0:	00c04034 	movhi	r3,256
    ori r3, r3, %lo(__bss_end)
 10001e4:	18ee6a14 	ori	r3,r3,47528

    beq r2, r3, 1f
 10001e8:	10c00326 	beq	r2,r3,10001f8 <_start+0x40>

0:
    stw zero, (r2)
 10001ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10001f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10001f4:	10fffd36 	bltu	r2,r3,10001ec <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10001f8:	10030040 	call	1003004 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 10001fc:	10032400 	call	1003240 <alt_main>

01000200 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1000200:	003fff06 	br	1000200 <alt_after_alt_main>

01000204 <main>:
#include "system.h"
#include "altera_up_avalon_video_pixel_buffer_dma.h"
#define drawer_base (volatile int *) PIXEL_DRAWER_0_BASE
//#define PIXEL_BUFFER_BASE (volatile int *)

int main() {
 1000204:	defff904 	addi	sp,sp,-28
 1000208:	dfc00615 	stw	ra,24(sp)
 100020c:	df000515 	stw	fp,20(sp)
 1000210:	df000504 	addi	fp,sp,20
	alt_up_pixel_buffer_dma_dev* pixel_buffer;
	pixel_buffer = alt_up_pixel_buffer_dma_open_dev(
 1000214:	01004034 	movhi	r4,256
 1000218:	211f7e04 	addi	r4,r4,32248
 100021c:	10055a00 	call	10055a0 <alt_up_pixel_buffer_dma_open_dev>
 1000220:	e0bfff15 	stw	r2,-4(fp)
			"/dev/video_pixel_buffer_dma");
	if (pixel_buffer == 0) {
 1000224:	e0bfff17 	ldw	r2,-4(fp)
 1000228:	1004c03a 	cmpne	r2,r2,zero
 100022c:	1000031e 	bne	r2,zero,100023c <main+0x38>
		printf(
 1000230:	01004034 	movhi	r4,256
 1000234:	211f8504 	addi	r4,r4,32276
 1000238:	10003b80 	call	10003b8 <puts>
				"error initializing pixel buffer (check name in alt_up_pixel_buffer_dma_open_dev)\n");
	}
	alt_up_pixel_buffer_dma_change_back_buffer_address(pixel_buffer,
 100023c:	e13fff17 	ldw	r4,-4(fp)
 1000240:	01400234 	movhi	r5,8
 1000244:	10057800 	call	1005780 <alt_up_pixel_buffer_dma_change_back_buffer_address>
			SRAM_0_BASE);
	alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer);
 1000248:	e13fff17 	ldw	r4,-4(fp)
 100024c:	10057d80 	call	10057d8 <alt_up_pixel_buffer_dma_swap_buffers>
	while (alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buffer))
 1000250:	e13fff17 	ldw	r4,-4(fp)
 1000254:	10058300 	call	1005830 <alt_up_pixel_buffer_dma_check_swap_buffers_status>
 1000258:	1004c03a 	cmpne	r2,r2,zero
 100025c:	103ffc1e 	bne	r2,zero,1000250 <main+0x4c>
		;
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 0);
 1000260:	e13fff17 	ldw	r4,-4(fp)
 1000264:	000b883a 	mov	r5,zero
 1000268:	10058640 	call	1005864 <alt_up_pixel_buffer_dma_clear_screen>

	printf("going in while loop\n");
 100026c:	01004034 	movhi	r4,256
 1000270:	211f9a04 	addi	r4,r4,32360
 1000274:	10003b80 	call	10003b8 <puts>
 1000278:	00000006 	br	100027c <main+0x78>

	while (1) {
		int hw = 1;
 100027c:	00800044 	movi	r2,1
 1000280:	e0bffe15 	stw	r2,-8(fp)
		if (hw) {
 1000284:	e0bffe17 	ldw	r2,-8(fp)
 1000288:	1005003a 	cmpeq	r2,r2,zero
 100028c:	1000171e 	bne	r2,zero,10002ec <main+0xe8>
			IOWR_32DIRECT(drawer_base, 0, 10);
 1000290:	00d20804 	movi	r3,18464
 1000294:	00800284 	movi	r2,10
 1000298:	18800035 	stwio	r2,0(r3)
			// Set x1
			IOWR_32DIRECT(drawer_base, 4, 20);
 100029c:	00d20904 	movi	r3,18468
 10002a0:	00800504 	movi	r2,20
 10002a4:	18800035 	stwio	r2,0(r3)
			// Set y1
			IOWR_32DIRECT(drawer_base, 8, 50);
 10002a8:	00d20a04 	movi	r3,18472
 10002ac:	00800c84 	movi	r2,50
 10002b0:	18800035 	stwio	r2,0(r3)
			// Set x2
			IOWR_32DIRECT(drawer_base, 12, 60);
 10002b4:	00d20b04 	movi	r3,18476
 10002b8:	00800f04 	movi	r2,60
 10002bc:	18800035 	stwio	r2,0(r3)
			// Set y2
			IOWR_32DIRECT(drawer_base, 16, 0xFFFF);
 10002c0:	00d20c04 	movi	r3,18480
 10002c4:	00bfffd4 	movui	r2,65535
 10002c8:	18800035 	stwio	r2,0(r3)
			// Set colour
			IOWR_32DIRECT(drawer_base, 20, 1);
 10002cc:	00d20d04 	movi	r3,18484
 10002d0:	00800044 	movi	r2,1
 10002d4:	18800035 	stwio	r2,0(r3)
			// Start drawing
			while (IORD_32DIRECT(drawer_base,20) == 0)
 10002d8:	00920d04 	movi	r2,18484
 10002dc:	10800037 	ldwio	r2,0(r2)
 10002e0:	1005003a 	cmpeq	r2,r2,zero
 10002e4:	103ffc1e 	bne	r2,zero,10002d8 <main+0xd4>
 10002e8:	003fe406 	br	100027c <main+0x78>
				; // wait until done
		} else {
			alt_up_pixel_buffer_dma_draw_box(pixel_buffer, 10, 20, 50, 60,
 10002ec:	00800f04 	movi	r2,60
 10002f0:	d8800015 	stw	r2,0(sp)
 10002f4:	00bfffd4 	movui	r2,65535
 10002f8:	d8800115 	stw	r2,4(sp)
 10002fc:	d8000215 	stw	zero,8(sp)
 1000300:	e13fff17 	ldw	r4,-4(fp)
 1000304:	01400284 	movi	r5,10
 1000308:	01800504 	movi	r6,20
 100030c:	01c00c84 	movi	r7,50
 1000310:	10059c80 	call	10059c8 <alt_up_pixel_buffer_dma_draw_box>
					0xFFFF, 0);
		}
	}
 1000314:	003fd906 	br	100027c <main+0x78>

01000318 <_puts_r>:
 1000318:	defff604 	addi	sp,sp,-40
 100031c:	dc400715 	stw	r17,28(sp)
 1000320:	2023883a 	mov	r17,r4
 1000324:	2809883a 	mov	r4,r5
 1000328:	dfc00915 	stw	ra,36(sp)
 100032c:	dcc00815 	stw	r19,32(sp)
 1000330:	2827883a 	mov	r19,r5
 1000334:	10003cc0 	call	10003cc <strlen>
 1000338:	89400217 	ldw	r5,8(r17)
 100033c:	00c04034 	movhi	r3,256
 1000340:	18df9f04 	addi	r3,r3,32380
 1000344:	01c00044 	movi	r7,1
 1000348:	12000044 	addi	r8,r2,1
 100034c:	d8c00515 	stw	r3,20(sp)
 1000350:	d9c00615 	stw	r7,24(sp)
 1000354:	d8c00304 	addi	r3,sp,12
 1000358:	01c00084 	movi	r7,2
 100035c:	8809883a 	mov	r4,r17
 1000360:	d80d883a 	mov	r6,sp
 1000364:	d8c00015 	stw	r3,0(sp)
 1000368:	dcc00315 	stw	r19,12(sp)
 100036c:	da000215 	stw	r8,8(sp)
 1000370:	d9c00115 	stw	r7,4(sp)
 1000374:	d8800415 	stw	r2,16(sp)
 1000378:	10004400 	call	1000440 <__sfvwrite_r>
 100037c:	00ffffc4 	movi	r3,-1
 1000380:	10000626 	beq	r2,zero,100039c <_puts_r+0x84>
 1000384:	1805883a 	mov	r2,r3
 1000388:	dfc00917 	ldw	ra,36(sp)
 100038c:	dcc00817 	ldw	r19,32(sp)
 1000390:	dc400717 	ldw	r17,28(sp)
 1000394:	dec00a04 	addi	sp,sp,40
 1000398:	f800283a 	ret
 100039c:	00c00284 	movi	r3,10
 10003a0:	1805883a 	mov	r2,r3
 10003a4:	dfc00917 	ldw	ra,36(sp)
 10003a8:	dcc00817 	ldw	r19,32(sp)
 10003ac:	dc400717 	ldw	r17,28(sp)
 10003b0:	dec00a04 	addi	sp,sp,40
 10003b4:	f800283a 	ret

010003b8 <puts>:
 10003b8:	00804074 	movhi	r2,257
 10003bc:	10a6bb04 	addi	r2,r2,-25876
 10003c0:	200b883a 	mov	r5,r4
 10003c4:	11000017 	ldw	r4,0(r2)
 10003c8:	10003181 	jmpi	1000318 <_puts_r>

010003cc <strlen>:
 10003cc:	208000cc 	andi	r2,r4,3
 10003d0:	2011883a 	mov	r8,r4
 10003d4:	1000161e 	bne	r2,zero,1000430 <strlen+0x64>
 10003d8:	20c00017 	ldw	r3,0(r4)
 10003dc:	017fbff4 	movhi	r5,65279
 10003e0:	297fbfc4 	addi	r5,r5,-257
 10003e4:	01e02074 	movhi	r7,32897
 10003e8:	39e02004 	addi	r7,r7,-32640
 10003ec:	1945883a 	add	r2,r3,r5
 10003f0:	11c4703a 	and	r2,r2,r7
 10003f4:	00c6303a 	nor	r3,zero,r3
 10003f8:	1886703a 	and	r3,r3,r2
 10003fc:	18000c1e 	bne	r3,zero,1000430 <strlen+0x64>
 1000400:	280d883a 	mov	r6,r5
 1000404:	380b883a 	mov	r5,r7
 1000408:	21000104 	addi	r4,r4,4
 100040c:	20800017 	ldw	r2,0(r4)
 1000410:	1187883a 	add	r3,r2,r6
 1000414:	1946703a 	and	r3,r3,r5
 1000418:	0084303a 	nor	r2,zero,r2
 100041c:	10c4703a 	and	r2,r2,r3
 1000420:	103ff926 	beq	r2,zero,1000408 <strlen+0x3c>
 1000424:	20800007 	ldb	r2,0(r4)
 1000428:	10000326 	beq	r2,zero,1000438 <strlen+0x6c>
 100042c:	21000044 	addi	r4,r4,1
 1000430:	20800007 	ldb	r2,0(r4)
 1000434:	103ffd1e 	bne	r2,zero,100042c <strlen+0x60>
 1000438:	2205c83a 	sub	r2,r4,r8
 100043c:	f800283a 	ret

01000440 <__sfvwrite_r>:
 1000440:	30800217 	ldw	r2,8(r6)
 1000444:	defff504 	addi	sp,sp,-44
 1000448:	df000915 	stw	fp,36(sp)
 100044c:	dd800715 	stw	r22,28(sp)
 1000450:	dc800315 	stw	r18,12(sp)
 1000454:	dfc00a15 	stw	ra,40(sp)
 1000458:	ddc00815 	stw	r23,32(sp)
 100045c:	dd400615 	stw	r21,24(sp)
 1000460:	dd000515 	stw	r20,20(sp)
 1000464:	dcc00415 	stw	r19,16(sp)
 1000468:	dc400215 	stw	r17,8(sp)
 100046c:	dc000115 	stw	r16,4(sp)
 1000470:	302d883a 	mov	r22,r6
 1000474:	2039883a 	mov	fp,r4
 1000478:	2825883a 	mov	r18,r5
 100047c:	10001c26 	beq	r2,zero,10004f0 <__sfvwrite_r+0xb0>
 1000480:	29c0030b 	ldhu	r7,12(r5)
 1000484:	3880020c 	andi	r2,r7,8
 1000488:	10002726 	beq	r2,zero,1000528 <__sfvwrite_r+0xe8>
 100048c:	28800417 	ldw	r2,16(r5)
 1000490:	10002526 	beq	r2,zero,1000528 <__sfvwrite_r+0xe8>
 1000494:	3880008c 	andi	r2,r7,2
 1000498:	b5400017 	ldw	r21,0(r22)
 100049c:	10002826 	beq	r2,zero,1000540 <__sfvwrite_r+0x100>
 10004a0:	0021883a 	mov	r16,zero
 10004a4:	0023883a 	mov	r17,zero
 10004a8:	880d883a 	mov	r6,r17
 10004ac:	e009883a 	mov	r4,fp
 10004b0:	00810004 	movi	r2,1024
 10004b4:	80006e26 	beq	r16,zero,1000670 <__sfvwrite_r+0x230>
 10004b8:	800f883a 	mov	r7,r16
 10004bc:	91400717 	ldw	r5,28(r18)
 10004c0:	1400012e 	bgeu	r2,r16,10004c8 <__sfvwrite_r+0x88>
 10004c4:	100f883a 	mov	r7,r2
 10004c8:	90c00917 	ldw	r3,36(r18)
 10004cc:	183ee83a 	callr	r3
 10004d0:	1007883a 	mov	r3,r2
 10004d4:	80a1c83a 	sub	r16,r16,r2
 10004d8:	88a3883a 	add	r17,r17,r2
 10004dc:	00806d0e 	bge	zero,r2,1000694 <__sfvwrite_r+0x254>
 10004e0:	b0800217 	ldw	r2,8(r22)
 10004e4:	10c5c83a 	sub	r2,r2,r3
 10004e8:	b0800215 	stw	r2,8(r22)
 10004ec:	103fee1e 	bne	r2,zero,10004a8 <__sfvwrite_r+0x68>
 10004f0:	0009883a 	mov	r4,zero
 10004f4:	2005883a 	mov	r2,r4
 10004f8:	dfc00a17 	ldw	ra,40(sp)
 10004fc:	df000917 	ldw	fp,36(sp)
 1000500:	ddc00817 	ldw	r23,32(sp)
 1000504:	dd800717 	ldw	r22,28(sp)
 1000508:	dd400617 	ldw	r21,24(sp)
 100050c:	dd000517 	ldw	r20,20(sp)
 1000510:	dcc00417 	ldw	r19,16(sp)
 1000514:	dc800317 	ldw	r18,12(sp)
 1000518:	dc400217 	ldw	r17,8(sp)
 100051c:	dc000117 	ldw	r16,4(sp)
 1000520:	dec00b04 	addi	sp,sp,44
 1000524:	f800283a 	ret
 1000528:	10018e40 	call	10018e4 <__swsetup_r>
 100052c:	1000e41e 	bne	r2,zero,10008c0 <__sfvwrite_r+0x480>
 1000530:	91c0030b 	ldhu	r7,12(r18)
 1000534:	b5400017 	ldw	r21,0(r22)
 1000538:	3880008c 	andi	r2,r7,2
 100053c:	103fd81e 	bne	r2,zero,10004a0 <__sfvwrite_r+0x60>
 1000540:	3880004c 	andi	r2,r7,1
 1000544:	1005003a 	cmpeq	r2,r2,zero
 1000548:	10005726 	beq	r2,zero,10006a8 <__sfvwrite_r+0x268>
 100054c:	0029883a 	mov	r20,zero
 1000550:	002f883a 	mov	r23,zero
 1000554:	a0004226 	beq	r20,zero,1000660 <__sfvwrite_r+0x220>
 1000558:	3880800c 	andi	r2,r7,512
 100055c:	94000217 	ldw	r16,8(r18)
 1000560:	10008b26 	beq	r2,zero,1000790 <__sfvwrite_r+0x350>
 1000564:	800d883a 	mov	r6,r16
 1000568:	a400a536 	bltu	r20,r16,1000800 <__sfvwrite_r+0x3c0>
 100056c:	3881200c 	andi	r2,r7,1152
 1000570:	10002726 	beq	r2,zero,1000610 <__sfvwrite_r+0x1d0>
 1000574:	90800517 	ldw	r2,20(r18)
 1000578:	92000417 	ldw	r8,16(r18)
 100057c:	91400017 	ldw	r5,0(r18)
 1000580:	1087883a 	add	r3,r2,r2
 1000584:	1887883a 	add	r3,r3,r2
 1000588:	1808d7fa 	srli	r4,r3,31
 100058c:	2a21c83a 	sub	r16,r5,r8
 1000590:	80800044 	addi	r2,r16,1
 1000594:	20c9883a 	add	r4,r4,r3
 1000598:	2027d07a 	srai	r19,r4,1
 100059c:	a085883a 	add	r2,r20,r2
 10005a0:	980d883a 	mov	r6,r19
 10005a4:	9880022e 	bgeu	r19,r2,10005b0 <__sfvwrite_r+0x170>
 10005a8:	1027883a 	mov	r19,r2
 10005ac:	100d883a 	mov	r6,r2
 10005b0:	3881000c 	andi	r2,r7,1024
 10005b4:	1000b826 	beq	r2,zero,1000898 <__sfvwrite_r+0x458>
 10005b8:	300b883a 	mov	r5,r6
 10005bc:	e009883a 	mov	r4,fp
 10005c0:	10008dc0 	call	10008dc <_malloc_r>
 10005c4:	10003126 	beq	r2,zero,100068c <__sfvwrite_r+0x24c>
 10005c8:	91400417 	ldw	r5,16(r18)
 10005cc:	1009883a 	mov	r4,r2
 10005d0:	800d883a 	mov	r6,r16
 10005d4:	1023883a 	mov	r17,r2
 10005d8:	10011000 	call	1001100 <memcpy>
 10005dc:	90c0030b 	ldhu	r3,12(r18)
 10005e0:	00beffc4 	movi	r2,-1025
 10005e4:	1886703a 	and	r3,r3,r2
 10005e8:	18c02014 	ori	r3,r3,128
 10005ec:	90c0030d 	sth	r3,12(r18)
 10005f0:	9c07c83a 	sub	r3,r19,r16
 10005f4:	8c05883a 	add	r2,r17,r16
 10005f8:	a00d883a 	mov	r6,r20
 10005fc:	a021883a 	mov	r16,r20
 1000600:	90800015 	stw	r2,0(r18)
 1000604:	90c00215 	stw	r3,8(r18)
 1000608:	94400415 	stw	r17,16(r18)
 100060c:	94c00515 	stw	r19,20(r18)
 1000610:	91000017 	ldw	r4,0(r18)
 1000614:	b80b883a 	mov	r5,r23
 1000618:	a023883a 	mov	r17,r20
 100061c:	10011a00 	call	10011a0 <memmove>
 1000620:	90c00217 	ldw	r3,8(r18)
 1000624:	90800017 	ldw	r2,0(r18)
 1000628:	a027883a 	mov	r19,r20
 100062c:	1c07c83a 	sub	r3,r3,r16
 1000630:	1405883a 	add	r2,r2,r16
 1000634:	90c00215 	stw	r3,8(r18)
 1000638:	a021883a 	mov	r16,r20
 100063c:	90800015 	stw	r2,0(r18)
 1000640:	b0800217 	ldw	r2,8(r22)
 1000644:	1405c83a 	sub	r2,r2,r16
 1000648:	b0800215 	stw	r2,8(r22)
 100064c:	103fa826 	beq	r2,zero,10004f0 <__sfvwrite_r+0xb0>
 1000650:	a469c83a 	sub	r20,r20,r17
 1000654:	91c0030b 	ldhu	r7,12(r18)
 1000658:	bcef883a 	add	r23,r23,r19
 100065c:	a03fbe1e 	bne	r20,zero,1000558 <__sfvwrite_r+0x118>
 1000660:	adc00017 	ldw	r23,0(r21)
 1000664:	ad000117 	ldw	r20,4(r21)
 1000668:	ad400204 	addi	r21,r21,8
 100066c:	003fb906 	br	1000554 <__sfvwrite_r+0x114>
 1000670:	ac400017 	ldw	r17,0(r21)
 1000674:	ac000117 	ldw	r16,4(r21)
 1000678:	ad400204 	addi	r21,r21,8
 100067c:	003f8a06 	br	10004a8 <__sfvwrite_r+0x68>
 1000680:	91400417 	ldw	r5,16(r18)
 1000684:	e009883a 	mov	r4,fp
 1000688:	100203c0 	call	100203c <_free_r>
 100068c:	00800304 	movi	r2,12
 1000690:	e0800015 	stw	r2,0(fp)
 1000694:	9080030b 	ldhu	r2,12(r18)
 1000698:	013fffc4 	movi	r4,-1
 100069c:	10801014 	ori	r2,r2,64
 10006a0:	9080030d 	sth	r2,12(r18)
 10006a4:	003f9306 	br	10004f4 <__sfvwrite_r+0xb4>
 10006a8:	0027883a 	mov	r19,zero
 10006ac:	002f883a 	mov	r23,zero
 10006b0:	d8000015 	stw	zero,0(sp)
 10006b4:	0029883a 	mov	r20,zero
 10006b8:	98001e26 	beq	r19,zero,1000734 <__sfvwrite_r+0x2f4>
 10006bc:	d8c00017 	ldw	r3,0(sp)
 10006c0:	1804c03a 	cmpne	r2,r3,zero
 10006c4:	10005e26 	beq	r2,zero,1000840 <__sfvwrite_r+0x400>
 10006c8:	9821883a 	mov	r16,r19
 10006cc:	a4c0012e 	bgeu	r20,r19,10006d4 <__sfvwrite_r+0x294>
 10006d0:	a021883a 	mov	r16,r20
 10006d4:	91000017 	ldw	r4,0(r18)
 10006d8:	90800417 	ldw	r2,16(r18)
 10006dc:	91800217 	ldw	r6,8(r18)
 10006e0:	91c00517 	ldw	r7,20(r18)
 10006e4:	1100022e 	bgeu	r2,r4,10006f0 <__sfvwrite_r+0x2b0>
 10006e8:	31e3883a 	add	r17,r6,r7
 10006ec:	8c001616 	blt	r17,r16,1000748 <__sfvwrite_r+0x308>
 10006f0:	81c03816 	blt	r16,r7,10007d4 <__sfvwrite_r+0x394>
 10006f4:	90c00917 	ldw	r3,36(r18)
 10006f8:	91400717 	ldw	r5,28(r18)
 10006fc:	e009883a 	mov	r4,fp
 1000700:	b80d883a 	mov	r6,r23
 1000704:	183ee83a 	callr	r3
 1000708:	1023883a 	mov	r17,r2
 100070c:	00bfe10e 	bge	zero,r2,1000694 <__sfvwrite_r+0x254>
 1000710:	a469c83a 	sub	r20,r20,r17
 1000714:	a0001826 	beq	r20,zero,1000778 <__sfvwrite_r+0x338>
 1000718:	b0800217 	ldw	r2,8(r22)
 100071c:	1445c83a 	sub	r2,r2,r17
 1000720:	b0800215 	stw	r2,8(r22)
 1000724:	103f7226 	beq	r2,zero,10004f0 <__sfvwrite_r+0xb0>
 1000728:	9c67c83a 	sub	r19,r19,r17
 100072c:	bc6f883a 	add	r23,r23,r17
 1000730:	983fe21e 	bne	r19,zero,10006bc <__sfvwrite_r+0x27c>
 1000734:	adc00017 	ldw	r23,0(r21)
 1000738:	acc00117 	ldw	r19,4(r21)
 100073c:	ad400204 	addi	r21,r21,8
 1000740:	d8000015 	stw	zero,0(sp)
 1000744:	003fdc06 	br	10006b8 <__sfvwrite_r+0x278>
 1000748:	b80b883a 	mov	r5,r23
 100074c:	880d883a 	mov	r6,r17
 1000750:	10011a00 	call	10011a0 <memmove>
 1000754:	90c00017 	ldw	r3,0(r18)
 1000758:	e009883a 	mov	r4,fp
 100075c:	900b883a 	mov	r5,r18
 1000760:	1c47883a 	add	r3,r3,r17
 1000764:	90c00015 	stw	r3,0(r18)
 1000768:	1001a200 	call	1001a20 <_fflush_r>
 100076c:	103fc91e 	bne	r2,zero,1000694 <__sfvwrite_r+0x254>
 1000770:	a469c83a 	sub	r20,r20,r17
 1000774:	a03fe81e 	bne	r20,zero,1000718 <__sfvwrite_r+0x2d8>
 1000778:	e009883a 	mov	r4,fp
 100077c:	900b883a 	mov	r5,r18
 1000780:	1001a200 	call	1001a20 <_fflush_r>
 1000784:	103fc31e 	bne	r2,zero,1000694 <__sfvwrite_r+0x254>
 1000788:	d8000015 	stw	zero,0(sp)
 100078c:	003fe206 	br	1000718 <__sfvwrite_r+0x2d8>
 1000790:	91000017 	ldw	r4,0(r18)
 1000794:	90800417 	ldw	r2,16(r18)
 1000798:	1100022e 	bgeu	r2,r4,10007a4 <__sfvwrite_r+0x364>
 100079c:	8023883a 	mov	r17,r16
 10007a0:	85003136 	bltu	r16,r20,1000868 <__sfvwrite_r+0x428>
 10007a4:	91c00517 	ldw	r7,20(r18)
 10007a8:	a1c01836 	bltu	r20,r7,100080c <__sfvwrite_r+0x3cc>
 10007ac:	90c00917 	ldw	r3,36(r18)
 10007b0:	91400717 	ldw	r5,28(r18)
 10007b4:	e009883a 	mov	r4,fp
 10007b8:	b80d883a 	mov	r6,r23
 10007bc:	183ee83a 	callr	r3
 10007c0:	1021883a 	mov	r16,r2
 10007c4:	00bfb30e 	bge	zero,r2,1000694 <__sfvwrite_r+0x254>
 10007c8:	1023883a 	mov	r17,r2
 10007cc:	1027883a 	mov	r19,r2
 10007d0:	003f9b06 	br	1000640 <__sfvwrite_r+0x200>
 10007d4:	b80b883a 	mov	r5,r23
 10007d8:	800d883a 	mov	r6,r16
 10007dc:	10011a00 	call	10011a0 <memmove>
 10007e0:	90c00217 	ldw	r3,8(r18)
 10007e4:	90800017 	ldw	r2,0(r18)
 10007e8:	8023883a 	mov	r17,r16
 10007ec:	1c07c83a 	sub	r3,r3,r16
 10007f0:	1405883a 	add	r2,r2,r16
 10007f4:	90c00215 	stw	r3,8(r18)
 10007f8:	90800015 	stw	r2,0(r18)
 10007fc:	003fc406 	br	1000710 <__sfvwrite_r+0x2d0>
 1000800:	a00d883a 	mov	r6,r20
 1000804:	a021883a 	mov	r16,r20
 1000808:	003f8106 	br	1000610 <__sfvwrite_r+0x1d0>
 100080c:	b80b883a 	mov	r5,r23
 1000810:	a00d883a 	mov	r6,r20
 1000814:	10011a00 	call	10011a0 <memmove>
 1000818:	90c00217 	ldw	r3,8(r18)
 100081c:	90800017 	ldw	r2,0(r18)
 1000820:	a021883a 	mov	r16,r20
 1000824:	1d07c83a 	sub	r3,r3,r20
 1000828:	1505883a 	add	r2,r2,r20
 100082c:	a023883a 	mov	r17,r20
 1000830:	a027883a 	mov	r19,r20
 1000834:	90c00215 	stw	r3,8(r18)
 1000838:	90800015 	stw	r2,0(r18)
 100083c:	003f8006 	br	1000640 <__sfvwrite_r+0x200>
 1000840:	b809883a 	mov	r4,r23
 1000844:	01400284 	movi	r5,10
 1000848:	980d883a 	mov	r6,r19
 100084c:	100101c0 	call	100101c <memchr>
 1000850:	10001726 	beq	r2,zero,10008b0 <__sfvwrite_r+0x470>
 1000854:	15c5c83a 	sub	r2,r2,r23
 1000858:	15000044 	addi	r20,r2,1
 100085c:	00800044 	movi	r2,1
 1000860:	d8800015 	stw	r2,0(sp)
 1000864:	003f9806 	br	10006c8 <__sfvwrite_r+0x288>
 1000868:	b80b883a 	mov	r5,r23
 100086c:	800d883a 	mov	r6,r16
 1000870:	10011a00 	call	10011a0 <memmove>
 1000874:	90c00017 	ldw	r3,0(r18)
 1000878:	e009883a 	mov	r4,fp
 100087c:	900b883a 	mov	r5,r18
 1000880:	1c07883a 	add	r3,r3,r16
 1000884:	90c00015 	stw	r3,0(r18)
 1000888:	8027883a 	mov	r19,r16
 100088c:	1001a200 	call	1001a20 <_fflush_r>
 1000890:	103f6b26 	beq	r2,zero,1000640 <__sfvwrite_r+0x200>
 1000894:	003f7f06 	br	1000694 <__sfvwrite_r+0x254>
 1000898:	400b883a 	mov	r5,r8
 100089c:	e009883a 	mov	r4,fp
 10008a0:	10012800 	call	1001280 <_realloc_r>
 10008a4:	103f7626 	beq	r2,zero,1000680 <__sfvwrite_r+0x240>
 10008a8:	1023883a 	mov	r17,r2
 10008ac:	003f5006 	br	10005f0 <__sfvwrite_r+0x1b0>
 10008b0:	00c00044 	movi	r3,1
 10008b4:	9d000044 	addi	r20,r19,1
 10008b8:	d8c00015 	stw	r3,0(sp)
 10008bc:	003f8206 	br	10006c8 <__sfvwrite_r+0x288>
 10008c0:	9080030b 	ldhu	r2,12(r18)
 10008c4:	00c00244 	movi	r3,9
 10008c8:	013fffc4 	movi	r4,-1
 10008cc:	10801014 	ori	r2,r2,64
 10008d0:	9080030d 	sth	r2,12(r18)
 10008d4:	e0c00015 	stw	r3,0(fp)
 10008d8:	003f0606 	br	10004f4 <__sfvwrite_r+0xb4>

010008dc <_malloc_r>:
 10008dc:	defff604 	addi	sp,sp,-40
 10008e0:	28c002c4 	addi	r3,r5,11
 10008e4:	00800584 	movi	r2,22
 10008e8:	dc800215 	stw	r18,8(sp)
 10008ec:	dfc00915 	stw	ra,36(sp)
 10008f0:	df000815 	stw	fp,32(sp)
 10008f4:	ddc00715 	stw	r23,28(sp)
 10008f8:	dd800615 	stw	r22,24(sp)
 10008fc:	dd400515 	stw	r21,20(sp)
 1000900:	dd000415 	stw	r20,16(sp)
 1000904:	dcc00315 	stw	r19,12(sp)
 1000908:	dc400115 	stw	r17,4(sp)
 100090c:	dc000015 	stw	r16,0(sp)
 1000910:	2025883a 	mov	r18,r4
 1000914:	10c01236 	bltu	r2,r3,1000960 <_malloc_r+0x84>
 1000918:	04400404 	movi	r17,16
 100091c:	8940142e 	bgeu	r17,r5,1000970 <_malloc_r+0x94>
 1000920:	00800304 	movi	r2,12
 1000924:	0007883a 	mov	r3,zero
 1000928:	90800015 	stw	r2,0(r18)
 100092c:	1805883a 	mov	r2,r3
 1000930:	dfc00917 	ldw	ra,36(sp)
 1000934:	df000817 	ldw	fp,32(sp)
 1000938:	ddc00717 	ldw	r23,28(sp)
 100093c:	dd800617 	ldw	r22,24(sp)
 1000940:	dd400517 	ldw	r21,20(sp)
 1000944:	dd000417 	ldw	r20,16(sp)
 1000948:	dcc00317 	ldw	r19,12(sp)
 100094c:	dc800217 	ldw	r18,8(sp)
 1000950:	dc400117 	ldw	r17,4(sp)
 1000954:	dc000017 	ldw	r16,0(sp)
 1000958:	dec00a04 	addi	sp,sp,40
 100095c:	f800283a 	ret
 1000960:	00bffe04 	movi	r2,-8
 1000964:	18a2703a 	and	r17,r3,r2
 1000968:	883fed16 	blt	r17,zero,1000920 <_malloc_r+0x44>
 100096c:	897fec36 	bltu	r17,r5,1000920 <_malloc_r+0x44>
 1000970:	9009883a 	mov	r4,r18
 1000974:	10032ac0 	call	10032ac <__malloc_lock>
 1000978:	00807dc4 	movi	r2,503
 100097c:	14402b2e 	bgeu	r2,r17,1000a2c <_malloc_r+0x150>
 1000980:	8806d27a 	srli	r3,r17,9
 1000984:	18003f1e 	bne	r3,zero,1000a84 <_malloc_r+0x1a8>
 1000988:	880cd0fa 	srli	r6,r17,3
 100098c:	300490fa 	slli	r2,r6,3
 1000990:	02c04074 	movhi	r11,257
 1000994:	5ae0e004 	addi	r11,r11,-31872
 1000998:	12cb883a 	add	r5,r2,r11
 100099c:	2c000317 	ldw	r16,12(r5)
 10009a0:	580f883a 	mov	r7,r11
 10009a4:	2c00041e 	bne	r5,r16,10009b8 <_malloc_r+0xdc>
 10009a8:	00000a06 	br	10009d4 <_malloc_r+0xf8>
 10009ac:	1800860e 	bge	r3,zero,1000bc8 <_malloc_r+0x2ec>
 10009b0:	84000317 	ldw	r16,12(r16)
 10009b4:	2c000726 	beq	r5,r16,10009d4 <_malloc_r+0xf8>
 10009b8:	80800117 	ldw	r2,4(r16)
 10009bc:	00ffff04 	movi	r3,-4
 10009c0:	10c8703a 	and	r4,r2,r3
 10009c4:	2447c83a 	sub	r3,r4,r17
 10009c8:	008003c4 	movi	r2,15
 10009cc:	10fff70e 	bge	r2,r3,10009ac <_malloc_r+0xd0>
 10009d0:	31bfffc4 	addi	r6,r6,-1
 10009d4:	32400044 	addi	r9,r6,1
 10009d8:	02804074 	movhi	r10,257
 10009dc:	52a0e204 	addi	r10,r10,-31864
 10009e0:	54000217 	ldw	r16,8(r10)
 10009e4:	8280a026 	beq	r16,r10,1000c68 <_malloc_r+0x38c>
 10009e8:	80800117 	ldw	r2,4(r16)
 10009ec:	00ffff04 	movi	r3,-4
 10009f0:	10ca703a 	and	r5,r2,r3
 10009f4:	2c4dc83a 	sub	r6,r5,r17
 10009f8:	008003c4 	movi	r2,15
 10009fc:	11808316 	blt	r2,r6,1000c0c <_malloc_r+0x330>
 1000a00:	52800315 	stw	r10,12(r10)
 1000a04:	52800215 	stw	r10,8(r10)
 1000a08:	30002916 	blt	r6,zero,1000ab0 <_malloc_r+0x1d4>
 1000a0c:	8147883a 	add	r3,r16,r5
 1000a10:	18800117 	ldw	r2,4(r3)
 1000a14:	9009883a 	mov	r4,r18
 1000a18:	10800054 	ori	r2,r2,1
 1000a1c:	18800115 	stw	r2,4(r3)
 1000a20:	10032cc0 	call	10032cc <__malloc_unlock>
 1000a24:	80c00204 	addi	r3,r16,8
 1000a28:	003fc006 	br	100092c <_malloc_r+0x50>
 1000a2c:	02c04074 	movhi	r11,257
 1000a30:	5ae0e004 	addi	r11,r11,-31872
 1000a34:	8ac5883a 	add	r2,r17,r11
 1000a38:	14000317 	ldw	r16,12(r2)
 1000a3c:	580f883a 	mov	r7,r11
 1000a40:	8806d0fa 	srli	r3,r17,3
 1000a44:	14006c26 	beq	r2,r16,1000bf8 <_malloc_r+0x31c>
 1000a48:	80c00117 	ldw	r3,4(r16)
 1000a4c:	00bfff04 	movi	r2,-4
 1000a50:	81800317 	ldw	r6,12(r16)
 1000a54:	1886703a 	and	r3,r3,r2
 1000a58:	80c7883a 	add	r3,r16,r3
 1000a5c:	18800117 	ldw	r2,4(r3)
 1000a60:	81400217 	ldw	r5,8(r16)
 1000a64:	9009883a 	mov	r4,r18
 1000a68:	10800054 	ori	r2,r2,1
 1000a6c:	18800115 	stw	r2,4(r3)
 1000a70:	31400215 	stw	r5,8(r6)
 1000a74:	29800315 	stw	r6,12(r5)
 1000a78:	10032cc0 	call	10032cc <__malloc_unlock>
 1000a7c:	80c00204 	addi	r3,r16,8
 1000a80:	003faa06 	br	100092c <_malloc_r+0x50>
 1000a84:	00800104 	movi	r2,4
 1000a88:	10c0052e 	bgeu	r2,r3,1000aa0 <_malloc_r+0x1c4>
 1000a8c:	00800504 	movi	r2,20
 1000a90:	10c07836 	bltu	r2,r3,1000c74 <_malloc_r+0x398>
 1000a94:	198016c4 	addi	r6,r3,91
 1000a98:	300490fa 	slli	r2,r6,3
 1000a9c:	003fbc06 	br	1000990 <_malloc_r+0xb4>
 1000aa0:	8804d1ba 	srli	r2,r17,6
 1000aa4:	11800e04 	addi	r6,r2,56
 1000aa8:	300490fa 	slli	r2,r6,3
 1000aac:	003fb806 	br	1000990 <_malloc_r+0xb4>
 1000ab0:	00807fc4 	movi	r2,511
 1000ab4:	1140bb36 	bltu	r2,r5,1000da4 <_malloc_r+0x4c8>
 1000ab8:	2806d0fa 	srli	r3,r5,3
 1000abc:	573ffe04 	addi	fp,r10,-8
 1000ac0:	00800044 	movi	r2,1
 1000ac4:	180890fa 	slli	r4,r3,3
 1000ac8:	1807d0ba 	srai	r3,r3,2
 1000acc:	e1c00117 	ldw	r7,4(fp)
 1000ad0:	5909883a 	add	r4,r11,r4
 1000ad4:	21400217 	ldw	r5,8(r4)
 1000ad8:	10c4983a 	sll	r2,r2,r3
 1000adc:	81000315 	stw	r4,12(r16)
 1000ae0:	81400215 	stw	r5,8(r16)
 1000ae4:	388eb03a 	or	r7,r7,r2
 1000ae8:	2c000315 	stw	r16,12(r5)
 1000aec:	24000215 	stw	r16,8(r4)
 1000af0:	e1c00115 	stw	r7,4(fp)
 1000af4:	4807883a 	mov	r3,r9
 1000af8:	4800cd16 	blt	r9,zero,1000e30 <_malloc_r+0x554>
 1000afc:	1807d0ba 	srai	r3,r3,2
 1000b00:	00800044 	movi	r2,1
 1000b04:	10c8983a 	sll	r4,r2,r3
 1000b08:	39004436 	bltu	r7,r4,1000c1c <_malloc_r+0x340>
 1000b0c:	21c4703a 	and	r2,r4,r7
 1000b10:	10000a1e 	bne	r2,zero,1000b3c <_malloc_r+0x260>
 1000b14:	2109883a 	add	r4,r4,r4
 1000b18:	00bfff04 	movi	r2,-4
 1000b1c:	4884703a 	and	r2,r9,r2
 1000b20:	3906703a 	and	r3,r7,r4
 1000b24:	12400104 	addi	r9,r2,4
 1000b28:	1800041e 	bne	r3,zero,1000b3c <_malloc_r+0x260>
 1000b2c:	2109883a 	add	r4,r4,r4
 1000b30:	3904703a 	and	r2,r7,r4
 1000b34:	4a400104 	addi	r9,r9,4
 1000b38:	103ffc26 	beq	r2,zero,1000b2c <_malloc_r+0x250>
 1000b3c:	480490fa 	slli	r2,r9,3
 1000b40:	4819883a 	mov	r12,r9
 1000b44:	023fff04 	movi	r8,-4
 1000b48:	589b883a 	add	r13,r11,r2
 1000b4c:	6807883a 	mov	r3,r13
 1000b50:	014003c4 	movi	r5,15
 1000b54:	1c000317 	ldw	r16,12(r3)
 1000b58:	1c00041e 	bne	r3,r16,1000b6c <_malloc_r+0x290>
 1000b5c:	0000a706 	br	1000dfc <_malloc_r+0x520>
 1000b60:	3000ab0e 	bge	r6,zero,1000e10 <_malloc_r+0x534>
 1000b64:	84000317 	ldw	r16,12(r16)
 1000b68:	1c00a426 	beq	r3,r16,1000dfc <_malloc_r+0x520>
 1000b6c:	80800117 	ldw	r2,4(r16)
 1000b70:	1204703a 	and	r2,r2,r8
 1000b74:	144dc83a 	sub	r6,r2,r17
 1000b78:	29bff90e 	bge	r5,r6,1000b60 <_malloc_r+0x284>
 1000b7c:	81000317 	ldw	r4,12(r16)
 1000b80:	80c00217 	ldw	r3,8(r16)
 1000b84:	89400054 	ori	r5,r17,1
 1000b88:	8445883a 	add	r2,r16,r17
 1000b8c:	20c00215 	stw	r3,8(r4)
 1000b90:	19000315 	stw	r4,12(r3)
 1000b94:	81400115 	stw	r5,4(r16)
 1000b98:	1187883a 	add	r3,r2,r6
 1000b9c:	31000054 	ori	r4,r6,1
 1000ba0:	50800315 	stw	r2,12(r10)
 1000ba4:	50800215 	stw	r2,8(r10)
 1000ba8:	19800015 	stw	r6,0(r3)
 1000bac:	11000115 	stw	r4,4(r2)
 1000bb0:	12800215 	stw	r10,8(r2)
 1000bb4:	12800315 	stw	r10,12(r2)
 1000bb8:	9009883a 	mov	r4,r18
 1000bbc:	10032cc0 	call	10032cc <__malloc_unlock>
 1000bc0:	80c00204 	addi	r3,r16,8
 1000bc4:	003f5906 	br	100092c <_malloc_r+0x50>
 1000bc8:	8109883a 	add	r4,r16,r4
 1000bcc:	20800117 	ldw	r2,4(r4)
 1000bd0:	80c00217 	ldw	r3,8(r16)
 1000bd4:	81400317 	ldw	r5,12(r16)
 1000bd8:	10800054 	ori	r2,r2,1
 1000bdc:	20800115 	stw	r2,4(r4)
 1000be0:	28c00215 	stw	r3,8(r5)
 1000be4:	19400315 	stw	r5,12(r3)
 1000be8:	9009883a 	mov	r4,r18
 1000bec:	10032cc0 	call	10032cc <__malloc_unlock>
 1000bf0:	80c00204 	addi	r3,r16,8
 1000bf4:	003f4d06 	br	100092c <_malloc_r+0x50>
 1000bf8:	80800204 	addi	r2,r16,8
 1000bfc:	14000317 	ldw	r16,12(r2)
 1000c00:	143f911e 	bne	r2,r16,1000a48 <_malloc_r+0x16c>
 1000c04:	1a400084 	addi	r9,r3,2
 1000c08:	003f7306 	br	10009d8 <_malloc_r+0xfc>
 1000c0c:	88c00054 	ori	r3,r17,1
 1000c10:	8445883a 	add	r2,r16,r17
 1000c14:	80c00115 	stw	r3,4(r16)
 1000c18:	003fdf06 	br	1000b98 <_malloc_r+0x2bc>
 1000c1c:	e4000217 	ldw	r16,8(fp)
 1000c20:	00bfff04 	movi	r2,-4
 1000c24:	80c00117 	ldw	r3,4(r16)
 1000c28:	802d883a 	mov	r22,r16
 1000c2c:	18aa703a 	and	r21,r3,r2
 1000c30:	ac401636 	bltu	r21,r17,1000c8c <_malloc_r+0x3b0>
 1000c34:	ac49c83a 	sub	r4,r21,r17
 1000c38:	008003c4 	movi	r2,15
 1000c3c:	1100130e 	bge	r2,r4,1000c8c <_malloc_r+0x3b0>
 1000c40:	88800054 	ori	r2,r17,1
 1000c44:	8447883a 	add	r3,r16,r17
 1000c48:	80800115 	stw	r2,4(r16)
 1000c4c:	20800054 	ori	r2,r4,1
 1000c50:	18800115 	stw	r2,4(r3)
 1000c54:	e0c00215 	stw	r3,8(fp)
 1000c58:	9009883a 	mov	r4,r18
 1000c5c:	10032cc0 	call	10032cc <__malloc_unlock>
 1000c60:	80c00204 	addi	r3,r16,8
 1000c64:	003f3106 	br	100092c <_malloc_r+0x50>
 1000c68:	39c00117 	ldw	r7,4(r7)
 1000c6c:	573ffe04 	addi	fp,r10,-8
 1000c70:	003fa006 	br	1000af4 <_malloc_r+0x218>
 1000c74:	00801504 	movi	r2,84
 1000c78:	10c06736 	bltu	r2,r3,1000e18 <_malloc_r+0x53c>
 1000c7c:	8804d33a 	srli	r2,r17,12
 1000c80:	11801b84 	addi	r6,r2,110
 1000c84:	300490fa 	slli	r2,r6,3
 1000c88:	003f4106 	br	1000990 <_malloc_r+0xb4>
 1000c8c:	d0a6f717 	ldw	r2,-25636(gp)
 1000c90:	d0e00317 	ldw	r3,-32756(gp)
 1000c94:	053fffc4 	movi	r20,-1
 1000c98:	10800404 	addi	r2,r2,16
 1000c9c:	88a7883a 	add	r19,r17,r2
 1000ca0:	1d000326 	beq	r3,r20,1000cb0 <_malloc_r+0x3d4>
 1000ca4:	98c3ffc4 	addi	r3,r19,4095
 1000ca8:	00bc0004 	movi	r2,-4096
 1000cac:	18a6703a 	and	r19,r3,r2
 1000cb0:	9009883a 	mov	r4,r18
 1000cb4:	980b883a 	mov	r5,r19
 1000cb8:	10018740 	call	1001874 <_sbrk_r>
 1000cbc:	1009883a 	mov	r4,r2
 1000cc0:	15000426 	beq	r2,r20,1000cd4 <_malloc_r+0x3f8>
 1000cc4:	854b883a 	add	r5,r16,r21
 1000cc8:	1029883a 	mov	r20,r2
 1000ccc:	11405a2e 	bgeu	r2,r5,1000e38 <_malloc_r+0x55c>
 1000cd0:	87000c26 	beq	r16,fp,1000d04 <_malloc_r+0x428>
 1000cd4:	e4000217 	ldw	r16,8(fp)
 1000cd8:	80c00117 	ldw	r3,4(r16)
 1000cdc:	00bfff04 	movi	r2,-4
 1000ce0:	1884703a 	and	r2,r3,r2
 1000ce4:	14400336 	bltu	r2,r17,1000cf4 <_malloc_r+0x418>
 1000ce8:	1449c83a 	sub	r4,r2,r17
 1000cec:	008003c4 	movi	r2,15
 1000cf0:	113fd316 	blt	r2,r4,1000c40 <_malloc_r+0x364>
 1000cf4:	9009883a 	mov	r4,r18
 1000cf8:	10032cc0 	call	10032cc <__malloc_unlock>
 1000cfc:	0007883a 	mov	r3,zero
 1000d00:	003f0a06 	br	100092c <_malloc_r+0x50>
 1000d04:	05c04074 	movhi	r23,257
 1000d08:	bdedbc04 	addi	r23,r23,-18704
 1000d0c:	b8800017 	ldw	r2,0(r23)
 1000d10:	988d883a 	add	r6,r19,r2
 1000d14:	b9800015 	stw	r6,0(r23)
 1000d18:	d0e00317 	ldw	r3,-32756(gp)
 1000d1c:	00bfffc4 	movi	r2,-1
 1000d20:	18808e26 	beq	r3,r2,1000f5c <_malloc_r+0x680>
 1000d24:	2145c83a 	sub	r2,r4,r5
 1000d28:	3085883a 	add	r2,r6,r2
 1000d2c:	b8800015 	stw	r2,0(r23)
 1000d30:	20c001cc 	andi	r3,r4,7
 1000d34:	18005f1e 	bne	r3,zero,1000eb4 <_malloc_r+0x5d8>
 1000d38:	000b883a 	mov	r5,zero
 1000d3c:	a4c5883a 	add	r2,r20,r19
 1000d40:	1083ffcc 	andi	r2,r2,4095
 1000d44:	00c40004 	movi	r3,4096
 1000d48:	1887c83a 	sub	r3,r3,r2
 1000d4c:	28e7883a 	add	r19,r5,r3
 1000d50:	9009883a 	mov	r4,r18
 1000d54:	980b883a 	mov	r5,r19
 1000d58:	10018740 	call	1001874 <_sbrk_r>
 1000d5c:	1007883a 	mov	r3,r2
 1000d60:	00bfffc4 	movi	r2,-1
 1000d64:	18807a26 	beq	r3,r2,1000f50 <_malloc_r+0x674>
 1000d68:	1d05c83a 	sub	r2,r3,r20
 1000d6c:	9885883a 	add	r2,r19,r2
 1000d70:	10c00054 	ori	r3,r2,1
 1000d74:	b8800017 	ldw	r2,0(r23)
 1000d78:	a021883a 	mov	r16,r20
 1000d7c:	a0c00115 	stw	r3,4(r20)
 1000d80:	9885883a 	add	r2,r19,r2
 1000d84:	b8800015 	stw	r2,0(r23)
 1000d88:	e5000215 	stw	r20,8(fp)
 1000d8c:	b7003626 	beq	r22,fp,1000e68 <_malloc_r+0x58c>
 1000d90:	018003c4 	movi	r6,15
 1000d94:	35404b36 	bltu	r6,r21,1000ec4 <_malloc_r+0x5e8>
 1000d98:	00800044 	movi	r2,1
 1000d9c:	a0800115 	stw	r2,4(r20)
 1000da0:	003fcd06 	br	1000cd8 <_malloc_r+0x3fc>
 1000da4:	2808d27a 	srli	r4,r5,9
 1000da8:	2000371e 	bne	r4,zero,1000e88 <_malloc_r+0x5ac>
 1000dac:	2808d0fa 	srli	r4,r5,3
 1000db0:	200690fa 	slli	r3,r4,3
 1000db4:	1ad1883a 	add	r8,r3,r11
 1000db8:	41800217 	ldw	r6,8(r8)
 1000dbc:	41805b26 	beq	r8,r6,1000f2c <_malloc_r+0x650>
 1000dc0:	30800117 	ldw	r2,4(r6)
 1000dc4:	00ffff04 	movi	r3,-4
 1000dc8:	10c4703a 	and	r2,r2,r3
 1000dcc:	2880022e 	bgeu	r5,r2,1000dd8 <_malloc_r+0x4fc>
 1000dd0:	31800217 	ldw	r6,8(r6)
 1000dd4:	41bffa1e 	bne	r8,r6,1000dc0 <_malloc_r+0x4e4>
 1000dd8:	32000317 	ldw	r8,12(r6)
 1000ddc:	39c00117 	ldw	r7,4(r7)
 1000de0:	82000315 	stw	r8,12(r16)
 1000de4:	81800215 	stw	r6,8(r16)
 1000de8:	07004074 	movhi	fp,257
 1000dec:	e720e004 	addi	fp,fp,-31872
 1000df0:	34000315 	stw	r16,12(r6)
 1000df4:	44000215 	stw	r16,8(r8)
 1000df8:	003f3e06 	br	1000af4 <_malloc_r+0x218>
 1000dfc:	63000044 	addi	r12,r12,1
 1000e00:	608000cc 	andi	r2,r12,3
 1000e04:	10005d26 	beq	r2,zero,1000f7c <_malloc_r+0x6a0>
 1000e08:	18c00204 	addi	r3,r3,8
 1000e0c:	003f5106 	br	1000b54 <_malloc_r+0x278>
 1000e10:	8089883a 	add	r4,r16,r2
 1000e14:	003f6d06 	br	1000bcc <_malloc_r+0x2f0>
 1000e18:	00805504 	movi	r2,340
 1000e1c:	10c02036 	bltu	r2,r3,1000ea0 <_malloc_r+0x5c4>
 1000e20:	8804d3fa 	srli	r2,r17,15
 1000e24:	11801dc4 	addi	r6,r2,119
 1000e28:	300490fa 	slli	r2,r6,3
 1000e2c:	003ed806 	br	1000990 <_malloc_r+0xb4>
 1000e30:	48c000c4 	addi	r3,r9,3
 1000e34:	003f3106 	br	1000afc <_malloc_r+0x220>
 1000e38:	05c04074 	movhi	r23,257
 1000e3c:	bdedbc04 	addi	r23,r23,-18704
 1000e40:	b8800017 	ldw	r2,0(r23)
 1000e44:	988d883a 	add	r6,r19,r2
 1000e48:	b9800015 	stw	r6,0(r23)
 1000e4c:	293fb21e 	bne	r5,r4,1000d18 <_malloc_r+0x43c>
 1000e50:	2083ffcc 	andi	r2,r4,4095
 1000e54:	103fb01e 	bne	r2,zero,1000d18 <_malloc_r+0x43c>
 1000e58:	e4000217 	ldw	r16,8(fp)
 1000e5c:	9d45883a 	add	r2,r19,r21
 1000e60:	10800054 	ori	r2,r2,1
 1000e64:	80800115 	stw	r2,4(r16)
 1000e68:	b8c00017 	ldw	r3,0(r23)
 1000e6c:	d0a6f817 	ldw	r2,-25632(gp)
 1000e70:	10c0012e 	bgeu	r2,r3,1000e78 <_malloc_r+0x59c>
 1000e74:	d0e6f815 	stw	r3,-25632(gp)
 1000e78:	d0a6f917 	ldw	r2,-25628(gp)
 1000e7c:	10ff962e 	bgeu	r2,r3,1000cd8 <_malloc_r+0x3fc>
 1000e80:	d0e6f915 	stw	r3,-25628(gp)
 1000e84:	003f9406 	br	1000cd8 <_malloc_r+0x3fc>
 1000e88:	00800104 	movi	r2,4
 1000e8c:	11001e36 	bltu	r2,r4,1000f08 <_malloc_r+0x62c>
 1000e90:	2804d1ba 	srli	r2,r5,6
 1000e94:	11000e04 	addi	r4,r2,56
 1000e98:	200690fa 	slli	r3,r4,3
 1000e9c:	003fc506 	br	1000db4 <_malloc_r+0x4d8>
 1000ea0:	00815504 	movi	r2,1364
 1000ea4:	10c01d2e 	bgeu	r2,r3,1000f1c <_malloc_r+0x640>
 1000ea8:	01801f84 	movi	r6,126
 1000eac:	0080fc04 	movi	r2,1008
 1000eb0:	003eb706 	br	1000990 <_malloc_r+0xb4>
 1000eb4:	00800204 	movi	r2,8
 1000eb8:	10cbc83a 	sub	r5,r2,r3
 1000ebc:	2169883a 	add	r20,r4,r5
 1000ec0:	003f9e06 	br	1000d3c <_malloc_r+0x460>
 1000ec4:	00bffe04 	movi	r2,-8
 1000ec8:	a93ffd04 	addi	r4,r21,-12
 1000ecc:	2088703a 	and	r4,r4,r2
 1000ed0:	b10b883a 	add	r5,r22,r4
 1000ed4:	00c00144 	movi	r3,5
 1000ed8:	28c00215 	stw	r3,8(r5)
 1000edc:	28c00115 	stw	r3,4(r5)
 1000ee0:	b0800117 	ldw	r2,4(r22)
 1000ee4:	1080004c 	andi	r2,r2,1
 1000ee8:	2084b03a 	or	r2,r4,r2
 1000eec:	b0800115 	stw	r2,4(r22)
 1000ef0:	313fdd2e 	bgeu	r6,r4,1000e68 <_malloc_r+0x58c>
 1000ef4:	b1400204 	addi	r5,r22,8
 1000ef8:	9009883a 	mov	r4,r18
 1000efc:	100203c0 	call	100203c <_free_r>
 1000f00:	e4000217 	ldw	r16,8(fp)
 1000f04:	003fd806 	br	1000e68 <_malloc_r+0x58c>
 1000f08:	00800504 	movi	r2,20
 1000f0c:	11001536 	bltu	r2,r4,1000f64 <_malloc_r+0x688>
 1000f10:	210016c4 	addi	r4,r4,91
 1000f14:	200690fa 	slli	r3,r4,3
 1000f18:	003fa606 	br	1000db4 <_malloc_r+0x4d8>
 1000f1c:	8804d4ba 	srli	r2,r17,18
 1000f20:	11801f04 	addi	r6,r2,124
 1000f24:	300490fa 	slli	r2,r6,3
 1000f28:	003e9906 	br	1000990 <_malloc_r+0xb4>
 1000f2c:	2009d0ba 	srai	r4,r4,2
 1000f30:	01404074 	movhi	r5,257
 1000f34:	2960e004 	addi	r5,r5,-31872
 1000f38:	00c00044 	movi	r3,1
 1000f3c:	28800117 	ldw	r2,4(r5)
 1000f40:	1906983a 	sll	r3,r3,r4
 1000f44:	10c4b03a 	or	r2,r2,r3
 1000f48:	28800115 	stw	r2,4(r5)
 1000f4c:	003fa306 	br	1000ddc <_malloc_r+0x500>
 1000f50:	0027883a 	mov	r19,zero
 1000f54:	00c00044 	movi	r3,1
 1000f58:	003f8606 	br	1000d74 <_malloc_r+0x498>
 1000f5c:	d1200315 	stw	r4,-32756(gp)
 1000f60:	003f7306 	br	1000d30 <_malloc_r+0x454>
 1000f64:	00801504 	movi	r2,84
 1000f68:	11001936 	bltu	r2,r4,1000fd0 <_malloc_r+0x6f4>
 1000f6c:	2804d33a 	srli	r2,r5,12
 1000f70:	11001b84 	addi	r4,r2,110
 1000f74:	200690fa 	slli	r3,r4,3
 1000f78:	003f8e06 	br	1000db4 <_malloc_r+0x4d8>
 1000f7c:	480b883a 	mov	r5,r9
 1000f80:	6807883a 	mov	r3,r13
 1000f84:	288000cc 	andi	r2,r5,3
 1000f88:	18fffe04 	addi	r3,r3,-8
 1000f8c:	297fffc4 	addi	r5,r5,-1
 1000f90:	10001526 	beq	r2,zero,1000fe8 <_malloc_r+0x70c>
 1000f94:	18800217 	ldw	r2,8(r3)
 1000f98:	10fffa26 	beq	r2,r3,1000f84 <_malloc_r+0x6a8>
 1000f9c:	2109883a 	add	r4,r4,r4
 1000fa0:	393f1e36 	bltu	r7,r4,1000c1c <_malloc_r+0x340>
 1000fa4:	203f1d26 	beq	r4,zero,1000c1c <_malloc_r+0x340>
 1000fa8:	21c4703a 	and	r2,r4,r7
 1000fac:	10000226 	beq	r2,zero,1000fb8 <_malloc_r+0x6dc>
 1000fb0:	6013883a 	mov	r9,r12
 1000fb4:	003ee106 	br	1000b3c <_malloc_r+0x260>
 1000fb8:	2109883a 	add	r4,r4,r4
 1000fbc:	3904703a 	and	r2,r7,r4
 1000fc0:	63000104 	addi	r12,r12,4
 1000fc4:	103ffc26 	beq	r2,zero,1000fb8 <_malloc_r+0x6dc>
 1000fc8:	6013883a 	mov	r9,r12
 1000fcc:	003edb06 	br	1000b3c <_malloc_r+0x260>
 1000fd0:	00805504 	movi	r2,340
 1000fd4:	11000836 	bltu	r2,r4,1000ff8 <_malloc_r+0x71c>
 1000fd8:	2804d3fa 	srli	r2,r5,15
 1000fdc:	11001dc4 	addi	r4,r2,119
 1000fe0:	200690fa 	slli	r3,r4,3
 1000fe4:	003f7306 	br	1000db4 <_malloc_r+0x4d8>
 1000fe8:	0104303a 	nor	r2,zero,r4
 1000fec:	388e703a 	and	r7,r7,r2
 1000ff0:	e1c00115 	stw	r7,4(fp)
 1000ff4:	003fe906 	br	1000f9c <_malloc_r+0x6c0>
 1000ff8:	00815504 	movi	r2,1364
 1000ffc:	1100032e 	bgeu	r2,r4,100100c <_malloc_r+0x730>
 1001000:	01001f84 	movi	r4,126
 1001004:	00c0fc04 	movi	r3,1008
 1001008:	003f6a06 	br	1000db4 <_malloc_r+0x4d8>
 100100c:	2804d4ba 	srli	r2,r5,18
 1001010:	11001f04 	addi	r4,r2,124
 1001014:	200690fa 	slli	r3,r4,3
 1001018:	003f6606 	br	1000db4 <_malloc_r+0x4d8>

0100101c <memchr>:
 100101c:	008000c4 	movi	r2,3
 1001020:	29403fcc 	andi	r5,r5,255
 1001024:	2007883a 	mov	r3,r4
 1001028:	1180022e 	bgeu	r2,r6,1001034 <memchr+0x18>
 100102c:	2084703a 	and	r2,r4,r2
 1001030:	10000b26 	beq	r2,zero,1001060 <memchr+0x44>
 1001034:	313fffc4 	addi	r4,r6,-1
 1001038:	3000051e 	bne	r6,zero,1001050 <memchr+0x34>
 100103c:	00002c06 	br	10010f0 <memchr+0xd4>
 1001040:	213fffc4 	addi	r4,r4,-1
 1001044:	00bfffc4 	movi	r2,-1
 1001048:	18c00044 	addi	r3,r3,1
 100104c:	20802826 	beq	r4,r2,10010f0 <memchr+0xd4>
 1001050:	18800003 	ldbu	r2,0(r3)
 1001054:	28bffa1e 	bne	r5,r2,1001040 <memchr+0x24>
 1001058:	1805883a 	mov	r2,r3
 100105c:	f800283a 	ret
 1001060:	0011883a 	mov	r8,zero
 1001064:	0007883a 	mov	r3,zero
 1001068:	01c00104 	movi	r7,4
 100106c:	4004923a 	slli	r2,r8,8
 1001070:	18c00044 	addi	r3,r3,1
 1001074:	1151883a 	add	r8,r2,r5
 1001078:	19fffc1e 	bne	r3,r7,100106c <memchr+0x50>
 100107c:	02bfbff4 	movhi	r10,65279
 1001080:	52bfbfc4 	addi	r10,r10,-257
 1001084:	02602074 	movhi	r9,32897
 1001088:	4a602004 	addi	r9,r9,-32640
 100108c:	02c000c4 	movi	r11,3
 1001090:	20800017 	ldw	r2,0(r4)
 1001094:	31bfff04 	addi	r6,r6,-4
 1001098:	200f883a 	mov	r7,r4
 100109c:	1204f03a 	xor	r2,r2,r8
 10010a0:	1287883a 	add	r3,r2,r10
 10010a4:	1a46703a 	and	r3,r3,r9
 10010a8:	0084303a 	nor	r2,zero,r2
 10010ac:	10c4703a 	and	r2,r2,r3
 10010b0:	10000b26 	beq	r2,zero,10010e0 <memchr+0xc4>
 10010b4:	20800003 	ldbu	r2,0(r4)
 10010b8:	28800f26 	beq	r5,r2,10010f8 <memchr+0xdc>
 10010bc:	20800043 	ldbu	r2,1(r4)
 10010c0:	21c00044 	addi	r7,r4,1
 10010c4:	28800c26 	beq	r5,r2,10010f8 <memchr+0xdc>
 10010c8:	20800083 	ldbu	r2,2(r4)
 10010cc:	21c00084 	addi	r7,r4,2
 10010d0:	28800926 	beq	r5,r2,10010f8 <memchr+0xdc>
 10010d4:	208000c3 	ldbu	r2,3(r4)
 10010d8:	21c000c4 	addi	r7,r4,3
 10010dc:	28800626 	beq	r5,r2,10010f8 <memchr+0xdc>
 10010e0:	21000104 	addi	r4,r4,4
 10010e4:	59bfea36 	bltu	r11,r6,1001090 <memchr+0x74>
 10010e8:	2007883a 	mov	r3,r4
 10010ec:	003fd106 	br	1001034 <memchr+0x18>
 10010f0:	0005883a 	mov	r2,zero
 10010f4:	f800283a 	ret
 10010f8:	3805883a 	mov	r2,r7
 10010fc:	f800283a 	ret

01001100 <memcpy>:
 1001100:	01c003c4 	movi	r7,15
 1001104:	2007883a 	mov	r3,r4
 1001108:	3980032e 	bgeu	r7,r6,1001118 <memcpy+0x18>
 100110c:	2904b03a 	or	r2,r5,r4
 1001110:	108000cc 	andi	r2,r2,3
 1001114:	10000926 	beq	r2,zero,100113c <memcpy+0x3c>
 1001118:	30000626 	beq	r6,zero,1001134 <memcpy+0x34>
 100111c:	30cd883a 	add	r6,r6,r3
 1001120:	28800003 	ldbu	r2,0(r5)
 1001124:	29400044 	addi	r5,r5,1
 1001128:	18800005 	stb	r2,0(r3)
 100112c:	18c00044 	addi	r3,r3,1
 1001130:	30fffb1e 	bne	r6,r3,1001120 <memcpy+0x20>
 1001134:	2005883a 	mov	r2,r4
 1001138:	f800283a 	ret
 100113c:	3811883a 	mov	r8,r7
 1001140:	200f883a 	mov	r7,r4
 1001144:	28c00017 	ldw	r3,0(r5)
 1001148:	31bffc04 	addi	r6,r6,-16
 100114c:	38c00015 	stw	r3,0(r7)
 1001150:	28800117 	ldw	r2,4(r5)
 1001154:	38800115 	stw	r2,4(r7)
 1001158:	28c00217 	ldw	r3,8(r5)
 100115c:	38c00215 	stw	r3,8(r7)
 1001160:	28800317 	ldw	r2,12(r5)
 1001164:	29400404 	addi	r5,r5,16
 1001168:	38800315 	stw	r2,12(r7)
 100116c:	39c00404 	addi	r7,r7,16
 1001170:	41bff436 	bltu	r8,r6,1001144 <memcpy+0x44>
 1001174:	008000c4 	movi	r2,3
 1001178:	1180072e 	bgeu	r2,r6,1001198 <memcpy+0x98>
 100117c:	1007883a 	mov	r3,r2
 1001180:	28800017 	ldw	r2,0(r5)
 1001184:	31bfff04 	addi	r6,r6,-4
 1001188:	29400104 	addi	r5,r5,4
 100118c:	38800015 	stw	r2,0(r7)
 1001190:	39c00104 	addi	r7,r7,4
 1001194:	19bffa36 	bltu	r3,r6,1001180 <memcpy+0x80>
 1001198:	3807883a 	mov	r3,r7
 100119c:	003fde06 	br	1001118 <memcpy+0x18>

010011a0 <memmove>:
 10011a0:	2807883a 	mov	r3,r5
 10011a4:	2011883a 	mov	r8,r4
 10011a8:	29000c2e 	bgeu	r5,r4,10011dc <memmove+0x3c>
 10011ac:	298f883a 	add	r7,r5,r6
 10011b0:	21c00a2e 	bgeu	r4,r7,10011dc <memmove+0x3c>
 10011b4:	30000726 	beq	r6,zero,10011d4 <memmove+0x34>
 10011b8:	2187883a 	add	r3,r4,r6
 10011bc:	198dc83a 	sub	r6,r3,r6
 10011c0:	39ffffc4 	addi	r7,r7,-1
 10011c4:	38800003 	ldbu	r2,0(r7)
 10011c8:	18ffffc4 	addi	r3,r3,-1
 10011cc:	18800005 	stb	r2,0(r3)
 10011d0:	19bffb1e 	bne	r3,r6,10011c0 <memmove+0x20>
 10011d4:	2005883a 	mov	r2,r4
 10011d8:	f800283a 	ret
 10011dc:	01c003c4 	movi	r7,15
 10011e0:	39800a36 	bltu	r7,r6,100120c <memmove+0x6c>
 10011e4:	303ffb26 	beq	r6,zero,10011d4 <memmove+0x34>
 10011e8:	400f883a 	mov	r7,r8
 10011ec:	320d883a 	add	r6,r6,r8
 10011f0:	28800003 	ldbu	r2,0(r5)
 10011f4:	29400044 	addi	r5,r5,1
 10011f8:	38800005 	stb	r2,0(r7)
 10011fc:	39c00044 	addi	r7,r7,1
 1001200:	39bffb1e 	bne	r7,r6,10011f0 <memmove+0x50>
 1001204:	2005883a 	mov	r2,r4
 1001208:	f800283a 	ret
 100120c:	1904b03a 	or	r2,r3,r4
 1001210:	108000cc 	andi	r2,r2,3
 1001214:	103ff31e 	bne	r2,zero,10011e4 <memmove+0x44>
 1001218:	3811883a 	mov	r8,r7
 100121c:	180b883a 	mov	r5,r3
 1001220:	200f883a 	mov	r7,r4
 1001224:	28c00017 	ldw	r3,0(r5)
 1001228:	31bffc04 	addi	r6,r6,-16
 100122c:	38c00015 	stw	r3,0(r7)
 1001230:	28800117 	ldw	r2,4(r5)
 1001234:	38800115 	stw	r2,4(r7)
 1001238:	28c00217 	ldw	r3,8(r5)
 100123c:	38c00215 	stw	r3,8(r7)
 1001240:	28800317 	ldw	r2,12(r5)
 1001244:	29400404 	addi	r5,r5,16
 1001248:	38800315 	stw	r2,12(r7)
 100124c:	39c00404 	addi	r7,r7,16
 1001250:	41bff436 	bltu	r8,r6,1001224 <memmove+0x84>
 1001254:	008000c4 	movi	r2,3
 1001258:	1180072e 	bgeu	r2,r6,1001278 <memmove+0xd8>
 100125c:	1007883a 	mov	r3,r2
 1001260:	28800017 	ldw	r2,0(r5)
 1001264:	31bfff04 	addi	r6,r6,-4
 1001268:	29400104 	addi	r5,r5,4
 100126c:	38800015 	stw	r2,0(r7)
 1001270:	39c00104 	addi	r7,r7,4
 1001274:	19bffa36 	bltu	r3,r6,1001260 <memmove+0xc0>
 1001278:	3811883a 	mov	r8,r7
 100127c:	003fd906 	br	10011e4 <memmove+0x44>

01001280 <_realloc_r>:
 1001280:	defff404 	addi	sp,sp,-48
 1001284:	dd800815 	stw	r22,32(sp)
 1001288:	dc800415 	stw	r18,16(sp)
 100128c:	dc400315 	stw	r17,12(sp)
 1001290:	dfc00b15 	stw	ra,44(sp)
 1001294:	df000a15 	stw	fp,40(sp)
 1001298:	ddc00915 	stw	r23,36(sp)
 100129c:	dd400715 	stw	r21,28(sp)
 10012a0:	dd000615 	stw	r20,24(sp)
 10012a4:	dcc00515 	stw	r19,20(sp)
 10012a8:	dc000215 	stw	r16,8(sp)
 10012ac:	2825883a 	mov	r18,r5
 10012b0:	3023883a 	mov	r17,r6
 10012b4:	202d883a 	mov	r22,r4
 10012b8:	2800c926 	beq	r5,zero,10015e0 <_realloc_r+0x360>
 10012bc:	10032ac0 	call	10032ac <__malloc_lock>
 10012c0:	943ffe04 	addi	r16,r18,-8
 10012c4:	88c002c4 	addi	r3,r17,11
 10012c8:	00800584 	movi	r2,22
 10012cc:	82000117 	ldw	r8,4(r16)
 10012d0:	10c01b2e 	bgeu	r2,r3,1001340 <_realloc_r+0xc0>
 10012d4:	00bffe04 	movi	r2,-8
 10012d8:	188e703a 	and	r7,r3,r2
 10012dc:	3839883a 	mov	fp,r7
 10012e0:	38001a16 	blt	r7,zero,100134c <_realloc_r+0xcc>
 10012e4:	e4401936 	bltu	fp,r17,100134c <_realloc_r+0xcc>
 10012e8:	013fff04 	movi	r4,-4
 10012ec:	4126703a 	and	r19,r8,r4
 10012f0:	99c02616 	blt	r19,r7,100138c <_realloc_r+0x10c>
 10012f4:	802b883a 	mov	r21,r16
 10012f8:	9829883a 	mov	r20,r19
 10012fc:	84000204 	addi	r16,r16,8
 1001300:	a80f883a 	mov	r7,r21
 1001304:	a70dc83a 	sub	r6,r20,fp
 1001308:	008003c4 	movi	r2,15
 100130c:	1180c136 	bltu	r2,r6,1001614 <_realloc_r+0x394>
 1001310:	38800117 	ldw	r2,4(r7)
 1001314:	a549883a 	add	r4,r20,r21
 1001318:	1080004c 	andi	r2,r2,1
 100131c:	a084b03a 	or	r2,r20,r2
 1001320:	38800115 	stw	r2,4(r7)
 1001324:	20c00117 	ldw	r3,4(r4)
 1001328:	18c00054 	ori	r3,r3,1
 100132c:	20c00115 	stw	r3,4(r4)
 1001330:	b009883a 	mov	r4,r22
 1001334:	10032cc0 	call	10032cc <__malloc_unlock>
 1001338:	8023883a 	mov	r17,r16
 100133c:	00000606 	br	1001358 <_realloc_r+0xd8>
 1001340:	01c00404 	movi	r7,16
 1001344:	3839883a 	mov	fp,r7
 1001348:	e47fe72e 	bgeu	fp,r17,10012e8 <_realloc_r+0x68>
 100134c:	00800304 	movi	r2,12
 1001350:	0023883a 	mov	r17,zero
 1001354:	b0800015 	stw	r2,0(r22)
 1001358:	8805883a 	mov	r2,r17
 100135c:	dfc00b17 	ldw	ra,44(sp)
 1001360:	df000a17 	ldw	fp,40(sp)
 1001364:	ddc00917 	ldw	r23,36(sp)
 1001368:	dd800817 	ldw	r22,32(sp)
 100136c:	dd400717 	ldw	r21,28(sp)
 1001370:	dd000617 	ldw	r20,24(sp)
 1001374:	dcc00517 	ldw	r19,20(sp)
 1001378:	dc800417 	ldw	r18,16(sp)
 100137c:	dc400317 	ldw	r17,12(sp)
 1001380:	dc000217 	ldw	r16,8(sp)
 1001384:	dec00c04 	addi	sp,sp,48
 1001388:	f800283a 	ret
 100138c:	00804074 	movhi	r2,257
 1001390:	10a0e004 	addi	r2,r2,-31872
 1001394:	12400217 	ldw	r9,8(r2)
 1001398:	84cd883a 	add	r6,r16,r19
 100139c:	802b883a 	mov	r21,r16
 10013a0:	3240b926 	beq	r6,r9,1001688 <_realloc_r+0x408>
 10013a4:	31400117 	ldw	r5,4(r6)
 10013a8:	00bfff84 	movi	r2,-2
 10013ac:	2884703a 	and	r2,r5,r2
 10013b0:	1185883a 	add	r2,r2,r6
 10013b4:	10c00117 	ldw	r3,4(r2)
 10013b8:	18c0004c 	andi	r3,r3,1
 10013bc:	1807003a 	cmpeq	r3,r3,zero
 10013c0:	1800a326 	beq	r3,zero,1001650 <_realloc_r+0x3d0>
 10013c4:	2908703a 	and	r4,r5,r4
 10013c8:	9929883a 	add	r20,r19,r4
 10013cc:	a1c0a30e 	bge	r20,r7,100165c <_realloc_r+0x3dc>
 10013d0:	4080004c 	andi	r2,r8,1
 10013d4:	1000551e 	bne	r2,zero,100152c <_realloc_r+0x2ac>
 10013d8:	80800017 	ldw	r2,0(r16)
 10013dc:	80afc83a 	sub	r23,r16,r2
 10013e0:	b8c00117 	ldw	r3,4(r23)
 10013e4:	00bfff04 	movi	r2,-4
 10013e8:	1884703a 	and	r2,r3,r2
 10013ec:	30002e26 	beq	r6,zero,10014a8 <_realloc_r+0x228>
 10013f0:	3240b926 	beq	r6,r9,10016d8 <_realloc_r+0x458>
 10013f4:	98a9883a 	add	r20,r19,r2
 10013f8:	2509883a 	add	r4,r4,r20
 10013fc:	d9000015 	stw	r4,0(sp)
 1001400:	21c02a16 	blt	r4,r7,10014ac <_realloc_r+0x22c>
 1001404:	30800317 	ldw	r2,12(r6)
 1001408:	30c00217 	ldw	r3,8(r6)
 100140c:	01400904 	movi	r5,36
 1001410:	99bfff04 	addi	r6,r19,-4
 1001414:	18800315 	stw	r2,12(r3)
 1001418:	10c00215 	stw	r3,8(r2)
 100141c:	b9000317 	ldw	r4,12(r23)
 1001420:	b8800217 	ldw	r2,8(r23)
 1001424:	b82b883a 	mov	r21,r23
 1001428:	bc000204 	addi	r16,r23,8
 100142c:	20800215 	stw	r2,8(r4)
 1001430:	11000315 	stw	r4,12(r2)
 1001434:	2980e436 	bltu	r5,r6,10017c8 <_realloc_r+0x548>
 1001438:	008004c4 	movi	r2,19
 100143c:	9009883a 	mov	r4,r18
 1001440:	8011883a 	mov	r8,r16
 1001444:	11800f2e 	bgeu	r2,r6,1001484 <_realloc_r+0x204>
 1001448:	90800017 	ldw	r2,0(r18)
 100144c:	ba000404 	addi	r8,r23,16
 1001450:	91000204 	addi	r4,r18,8
 1001454:	b8800215 	stw	r2,8(r23)
 1001458:	90c00117 	ldw	r3,4(r18)
 100145c:	008006c4 	movi	r2,27
 1001460:	b8c00315 	stw	r3,12(r23)
 1001464:	1180072e 	bgeu	r2,r6,1001484 <_realloc_r+0x204>
 1001468:	90c00217 	ldw	r3,8(r18)
 100146c:	ba000604 	addi	r8,r23,24
 1001470:	91000404 	addi	r4,r18,16
 1001474:	b8c00415 	stw	r3,16(r23)
 1001478:	90800317 	ldw	r2,12(r18)
 100147c:	b8800515 	stw	r2,20(r23)
 1001480:	3140e726 	beq	r6,r5,1001820 <_realloc_r+0x5a0>
 1001484:	20800017 	ldw	r2,0(r4)
 1001488:	dd000017 	ldw	r20,0(sp)
 100148c:	b80f883a 	mov	r7,r23
 1001490:	40800015 	stw	r2,0(r8)
 1001494:	20c00117 	ldw	r3,4(r4)
 1001498:	40c00115 	stw	r3,4(r8)
 100149c:	20800217 	ldw	r2,8(r4)
 10014a0:	40800215 	stw	r2,8(r8)
 10014a4:	003f9706 	br	1001304 <_realloc_r+0x84>
 10014a8:	98a9883a 	add	r20,r19,r2
 10014ac:	a1c01f16 	blt	r20,r7,100152c <_realloc_r+0x2ac>
 10014b0:	b8c00317 	ldw	r3,12(r23)
 10014b4:	b8800217 	ldw	r2,8(r23)
 10014b8:	99bfff04 	addi	r6,r19,-4
 10014bc:	01400904 	movi	r5,36
 10014c0:	b82b883a 	mov	r21,r23
 10014c4:	18800215 	stw	r2,8(r3)
 10014c8:	10c00315 	stw	r3,12(r2)
 10014cc:	bc000204 	addi	r16,r23,8
 10014d0:	2980c336 	bltu	r5,r6,10017e0 <_realloc_r+0x560>
 10014d4:	008004c4 	movi	r2,19
 10014d8:	9009883a 	mov	r4,r18
 10014dc:	8011883a 	mov	r8,r16
 10014e0:	11800f2e 	bgeu	r2,r6,1001520 <_realloc_r+0x2a0>
 10014e4:	90800017 	ldw	r2,0(r18)
 10014e8:	ba000404 	addi	r8,r23,16
 10014ec:	91000204 	addi	r4,r18,8
 10014f0:	b8800215 	stw	r2,8(r23)
 10014f4:	90c00117 	ldw	r3,4(r18)
 10014f8:	008006c4 	movi	r2,27
 10014fc:	b8c00315 	stw	r3,12(r23)
 1001500:	1180072e 	bgeu	r2,r6,1001520 <_realloc_r+0x2a0>
 1001504:	90c00217 	ldw	r3,8(r18)
 1001508:	ba000604 	addi	r8,r23,24
 100150c:	91000404 	addi	r4,r18,16
 1001510:	b8c00415 	stw	r3,16(r23)
 1001514:	90800317 	ldw	r2,12(r18)
 1001518:	b8800515 	stw	r2,20(r23)
 100151c:	3140c726 	beq	r6,r5,100183c <_realloc_r+0x5bc>
 1001520:	20800017 	ldw	r2,0(r4)
 1001524:	b80f883a 	mov	r7,r23
 1001528:	003fd906 	br	1001490 <_realloc_r+0x210>
 100152c:	880b883a 	mov	r5,r17
 1001530:	b009883a 	mov	r4,r22
 1001534:	10008dc0 	call	10008dc <_malloc_r>
 1001538:	1023883a 	mov	r17,r2
 100153c:	10002526 	beq	r2,zero,10015d4 <_realloc_r+0x354>
 1001540:	80800117 	ldw	r2,4(r16)
 1001544:	00ffff84 	movi	r3,-2
 1001548:	893ffe04 	addi	r4,r17,-8
 100154c:	10c4703a 	and	r2,r2,r3
 1001550:	8085883a 	add	r2,r16,r2
 1001554:	20809526 	beq	r4,r2,10017ac <_realloc_r+0x52c>
 1001558:	99bfff04 	addi	r6,r19,-4
 100155c:	01c00904 	movi	r7,36
 1001560:	39804536 	bltu	r7,r6,1001678 <_realloc_r+0x3f8>
 1001564:	008004c4 	movi	r2,19
 1001568:	9009883a 	mov	r4,r18
 100156c:	880b883a 	mov	r5,r17
 1001570:	11800f2e 	bgeu	r2,r6,10015b0 <_realloc_r+0x330>
 1001574:	90800017 	ldw	r2,0(r18)
 1001578:	89400204 	addi	r5,r17,8
 100157c:	91000204 	addi	r4,r18,8
 1001580:	88800015 	stw	r2,0(r17)
 1001584:	90c00117 	ldw	r3,4(r18)
 1001588:	008006c4 	movi	r2,27
 100158c:	88c00115 	stw	r3,4(r17)
 1001590:	1180072e 	bgeu	r2,r6,10015b0 <_realloc_r+0x330>
 1001594:	90c00217 	ldw	r3,8(r18)
 1001598:	89400404 	addi	r5,r17,16
 100159c:	91000404 	addi	r4,r18,16
 10015a0:	88c00215 	stw	r3,8(r17)
 10015a4:	90800317 	ldw	r2,12(r18)
 10015a8:	88800315 	stw	r2,12(r17)
 10015ac:	31c09126 	beq	r6,r7,10017f4 <_realloc_r+0x574>
 10015b0:	20800017 	ldw	r2,0(r4)
 10015b4:	28800015 	stw	r2,0(r5)
 10015b8:	20c00117 	ldw	r3,4(r4)
 10015bc:	28c00115 	stw	r3,4(r5)
 10015c0:	20800217 	ldw	r2,8(r4)
 10015c4:	28800215 	stw	r2,8(r5)
 10015c8:	900b883a 	mov	r5,r18
 10015cc:	b009883a 	mov	r4,r22
 10015d0:	100203c0 	call	100203c <_free_r>
 10015d4:	b009883a 	mov	r4,r22
 10015d8:	10032cc0 	call	10032cc <__malloc_unlock>
 10015dc:	003f5e06 	br	1001358 <_realloc_r+0xd8>
 10015e0:	300b883a 	mov	r5,r6
 10015e4:	dfc00b17 	ldw	ra,44(sp)
 10015e8:	df000a17 	ldw	fp,40(sp)
 10015ec:	ddc00917 	ldw	r23,36(sp)
 10015f0:	dd800817 	ldw	r22,32(sp)
 10015f4:	dd400717 	ldw	r21,28(sp)
 10015f8:	dd000617 	ldw	r20,24(sp)
 10015fc:	dcc00517 	ldw	r19,20(sp)
 1001600:	dc800417 	ldw	r18,16(sp)
 1001604:	dc400317 	ldw	r17,12(sp)
 1001608:	dc000217 	ldw	r16,8(sp)
 100160c:	dec00c04 	addi	sp,sp,48
 1001610:	10008dc1 	jmpi	10008dc <_malloc_r>
 1001614:	38800117 	ldw	r2,4(r7)
 1001618:	e54b883a 	add	r5,fp,r21
 100161c:	31000054 	ori	r4,r6,1
 1001620:	1080004c 	andi	r2,r2,1
 1001624:	1704b03a 	or	r2,r2,fp
 1001628:	38800115 	stw	r2,4(r7)
 100162c:	29000115 	stw	r4,4(r5)
 1001630:	2987883a 	add	r3,r5,r6
 1001634:	18800117 	ldw	r2,4(r3)
 1001638:	29400204 	addi	r5,r5,8
 100163c:	b009883a 	mov	r4,r22
 1001640:	10800054 	ori	r2,r2,1
 1001644:	18800115 	stw	r2,4(r3)
 1001648:	100203c0 	call	100203c <_free_r>
 100164c:	003f3806 	br	1001330 <_realloc_r+0xb0>
 1001650:	000d883a 	mov	r6,zero
 1001654:	0009883a 	mov	r4,zero
 1001658:	003f5d06 	br	10013d0 <_realloc_r+0x150>
 100165c:	30c00217 	ldw	r3,8(r6)
 1001660:	30800317 	ldw	r2,12(r6)
 1001664:	800f883a 	mov	r7,r16
 1001668:	84000204 	addi	r16,r16,8
 100166c:	10c00215 	stw	r3,8(r2)
 1001670:	18800315 	stw	r2,12(r3)
 1001674:	003f2306 	br	1001304 <_realloc_r+0x84>
 1001678:	8809883a 	mov	r4,r17
 100167c:	900b883a 	mov	r5,r18
 1001680:	10011a00 	call	10011a0 <memmove>
 1001684:	003fd006 	br	10015c8 <_realloc_r+0x348>
 1001688:	30800117 	ldw	r2,4(r6)
 100168c:	e0c00404 	addi	r3,fp,16
 1001690:	1108703a 	and	r4,r2,r4
 1001694:	9905883a 	add	r2,r19,r4
 1001698:	10ff4d16 	blt	r2,r3,10013d0 <_realloc_r+0x150>
 100169c:	1705c83a 	sub	r2,r2,fp
 10016a0:	870b883a 	add	r5,r16,fp
 10016a4:	10800054 	ori	r2,r2,1
 10016a8:	28800115 	stw	r2,4(r5)
 10016ac:	80c00117 	ldw	r3,4(r16)
 10016b0:	00804074 	movhi	r2,257
 10016b4:	10a0e004 	addi	r2,r2,-31872
 10016b8:	b009883a 	mov	r4,r22
 10016bc:	18c0004c 	andi	r3,r3,1
 10016c0:	e0c6b03a 	or	r3,fp,r3
 10016c4:	11400215 	stw	r5,8(r2)
 10016c8:	80c00115 	stw	r3,4(r16)
 10016cc:	10032cc0 	call	10032cc <__malloc_unlock>
 10016d0:	84400204 	addi	r17,r16,8
 10016d4:	003f2006 	br	1001358 <_realloc_r+0xd8>
 10016d8:	98a9883a 	add	r20,r19,r2
 10016dc:	2509883a 	add	r4,r4,r20
 10016e0:	e0800404 	addi	r2,fp,16
 10016e4:	d9000115 	stw	r4,4(sp)
 10016e8:	20bf7016 	blt	r4,r2,10014ac <_realloc_r+0x22c>
 10016ec:	b8c00317 	ldw	r3,12(r23)
 10016f0:	b8800217 	ldw	r2,8(r23)
 10016f4:	99bfff04 	addi	r6,r19,-4
 10016f8:	01400904 	movi	r5,36
 10016fc:	18800215 	stw	r2,8(r3)
 1001700:	10c00315 	stw	r3,12(r2)
 1001704:	bc400204 	addi	r17,r23,8
 1001708:	29804136 	bltu	r5,r6,1001810 <_realloc_r+0x590>
 100170c:	008004c4 	movi	r2,19
 1001710:	9009883a 	mov	r4,r18
 1001714:	880f883a 	mov	r7,r17
 1001718:	11800f2e 	bgeu	r2,r6,1001758 <_realloc_r+0x4d8>
 100171c:	90800017 	ldw	r2,0(r18)
 1001720:	b9c00404 	addi	r7,r23,16
 1001724:	91000204 	addi	r4,r18,8
 1001728:	b8800215 	stw	r2,8(r23)
 100172c:	90c00117 	ldw	r3,4(r18)
 1001730:	008006c4 	movi	r2,27
 1001734:	b8c00315 	stw	r3,12(r23)
 1001738:	1180072e 	bgeu	r2,r6,1001758 <_realloc_r+0x4d8>
 100173c:	90c00217 	ldw	r3,8(r18)
 1001740:	b9c00604 	addi	r7,r23,24
 1001744:	91000404 	addi	r4,r18,16
 1001748:	b8c00415 	stw	r3,16(r23)
 100174c:	90800317 	ldw	r2,12(r18)
 1001750:	b8800515 	stw	r2,20(r23)
 1001754:	31404026 	beq	r6,r5,1001858 <_realloc_r+0x5d8>
 1001758:	20800017 	ldw	r2,0(r4)
 100175c:	38800015 	stw	r2,0(r7)
 1001760:	20c00117 	ldw	r3,4(r4)
 1001764:	38c00115 	stw	r3,4(r7)
 1001768:	20800217 	ldw	r2,8(r4)
 100176c:	38800215 	stw	r2,8(r7)
 1001770:	d8c00117 	ldw	r3,4(sp)
 1001774:	bf0b883a 	add	r5,r23,fp
 1001778:	b009883a 	mov	r4,r22
 100177c:	1f05c83a 	sub	r2,r3,fp
 1001780:	10800054 	ori	r2,r2,1
 1001784:	28800115 	stw	r2,4(r5)
 1001788:	b8c00117 	ldw	r3,4(r23)
 100178c:	00804074 	movhi	r2,257
 1001790:	10a0e004 	addi	r2,r2,-31872
 1001794:	11400215 	stw	r5,8(r2)
 1001798:	18c0004c 	andi	r3,r3,1
 100179c:	e0c6b03a 	or	r3,fp,r3
 10017a0:	b8c00115 	stw	r3,4(r23)
 10017a4:	10032cc0 	call	10032cc <__malloc_unlock>
 10017a8:	003eeb06 	br	1001358 <_realloc_r+0xd8>
 10017ac:	20800117 	ldw	r2,4(r4)
 10017b0:	00ffff04 	movi	r3,-4
 10017b4:	800f883a 	mov	r7,r16
 10017b8:	10c4703a 	and	r2,r2,r3
 10017bc:	98a9883a 	add	r20,r19,r2
 10017c0:	84000204 	addi	r16,r16,8
 10017c4:	003ecf06 	br	1001304 <_realloc_r+0x84>
 10017c8:	900b883a 	mov	r5,r18
 10017cc:	8009883a 	mov	r4,r16
 10017d0:	10011a00 	call	10011a0 <memmove>
 10017d4:	dd000017 	ldw	r20,0(sp)
 10017d8:	b80f883a 	mov	r7,r23
 10017dc:	003ec906 	br	1001304 <_realloc_r+0x84>
 10017e0:	900b883a 	mov	r5,r18
 10017e4:	8009883a 	mov	r4,r16
 10017e8:	10011a00 	call	10011a0 <memmove>
 10017ec:	b80f883a 	mov	r7,r23
 10017f0:	003ec406 	br	1001304 <_realloc_r+0x84>
 10017f4:	90c00417 	ldw	r3,16(r18)
 10017f8:	89400604 	addi	r5,r17,24
 10017fc:	91000604 	addi	r4,r18,24
 1001800:	88c00415 	stw	r3,16(r17)
 1001804:	90800517 	ldw	r2,20(r18)
 1001808:	88800515 	stw	r2,20(r17)
 100180c:	003f6806 	br	10015b0 <_realloc_r+0x330>
 1001810:	900b883a 	mov	r5,r18
 1001814:	8809883a 	mov	r4,r17
 1001818:	10011a00 	call	10011a0 <memmove>
 100181c:	003fd406 	br	1001770 <_realloc_r+0x4f0>
 1001820:	90c00417 	ldw	r3,16(r18)
 1001824:	91000604 	addi	r4,r18,24
 1001828:	ba000804 	addi	r8,r23,32
 100182c:	b8c00615 	stw	r3,24(r23)
 1001830:	90800517 	ldw	r2,20(r18)
 1001834:	b8800715 	stw	r2,28(r23)
 1001838:	003f1206 	br	1001484 <_realloc_r+0x204>
 100183c:	90c00417 	ldw	r3,16(r18)
 1001840:	91000604 	addi	r4,r18,24
 1001844:	ba000804 	addi	r8,r23,32
 1001848:	b8c00615 	stw	r3,24(r23)
 100184c:	90800517 	ldw	r2,20(r18)
 1001850:	b8800715 	stw	r2,28(r23)
 1001854:	003f3206 	br	1001520 <_realloc_r+0x2a0>
 1001858:	90c00417 	ldw	r3,16(r18)
 100185c:	91000604 	addi	r4,r18,24
 1001860:	b9c00804 	addi	r7,r23,32
 1001864:	b8c00615 	stw	r3,24(r23)
 1001868:	90800517 	ldw	r2,20(r18)
 100186c:	b8800715 	stw	r2,28(r23)
 1001870:	003fb906 	br	1001758 <_realloc_r+0x4d8>

01001874 <_sbrk_r>:
 1001874:	defffd04 	addi	sp,sp,-12
 1001878:	dc000015 	stw	r16,0(sp)
 100187c:	04004074 	movhi	r16,257
 1001880:	842db504 	addi	r16,r16,-18732
 1001884:	dc400115 	stw	r17,4(sp)
 1001888:	80000015 	stw	zero,0(r16)
 100188c:	2023883a 	mov	r17,r4
 1001890:	2809883a 	mov	r4,r5
 1001894:	dfc00215 	stw	ra,8(sp)
 1001898:	10034cc0 	call	10034cc <sbrk>
 100189c:	1007883a 	mov	r3,r2
 10018a0:	00bfffc4 	movi	r2,-1
 10018a4:	18800626 	beq	r3,r2,10018c0 <_sbrk_r+0x4c>
 10018a8:	1805883a 	mov	r2,r3
 10018ac:	dfc00217 	ldw	ra,8(sp)
 10018b0:	dc400117 	ldw	r17,4(sp)
 10018b4:	dc000017 	ldw	r16,0(sp)
 10018b8:	dec00304 	addi	sp,sp,12
 10018bc:	f800283a 	ret
 10018c0:	80800017 	ldw	r2,0(r16)
 10018c4:	103ff826 	beq	r2,zero,10018a8 <_sbrk_r+0x34>
 10018c8:	88800015 	stw	r2,0(r17)
 10018cc:	1805883a 	mov	r2,r3
 10018d0:	dfc00217 	ldw	ra,8(sp)
 10018d4:	dc400117 	ldw	r17,4(sp)
 10018d8:	dc000017 	ldw	r16,0(sp)
 10018dc:	dec00304 	addi	sp,sp,12
 10018e0:	f800283a 	ret

010018e4 <__swsetup_r>:
 10018e4:	00804074 	movhi	r2,257
 10018e8:	10a6bb04 	addi	r2,r2,-25876
 10018ec:	10c00017 	ldw	r3,0(r2)
 10018f0:	defffd04 	addi	sp,sp,-12
 10018f4:	dc400115 	stw	r17,4(sp)
 10018f8:	dc000015 	stw	r16,0(sp)
 10018fc:	dfc00215 	stw	ra,8(sp)
 1001900:	2023883a 	mov	r17,r4
 1001904:	2821883a 	mov	r16,r5
 1001908:	18000226 	beq	r3,zero,1001914 <__swsetup_r+0x30>
 100190c:	18800e17 	ldw	r2,56(r3)
 1001910:	10001f26 	beq	r2,zero,1001990 <__swsetup_r+0xac>
 1001914:	8100030b 	ldhu	r4,12(r16)
 1001918:	2080020c 	andi	r2,r4,8
 100191c:	10002826 	beq	r2,zero,10019c0 <__swsetup_r+0xdc>
 1001920:	81400417 	ldw	r5,16(r16)
 1001924:	28001d26 	beq	r5,zero,100199c <__swsetup_r+0xb8>
 1001928:	2080004c 	andi	r2,r4,1
 100192c:	1005003a 	cmpeq	r2,r2,zero
 1001930:	10000b26 	beq	r2,zero,1001960 <__swsetup_r+0x7c>
 1001934:	2080008c 	andi	r2,r4,2
 1001938:	10001226 	beq	r2,zero,1001984 <__swsetup_r+0xa0>
 100193c:	0005883a 	mov	r2,zero
 1001940:	80800215 	stw	r2,8(r16)
 1001944:	28000b26 	beq	r5,zero,1001974 <__swsetup_r+0x90>
 1001948:	0005883a 	mov	r2,zero
 100194c:	dfc00217 	ldw	ra,8(sp)
 1001950:	dc400117 	ldw	r17,4(sp)
 1001954:	dc000017 	ldw	r16,0(sp)
 1001958:	dec00304 	addi	sp,sp,12
 100195c:	f800283a 	ret
 1001960:	80800517 	ldw	r2,20(r16)
 1001964:	80000215 	stw	zero,8(r16)
 1001968:	0085c83a 	sub	r2,zero,r2
 100196c:	80800615 	stw	r2,24(r16)
 1001970:	283ff51e 	bne	r5,zero,1001948 <__swsetup_r+0x64>
 1001974:	2080200c 	andi	r2,r4,128
 1001978:	103ff326 	beq	r2,zero,1001948 <__swsetup_r+0x64>
 100197c:	00bfffc4 	movi	r2,-1
 1001980:	003ff206 	br	100194c <__swsetup_r+0x68>
 1001984:	80800517 	ldw	r2,20(r16)
 1001988:	80800215 	stw	r2,8(r16)
 100198c:	003fed06 	br	1001944 <__swsetup_r+0x60>
 1001990:	1809883a 	mov	r4,r3
 1001994:	1001cb80 	call	1001cb8 <__sinit>
 1001998:	003fde06 	br	1001914 <__swsetup_r+0x30>
 100199c:	20c0a00c 	andi	r3,r4,640
 10019a0:	00808004 	movi	r2,512
 10019a4:	18bfe026 	beq	r3,r2,1001928 <__swsetup_r+0x44>
 10019a8:	8809883a 	mov	r4,r17
 10019ac:	800b883a 	mov	r5,r16
 10019b0:	10024d00 	call	10024d0 <__smakebuf_r>
 10019b4:	8100030b 	ldhu	r4,12(r16)
 10019b8:	81400417 	ldw	r5,16(r16)
 10019bc:	003fda06 	br	1001928 <__swsetup_r+0x44>
 10019c0:	2080040c 	andi	r2,r4,16
 10019c4:	103fed26 	beq	r2,zero,100197c <__swsetup_r+0x98>
 10019c8:	2080010c 	andi	r2,r4,4
 10019cc:	10001226 	beq	r2,zero,1001a18 <__swsetup_r+0x134>
 10019d0:	81400c17 	ldw	r5,48(r16)
 10019d4:	28000526 	beq	r5,zero,10019ec <__swsetup_r+0x108>
 10019d8:	80801004 	addi	r2,r16,64
 10019dc:	28800226 	beq	r5,r2,10019e8 <__swsetup_r+0x104>
 10019e0:	8809883a 	mov	r4,r17
 10019e4:	100203c0 	call	100203c <_free_r>
 10019e8:	80000c15 	stw	zero,48(r16)
 10019ec:	8080030b 	ldhu	r2,12(r16)
 10019f0:	81400417 	ldw	r5,16(r16)
 10019f4:	80000115 	stw	zero,4(r16)
 10019f8:	10bff6cc 	andi	r2,r2,65499
 10019fc:	8080030d 	sth	r2,12(r16)
 1001a00:	81400015 	stw	r5,0(r16)
 1001a04:	8080030b 	ldhu	r2,12(r16)
 1001a08:	10800214 	ori	r2,r2,8
 1001a0c:	113fffcc 	andi	r4,r2,65535
 1001a10:	8080030d 	sth	r2,12(r16)
 1001a14:	003fc306 	br	1001924 <__swsetup_r+0x40>
 1001a18:	81400417 	ldw	r5,16(r16)
 1001a1c:	003ff906 	br	1001a04 <__swsetup_r+0x120>

01001a20 <_fflush_r>:
 1001a20:	defffb04 	addi	sp,sp,-20
 1001a24:	dcc00315 	stw	r19,12(sp)
 1001a28:	dc800215 	stw	r18,8(sp)
 1001a2c:	dfc00415 	stw	ra,16(sp)
 1001a30:	dc400115 	stw	r17,4(sp)
 1001a34:	dc000015 	stw	r16,0(sp)
 1001a38:	2027883a 	mov	r19,r4
 1001a3c:	2825883a 	mov	r18,r5
 1001a40:	20000226 	beq	r4,zero,1001a4c <_fflush_r+0x2c>
 1001a44:	20800e17 	ldw	r2,56(r4)
 1001a48:	10005626 	beq	r2,zero,1001ba4 <_fflush_r+0x184>
 1001a4c:	9100030b 	ldhu	r4,12(r18)
 1001a50:	20ffffcc 	andi	r3,r4,65535
 1001a54:	18e0001c 	xori	r3,r3,32768
 1001a58:	18e00004 	addi	r3,r3,-32768
 1001a5c:	1880020c 	andi	r2,r3,8
 1001a60:	1000261e 	bne	r2,zero,1001afc <_fflush_r+0xdc>
 1001a64:	90c00117 	ldw	r3,4(r18)
 1001a68:	20820014 	ori	r2,r4,2048
 1001a6c:	9080030d 	sth	r2,12(r18)
 1001a70:	1009883a 	mov	r4,r2
 1001a74:	00c0400e 	bge	zero,r3,1001b78 <_fflush_r+0x158>
 1001a78:	92000a17 	ldw	r8,40(r18)
 1001a7c:	40004026 	beq	r8,zero,1001b80 <_fflush_r+0x160>
 1001a80:	2084000c 	andi	r2,r4,4096
 1001a84:	10005326 	beq	r2,zero,1001bd4 <_fflush_r+0x1b4>
 1001a88:	94001417 	ldw	r16,80(r18)
 1001a8c:	9080030b 	ldhu	r2,12(r18)
 1001a90:	1080010c 	andi	r2,r2,4
 1001a94:	1000481e 	bne	r2,zero,1001bb8 <_fflush_r+0x198>
 1001a98:	91400717 	ldw	r5,28(r18)
 1001a9c:	9809883a 	mov	r4,r19
 1001aa0:	800d883a 	mov	r6,r16
 1001aa4:	000f883a 	mov	r7,zero
 1001aa8:	403ee83a 	callr	r8
 1001aac:	8080261e 	bne	r16,r2,1001b48 <_fflush_r+0x128>
 1001ab0:	9080030b 	ldhu	r2,12(r18)
 1001ab4:	91000417 	ldw	r4,16(r18)
 1001ab8:	90000115 	stw	zero,4(r18)
 1001abc:	10bdffcc 	andi	r2,r2,63487
 1001ac0:	10ffffcc 	andi	r3,r2,65535
 1001ac4:	18c4000c 	andi	r3,r3,4096
 1001ac8:	9080030d 	sth	r2,12(r18)
 1001acc:	91000015 	stw	r4,0(r18)
 1001ad0:	18002b26 	beq	r3,zero,1001b80 <_fflush_r+0x160>
 1001ad4:	0007883a 	mov	r3,zero
 1001ad8:	1805883a 	mov	r2,r3
 1001adc:	94001415 	stw	r16,80(r18)
 1001ae0:	dfc00417 	ldw	ra,16(sp)
 1001ae4:	dcc00317 	ldw	r19,12(sp)
 1001ae8:	dc800217 	ldw	r18,8(sp)
 1001aec:	dc400117 	ldw	r17,4(sp)
 1001af0:	dc000017 	ldw	r16,0(sp)
 1001af4:	dec00504 	addi	sp,sp,20
 1001af8:	f800283a 	ret
 1001afc:	94400417 	ldw	r17,16(r18)
 1001b00:	88001f26 	beq	r17,zero,1001b80 <_fflush_r+0x160>
 1001b04:	90800017 	ldw	r2,0(r18)
 1001b08:	18c000cc 	andi	r3,r3,3
 1001b0c:	94400015 	stw	r17,0(r18)
 1001b10:	1461c83a 	sub	r16,r2,r17
 1001b14:	18002526 	beq	r3,zero,1001bac <_fflush_r+0x18c>
 1001b18:	0005883a 	mov	r2,zero
 1001b1c:	90800215 	stw	r2,8(r18)
 1001b20:	0400170e 	bge	zero,r16,1001b80 <_fflush_r+0x160>
 1001b24:	90c00917 	ldw	r3,36(r18)
 1001b28:	91400717 	ldw	r5,28(r18)
 1001b2c:	880d883a 	mov	r6,r17
 1001b30:	800f883a 	mov	r7,r16
 1001b34:	9809883a 	mov	r4,r19
 1001b38:	183ee83a 	callr	r3
 1001b3c:	88a3883a 	add	r17,r17,r2
 1001b40:	80a1c83a 	sub	r16,r16,r2
 1001b44:	00bff616 	blt	zero,r2,1001b20 <_fflush_r+0x100>
 1001b48:	9080030b 	ldhu	r2,12(r18)
 1001b4c:	00ffffc4 	movi	r3,-1
 1001b50:	10801014 	ori	r2,r2,64
 1001b54:	9080030d 	sth	r2,12(r18)
 1001b58:	1805883a 	mov	r2,r3
 1001b5c:	dfc00417 	ldw	ra,16(sp)
 1001b60:	dcc00317 	ldw	r19,12(sp)
 1001b64:	dc800217 	ldw	r18,8(sp)
 1001b68:	dc400117 	ldw	r17,4(sp)
 1001b6c:	dc000017 	ldw	r16,0(sp)
 1001b70:	dec00504 	addi	sp,sp,20
 1001b74:	f800283a 	ret
 1001b78:	90800f17 	ldw	r2,60(r18)
 1001b7c:	00bfbe16 	blt	zero,r2,1001a78 <_fflush_r+0x58>
 1001b80:	0007883a 	mov	r3,zero
 1001b84:	1805883a 	mov	r2,r3
 1001b88:	dfc00417 	ldw	ra,16(sp)
 1001b8c:	dcc00317 	ldw	r19,12(sp)
 1001b90:	dc800217 	ldw	r18,8(sp)
 1001b94:	dc400117 	ldw	r17,4(sp)
 1001b98:	dc000017 	ldw	r16,0(sp)
 1001b9c:	dec00504 	addi	sp,sp,20
 1001ba0:	f800283a 	ret
 1001ba4:	1001cb80 	call	1001cb8 <__sinit>
 1001ba8:	003fa806 	br	1001a4c <_fflush_r+0x2c>
 1001bac:	90800517 	ldw	r2,20(r18)
 1001bb0:	90800215 	stw	r2,8(r18)
 1001bb4:	003fda06 	br	1001b20 <_fflush_r+0x100>
 1001bb8:	90800117 	ldw	r2,4(r18)
 1001bbc:	90c00c17 	ldw	r3,48(r18)
 1001bc0:	80a1c83a 	sub	r16,r16,r2
 1001bc4:	183fb426 	beq	r3,zero,1001a98 <_fflush_r+0x78>
 1001bc8:	90800f17 	ldw	r2,60(r18)
 1001bcc:	80a1c83a 	sub	r16,r16,r2
 1001bd0:	003fb106 	br	1001a98 <_fflush_r+0x78>
 1001bd4:	91400717 	ldw	r5,28(r18)
 1001bd8:	9809883a 	mov	r4,r19
 1001bdc:	000d883a 	mov	r6,zero
 1001be0:	01c00044 	movi	r7,1
 1001be4:	403ee83a 	callr	r8
 1001be8:	1021883a 	mov	r16,r2
 1001bec:	00bfffc4 	movi	r2,-1
 1001bf0:	80800226 	beq	r16,r2,1001bfc <_fflush_r+0x1dc>
 1001bf4:	92000a17 	ldw	r8,40(r18)
 1001bf8:	003fa406 	br	1001a8c <_fflush_r+0x6c>
 1001bfc:	98c00017 	ldw	r3,0(r19)
 1001c00:	00800744 	movi	r2,29
 1001c04:	18bfde26 	beq	r3,r2,1001b80 <_fflush_r+0x160>
 1001c08:	9080030b 	ldhu	r2,12(r18)
 1001c0c:	8007883a 	mov	r3,r16
 1001c10:	10801014 	ori	r2,r2,64
 1001c14:	9080030d 	sth	r2,12(r18)
 1001c18:	003fcf06 	br	1001b58 <_fflush_r+0x138>

01001c1c <fflush>:
 1001c1c:	01404034 	movhi	r5,256
 1001c20:	29468804 	addi	r5,r5,6688
 1001c24:	2007883a 	mov	r3,r4
 1001c28:	20000526 	beq	r4,zero,1001c40 <fflush+0x24>
 1001c2c:	00804074 	movhi	r2,257
 1001c30:	10a6bb04 	addi	r2,r2,-25876
 1001c34:	11000017 	ldw	r4,0(r2)
 1001c38:	180b883a 	mov	r5,r3
 1001c3c:	1001a201 	jmpi	1001a20 <_fflush_r>
 1001c40:	00804074 	movhi	r2,257
 1001c44:	10a6bc04 	addi	r2,r2,-25872
 1001c48:	11000017 	ldw	r4,0(r2)
 1001c4c:	10023501 	jmpi	1002350 <_fwalk_reent>

01001c50 <std>:
 1001c50:	00804034 	movhi	r2,256
 1001c54:	1089bf04 	addi	r2,r2,9980
 1001c58:	20800b15 	stw	r2,44(r4)
 1001c5c:	00804034 	movhi	r2,256
 1001c60:	1089fa04 	addi	r2,r2,10216
 1001c64:	20800815 	stw	r2,32(r4)
 1001c68:	00c04034 	movhi	r3,256
 1001c6c:	18c9db04 	addi	r3,r3,10092
 1001c70:	00804034 	movhi	r2,256
 1001c74:	1089c104 	addi	r2,r2,9988
 1001c78:	2140030d 	sth	r5,12(r4)
 1001c7c:	2180038d 	sth	r6,14(r4)
 1001c80:	20c00915 	stw	r3,36(r4)
 1001c84:	20800a15 	stw	r2,40(r4)
 1001c88:	20000015 	stw	zero,0(r4)
 1001c8c:	20000115 	stw	zero,4(r4)
 1001c90:	20000215 	stw	zero,8(r4)
 1001c94:	20000415 	stw	zero,16(r4)
 1001c98:	20000515 	stw	zero,20(r4)
 1001c9c:	20000615 	stw	zero,24(r4)
 1001ca0:	21000715 	stw	r4,28(r4)
 1001ca4:	f800283a 	ret

01001ca8 <__sfp_lock_acquire>:
 1001ca8:	f800283a 	ret

01001cac <__sfp_lock_release>:
 1001cac:	f800283a 	ret

01001cb0 <__sinit_lock_acquire>:
 1001cb0:	f800283a 	ret

01001cb4 <__sinit_lock_release>:
 1001cb4:	f800283a 	ret

01001cb8 <__sinit>:
 1001cb8:	20800e17 	ldw	r2,56(r4)
 1001cbc:	defffd04 	addi	sp,sp,-12
 1001cc0:	dc400115 	stw	r17,4(sp)
 1001cc4:	dc000015 	stw	r16,0(sp)
 1001cc8:	dfc00215 	stw	ra,8(sp)
 1001ccc:	04400044 	movi	r17,1
 1001cd0:	01400104 	movi	r5,4
 1001cd4:	000d883a 	mov	r6,zero
 1001cd8:	2021883a 	mov	r16,r4
 1001cdc:	2200bb04 	addi	r8,r4,748
 1001ce0:	200f883a 	mov	r7,r4
 1001ce4:	10000526 	beq	r2,zero,1001cfc <__sinit+0x44>
 1001ce8:	dfc00217 	ldw	ra,8(sp)
 1001cec:	dc400117 	ldw	r17,4(sp)
 1001cf0:	dc000017 	ldw	r16,0(sp)
 1001cf4:	dec00304 	addi	sp,sp,12
 1001cf8:	f800283a 	ret
 1001cfc:	21000117 	ldw	r4,4(r4)
 1001d00:	00804034 	movhi	r2,256
 1001d04:	10876704 	addi	r2,r2,7580
 1001d08:	00c000c4 	movi	r3,3
 1001d0c:	80800f15 	stw	r2,60(r16)
 1001d10:	80c0b915 	stw	r3,740(r16)
 1001d14:	8200ba15 	stw	r8,744(r16)
 1001d18:	84400e15 	stw	r17,56(r16)
 1001d1c:	8000b815 	stw	zero,736(r16)
 1001d20:	1001c500 	call	1001c50 <std>
 1001d24:	81000217 	ldw	r4,8(r16)
 1001d28:	880d883a 	mov	r6,r17
 1001d2c:	800f883a 	mov	r7,r16
 1001d30:	01400284 	movi	r5,10
 1001d34:	1001c500 	call	1001c50 <std>
 1001d38:	81000317 	ldw	r4,12(r16)
 1001d3c:	800f883a 	mov	r7,r16
 1001d40:	01400484 	movi	r5,18
 1001d44:	01800084 	movi	r6,2
 1001d48:	dfc00217 	ldw	ra,8(sp)
 1001d4c:	dc400117 	ldw	r17,4(sp)
 1001d50:	dc000017 	ldw	r16,0(sp)
 1001d54:	dec00304 	addi	sp,sp,12
 1001d58:	1001c501 	jmpi	1001c50 <std>

01001d5c <__fp_lock>:
 1001d5c:	0005883a 	mov	r2,zero
 1001d60:	f800283a 	ret

01001d64 <__fp_unlock>:
 1001d64:	0005883a 	mov	r2,zero
 1001d68:	f800283a 	ret

01001d6c <__fp_unlock_all>:
 1001d6c:	00804074 	movhi	r2,257
 1001d70:	10a6bb04 	addi	r2,r2,-25876
 1001d74:	11000017 	ldw	r4,0(r2)
 1001d78:	01404034 	movhi	r5,256
 1001d7c:	29475904 	addi	r5,r5,7524
 1001d80:	10024181 	jmpi	1002418 <_fwalk>

01001d84 <__fp_lock_all>:
 1001d84:	00804074 	movhi	r2,257
 1001d88:	10a6bb04 	addi	r2,r2,-25876
 1001d8c:	11000017 	ldw	r4,0(r2)
 1001d90:	01404034 	movhi	r5,256
 1001d94:	29475704 	addi	r5,r5,7516
 1001d98:	10024181 	jmpi	1002418 <_fwalk>

01001d9c <_cleanup_r>:
 1001d9c:	01404034 	movhi	r5,256
 1001da0:	294a9004 	addi	r5,r5,10816
 1001da4:	10024181 	jmpi	1002418 <_fwalk>

01001da8 <_cleanup>:
 1001da8:	00804074 	movhi	r2,257
 1001dac:	10a6bc04 	addi	r2,r2,-25872
 1001db0:	11000017 	ldw	r4,0(r2)
 1001db4:	1001d9c1 	jmpi	1001d9c <_cleanup_r>

01001db8 <__sfmoreglue>:
 1001db8:	defffc04 	addi	sp,sp,-16
 1001dbc:	dc400115 	stw	r17,4(sp)
 1001dc0:	2c401724 	muli	r17,r5,92
 1001dc4:	dc800215 	stw	r18,8(sp)
 1001dc8:	2825883a 	mov	r18,r5
 1001dcc:	89400304 	addi	r5,r17,12
 1001dd0:	dc000015 	stw	r16,0(sp)
 1001dd4:	dfc00315 	stw	ra,12(sp)
 1001dd8:	10008dc0 	call	10008dc <_malloc_r>
 1001ddc:	0021883a 	mov	r16,zero
 1001de0:	880d883a 	mov	r6,r17
 1001de4:	000b883a 	mov	r5,zero
 1001de8:	10000626 	beq	r2,zero,1001e04 <__sfmoreglue+0x4c>
 1001dec:	11000304 	addi	r4,r2,12
 1001df0:	14800115 	stw	r18,4(r2)
 1001df4:	10000015 	stw	zero,0(r2)
 1001df8:	11000215 	stw	r4,8(r2)
 1001dfc:	1021883a 	mov	r16,r2
 1001e00:	10026640 	call	1002664 <memset>
 1001e04:	8005883a 	mov	r2,r16
 1001e08:	dfc00317 	ldw	ra,12(sp)
 1001e0c:	dc800217 	ldw	r18,8(sp)
 1001e10:	dc400117 	ldw	r17,4(sp)
 1001e14:	dc000017 	ldw	r16,0(sp)
 1001e18:	dec00404 	addi	sp,sp,16
 1001e1c:	f800283a 	ret

01001e20 <__sfp>:
 1001e20:	defffd04 	addi	sp,sp,-12
 1001e24:	00804074 	movhi	r2,257
 1001e28:	10a6bc04 	addi	r2,r2,-25872
 1001e2c:	dc000015 	stw	r16,0(sp)
 1001e30:	14000017 	ldw	r16,0(r2)
 1001e34:	dc400115 	stw	r17,4(sp)
 1001e38:	dfc00215 	stw	ra,8(sp)
 1001e3c:	80800e17 	ldw	r2,56(r16)
 1001e40:	2023883a 	mov	r17,r4
 1001e44:	10002626 	beq	r2,zero,1001ee0 <__sfp+0xc0>
 1001e48:	8400b804 	addi	r16,r16,736
 1001e4c:	80800117 	ldw	r2,4(r16)
 1001e50:	81000217 	ldw	r4,8(r16)
 1001e54:	10ffffc4 	addi	r3,r2,-1
 1001e58:	18000916 	blt	r3,zero,1001e80 <__sfp+0x60>
 1001e5c:	2080030f 	ldh	r2,12(r4)
 1001e60:	10000b26 	beq	r2,zero,1001e90 <__sfp+0x70>
 1001e64:	017fffc4 	movi	r5,-1
 1001e68:	00000206 	br	1001e74 <__sfp+0x54>
 1001e6c:	2080030f 	ldh	r2,12(r4)
 1001e70:	10000726 	beq	r2,zero,1001e90 <__sfp+0x70>
 1001e74:	18ffffc4 	addi	r3,r3,-1
 1001e78:	21001704 	addi	r4,r4,92
 1001e7c:	197ffb1e 	bne	r3,r5,1001e6c <__sfp+0x4c>
 1001e80:	80800017 	ldw	r2,0(r16)
 1001e84:	10001926 	beq	r2,zero,1001eec <__sfp+0xcc>
 1001e88:	1021883a 	mov	r16,r2
 1001e8c:	003fef06 	br	1001e4c <__sfp+0x2c>
 1001e90:	00bfffc4 	movi	r2,-1
 1001e94:	00c00044 	movi	r3,1
 1001e98:	2080038d 	sth	r2,14(r4)
 1001e9c:	20c0030d 	sth	r3,12(r4)
 1001ea0:	20000015 	stw	zero,0(r4)
 1001ea4:	20000215 	stw	zero,8(r4)
 1001ea8:	20000115 	stw	zero,4(r4)
 1001eac:	20000415 	stw	zero,16(r4)
 1001eb0:	20000515 	stw	zero,20(r4)
 1001eb4:	20000615 	stw	zero,24(r4)
 1001eb8:	20000c15 	stw	zero,48(r4)
 1001ebc:	20000d15 	stw	zero,52(r4)
 1001ec0:	20001115 	stw	zero,68(r4)
 1001ec4:	20001215 	stw	zero,72(r4)
 1001ec8:	2005883a 	mov	r2,r4
 1001ecc:	dfc00217 	ldw	ra,8(sp)
 1001ed0:	dc400117 	ldw	r17,4(sp)
 1001ed4:	dc000017 	ldw	r16,0(sp)
 1001ed8:	dec00304 	addi	sp,sp,12
 1001edc:	f800283a 	ret
 1001ee0:	8009883a 	mov	r4,r16
 1001ee4:	1001cb80 	call	1001cb8 <__sinit>
 1001ee8:	003fd706 	br	1001e48 <__sfp+0x28>
 1001eec:	8809883a 	mov	r4,r17
 1001ef0:	01400104 	movi	r5,4
 1001ef4:	1001db80 	call	1001db8 <__sfmoreglue>
 1001ef8:	80800015 	stw	r2,0(r16)
 1001efc:	103fe21e 	bne	r2,zero,1001e88 <__sfp+0x68>
 1001f00:	00800304 	movi	r2,12
 1001f04:	0009883a 	mov	r4,zero
 1001f08:	88800015 	stw	r2,0(r17)
 1001f0c:	003fee06 	br	1001ec8 <__sfp+0xa8>

01001f10 <_malloc_trim_r>:
 1001f10:	defffb04 	addi	sp,sp,-20
 1001f14:	dcc00315 	stw	r19,12(sp)
 1001f18:	04c04074 	movhi	r19,257
 1001f1c:	9ce0e004 	addi	r19,r19,-31872
 1001f20:	dc800215 	stw	r18,8(sp)
 1001f24:	dc400115 	stw	r17,4(sp)
 1001f28:	dc000015 	stw	r16,0(sp)
 1001f2c:	2823883a 	mov	r17,r5
 1001f30:	2025883a 	mov	r18,r4
 1001f34:	dfc00415 	stw	ra,16(sp)
 1001f38:	10032ac0 	call	10032ac <__malloc_lock>
 1001f3c:	98800217 	ldw	r2,8(r19)
 1001f40:	9009883a 	mov	r4,r18
 1001f44:	000b883a 	mov	r5,zero
 1001f48:	10c00117 	ldw	r3,4(r2)
 1001f4c:	00bfff04 	movi	r2,-4
 1001f50:	18a0703a 	and	r16,r3,r2
 1001f54:	8463c83a 	sub	r17,r16,r17
 1001f58:	8c43fbc4 	addi	r17,r17,4079
 1001f5c:	8822d33a 	srli	r17,r17,12
 1001f60:	0083ffc4 	movi	r2,4095
 1001f64:	8c7fffc4 	addi	r17,r17,-1
 1001f68:	8822933a 	slli	r17,r17,12
 1001f6c:	1440060e 	bge	r2,r17,1001f88 <_malloc_trim_r+0x78>
 1001f70:	10018740 	call	1001874 <_sbrk_r>
 1001f74:	98c00217 	ldw	r3,8(r19)
 1001f78:	9009883a 	mov	r4,r18
 1001f7c:	044bc83a 	sub	r5,zero,r17
 1001f80:	80c7883a 	add	r3,r16,r3
 1001f84:	10c00926 	beq	r2,r3,1001fac <_malloc_trim_r+0x9c>
 1001f88:	10032cc0 	call	10032cc <__malloc_unlock>
 1001f8c:	0005883a 	mov	r2,zero
 1001f90:	dfc00417 	ldw	ra,16(sp)
 1001f94:	dcc00317 	ldw	r19,12(sp)
 1001f98:	dc800217 	ldw	r18,8(sp)
 1001f9c:	dc400117 	ldw	r17,4(sp)
 1001fa0:	dc000017 	ldw	r16,0(sp)
 1001fa4:	dec00504 	addi	sp,sp,20
 1001fa8:	f800283a 	ret
 1001fac:	9009883a 	mov	r4,r18
 1001fb0:	10018740 	call	1001874 <_sbrk_r>
 1001fb4:	844dc83a 	sub	r6,r16,r17
 1001fb8:	00ffffc4 	movi	r3,-1
 1001fbc:	9009883a 	mov	r4,r18
 1001fc0:	000b883a 	mov	r5,zero
 1001fc4:	01c04074 	movhi	r7,257
 1001fc8:	39edbc04 	addi	r7,r7,-18704
 1001fcc:	31800054 	ori	r6,r6,1
 1001fd0:	10c00926 	beq	r2,r3,1001ff8 <_malloc_trim_r+0xe8>
 1001fd4:	38800017 	ldw	r2,0(r7)
 1001fd8:	98c00217 	ldw	r3,8(r19)
 1001fdc:	9009883a 	mov	r4,r18
 1001fe0:	1445c83a 	sub	r2,r2,r17
 1001fe4:	38800015 	stw	r2,0(r7)
 1001fe8:	19800115 	stw	r6,4(r3)
 1001fec:	10032cc0 	call	10032cc <__malloc_unlock>
 1001ff0:	00800044 	movi	r2,1
 1001ff4:	003fe606 	br	1001f90 <_malloc_trim_r+0x80>
 1001ff8:	10018740 	call	1001874 <_sbrk_r>
 1001ffc:	99800217 	ldw	r6,8(r19)
 1002000:	100f883a 	mov	r7,r2
 1002004:	9009883a 	mov	r4,r18
 1002008:	1187c83a 	sub	r3,r2,r6
 100200c:	008003c4 	movi	r2,15
 1002010:	19400054 	ori	r5,r3,1
 1002014:	10ffdc0e 	bge	r2,r3,1001f88 <_malloc_trim_r+0x78>
 1002018:	00804074 	movhi	r2,257
 100201c:	10a6be04 	addi	r2,r2,-25864
 1002020:	10c00017 	ldw	r3,0(r2)
 1002024:	00804074 	movhi	r2,257
 1002028:	10adbc04 	addi	r2,r2,-18704
 100202c:	31400115 	stw	r5,4(r6)
 1002030:	38c7c83a 	sub	r3,r7,r3
 1002034:	10c00015 	stw	r3,0(r2)
 1002038:	003fd306 	br	1001f88 <_malloc_trim_r+0x78>

0100203c <_free_r>:
 100203c:	defffd04 	addi	sp,sp,-12
 1002040:	dc400115 	stw	r17,4(sp)
 1002044:	dc000015 	stw	r16,0(sp)
 1002048:	dfc00215 	stw	ra,8(sp)
 100204c:	2821883a 	mov	r16,r5
 1002050:	2023883a 	mov	r17,r4
 1002054:	28005a26 	beq	r5,zero,10021c0 <_free_r+0x184>
 1002058:	10032ac0 	call	10032ac <__malloc_lock>
 100205c:	823ffe04 	addi	r8,r16,-8
 1002060:	41400117 	ldw	r5,4(r8)
 1002064:	00bfff84 	movi	r2,-2
 1002068:	02804074 	movhi	r10,257
 100206c:	52a0e004 	addi	r10,r10,-31872
 1002070:	288e703a 	and	r7,r5,r2
 1002074:	41cd883a 	add	r6,r8,r7
 1002078:	30c00117 	ldw	r3,4(r6)
 100207c:	51000217 	ldw	r4,8(r10)
 1002080:	00bfff04 	movi	r2,-4
 1002084:	1892703a 	and	r9,r3,r2
 1002088:	5017883a 	mov	r11,r10
 100208c:	31006726 	beq	r6,r4,100222c <_free_r+0x1f0>
 1002090:	2880004c 	andi	r2,r5,1
 1002094:	1005003a 	cmpeq	r2,r2,zero
 1002098:	32400115 	stw	r9,4(r6)
 100209c:	10001a1e 	bne	r2,zero,1002108 <_free_r+0xcc>
 10020a0:	000b883a 	mov	r5,zero
 10020a4:	3247883a 	add	r3,r6,r9
 10020a8:	18800117 	ldw	r2,4(r3)
 10020ac:	1080004c 	andi	r2,r2,1
 10020b0:	1000231e 	bne	r2,zero,1002140 <_free_r+0x104>
 10020b4:	280ac03a 	cmpne	r5,r5,zero
 10020b8:	3a4f883a 	add	r7,r7,r9
 10020bc:	2800451e 	bne	r5,zero,10021d4 <_free_r+0x198>
 10020c0:	31000217 	ldw	r4,8(r6)
 10020c4:	00804074 	movhi	r2,257
 10020c8:	10a0e204 	addi	r2,r2,-31864
 10020cc:	20807b26 	beq	r4,r2,10022bc <_free_r+0x280>
 10020d0:	30800317 	ldw	r2,12(r6)
 10020d4:	3a07883a 	add	r3,r7,r8
 10020d8:	19c00015 	stw	r7,0(r3)
 10020dc:	11000215 	stw	r4,8(r2)
 10020e0:	20800315 	stw	r2,12(r4)
 10020e4:	38800054 	ori	r2,r7,1
 10020e8:	40800115 	stw	r2,4(r8)
 10020ec:	28001a26 	beq	r5,zero,1002158 <_free_r+0x11c>
 10020f0:	8809883a 	mov	r4,r17
 10020f4:	dfc00217 	ldw	ra,8(sp)
 10020f8:	dc400117 	ldw	r17,4(sp)
 10020fc:	dc000017 	ldw	r16,0(sp)
 1002100:	dec00304 	addi	sp,sp,12
 1002104:	10032cc1 	jmpi	10032cc <__malloc_unlock>
 1002108:	80bffe17 	ldw	r2,-8(r16)
 100210c:	50c00204 	addi	r3,r10,8
 1002110:	4091c83a 	sub	r8,r8,r2
 1002114:	41000217 	ldw	r4,8(r8)
 1002118:	388f883a 	add	r7,r7,r2
 100211c:	20c06126 	beq	r4,r3,10022a4 <_free_r+0x268>
 1002120:	40800317 	ldw	r2,12(r8)
 1002124:	3247883a 	add	r3,r6,r9
 1002128:	000b883a 	mov	r5,zero
 100212c:	11000215 	stw	r4,8(r2)
 1002130:	20800315 	stw	r2,12(r4)
 1002134:	18800117 	ldw	r2,4(r3)
 1002138:	1080004c 	andi	r2,r2,1
 100213c:	103fdd26 	beq	r2,zero,10020b4 <_free_r+0x78>
 1002140:	38800054 	ori	r2,r7,1
 1002144:	3a07883a 	add	r3,r7,r8
 1002148:	280ac03a 	cmpne	r5,r5,zero
 100214c:	40800115 	stw	r2,4(r8)
 1002150:	19c00015 	stw	r7,0(r3)
 1002154:	283fe61e 	bne	r5,zero,10020f0 <_free_r+0xb4>
 1002158:	00807fc4 	movi	r2,511
 100215c:	11c01f2e 	bgeu	r2,r7,10021dc <_free_r+0x1a0>
 1002160:	3806d27a 	srli	r3,r7,9
 1002164:	1800481e 	bne	r3,zero,1002288 <_free_r+0x24c>
 1002168:	3804d0fa 	srli	r2,r7,3
 100216c:	100690fa 	slli	r3,r2,3
 1002170:	1acd883a 	add	r6,r3,r11
 1002174:	31400217 	ldw	r5,8(r6)
 1002178:	31405926 	beq	r6,r5,10022e0 <_free_r+0x2a4>
 100217c:	28800117 	ldw	r2,4(r5)
 1002180:	00ffff04 	movi	r3,-4
 1002184:	10c4703a 	and	r2,r2,r3
 1002188:	3880022e 	bgeu	r7,r2,1002194 <_free_r+0x158>
 100218c:	29400217 	ldw	r5,8(r5)
 1002190:	317ffa1e 	bne	r6,r5,100217c <_free_r+0x140>
 1002194:	29800317 	ldw	r6,12(r5)
 1002198:	41800315 	stw	r6,12(r8)
 100219c:	41400215 	stw	r5,8(r8)
 10021a0:	8809883a 	mov	r4,r17
 10021a4:	2a000315 	stw	r8,12(r5)
 10021a8:	32000215 	stw	r8,8(r6)
 10021ac:	dfc00217 	ldw	ra,8(sp)
 10021b0:	dc400117 	ldw	r17,4(sp)
 10021b4:	dc000017 	ldw	r16,0(sp)
 10021b8:	dec00304 	addi	sp,sp,12
 10021bc:	10032cc1 	jmpi	10032cc <__malloc_unlock>
 10021c0:	dfc00217 	ldw	ra,8(sp)
 10021c4:	dc400117 	ldw	r17,4(sp)
 10021c8:	dc000017 	ldw	r16,0(sp)
 10021cc:	dec00304 	addi	sp,sp,12
 10021d0:	f800283a 	ret
 10021d4:	31000217 	ldw	r4,8(r6)
 10021d8:	003fbd06 	br	10020d0 <_free_r+0x94>
 10021dc:	3806d0fa 	srli	r3,r7,3
 10021e0:	00800044 	movi	r2,1
 10021e4:	51400117 	ldw	r5,4(r10)
 10021e8:	180890fa 	slli	r4,r3,3
 10021ec:	1807d0ba 	srai	r3,r3,2
 10021f0:	22c9883a 	add	r4,r4,r11
 10021f4:	21800217 	ldw	r6,8(r4)
 10021f8:	10c4983a 	sll	r2,r2,r3
 10021fc:	41000315 	stw	r4,12(r8)
 1002200:	41800215 	stw	r6,8(r8)
 1002204:	288ab03a 	or	r5,r5,r2
 1002208:	22000215 	stw	r8,8(r4)
 100220c:	8809883a 	mov	r4,r17
 1002210:	51400115 	stw	r5,4(r10)
 1002214:	32000315 	stw	r8,12(r6)
 1002218:	dfc00217 	ldw	ra,8(sp)
 100221c:	dc400117 	ldw	r17,4(sp)
 1002220:	dc000017 	ldw	r16,0(sp)
 1002224:	dec00304 	addi	sp,sp,12
 1002228:	10032cc1 	jmpi	10032cc <__malloc_unlock>
 100222c:	2880004c 	andi	r2,r5,1
 1002230:	3a4d883a 	add	r6,r7,r9
 1002234:	1000071e 	bne	r2,zero,1002254 <_free_r+0x218>
 1002238:	80bffe17 	ldw	r2,-8(r16)
 100223c:	4091c83a 	sub	r8,r8,r2
 1002240:	41000317 	ldw	r4,12(r8)
 1002244:	40c00217 	ldw	r3,8(r8)
 1002248:	308d883a 	add	r6,r6,r2
 100224c:	20c00215 	stw	r3,8(r4)
 1002250:	19000315 	stw	r4,12(r3)
 1002254:	00804074 	movhi	r2,257
 1002258:	10a6bd04 	addi	r2,r2,-25868
 100225c:	11000017 	ldw	r4,0(r2)
 1002260:	30c00054 	ori	r3,r6,1
 1002264:	52000215 	stw	r8,8(r10)
 1002268:	40c00115 	stw	r3,4(r8)
 100226c:	313fa036 	bltu	r6,r4,10020f0 <_free_r+0xb4>
 1002270:	00804074 	movhi	r2,257
 1002274:	10adb204 	addi	r2,r2,-18744
 1002278:	11400017 	ldw	r5,0(r2)
 100227c:	8809883a 	mov	r4,r17
 1002280:	1001f100 	call	1001f10 <_malloc_trim_r>
 1002284:	003f9a06 	br	10020f0 <_free_r+0xb4>
 1002288:	00800104 	movi	r2,4
 100228c:	10c0072e 	bgeu	r2,r3,10022ac <_free_r+0x270>
 1002290:	00800504 	movi	r2,20
 1002294:	10c01936 	bltu	r2,r3,10022fc <_free_r+0x2c0>
 1002298:	188016c4 	addi	r2,r3,91
 100229c:	100690fa 	slli	r3,r2,3
 10022a0:	003fb306 	br	1002170 <_free_r+0x134>
 10022a4:	01400044 	movi	r5,1
 10022a8:	003f7e06 	br	10020a4 <_free_r+0x68>
 10022ac:	3804d1ba 	srli	r2,r7,6
 10022b0:	10800e04 	addi	r2,r2,56
 10022b4:	100690fa 	slli	r3,r2,3
 10022b8:	003fad06 	br	1002170 <_free_r+0x134>
 10022bc:	22000315 	stw	r8,12(r4)
 10022c0:	22000215 	stw	r8,8(r4)
 10022c4:	3a05883a 	add	r2,r7,r8
 10022c8:	38c00054 	ori	r3,r7,1
 10022cc:	11c00015 	stw	r7,0(r2)
 10022d0:	41000215 	stw	r4,8(r8)
 10022d4:	40c00115 	stw	r3,4(r8)
 10022d8:	41000315 	stw	r4,12(r8)
 10022dc:	003f8406 	br	10020f0 <_free_r+0xb4>
 10022e0:	1005d0ba 	srai	r2,r2,2
 10022e4:	00c00044 	movi	r3,1
 10022e8:	51000117 	ldw	r4,4(r10)
 10022ec:	1886983a 	sll	r3,r3,r2
 10022f0:	20c8b03a 	or	r4,r4,r3
 10022f4:	51000115 	stw	r4,4(r10)
 10022f8:	003fa706 	br	1002198 <_free_r+0x15c>
 10022fc:	00801504 	movi	r2,84
 1002300:	10c00436 	bltu	r2,r3,1002314 <_free_r+0x2d8>
 1002304:	3804d33a 	srli	r2,r7,12
 1002308:	10801b84 	addi	r2,r2,110
 100230c:	100690fa 	slli	r3,r2,3
 1002310:	003f9706 	br	1002170 <_free_r+0x134>
 1002314:	00805504 	movi	r2,340
 1002318:	10c00436 	bltu	r2,r3,100232c <_free_r+0x2f0>
 100231c:	3804d3fa 	srli	r2,r7,15
 1002320:	10801dc4 	addi	r2,r2,119
 1002324:	100690fa 	slli	r3,r2,3
 1002328:	003f9106 	br	1002170 <_free_r+0x134>
 100232c:	00815504 	movi	r2,1364
 1002330:	10c0032e 	bgeu	r2,r3,1002340 <_free_r+0x304>
 1002334:	00801f84 	movi	r2,126
 1002338:	00c0fc04 	movi	r3,1008
 100233c:	003f8c06 	br	1002170 <_free_r+0x134>
 1002340:	3804d4ba 	srli	r2,r7,18
 1002344:	10801f04 	addi	r2,r2,124
 1002348:	100690fa 	slli	r3,r2,3
 100234c:	003f8806 	br	1002170 <_free_r+0x134>

01002350 <_fwalk_reent>:
 1002350:	defff704 	addi	sp,sp,-36
 1002354:	dcc00315 	stw	r19,12(sp)
 1002358:	24c0b804 	addi	r19,r4,736
 100235c:	dd800615 	stw	r22,24(sp)
 1002360:	dd400515 	stw	r21,20(sp)
 1002364:	dfc00815 	stw	ra,32(sp)
 1002368:	ddc00715 	stw	r23,28(sp)
 100236c:	dd000415 	stw	r20,16(sp)
 1002370:	dc800215 	stw	r18,8(sp)
 1002374:	dc400115 	stw	r17,4(sp)
 1002378:	dc000015 	stw	r16,0(sp)
 100237c:	202b883a 	mov	r21,r4
 1002380:	282d883a 	mov	r22,r5
 1002384:	1001ca80 	call	1001ca8 <__sfp_lock_acquire>
 1002388:	98002126 	beq	r19,zero,1002410 <_fwalk_reent+0xc0>
 100238c:	002f883a 	mov	r23,zero
 1002390:	9c800117 	ldw	r18,4(r19)
 1002394:	9c000217 	ldw	r16,8(r19)
 1002398:	90bfffc4 	addi	r2,r18,-1
 100239c:	10000d16 	blt	r2,zero,10023d4 <_fwalk_reent+0x84>
 10023a0:	0023883a 	mov	r17,zero
 10023a4:	053fffc4 	movi	r20,-1
 10023a8:	8080030f 	ldh	r2,12(r16)
 10023ac:	8c400044 	addi	r17,r17,1
 10023b0:	10000626 	beq	r2,zero,10023cc <_fwalk_reent+0x7c>
 10023b4:	8080038f 	ldh	r2,14(r16)
 10023b8:	800b883a 	mov	r5,r16
 10023bc:	a809883a 	mov	r4,r21
 10023c0:	15000226 	beq	r2,r20,10023cc <_fwalk_reent+0x7c>
 10023c4:	b03ee83a 	callr	r22
 10023c8:	b8aeb03a 	or	r23,r23,r2
 10023cc:	84001704 	addi	r16,r16,92
 10023d0:	947ff51e 	bne	r18,r17,10023a8 <_fwalk_reent+0x58>
 10023d4:	9cc00017 	ldw	r19,0(r19)
 10023d8:	983fed1e 	bne	r19,zero,1002390 <_fwalk_reent+0x40>
 10023dc:	1001cac0 	call	1001cac <__sfp_lock_release>
 10023e0:	b805883a 	mov	r2,r23
 10023e4:	dfc00817 	ldw	ra,32(sp)
 10023e8:	ddc00717 	ldw	r23,28(sp)
 10023ec:	dd800617 	ldw	r22,24(sp)
 10023f0:	dd400517 	ldw	r21,20(sp)
 10023f4:	dd000417 	ldw	r20,16(sp)
 10023f8:	dcc00317 	ldw	r19,12(sp)
 10023fc:	dc800217 	ldw	r18,8(sp)
 1002400:	dc400117 	ldw	r17,4(sp)
 1002404:	dc000017 	ldw	r16,0(sp)
 1002408:	dec00904 	addi	sp,sp,36
 100240c:	f800283a 	ret
 1002410:	002f883a 	mov	r23,zero
 1002414:	003ff106 	br	10023dc <_fwalk_reent+0x8c>

01002418 <_fwalk>:
 1002418:	defff804 	addi	sp,sp,-32
 100241c:	dcc00315 	stw	r19,12(sp)
 1002420:	24c0b804 	addi	r19,r4,736
 1002424:	dd400515 	stw	r21,20(sp)
 1002428:	dfc00715 	stw	ra,28(sp)
 100242c:	dd800615 	stw	r22,24(sp)
 1002430:	dd000415 	stw	r20,16(sp)
 1002434:	dc800215 	stw	r18,8(sp)
 1002438:	dc400115 	stw	r17,4(sp)
 100243c:	dc000015 	stw	r16,0(sp)
 1002440:	282b883a 	mov	r21,r5
 1002444:	1001ca80 	call	1001ca8 <__sfp_lock_acquire>
 1002448:	98001f26 	beq	r19,zero,10024c8 <_fwalk+0xb0>
 100244c:	002d883a 	mov	r22,zero
 1002450:	9c800117 	ldw	r18,4(r19)
 1002454:	9c000217 	ldw	r16,8(r19)
 1002458:	90bfffc4 	addi	r2,r18,-1
 100245c:	10000c16 	blt	r2,zero,1002490 <_fwalk+0x78>
 1002460:	0023883a 	mov	r17,zero
 1002464:	053fffc4 	movi	r20,-1
 1002468:	8080030f 	ldh	r2,12(r16)
 100246c:	8c400044 	addi	r17,r17,1
 1002470:	10000526 	beq	r2,zero,1002488 <_fwalk+0x70>
 1002474:	8080038f 	ldh	r2,14(r16)
 1002478:	8009883a 	mov	r4,r16
 100247c:	15000226 	beq	r2,r20,1002488 <_fwalk+0x70>
 1002480:	a83ee83a 	callr	r21
 1002484:	b0acb03a 	or	r22,r22,r2
 1002488:	84001704 	addi	r16,r16,92
 100248c:	947ff61e 	bne	r18,r17,1002468 <_fwalk+0x50>
 1002490:	9cc00017 	ldw	r19,0(r19)
 1002494:	983fee1e 	bne	r19,zero,1002450 <_fwalk+0x38>
 1002498:	1001cac0 	call	1001cac <__sfp_lock_release>
 100249c:	b005883a 	mov	r2,r22
 10024a0:	dfc00717 	ldw	ra,28(sp)
 10024a4:	dd800617 	ldw	r22,24(sp)
 10024a8:	dd400517 	ldw	r21,20(sp)
 10024ac:	dd000417 	ldw	r20,16(sp)
 10024b0:	dcc00317 	ldw	r19,12(sp)
 10024b4:	dc800217 	ldw	r18,8(sp)
 10024b8:	dc400117 	ldw	r17,4(sp)
 10024bc:	dc000017 	ldw	r16,0(sp)
 10024c0:	dec00804 	addi	sp,sp,32
 10024c4:	f800283a 	ret
 10024c8:	002d883a 	mov	r22,zero
 10024cc:	003ff206 	br	1002498 <_fwalk+0x80>

010024d0 <__smakebuf_r>:
 10024d0:	2880030b 	ldhu	r2,12(r5)
 10024d4:	deffed04 	addi	sp,sp,-76
 10024d8:	dc401015 	stw	r17,64(sp)
 10024dc:	1080008c 	andi	r2,r2,2
 10024e0:	dc000f15 	stw	r16,60(sp)
 10024e4:	dfc01215 	stw	ra,72(sp)
 10024e8:	dc801115 	stw	r18,68(sp)
 10024ec:	2821883a 	mov	r16,r5
 10024f0:	2023883a 	mov	r17,r4
 10024f4:	10000b26 	beq	r2,zero,1002524 <__smakebuf_r+0x54>
 10024f8:	28c010c4 	addi	r3,r5,67
 10024fc:	00800044 	movi	r2,1
 1002500:	28800515 	stw	r2,20(r5)
 1002504:	28c00415 	stw	r3,16(r5)
 1002508:	28c00015 	stw	r3,0(r5)
 100250c:	dfc01217 	ldw	ra,72(sp)
 1002510:	dc801117 	ldw	r18,68(sp)
 1002514:	dc401017 	ldw	r17,64(sp)
 1002518:	dc000f17 	ldw	r16,60(sp)
 100251c:	dec01304 	addi	sp,sp,76
 1002520:	f800283a 	ret
 1002524:	2940038f 	ldh	r5,14(r5)
 1002528:	28002116 	blt	r5,zero,10025b0 <__smakebuf_r+0xe0>
 100252c:	d80d883a 	mov	r6,sp
 1002530:	1002a540 	call	1002a54 <_fstat_r>
 1002534:	10001e16 	blt	r2,zero,10025b0 <__smakebuf_r+0xe0>
 1002538:	d8800117 	ldw	r2,4(sp)
 100253c:	00e00014 	movui	r3,32768
 1002540:	113c000c 	andi	r4,r2,61440
 1002544:	20c03126 	beq	r4,r3,100260c <__smakebuf_r+0x13c>
 1002548:	8080030b 	ldhu	r2,12(r16)
 100254c:	00c80004 	movi	r3,8192
 1002550:	10820014 	ori	r2,r2,2048
 1002554:	8080030d 	sth	r2,12(r16)
 1002558:	20c01e26 	beq	r4,r3,10025d4 <__smakebuf_r+0x104>
 100255c:	04810004 	movi	r18,1024
 1002560:	8809883a 	mov	r4,r17
 1002564:	900b883a 	mov	r5,r18
 1002568:	10008dc0 	call	10008dc <_malloc_r>
 100256c:	1009883a 	mov	r4,r2
 1002570:	10003126 	beq	r2,zero,1002638 <__smakebuf_r+0x168>
 1002574:	80c0030b 	ldhu	r3,12(r16)
 1002578:	00804034 	movhi	r2,256
 100257c:	10876704 	addi	r2,r2,7580
 1002580:	88800f15 	stw	r2,60(r17)
 1002584:	18c02014 	ori	r3,r3,128
 1002588:	84800515 	stw	r18,20(r16)
 100258c:	80c0030d 	sth	r3,12(r16)
 1002590:	81000415 	stw	r4,16(r16)
 1002594:	81000015 	stw	r4,0(r16)
 1002598:	dfc01217 	ldw	ra,72(sp)
 100259c:	dc801117 	ldw	r18,68(sp)
 10025a0:	dc401017 	ldw	r17,64(sp)
 10025a4:	dc000f17 	ldw	r16,60(sp)
 10025a8:	dec01304 	addi	sp,sp,76
 10025ac:	f800283a 	ret
 10025b0:	80c0030b 	ldhu	r3,12(r16)
 10025b4:	1880200c 	andi	r2,r3,128
 10025b8:	10000426 	beq	r2,zero,10025cc <__smakebuf_r+0xfc>
 10025bc:	04801004 	movi	r18,64
 10025c0:	18820014 	ori	r2,r3,2048
 10025c4:	8080030d 	sth	r2,12(r16)
 10025c8:	003fe506 	br	1002560 <__smakebuf_r+0x90>
 10025cc:	04810004 	movi	r18,1024
 10025d0:	003ffb06 	br	10025c0 <__smakebuf_r+0xf0>
 10025d4:	8140038f 	ldh	r5,14(r16)
 10025d8:	8809883a 	mov	r4,r17
 10025dc:	1002ac80 	call	1002ac8 <_isatty_r>
 10025e0:	103fde26 	beq	r2,zero,100255c <__smakebuf_r+0x8c>
 10025e4:	8080030b 	ldhu	r2,12(r16)
 10025e8:	80c010c4 	addi	r3,r16,67
 10025ec:	04810004 	movi	r18,1024
 10025f0:	10800054 	ori	r2,r2,1
 10025f4:	8080030d 	sth	r2,12(r16)
 10025f8:	00800044 	movi	r2,1
 10025fc:	80c00415 	stw	r3,16(r16)
 1002600:	80800515 	stw	r2,20(r16)
 1002604:	80c00015 	stw	r3,0(r16)
 1002608:	003fd506 	br	1002560 <__smakebuf_r+0x90>
 100260c:	80c00a17 	ldw	r3,40(r16)
 1002610:	00804034 	movhi	r2,256
 1002614:	1089c104 	addi	r2,r2,9988
 1002618:	18bfcb1e 	bne	r3,r2,1002548 <__smakebuf_r+0x78>
 100261c:	8080030b 	ldhu	r2,12(r16)
 1002620:	00c10004 	movi	r3,1024
 1002624:	1825883a 	mov	r18,r3
 1002628:	10c4b03a 	or	r2,r2,r3
 100262c:	8080030d 	sth	r2,12(r16)
 1002630:	80c01315 	stw	r3,76(r16)
 1002634:	003fca06 	br	1002560 <__smakebuf_r+0x90>
 1002638:	8100030b 	ldhu	r4,12(r16)
 100263c:	2080800c 	andi	r2,r4,512
 1002640:	103fb21e 	bne	r2,zero,100250c <__smakebuf_r+0x3c>
 1002644:	80c010c4 	addi	r3,r16,67
 1002648:	21000094 	ori	r4,r4,2
 100264c:	00800044 	movi	r2,1
 1002650:	80800515 	stw	r2,20(r16)
 1002654:	8100030d 	sth	r4,12(r16)
 1002658:	80c00415 	stw	r3,16(r16)
 100265c:	80c00015 	stw	r3,0(r16)
 1002660:	003faa06 	br	100250c <__smakebuf_r+0x3c>

01002664 <memset>:
 1002664:	008000c4 	movi	r2,3
 1002668:	29403fcc 	andi	r5,r5,255
 100266c:	2007883a 	mov	r3,r4
 1002670:	1180022e 	bgeu	r2,r6,100267c <memset+0x18>
 1002674:	2084703a 	and	r2,r4,r2
 1002678:	10000826 	beq	r2,zero,100269c <memset+0x38>
 100267c:	30000526 	beq	r6,zero,1002694 <memset+0x30>
 1002680:	2805883a 	mov	r2,r5
 1002684:	30cd883a 	add	r6,r6,r3
 1002688:	18800005 	stb	r2,0(r3)
 100268c:	18c00044 	addi	r3,r3,1
 1002690:	19bffd1e 	bne	r3,r6,1002688 <memset+0x24>
 1002694:	2005883a 	mov	r2,r4
 1002698:	f800283a 	ret
 100269c:	2804923a 	slli	r2,r5,8
 10026a0:	020003c4 	movi	r8,15
 10026a4:	200f883a 	mov	r7,r4
 10026a8:	2884b03a 	or	r2,r5,r2
 10026ac:	1006943a 	slli	r3,r2,16
 10026b0:	10c6b03a 	or	r3,r2,r3
 10026b4:	41800a2e 	bgeu	r8,r6,10026e0 <memset+0x7c>
 10026b8:	4005883a 	mov	r2,r8
 10026bc:	31bffc04 	addi	r6,r6,-16
 10026c0:	38c00015 	stw	r3,0(r7)
 10026c4:	38c00115 	stw	r3,4(r7)
 10026c8:	38c00215 	stw	r3,8(r7)
 10026cc:	38c00315 	stw	r3,12(r7)
 10026d0:	39c00404 	addi	r7,r7,16
 10026d4:	11bff936 	bltu	r2,r6,10026bc <memset+0x58>
 10026d8:	008000c4 	movi	r2,3
 10026dc:	1180052e 	bgeu	r2,r6,10026f4 <memset+0x90>
 10026e0:	31bfff04 	addi	r6,r6,-4
 10026e4:	008000c4 	movi	r2,3
 10026e8:	38c00015 	stw	r3,0(r7)
 10026ec:	39c00104 	addi	r7,r7,4
 10026f0:	11bffb36 	bltu	r2,r6,10026e0 <memset+0x7c>
 10026f4:	3807883a 	mov	r3,r7
 10026f8:	003fe006 	br	100267c <memset+0x18>

010026fc <__sclose>:
 10026fc:	2940038f 	ldh	r5,14(r5)
 1002700:	10028c01 	jmpi	10028c0 <_close_r>

01002704 <__sseek>:
 1002704:	defffe04 	addi	sp,sp,-8
 1002708:	dc000015 	stw	r16,0(sp)
 100270c:	2821883a 	mov	r16,r5
 1002710:	2940038f 	ldh	r5,14(r5)
 1002714:	dfc00115 	stw	ra,4(sp)
 1002718:	1002b380 	call	1002b38 <_lseek_r>
 100271c:	1007883a 	mov	r3,r2
 1002720:	00bfffc4 	movi	r2,-1
 1002724:	18800926 	beq	r3,r2,100274c <__sseek+0x48>
 1002728:	8080030b 	ldhu	r2,12(r16)
 100272c:	80c01415 	stw	r3,80(r16)
 1002730:	10840014 	ori	r2,r2,4096
 1002734:	8080030d 	sth	r2,12(r16)
 1002738:	1805883a 	mov	r2,r3
 100273c:	dfc00117 	ldw	ra,4(sp)
 1002740:	dc000017 	ldw	r16,0(sp)
 1002744:	dec00204 	addi	sp,sp,8
 1002748:	f800283a 	ret
 100274c:	8080030b 	ldhu	r2,12(r16)
 1002750:	10bbffcc 	andi	r2,r2,61439
 1002754:	8080030d 	sth	r2,12(r16)
 1002758:	1805883a 	mov	r2,r3
 100275c:	dfc00117 	ldw	ra,4(sp)
 1002760:	dc000017 	ldw	r16,0(sp)
 1002764:	dec00204 	addi	sp,sp,8
 1002768:	f800283a 	ret

0100276c <__swrite>:
 100276c:	2880030b 	ldhu	r2,12(r5)
 1002770:	defffb04 	addi	sp,sp,-20
 1002774:	dcc00315 	stw	r19,12(sp)
 1002778:	1080400c 	andi	r2,r2,256
 100277c:	dc800215 	stw	r18,8(sp)
 1002780:	dc400115 	stw	r17,4(sp)
 1002784:	dc000015 	stw	r16,0(sp)
 1002788:	3027883a 	mov	r19,r6
 100278c:	3825883a 	mov	r18,r7
 1002790:	dfc00415 	stw	ra,16(sp)
 1002794:	2821883a 	mov	r16,r5
 1002798:	000d883a 	mov	r6,zero
 100279c:	01c00084 	movi	r7,2
 10027a0:	2023883a 	mov	r17,r4
 10027a4:	10000226 	beq	r2,zero,10027b0 <__swrite+0x44>
 10027a8:	2940038f 	ldh	r5,14(r5)
 10027ac:	1002b380 	call	1002b38 <_lseek_r>
 10027b0:	8080030b 	ldhu	r2,12(r16)
 10027b4:	8140038f 	ldh	r5,14(r16)
 10027b8:	8809883a 	mov	r4,r17
 10027bc:	10bbffcc 	andi	r2,r2,61439
 10027c0:	980d883a 	mov	r6,r19
 10027c4:	900f883a 	mov	r7,r18
 10027c8:	8080030d 	sth	r2,12(r16)
 10027cc:	dfc00417 	ldw	ra,16(sp)
 10027d0:	dcc00317 	ldw	r19,12(sp)
 10027d4:	dc800217 	ldw	r18,8(sp)
 10027d8:	dc400117 	ldw	r17,4(sp)
 10027dc:	dc000017 	ldw	r16,0(sp)
 10027e0:	dec00504 	addi	sp,sp,20
 10027e4:	10028481 	jmpi	1002848 <_write_r>

010027e8 <__sread>:
 10027e8:	defffe04 	addi	sp,sp,-8
 10027ec:	dc000015 	stw	r16,0(sp)
 10027f0:	2821883a 	mov	r16,r5
 10027f4:	2940038f 	ldh	r5,14(r5)
 10027f8:	dfc00115 	stw	ra,4(sp)
 10027fc:	1002bb00 	call	1002bb0 <_read_r>
 1002800:	1007883a 	mov	r3,r2
 1002804:	10000816 	blt	r2,zero,1002828 <__sread+0x40>
 1002808:	80801417 	ldw	r2,80(r16)
 100280c:	10c5883a 	add	r2,r2,r3
 1002810:	80801415 	stw	r2,80(r16)
 1002814:	1805883a 	mov	r2,r3
 1002818:	dfc00117 	ldw	ra,4(sp)
 100281c:	dc000017 	ldw	r16,0(sp)
 1002820:	dec00204 	addi	sp,sp,8
 1002824:	f800283a 	ret
 1002828:	8080030b 	ldhu	r2,12(r16)
 100282c:	10bbffcc 	andi	r2,r2,61439
 1002830:	8080030d 	sth	r2,12(r16)
 1002834:	1805883a 	mov	r2,r3
 1002838:	dfc00117 	ldw	ra,4(sp)
 100283c:	dc000017 	ldw	r16,0(sp)
 1002840:	dec00204 	addi	sp,sp,8
 1002844:	f800283a 	ret

01002848 <_write_r>:
 1002848:	defffd04 	addi	sp,sp,-12
 100284c:	dc000015 	stw	r16,0(sp)
 1002850:	04004074 	movhi	r16,257
 1002854:	842db504 	addi	r16,r16,-18732
 1002858:	dc400115 	stw	r17,4(sp)
 100285c:	80000015 	stw	zero,0(r16)
 1002860:	2023883a 	mov	r17,r4
 1002864:	2809883a 	mov	r4,r5
 1002868:	300b883a 	mov	r5,r6
 100286c:	380d883a 	mov	r6,r7
 1002870:	dfc00215 	stw	ra,8(sp)
 1002874:	10035880 	call	1003588 <write>
 1002878:	1007883a 	mov	r3,r2
 100287c:	00bfffc4 	movi	r2,-1
 1002880:	18800626 	beq	r3,r2,100289c <_write_r+0x54>
 1002884:	1805883a 	mov	r2,r3
 1002888:	dfc00217 	ldw	ra,8(sp)
 100288c:	dc400117 	ldw	r17,4(sp)
 1002890:	dc000017 	ldw	r16,0(sp)
 1002894:	dec00304 	addi	sp,sp,12
 1002898:	f800283a 	ret
 100289c:	80800017 	ldw	r2,0(r16)
 10028a0:	103ff826 	beq	r2,zero,1002884 <_write_r+0x3c>
 10028a4:	88800015 	stw	r2,0(r17)
 10028a8:	1805883a 	mov	r2,r3
 10028ac:	dfc00217 	ldw	ra,8(sp)
 10028b0:	dc400117 	ldw	r17,4(sp)
 10028b4:	dc000017 	ldw	r16,0(sp)
 10028b8:	dec00304 	addi	sp,sp,12
 10028bc:	f800283a 	ret

010028c0 <_close_r>:
 10028c0:	defffd04 	addi	sp,sp,-12
 10028c4:	dc000015 	stw	r16,0(sp)
 10028c8:	04004074 	movhi	r16,257
 10028cc:	842db504 	addi	r16,r16,-18732
 10028d0:	dc400115 	stw	r17,4(sp)
 10028d4:	80000015 	stw	zero,0(r16)
 10028d8:	2023883a 	mov	r17,r4
 10028dc:	2809883a 	mov	r4,r5
 10028e0:	dfc00215 	stw	ra,8(sp)
 10028e4:	1002c280 	call	1002c28 <close>
 10028e8:	1007883a 	mov	r3,r2
 10028ec:	00bfffc4 	movi	r2,-1
 10028f0:	18800626 	beq	r3,r2,100290c <_close_r+0x4c>
 10028f4:	1805883a 	mov	r2,r3
 10028f8:	dfc00217 	ldw	ra,8(sp)
 10028fc:	dc400117 	ldw	r17,4(sp)
 1002900:	dc000017 	ldw	r16,0(sp)
 1002904:	dec00304 	addi	sp,sp,12
 1002908:	f800283a 	ret
 100290c:	80800017 	ldw	r2,0(r16)
 1002910:	103ff826 	beq	r2,zero,10028f4 <_close_r+0x34>
 1002914:	88800015 	stw	r2,0(r17)
 1002918:	1805883a 	mov	r2,r3
 100291c:	dfc00217 	ldw	ra,8(sp)
 1002920:	dc400117 	ldw	r17,4(sp)
 1002924:	dc000017 	ldw	r16,0(sp)
 1002928:	dec00304 	addi	sp,sp,12
 100292c:	f800283a 	ret

01002930 <_fclose_r>:
 1002930:	defffc04 	addi	sp,sp,-16
 1002934:	dc400115 	stw	r17,4(sp)
 1002938:	dc000015 	stw	r16,0(sp)
 100293c:	dfc00315 	stw	ra,12(sp)
 1002940:	dc800215 	stw	r18,8(sp)
 1002944:	2821883a 	mov	r16,r5
 1002948:	2023883a 	mov	r17,r4
 100294c:	28002926 	beq	r5,zero,10029f4 <_fclose_r+0xc4>
 1002950:	1001ca80 	call	1001ca8 <__sfp_lock_acquire>
 1002954:	88000226 	beq	r17,zero,1002960 <_fclose_r+0x30>
 1002958:	88800e17 	ldw	r2,56(r17)
 100295c:	10002d26 	beq	r2,zero,1002a14 <_fclose_r+0xe4>
 1002960:	8080030f 	ldh	r2,12(r16)
 1002964:	10002226 	beq	r2,zero,10029f0 <_fclose_r+0xc0>
 1002968:	8809883a 	mov	r4,r17
 100296c:	800b883a 	mov	r5,r16
 1002970:	1001a200 	call	1001a20 <_fflush_r>
 1002974:	1025883a 	mov	r18,r2
 1002978:	80800b17 	ldw	r2,44(r16)
 100297c:	10000426 	beq	r2,zero,1002990 <_fclose_r+0x60>
 1002980:	81400717 	ldw	r5,28(r16)
 1002984:	8809883a 	mov	r4,r17
 1002988:	103ee83a 	callr	r2
 100298c:	10002a16 	blt	r2,zero,1002a38 <_fclose_r+0x108>
 1002990:	8080030b 	ldhu	r2,12(r16)
 1002994:	1080200c 	andi	r2,r2,128
 1002998:	1000231e 	bne	r2,zero,1002a28 <_fclose_r+0xf8>
 100299c:	81400c17 	ldw	r5,48(r16)
 10029a0:	28000526 	beq	r5,zero,10029b8 <_fclose_r+0x88>
 10029a4:	80801004 	addi	r2,r16,64
 10029a8:	28800226 	beq	r5,r2,10029b4 <_fclose_r+0x84>
 10029ac:	8809883a 	mov	r4,r17
 10029b0:	100203c0 	call	100203c <_free_r>
 10029b4:	80000c15 	stw	zero,48(r16)
 10029b8:	81401117 	ldw	r5,68(r16)
 10029bc:	28000326 	beq	r5,zero,10029cc <_fclose_r+0x9c>
 10029c0:	8809883a 	mov	r4,r17
 10029c4:	100203c0 	call	100203c <_free_r>
 10029c8:	80001115 	stw	zero,68(r16)
 10029cc:	8000030d 	sth	zero,12(r16)
 10029d0:	1001cac0 	call	1001cac <__sfp_lock_release>
 10029d4:	9005883a 	mov	r2,r18
 10029d8:	dfc00317 	ldw	ra,12(sp)
 10029dc:	dc800217 	ldw	r18,8(sp)
 10029e0:	dc400117 	ldw	r17,4(sp)
 10029e4:	dc000017 	ldw	r16,0(sp)
 10029e8:	dec00404 	addi	sp,sp,16
 10029ec:	f800283a 	ret
 10029f0:	1001cac0 	call	1001cac <__sfp_lock_release>
 10029f4:	0025883a 	mov	r18,zero
 10029f8:	9005883a 	mov	r2,r18
 10029fc:	dfc00317 	ldw	ra,12(sp)
 1002a00:	dc800217 	ldw	r18,8(sp)
 1002a04:	dc400117 	ldw	r17,4(sp)
 1002a08:	dc000017 	ldw	r16,0(sp)
 1002a0c:	dec00404 	addi	sp,sp,16
 1002a10:	f800283a 	ret
 1002a14:	8809883a 	mov	r4,r17
 1002a18:	1001cb80 	call	1001cb8 <__sinit>
 1002a1c:	8080030f 	ldh	r2,12(r16)
 1002a20:	103fd11e 	bne	r2,zero,1002968 <_fclose_r+0x38>
 1002a24:	003ff206 	br	10029f0 <_fclose_r+0xc0>
 1002a28:	81400417 	ldw	r5,16(r16)
 1002a2c:	8809883a 	mov	r4,r17
 1002a30:	100203c0 	call	100203c <_free_r>
 1002a34:	003fd906 	br	100299c <_fclose_r+0x6c>
 1002a38:	04bfffc4 	movi	r18,-1
 1002a3c:	003fd406 	br	1002990 <_fclose_r+0x60>

01002a40 <fclose>:
 1002a40:	00804074 	movhi	r2,257
 1002a44:	10a6bb04 	addi	r2,r2,-25876
 1002a48:	200b883a 	mov	r5,r4
 1002a4c:	11000017 	ldw	r4,0(r2)
 1002a50:	10029301 	jmpi	1002930 <_fclose_r>

01002a54 <_fstat_r>:
 1002a54:	defffd04 	addi	sp,sp,-12
 1002a58:	dc000015 	stw	r16,0(sp)
 1002a5c:	04004074 	movhi	r16,257
 1002a60:	842db504 	addi	r16,r16,-18732
 1002a64:	dc400115 	stw	r17,4(sp)
 1002a68:	80000015 	stw	zero,0(r16)
 1002a6c:	2023883a 	mov	r17,r4
 1002a70:	2809883a 	mov	r4,r5
 1002a74:	300b883a 	mov	r5,r6
 1002a78:	dfc00215 	stw	ra,8(sp)
 1002a7c:	1002db00 	call	1002db0 <fstat>
 1002a80:	1007883a 	mov	r3,r2
 1002a84:	00bfffc4 	movi	r2,-1
 1002a88:	18800626 	beq	r3,r2,1002aa4 <_fstat_r+0x50>
 1002a8c:	1805883a 	mov	r2,r3
 1002a90:	dfc00217 	ldw	ra,8(sp)
 1002a94:	dc400117 	ldw	r17,4(sp)
 1002a98:	dc000017 	ldw	r16,0(sp)
 1002a9c:	dec00304 	addi	sp,sp,12
 1002aa0:	f800283a 	ret
 1002aa4:	80800017 	ldw	r2,0(r16)
 1002aa8:	103ff826 	beq	r2,zero,1002a8c <_fstat_r+0x38>
 1002aac:	88800015 	stw	r2,0(r17)
 1002ab0:	1805883a 	mov	r2,r3
 1002ab4:	dfc00217 	ldw	ra,8(sp)
 1002ab8:	dc400117 	ldw	r17,4(sp)
 1002abc:	dc000017 	ldw	r16,0(sp)
 1002ac0:	dec00304 	addi	sp,sp,12
 1002ac4:	f800283a 	ret

01002ac8 <_isatty_r>:
 1002ac8:	defffd04 	addi	sp,sp,-12
 1002acc:	dc000015 	stw	r16,0(sp)
 1002ad0:	04004074 	movhi	r16,257
 1002ad4:	842db504 	addi	r16,r16,-18732
 1002ad8:	dc400115 	stw	r17,4(sp)
 1002adc:	80000015 	stw	zero,0(r16)
 1002ae0:	2023883a 	mov	r17,r4
 1002ae4:	2809883a 	mov	r4,r5
 1002ae8:	dfc00215 	stw	ra,8(sp)
 1002aec:	1002ee40 	call	1002ee4 <isatty>
 1002af0:	1007883a 	mov	r3,r2
 1002af4:	00bfffc4 	movi	r2,-1
 1002af8:	18800626 	beq	r3,r2,1002b14 <_isatty_r+0x4c>
 1002afc:	1805883a 	mov	r2,r3
 1002b00:	dfc00217 	ldw	ra,8(sp)
 1002b04:	dc400117 	ldw	r17,4(sp)
 1002b08:	dc000017 	ldw	r16,0(sp)
 1002b0c:	dec00304 	addi	sp,sp,12
 1002b10:	f800283a 	ret
 1002b14:	80800017 	ldw	r2,0(r16)
 1002b18:	103ff826 	beq	r2,zero,1002afc <_isatty_r+0x34>
 1002b1c:	88800015 	stw	r2,0(r17)
 1002b20:	1805883a 	mov	r2,r3
 1002b24:	dfc00217 	ldw	ra,8(sp)
 1002b28:	dc400117 	ldw	r17,4(sp)
 1002b2c:	dc000017 	ldw	r16,0(sp)
 1002b30:	dec00304 	addi	sp,sp,12
 1002b34:	f800283a 	ret

01002b38 <_lseek_r>:
 1002b38:	defffd04 	addi	sp,sp,-12
 1002b3c:	dc000015 	stw	r16,0(sp)
 1002b40:	04004074 	movhi	r16,257
 1002b44:	842db504 	addi	r16,r16,-18732
 1002b48:	dc400115 	stw	r17,4(sp)
 1002b4c:	80000015 	stw	zero,0(r16)
 1002b50:	2023883a 	mov	r17,r4
 1002b54:	2809883a 	mov	r4,r5
 1002b58:	300b883a 	mov	r5,r6
 1002b5c:	380d883a 	mov	r6,r7
 1002b60:	dfc00215 	stw	ra,8(sp)
 1002b64:	10030f00 	call	10030f0 <lseek>
 1002b68:	1007883a 	mov	r3,r2
 1002b6c:	00bfffc4 	movi	r2,-1
 1002b70:	18800626 	beq	r3,r2,1002b8c <_lseek_r+0x54>
 1002b74:	1805883a 	mov	r2,r3
 1002b78:	dfc00217 	ldw	ra,8(sp)
 1002b7c:	dc400117 	ldw	r17,4(sp)
 1002b80:	dc000017 	ldw	r16,0(sp)
 1002b84:	dec00304 	addi	sp,sp,12
 1002b88:	f800283a 	ret
 1002b8c:	80800017 	ldw	r2,0(r16)
 1002b90:	103ff826 	beq	r2,zero,1002b74 <_lseek_r+0x3c>
 1002b94:	88800015 	stw	r2,0(r17)
 1002b98:	1805883a 	mov	r2,r3
 1002b9c:	dfc00217 	ldw	ra,8(sp)
 1002ba0:	dc400117 	ldw	r17,4(sp)
 1002ba4:	dc000017 	ldw	r16,0(sp)
 1002ba8:	dec00304 	addi	sp,sp,12
 1002bac:	f800283a 	ret

01002bb0 <_read_r>:
 1002bb0:	defffd04 	addi	sp,sp,-12
 1002bb4:	dc000015 	stw	r16,0(sp)
 1002bb8:	04004074 	movhi	r16,257
 1002bbc:	842db504 	addi	r16,r16,-18732
 1002bc0:	dc400115 	stw	r17,4(sp)
 1002bc4:	80000015 	stw	zero,0(r16)
 1002bc8:	2023883a 	mov	r17,r4
 1002bcc:	2809883a 	mov	r4,r5
 1002bd0:	300b883a 	mov	r5,r6
 1002bd4:	380d883a 	mov	r6,r7
 1002bd8:	dfc00215 	stw	ra,8(sp)
 1002bdc:	10032ec0 	call	10032ec <read>
 1002be0:	1007883a 	mov	r3,r2
 1002be4:	00bfffc4 	movi	r2,-1
 1002be8:	18800626 	beq	r3,r2,1002c04 <_read_r+0x54>
 1002bec:	1805883a 	mov	r2,r3
 1002bf0:	dfc00217 	ldw	ra,8(sp)
 1002bf4:	dc400117 	ldw	r17,4(sp)
 1002bf8:	dc000017 	ldw	r16,0(sp)
 1002bfc:	dec00304 	addi	sp,sp,12
 1002c00:	f800283a 	ret
 1002c04:	80800017 	ldw	r2,0(r16)
 1002c08:	103ff826 	beq	r2,zero,1002bec <_read_r+0x3c>
 1002c0c:	88800015 	stw	r2,0(r17)
 1002c10:	1805883a 	mov	r2,r3
 1002c14:	dfc00217 	ldw	ra,8(sp)
 1002c18:	dc400117 	ldw	r17,4(sp)
 1002c1c:	dc000017 	ldw	r16,0(sp)
 1002c20:	dec00304 	addi	sp,sp,12
 1002c24:	f800283a 	ret

01002c28 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 1002c28:	defff804 	addi	sp,sp,-32
 1002c2c:	dfc00715 	stw	ra,28(sp)
 1002c30:	df000615 	stw	fp,24(sp)
 1002c34:	df000604 	addi	fp,sp,24
 1002c38:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 1002c3c:	e0bffc17 	ldw	r2,-16(fp)
 1002c40:	1004803a 	cmplt	r2,r2,zero
 1002c44:	1000081e 	bne	r2,zero,1002c68 <close+0x40>
 1002c48:	e0bffc17 	ldw	r2,-16(fp)
 1002c4c:	10800324 	muli	r2,r2,12
 1002c50:	1007883a 	mov	r3,r2
 1002c54:	00804074 	movhi	r2,257
 1002c58:	10a1ec04 	addi	r2,r2,-30800
 1002c5c:	1887883a 	add	r3,r3,r2
 1002c60:	e0ffff15 	stw	r3,-4(fp)
 1002c64:	00000106 	br	1002c6c <close+0x44>
 1002c68:	e03fff15 	stw	zero,-4(fp)
 1002c6c:	e0bfff17 	ldw	r2,-4(fp)
 1002c70:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 1002c74:	e0bffb17 	ldw	r2,-20(fp)
 1002c78:	1005003a 	cmpeq	r2,r2,zero
 1002c7c:	10001d1e 	bne	r2,zero,1002cf4 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 1002c80:	e0bffb17 	ldw	r2,-20(fp)
 1002c84:	10800017 	ldw	r2,0(r2)
 1002c88:	10800417 	ldw	r2,16(r2)
 1002c8c:	1005003a 	cmpeq	r2,r2,zero
 1002c90:	1000071e 	bne	r2,zero,1002cb0 <close+0x88>
 1002c94:	e0bffb17 	ldw	r2,-20(fp)
 1002c98:	10800017 	ldw	r2,0(r2)
 1002c9c:	10800417 	ldw	r2,16(r2)
 1002ca0:	e13ffb17 	ldw	r4,-20(fp)
 1002ca4:	103ee83a 	callr	r2
 1002ca8:	e0bffe15 	stw	r2,-8(fp)
 1002cac:	00000106 	br	1002cb4 <close+0x8c>
 1002cb0:	e03ffe15 	stw	zero,-8(fp)
 1002cb4:	e0bffe17 	ldw	r2,-8(fp)
 1002cb8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 1002cbc:	e13ffc17 	ldw	r4,-16(fp)
 1002cc0:	100346c0 	call	100346c <alt_release_fd>
    if (rval < 0)
 1002cc4:	e0bffa17 	ldw	r2,-24(fp)
 1002cc8:	1004403a 	cmpge	r2,r2,zero
 1002ccc:	1000071e 	bne	r2,zero,1002cec <close+0xc4>
    {
      ALT_ERRNO = -rval;
 1002cd0:	1002d240 	call	1002d24 <alt_get_errno>
 1002cd4:	e0fffa17 	ldw	r3,-24(fp)
 1002cd8:	00c7c83a 	sub	r3,zero,r3
 1002cdc:	10c00015 	stw	r3,0(r2)
      return -1;
 1002ce0:	00bfffc4 	movi	r2,-1
 1002ce4:	e0bffd15 	stw	r2,-12(fp)
 1002ce8:	00000806 	br	1002d0c <close+0xe4>
    }
    return 0;
 1002cec:	e03ffd15 	stw	zero,-12(fp)
 1002cf0:	00000606 	br	1002d0c <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1002cf4:	1002d240 	call	1002d24 <alt_get_errno>
 1002cf8:	1007883a 	mov	r3,r2
 1002cfc:	00801444 	movi	r2,81
 1002d00:	18800015 	stw	r2,0(r3)
    return -1;
 1002d04:	00bfffc4 	movi	r2,-1
 1002d08:	e0bffd15 	stw	r2,-12(fp)
 1002d0c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 1002d10:	e037883a 	mov	sp,fp
 1002d14:	dfc00117 	ldw	ra,4(sp)
 1002d18:	df000017 	ldw	fp,0(sp)
 1002d1c:	dec00204 	addi	sp,sp,8
 1002d20:	f800283a 	ret

01002d24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1002d24:	defffd04 	addi	sp,sp,-12
 1002d28:	dfc00215 	stw	ra,8(sp)
 1002d2c:	df000115 	stw	fp,4(sp)
 1002d30:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1002d34:	00804074 	movhi	r2,257
 1002d38:	10a6c404 	addi	r2,r2,-25840
 1002d3c:	10800017 	ldw	r2,0(r2)
 1002d40:	1005003a 	cmpeq	r2,r2,zero
 1002d44:	1000061e 	bne	r2,zero,1002d60 <alt_get_errno+0x3c>
 1002d48:	00804074 	movhi	r2,257
 1002d4c:	10a6c404 	addi	r2,r2,-25840
 1002d50:	10800017 	ldw	r2,0(r2)
 1002d54:	103ee83a 	callr	r2
 1002d58:	e0bfff15 	stw	r2,-4(fp)
 1002d5c:	00000306 	br	1002d6c <alt_get_errno+0x48>
 1002d60:	00804074 	movhi	r2,257
 1002d64:	10adb504 	addi	r2,r2,-18732
 1002d68:	e0bfff15 	stw	r2,-4(fp)
 1002d6c:	e0bfff17 	ldw	r2,-4(fp)
}
 1002d70:	e037883a 	mov	sp,fp
 1002d74:	dfc00117 	ldw	ra,4(sp)
 1002d78:	df000017 	ldw	fp,0(sp)
 1002d7c:	dec00204 	addi	sp,sp,8
 1002d80:	f800283a 	ret

01002d84 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 1002d84:	defffc04 	addi	sp,sp,-16
 1002d88:	df000315 	stw	fp,12(sp)
 1002d8c:	df000304 	addi	fp,sp,12
 1002d90:	e13ffd15 	stw	r4,-12(fp)
 1002d94:	e17ffe15 	stw	r5,-8(fp)
 1002d98:	e1bfff15 	stw	r6,-4(fp)
  return len;
 1002d9c:	e0bfff17 	ldw	r2,-4(fp)
}
 1002da0:	e037883a 	mov	sp,fp
 1002da4:	df000017 	ldw	fp,0(sp)
 1002da8:	dec00104 	addi	sp,sp,4
 1002dac:	f800283a 	ret

01002db0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 1002db0:	defff904 	addi	sp,sp,-28
 1002db4:	dfc00615 	stw	ra,24(sp)
 1002db8:	df000515 	stw	fp,20(sp)
 1002dbc:	df000504 	addi	fp,sp,20
 1002dc0:	e13ffc15 	stw	r4,-16(fp)
 1002dc4:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1002dc8:	e0bffc17 	ldw	r2,-16(fp)
 1002dcc:	1004803a 	cmplt	r2,r2,zero
 1002dd0:	1000081e 	bne	r2,zero,1002df4 <fstat+0x44>
 1002dd4:	e0bffc17 	ldw	r2,-16(fp)
 1002dd8:	10800324 	muli	r2,r2,12
 1002ddc:	1007883a 	mov	r3,r2
 1002de0:	00804074 	movhi	r2,257
 1002de4:	10a1ec04 	addi	r2,r2,-30800
 1002de8:	1887883a 	add	r3,r3,r2
 1002dec:	e0ffff15 	stw	r3,-4(fp)
 1002df0:	00000106 	br	1002df8 <fstat+0x48>
 1002df4:	e03fff15 	stw	zero,-4(fp)
 1002df8:	e0bfff17 	ldw	r2,-4(fp)
 1002dfc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1002e00:	e0bffb17 	ldw	r2,-20(fp)
 1002e04:	1005003a 	cmpeq	r2,r2,zero
 1002e08:	1000121e 	bne	r2,zero,1002e54 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 1002e0c:	e0bffb17 	ldw	r2,-20(fp)
 1002e10:	10800017 	ldw	r2,0(r2)
 1002e14:	10800817 	ldw	r2,32(r2)
 1002e18:	1005003a 	cmpeq	r2,r2,zero
 1002e1c:	1000081e 	bne	r2,zero,1002e40 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
 1002e20:	e0bffb17 	ldw	r2,-20(fp)
 1002e24:	10800017 	ldw	r2,0(r2)
 1002e28:	10800817 	ldw	r2,32(r2)
 1002e2c:	e13ffb17 	ldw	r4,-20(fp)
 1002e30:	e17ffd17 	ldw	r5,-12(fp)
 1002e34:	103ee83a 	callr	r2
 1002e38:	e0bffe15 	stw	r2,-8(fp)
 1002e3c:	00000b06 	br	1002e6c <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 1002e40:	e0fffd17 	ldw	r3,-12(fp)
 1002e44:	00880004 	movi	r2,8192
 1002e48:	18800115 	stw	r2,4(r3)
      return 0;
 1002e4c:	e03ffe15 	stw	zero,-8(fp)
 1002e50:	00000606 	br	1002e6c <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1002e54:	1002e840 	call	1002e84 <alt_get_errno>
 1002e58:	1007883a 	mov	r3,r2
 1002e5c:	00801444 	movi	r2,81
 1002e60:	18800015 	stw	r2,0(r3)
    return -1;
 1002e64:	00bfffc4 	movi	r2,-1
 1002e68:	e0bffe15 	stw	r2,-8(fp)
 1002e6c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 1002e70:	e037883a 	mov	sp,fp
 1002e74:	dfc00117 	ldw	ra,4(sp)
 1002e78:	df000017 	ldw	fp,0(sp)
 1002e7c:	dec00204 	addi	sp,sp,8
 1002e80:	f800283a 	ret

01002e84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1002e84:	defffd04 	addi	sp,sp,-12
 1002e88:	dfc00215 	stw	ra,8(sp)
 1002e8c:	df000115 	stw	fp,4(sp)
 1002e90:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1002e94:	00804074 	movhi	r2,257
 1002e98:	10a6c404 	addi	r2,r2,-25840
 1002e9c:	10800017 	ldw	r2,0(r2)
 1002ea0:	1005003a 	cmpeq	r2,r2,zero
 1002ea4:	1000061e 	bne	r2,zero,1002ec0 <alt_get_errno+0x3c>
 1002ea8:	00804074 	movhi	r2,257
 1002eac:	10a6c404 	addi	r2,r2,-25840
 1002eb0:	10800017 	ldw	r2,0(r2)
 1002eb4:	103ee83a 	callr	r2
 1002eb8:	e0bfff15 	stw	r2,-4(fp)
 1002ebc:	00000306 	br	1002ecc <alt_get_errno+0x48>
 1002ec0:	00804074 	movhi	r2,257
 1002ec4:	10adb504 	addi	r2,r2,-18732
 1002ec8:	e0bfff15 	stw	r2,-4(fp)
 1002ecc:	e0bfff17 	ldw	r2,-4(fp)
}
 1002ed0:	e037883a 	mov	sp,fp
 1002ed4:	dfc00117 	ldw	ra,4(sp)
 1002ed8:	df000017 	ldw	fp,0(sp)
 1002edc:	dec00204 	addi	sp,sp,8
 1002ee0:	f800283a 	ret

01002ee4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 1002ee4:	deffeb04 	addi	sp,sp,-84
 1002ee8:	dfc01415 	stw	ra,80(sp)
 1002eec:	df001315 	stw	fp,76(sp)
 1002ef0:	df001304 	addi	fp,sp,76
 1002ef4:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1002ef8:	e0bffd17 	ldw	r2,-12(fp)
 1002efc:	1004803a 	cmplt	r2,r2,zero
 1002f00:	1000081e 	bne	r2,zero,1002f24 <isatty+0x40>
 1002f04:	e0bffd17 	ldw	r2,-12(fp)
 1002f08:	10800324 	muli	r2,r2,12
 1002f0c:	1007883a 	mov	r3,r2
 1002f10:	00804074 	movhi	r2,257
 1002f14:	10a1ec04 	addi	r2,r2,-30800
 1002f18:	1887883a 	add	r3,r3,r2
 1002f1c:	e0ffff15 	stw	r3,-4(fp)
 1002f20:	00000106 	br	1002f28 <isatty+0x44>
 1002f24:	e03fff15 	stw	zero,-4(fp)
 1002f28:	e0bfff17 	ldw	r2,-4(fp)
 1002f2c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 1002f30:	e0bfed17 	ldw	r2,-76(fp)
 1002f34:	1005003a 	cmpeq	r2,r2,zero
 1002f38:	10000f1e 	bne	r2,zero,1002f78 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 1002f3c:	e0bfed17 	ldw	r2,-76(fp)
 1002f40:	10800017 	ldw	r2,0(r2)
 1002f44:	10800817 	ldw	r2,32(r2)
 1002f48:	1004c03a 	cmpne	r2,r2,zero
 1002f4c:	1000031e 	bne	r2,zero,1002f5c <isatty+0x78>
    {
      return 1;
 1002f50:	00800044 	movi	r2,1
 1002f54:	e0bffe15 	stw	r2,-8(fp)
 1002f58:	00000c06 	br	1002f8c <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 1002f5c:	e17fee04 	addi	r5,fp,-72
 1002f60:	e13ffd17 	ldw	r4,-12(fp)
 1002f64:	1002db00 	call	1002db0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 1002f68:	e0bfef17 	ldw	r2,-68(fp)
 1002f6c:	10880020 	cmpeqi	r2,r2,8192
 1002f70:	e0bffe15 	stw	r2,-8(fp)
 1002f74:	00000506 	br	1002f8c <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1002f78:	1002fa40 	call	1002fa4 <alt_get_errno>
 1002f7c:	1007883a 	mov	r3,r2
 1002f80:	00801444 	movi	r2,81
 1002f84:	18800015 	stw	r2,0(r3)
    return 0;
 1002f88:	e03ffe15 	stw	zero,-8(fp)
 1002f8c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 1002f90:	e037883a 	mov	sp,fp
 1002f94:	dfc00117 	ldw	ra,4(sp)
 1002f98:	df000017 	ldw	fp,0(sp)
 1002f9c:	dec00204 	addi	sp,sp,8
 1002fa0:	f800283a 	ret

01002fa4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1002fa4:	defffd04 	addi	sp,sp,-12
 1002fa8:	dfc00215 	stw	ra,8(sp)
 1002fac:	df000115 	stw	fp,4(sp)
 1002fb0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1002fb4:	00804074 	movhi	r2,257
 1002fb8:	10a6c404 	addi	r2,r2,-25840
 1002fbc:	10800017 	ldw	r2,0(r2)
 1002fc0:	1005003a 	cmpeq	r2,r2,zero
 1002fc4:	1000061e 	bne	r2,zero,1002fe0 <alt_get_errno+0x3c>
 1002fc8:	00804074 	movhi	r2,257
 1002fcc:	10a6c404 	addi	r2,r2,-25840
 1002fd0:	10800017 	ldw	r2,0(r2)
 1002fd4:	103ee83a 	callr	r2
 1002fd8:	e0bfff15 	stw	r2,-4(fp)
 1002fdc:	00000306 	br	1002fec <alt_get_errno+0x48>
 1002fe0:	00804074 	movhi	r2,257
 1002fe4:	10adb504 	addi	r2,r2,-18732
 1002fe8:	e0bfff15 	stw	r2,-4(fp)
 1002fec:	e0bfff17 	ldw	r2,-4(fp)
}
 1002ff0:	e037883a 	mov	sp,fp
 1002ff4:	dfc00117 	ldw	ra,4(sp)
 1002ff8:	df000017 	ldw	fp,0(sp)
 1002ffc:	dec00204 	addi	sp,sp,8
 1003000:	f800283a 	ret

01003004 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 1003004:	defffe04 	addi	sp,sp,-8
 1003008:	dfc00115 	stw	ra,4(sp)
 100300c:	df000015 	stw	fp,0(sp)
 1003010:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 1003014:	01004074 	movhi	r4,257
 1003018:	2126c904 	addi	r4,r4,-25820
 100301c:	01404034 	movhi	r5,256
 1003020:	295fe004 	addi	r5,r5,32640
 1003024:	01804074 	movhi	r6,257
 1003028:	31a6c904 	addi	r6,r6,-25820
 100302c:	10030840 	call	1003084 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 1003030:	01004034 	movhi	r4,256
 1003034:	21000804 	addi	r4,r4,32
 1003038:	01404034 	movhi	r5,256
 100303c:	29400804 	addi	r5,r5,32
 1003040:	01804034 	movhi	r6,256
 1003044:	31806e04 	addi	r6,r6,440
 1003048:	10030840 	call	1003084 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 100304c:	01004034 	movhi	r4,256
 1003050:	211f7e04 	addi	r4,r4,32248
 1003054:	01404034 	movhi	r5,256
 1003058:	295f7e04 	addi	r5,r5,32248
 100305c:	01804034 	movhi	r6,256
 1003060:	319fe004 	addi	r6,r6,32640
 1003064:	10030840 	call	1003084 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 1003068:	1006c600 	call	1006c60 <alt_dcache_flush_all>
  alt_icache_flush_all();
 100306c:	1006f140 	call	1006f14 <alt_icache_flush_all>
}
 1003070:	e037883a 	mov	sp,fp
 1003074:	dfc00117 	ldw	ra,4(sp)
 1003078:	df000017 	ldw	fp,0(sp)
 100307c:	dec00204 	addi	sp,sp,8
 1003080:	f800283a 	ret

01003084 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 1003084:	defffc04 	addi	sp,sp,-16
 1003088:	df000315 	stw	fp,12(sp)
 100308c:	df000304 	addi	fp,sp,12
 1003090:	e13ffd15 	stw	r4,-12(fp)
 1003094:	e17ffe15 	stw	r5,-8(fp)
 1003098:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 100309c:	e0fffe17 	ldw	r3,-8(fp)
 10030a0:	e0bffd17 	ldw	r2,-12(fp)
 10030a4:	18800e26 	beq	r3,r2,10030e0 <alt_load_section+0x5c>
  {
    while( to != end )
 10030a8:	00000a06 	br	10030d4 <alt_load_section+0x50>
    {
      *to++ = *from++;
 10030ac:	e0bffd17 	ldw	r2,-12(fp)
 10030b0:	10c00017 	ldw	r3,0(r2)
 10030b4:	e0bffe17 	ldw	r2,-8(fp)
 10030b8:	10c00015 	stw	r3,0(r2)
 10030bc:	e0bffe17 	ldw	r2,-8(fp)
 10030c0:	10800104 	addi	r2,r2,4
 10030c4:	e0bffe15 	stw	r2,-8(fp)
 10030c8:	e0bffd17 	ldw	r2,-12(fp)
 10030cc:	10800104 	addi	r2,r2,4
 10030d0:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 10030d4:	e0fffe17 	ldw	r3,-8(fp)
 10030d8:	e0bfff17 	ldw	r2,-4(fp)
 10030dc:	18bff31e 	bne	r3,r2,10030ac <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 10030e0:	e037883a 	mov	sp,fp
 10030e4:	df000017 	ldw	fp,0(sp)
 10030e8:	dec00104 	addi	sp,sp,4
 10030ec:	f800283a 	ret

010030f0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 10030f0:	defff804 	addi	sp,sp,-32
 10030f4:	dfc00715 	stw	ra,28(sp)
 10030f8:	df000615 	stw	fp,24(sp)
 10030fc:	df000604 	addi	fp,sp,24
 1003100:	e13ffc15 	stw	r4,-16(fp)
 1003104:	e17ffd15 	stw	r5,-12(fp)
 1003108:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 100310c:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1003110:	e0bffc17 	ldw	r2,-16(fp)
 1003114:	1004803a 	cmplt	r2,r2,zero
 1003118:	1000081e 	bne	r2,zero,100313c <lseek+0x4c>
 100311c:	e0bffc17 	ldw	r2,-16(fp)
 1003120:	10800324 	muli	r2,r2,12
 1003124:	1007883a 	mov	r3,r2
 1003128:	00804074 	movhi	r2,257
 100312c:	10a1ec04 	addi	r2,r2,-30800
 1003130:	1887883a 	add	r3,r3,r2
 1003134:	e0ffff15 	stw	r3,-4(fp)
 1003138:	00000106 	br	1003140 <lseek+0x50>
 100313c:	e03fff15 	stw	zero,-4(fp)
 1003140:	e0bfff17 	ldw	r2,-4(fp)
 1003144:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 1003148:	e0bffb17 	ldw	r2,-20(fp)
 100314c:	1005003a 	cmpeq	r2,r2,zero
 1003150:	1000111e 	bne	r2,zero,1003198 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 1003154:	e0bffb17 	ldw	r2,-20(fp)
 1003158:	10800017 	ldw	r2,0(r2)
 100315c:	10800717 	ldw	r2,28(r2)
 1003160:	1005003a 	cmpeq	r2,r2,zero
 1003164:	1000091e 	bne	r2,zero,100318c <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 1003168:	e0bffb17 	ldw	r2,-20(fp)
 100316c:	10800017 	ldw	r2,0(r2)
 1003170:	10800717 	ldw	r2,28(r2)
 1003174:	e13ffb17 	ldw	r4,-20(fp)
 1003178:	e17ffd17 	ldw	r5,-12(fp)
 100317c:	e1bffe17 	ldw	r6,-8(fp)
 1003180:	103ee83a 	callr	r2
 1003184:	e0bffa15 	stw	r2,-24(fp)
 1003188:	00000506 	br	10031a0 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 100318c:	00bfde84 	movi	r2,-134
 1003190:	e0bffa15 	stw	r2,-24(fp)
 1003194:	00000206 	br	10031a0 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
 1003198:	00bfebc4 	movi	r2,-81
 100319c:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 10031a0:	e0bffa17 	ldw	r2,-24(fp)
 10031a4:	1004403a 	cmpge	r2,r2,zero
 10031a8:	1000071e 	bne	r2,zero,10031c8 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
 10031ac:	10031e00 	call	10031e0 <alt_get_errno>
 10031b0:	1007883a 	mov	r3,r2
 10031b4:	e0bffa17 	ldw	r2,-24(fp)
 10031b8:	0085c83a 	sub	r2,zero,r2
 10031bc:	18800015 	stw	r2,0(r3)
    rc = -1;
 10031c0:	00bfffc4 	movi	r2,-1
 10031c4:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 10031c8:	e0bffa17 	ldw	r2,-24(fp)
}
 10031cc:	e037883a 	mov	sp,fp
 10031d0:	dfc00117 	ldw	ra,4(sp)
 10031d4:	df000017 	ldw	fp,0(sp)
 10031d8:	dec00204 	addi	sp,sp,8
 10031dc:	f800283a 	ret

010031e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10031e0:	defffd04 	addi	sp,sp,-12
 10031e4:	dfc00215 	stw	ra,8(sp)
 10031e8:	df000115 	stw	fp,4(sp)
 10031ec:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10031f0:	00804074 	movhi	r2,257
 10031f4:	10a6c404 	addi	r2,r2,-25840
 10031f8:	10800017 	ldw	r2,0(r2)
 10031fc:	1005003a 	cmpeq	r2,r2,zero
 1003200:	1000061e 	bne	r2,zero,100321c <alt_get_errno+0x3c>
 1003204:	00804074 	movhi	r2,257
 1003208:	10a6c404 	addi	r2,r2,-25840
 100320c:	10800017 	ldw	r2,0(r2)
 1003210:	103ee83a 	callr	r2
 1003214:	e0bfff15 	stw	r2,-4(fp)
 1003218:	00000306 	br	1003228 <alt_get_errno+0x48>
 100321c:	00804074 	movhi	r2,257
 1003220:	10adb504 	addi	r2,r2,-18732
 1003224:	e0bfff15 	stw	r2,-4(fp)
 1003228:	e0bfff17 	ldw	r2,-4(fp)
}
 100322c:	e037883a 	mov	sp,fp
 1003230:	dfc00117 	ldw	ra,4(sp)
 1003234:	df000017 	ldw	fp,0(sp)
 1003238:	dec00204 	addi	sp,sp,8
 100323c:	f800283a 	ret

01003240 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 1003240:	defffd04 	addi	sp,sp,-12
 1003244:	dfc00215 	stw	ra,8(sp)
 1003248:	df000115 	stw	fp,4(sp)
 100324c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1003250:	0009883a 	mov	r4,zero
 1003254:	10037080 	call	1003708 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 1003258:	100373c0 	call	100373c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 100325c:	01004034 	movhi	r4,256
 1003260:	211fa404 	addi	r4,r4,32400
 1003264:	01404034 	movhi	r5,256
 1003268:	295fa404 	addi	r5,r5,32400
 100326c:	01804034 	movhi	r6,256
 1003270:	319fa404 	addi	r6,r6,32400
 1003274:	10070080 	call	1007008 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 1003278:	1006db80 	call	1006db8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 100327c:	01004034 	movhi	r4,256
 1003280:	211b8704 	addi	r4,r4,28188
 1003284:	10079300 	call	1007930 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 1003288:	d126fb17 	ldw	r4,-25620(gp)
 100328c:	d166fc17 	ldw	r5,-25616(gp)
 1003290:	d1a6fd17 	ldw	r6,-25612(gp)
 1003294:	10002040 	call	1000204 <main>
 1003298:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 100329c:	01000044 	movi	r4,1
 10032a0:	1002c280 	call	1002c28 <close>
  exit (result);
 10032a4:	e13fff17 	ldw	r4,-4(fp)
 10032a8:	10079440 	call	1007944 <exit>

010032ac <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 10032ac:	defffe04 	addi	sp,sp,-8
 10032b0:	df000115 	stw	fp,4(sp)
 10032b4:	df000104 	addi	fp,sp,4
 10032b8:	e13fff15 	stw	r4,-4(fp)
}
 10032bc:	e037883a 	mov	sp,fp
 10032c0:	df000017 	ldw	fp,0(sp)
 10032c4:	dec00104 	addi	sp,sp,4
 10032c8:	f800283a 	ret

010032cc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 10032cc:	defffe04 	addi	sp,sp,-8
 10032d0:	df000115 	stw	fp,4(sp)
 10032d4:	df000104 	addi	fp,sp,4
 10032d8:	e13fff15 	stw	r4,-4(fp)
}
 10032dc:	e037883a 	mov	sp,fp
 10032e0:	df000017 	ldw	fp,0(sp)
 10032e4:	dec00104 	addi	sp,sp,4
 10032e8:	f800283a 	ret

010032ec <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 10032ec:	defff704 	addi	sp,sp,-36
 10032f0:	dfc00815 	stw	ra,32(sp)
 10032f4:	df000715 	stw	fp,28(sp)
 10032f8:	df000704 	addi	fp,sp,28
 10032fc:	e13ffb15 	stw	r4,-20(fp)
 1003300:	e17ffc15 	stw	r5,-16(fp)
 1003304:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1003308:	e0bffb17 	ldw	r2,-20(fp)
 100330c:	1004803a 	cmplt	r2,r2,zero
 1003310:	1000081e 	bne	r2,zero,1003334 <read+0x48>
 1003314:	e0bffb17 	ldw	r2,-20(fp)
 1003318:	10800324 	muli	r2,r2,12
 100331c:	1007883a 	mov	r3,r2
 1003320:	00804074 	movhi	r2,257
 1003324:	10a1ec04 	addi	r2,r2,-30800
 1003328:	1887883a 	add	r3,r3,r2
 100332c:	e0ffff15 	stw	r3,-4(fp)
 1003330:	00000106 	br	1003338 <read+0x4c>
 1003334:	e03fff15 	stw	zero,-4(fp)
 1003338:	e0bfff17 	ldw	r2,-4(fp)
 100333c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 1003340:	e0bffa17 	ldw	r2,-24(fp)
 1003344:	1005003a 	cmpeq	r2,r2,zero
 1003348:	1000241e 	bne	r2,zero,10033dc <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 100334c:	e0bffa17 	ldw	r2,-24(fp)
 1003350:	10800217 	ldw	r2,8(r2)
 1003354:	108000cc 	andi	r2,r2,3
 1003358:	10800060 	cmpeqi	r2,r2,1
 100335c:	10001a1e 	bne	r2,zero,10033c8 <read+0xdc>
 1003360:	e0bffa17 	ldw	r2,-24(fp)
 1003364:	10800017 	ldw	r2,0(r2)
 1003368:	10800517 	ldw	r2,20(r2)
 100336c:	1005003a 	cmpeq	r2,r2,zero
 1003370:	1000151e 	bne	r2,zero,10033c8 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 1003374:	e0bffa17 	ldw	r2,-24(fp)
 1003378:	10800017 	ldw	r2,0(r2)
 100337c:	10800517 	ldw	r2,20(r2)
 1003380:	e17ffc17 	ldw	r5,-16(fp)
 1003384:	e1bffd17 	ldw	r6,-12(fp)
 1003388:	e13ffa17 	ldw	r4,-24(fp)
 100338c:	103ee83a 	callr	r2
 1003390:	e0bff915 	stw	r2,-28(fp)
 1003394:	e0bff917 	ldw	r2,-28(fp)
 1003398:	1004403a 	cmpge	r2,r2,zero
 100339c:	1000071e 	bne	r2,zero,10033bc <read+0xd0>
        {
          ALT_ERRNO = -rval;
 10033a0:	100340c0 	call	100340c <alt_get_errno>
 10033a4:	e0fff917 	ldw	r3,-28(fp)
 10033a8:	00c7c83a 	sub	r3,zero,r3
 10033ac:	10c00015 	stw	r3,0(r2)
          return -1;
 10033b0:	00bfffc4 	movi	r2,-1
 10033b4:	e0bffe15 	stw	r2,-8(fp)
 10033b8:	00000e06 	br	10033f4 <read+0x108>
        }
        return rval;
 10033bc:	e0bff917 	ldw	r2,-28(fp)
 10033c0:	e0bffe15 	stw	r2,-8(fp)
 10033c4:	00000b06 	br	10033f4 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
 10033c8:	100340c0 	call	100340c <alt_get_errno>
 10033cc:	1007883a 	mov	r3,r2
 10033d0:	00800344 	movi	r2,13
 10033d4:	18800015 	stw	r2,0(r3)
 10033d8:	00000406 	br	10033ec <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 10033dc:	100340c0 	call	100340c <alt_get_errno>
 10033e0:	1007883a 	mov	r3,r2
 10033e4:	00801444 	movi	r2,81
 10033e8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 10033ec:	00bfffc4 	movi	r2,-1
 10033f0:	e0bffe15 	stw	r2,-8(fp)
 10033f4:	e0bffe17 	ldw	r2,-8(fp)
}
 10033f8:	e037883a 	mov	sp,fp
 10033fc:	dfc00117 	ldw	ra,4(sp)
 1003400:	df000017 	ldw	fp,0(sp)
 1003404:	dec00204 	addi	sp,sp,8
 1003408:	f800283a 	ret

0100340c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100340c:	defffd04 	addi	sp,sp,-12
 1003410:	dfc00215 	stw	ra,8(sp)
 1003414:	df000115 	stw	fp,4(sp)
 1003418:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100341c:	00804074 	movhi	r2,257
 1003420:	10a6c404 	addi	r2,r2,-25840
 1003424:	10800017 	ldw	r2,0(r2)
 1003428:	1005003a 	cmpeq	r2,r2,zero
 100342c:	1000061e 	bne	r2,zero,1003448 <alt_get_errno+0x3c>
 1003430:	00804074 	movhi	r2,257
 1003434:	10a6c404 	addi	r2,r2,-25840
 1003438:	10800017 	ldw	r2,0(r2)
 100343c:	103ee83a 	callr	r2
 1003440:	e0bfff15 	stw	r2,-4(fp)
 1003444:	00000306 	br	1003454 <alt_get_errno+0x48>
 1003448:	00804074 	movhi	r2,257
 100344c:	10adb504 	addi	r2,r2,-18732
 1003450:	e0bfff15 	stw	r2,-4(fp)
 1003454:	e0bfff17 	ldw	r2,-4(fp)
}
 1003458:	e037883a 	mov	sp,fp
 100345c:	dfc00117 	ldw	ra,4(sp)
 1003460:	df000017 	ldw	fp,0(sp)
 1003464:	dec00204 	addi	sp,sp,8
 1003468:	f800283a 	ret

0100346c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 100346c:	defffe04 	addi	sp,sp,-8
 1003470:	df000115 	stw	fp,4(sp)
 1003474:	df000104 	addi	fp,sp,4
 1003478:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 100347c:	e0bfff17 	ldw	r2,-4(fp)
 1003480:	108000d0 	cmplti	r2,r2,3
 1003484:	10000d1e 	bne	r2,zero,10034bc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 1003488:	e0bfff17 	ldw	r2,-4(fp)
 100348c:	00c04074 	movhi	r3,257
 1003490:	18e1ec04 	addi	r3,r3,-30800
 1003494:	10800324 	muli	r2,r2,12
 1003498:	10c5883a 	add	r2,r2,r3
 100349c:	10800204 	addi	r2,r2,8
 10034a0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 10034a4:	e0bfff17 	ldw	r2,-4(fp)
 10034a8:	00c04074 	movhi	r3,257
 10034ac:	18e1ec04 	addi	r3,r3,-30800
 10034b0:	10800324 	muli	r2,r2,12
 10034b4:	10c5883a 	add	r2,r2,r3
 10034b8:	10000015 	stw	zero,0(r2)
  }
}
 10034bc:	e037883a 	mov	sp,fp
 10034c0:	df000017 	ldw	fp,0(sp)
 10034c4:	dec00104 	addi	sp,sp,4
 10034c8:	f800283a 	ret

010034cc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 10034cc:	defff804 	addi	sp,sp,-32
 10034d0:	df000715 	stw	fp,28(sp)
 10034d4:	df000704 	addi	fp,sp,28
 10034d8:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10034dc:	0005303a 	rdctl	r2,status
 10034e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10034e4:	e0fffb17 	ldw	r3,-20(fp)
 10034e8:	00bfff84 	movi	r2,-2
 10034ec:	1884703a 	and	r2,r3,r2
 10034f0:	1001703a 	wrctl	status,r2
  
  return context;
 10034f4:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 10034f8:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 10034fc:	d0a00a17 	ldw	r2,-32728(gp)
 1003500:	10c000c4 	addi	r3,r2,3
 1003504:	00bfff04 	movi	r2,-4
 1003508:	1884703a 	and	r2,r3,r2
 100350c:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 1003510:	d0e00a17 	ldw	r3,-32728(gp)
 1003514:	e0bffe17 	ldw	r2,-8(fp)
 1003518:	1887883a 	add	r3,r3,r2
 100351c:	00806034 	movhi	r2,384
 1003520:	10800004 	addi	r2,r2,0
 1003524:	10c0072e 	bgeu	r2,r3,1003544 <sbrk+0x78>
 1003528:	e0bffd17 	ldw	r2,-12(fp)
 100352c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1003530:	e0bffa17 	ldw	r2,-24(fp)
 1003534:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 1003538:	00bfffc4 	movi	r2,-1
 100353c:	e0bfff15 	stw	r2,-4(fp)
 1003540:	00000c06 	br	1003574 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 1003544:	d0a00a17 	ldw	r2,-32728(gp)
 1003548:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 100354c:	d0e00a17 	ldw	r3,-32728(gp)
 1003550:	e0bffe17 	ldw	r2,-8(fp)
 1003554:	1885883a 	add	r2,r3,r2
 1003558:	d0a00a15 	stw	r2,-32728(gp)
 100355c:	e0bffd17 	ldw	r2,-12(fp)
 1003560:	e0bff915 	stw	r2,-28(fp)
 1003564:	e0bff917 	ldw	r2,-28(fp)
 1003568:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 100356c:	e0bffc17 	ldw	r2,-16(fp)
 1003570:	e0bfff15 	stw	r2,-4(fp)
 1003574:	e0bfff17 	ldw	r2,-4(fp)
} 
 1003578:	e037883a 	mov	sp,fp
 100357c:	df000017 	ldw	fp,0(sp)
 1003580:	dec00104 	addi	sp,sp,4
 1003584:	f800283a 	ret

01003588 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 1003588:	defff704 	addi	sp,sp,-36
 100358c:	dfc00815 	stw	ra,32(sp)
 1003590:	df000715 	stw	fp,28(sp)
 1003594:	df000704 	addi	fp,sp,28
 1003598:	e13ffb15 	stw	r4,-20(fp)
 100359c:	e17ffc15 	stw	r5,-16(fp)
 10035a0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 10035a4:	e0bffb17 	ldw	r2,-20(fp)
 10035a8:	1004803a 	cmplt	r2,r2,zero
 10035ac:	1000081e 	bne	r2,zero,10035d0 <write+0x48>
 10035b0:	e0bffb17 	ldw	r2,-20(fp)
 10035b4:	10800324 	muli	r2,r2,12
 10035b8:	1007883a 	mov	r3,r2
 10035bc:	00804074 	movhi	r2,257
 10035c0:	10a1ec04 	addi	r2,r2,-30800
 10035c4:	1887883a 	add	r3,r3,r2
 10035c8:	e0ffff15 	stw	r3,-4(fp)
 10035cc:	00000106 	br	10035d4 <write+0x4c>
 10035d0:	e03fff15 	stw	zero,-4(fp)
 10035d4:	e0bfff17 	ldw	r2,-4(fp)
 10035d8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 10035dc:	e0bffa17 	ldw	r2,-24(fp)
 10035e0:	1005003a 	cmpeq	r2,r2,zero
 10035e4:	1000241e 	bne	r2,zero,1003678 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 10035e8:	e0bffa17 	ldw	r2,-24(fp)
 10035ec:	10800217 	ldw	r2,8(r2)
 10035f0:	108000cc 	andi	r2,r2,3
 10035f4:	1005003a 	cmpeq	r2,r2,zero
 10035f8:	10001a1e 	bne	r2,zero,1003664 <write+0xdc>
 10035fc:	e0bffa17 	ldw	r2,-24(fp)
 1003600:	10800017 	ldw	r2,0(r2)
 1003604:	10800617 	ldw	r2,24(r2)
 1003608:	1005003a 	cmpeq	r2,r2,zero
 100360c:	1000151e 	bne	r2,zero,1003664 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 1003610:	e0bffa17 	ldw	r2,-24(fp)
 1003614:	10800017 	ldw	r2,0(r2)
 1003618:	10800617 	ldw	r2,24(r2)
 100361c:	e17ffc17 	ldw	r5,-16(fp)
 1003620:	e1bffd17 	ldw	r6,-12(fp)
 1003624:	e13ffa17 	ldw	r4,-24(fp)
 1003628:	103ee83a 	callr	r2
 100362c:	e0bff915 	stw	r2,-28(fp)
 1003630:	e0bff917 	ldw	r2,-28(fp)
 1003634:	1004403a 	cmpge	r2,r2,zero
 1003638:	1000071e 	bne	r2,zero,1003658 <write+0xd0>
      {
        ALT_ERRNO = -rval;
 100363c:	10036a80 	call	10036a8 <alt_get_errno>
 1003640:	e0fff917 	ldw	r3,-28(fp)
 1003644:	00c7c83a 	sub	r3,zero,r3
 1003648:	10c00015 	stw	r3,0(r2)
        return -1;
 100364c:	00bfffc4 	movi	r2,-1
 1003650:	e0bffe15 	stw	r2,-8(fp)
 1003654:	00000e06 	br	1003690 <write+0x108>
      }
      return rval;
 1003658:	e0bff917 	ldw	r2,-28(fp)
 100365c:	e0bffe15 	stw	r2,-8(fp)
 1003660:	00000b06 	br	1003690 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
 1003664:	10036a80 	call	10036a8 <alt_get_errno>
 1003668:	1007883a 	mov	r3,r2
 100366c:	00800344 	movi	r2,13
 1003670:	18800015 	stw	r2,0(r3)
 1003674:	00000406 	br	1003688 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 1003678:	10036a80 	call	10036a8 <alt_get_errno>
 100367c:	1007883a 	mov	r3,r2
 1003680:	00801444 	movi	r2,81
 1003684:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1003688:	00bfffc4 	movi	r2,-1
 100368c:	e0bffe15 	stw	r2,-8(fp)
 1003690:	e0bffe17 	ldw	r2,-8(fp)
}
 1003694:	e037883a 	mov	sp,fp
 1003698:	dfc00117 	ldw	ra,4(sp)
 100369c:	df000017 	ldw	fp,0(sp)
 10036a0:	dec00204 	addi	sp,sp,8
 10036a4:	f800283a 	ret

010036a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10036a8:	defffd04 	addi	sp,sp,-12
 10036ac:	dfc00215 	stw	ra,8(sp)
 10036b0:	df000115 	stw	fp,4(sp)
 10036b4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10036b8:	00804074 	movhi	r2,257
 10036bc:	10a6c404 	addi	r2,r2,-25840
 10036c0:	10800017 	ldw	r2,0(r2)
 10036c4:	1005003a 	cmpeq	r2,r2,zero
 10036c8:	1000061e 	bne	r2,zero,10036e4 <alt_get_errno+0x3c>
 10036cc:	00804074 	movhi	r2,257
 10036d0:	10a6c404 	addi	r2,r2,-25840
 10036d4:	10800017 	ldw	r2,0(r2)
 10036d8:	103ee83a 	callr	r2
 10036dc:	e0bfff15 	stw	r2,-4(fp)
 10036e0:	00000306 	br	10036f0 <alt_get_errno+0x48>
 10036e4:	00804074 	movhi	r2,257
 10036e8:	10adb504 	addi	r2,r2,-18732
 10036ec:	e0bfff15 	stw	r2,-4(fp)
 10036f0:	e0bfff17 	ldw	r2,-4(fp)
}
 10036f4:	e037883a 	mov	sp,fp
 10036f8:	dfc00117 	ldw	ra,4(sp)
 10036fc:	df000017 	ldw	fp,0(sp)
 1003700:	dec00204 	addi	sp,sp,8
 1003704:	f800283a 	ret

01003708 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 1003708:	defffd04 	addi	sp,sp,-12
 100370c:	dfc00215 	stw	ra,8(sp)
 1003710:	df000115 	stw	fp,4(sp)
 1003714:	df000104 	addi	fp,sp,4
 1003718:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_SYSTEM, nios2_system);
 100371c:	10076a80 	call	10076a8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 1003720:	00800044 	movi	r2,1
 1003724:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 1003728:	e037883a 	mov	sp,fp
 100372c:	dfc00117 	ldw	ra,4(sp)
 1003730:	df000017 	ldw	fp,0(sp)
 1003734:	dec00204 	addi	sp,sp,8
 1003738:	f800283a 	ret

0100373c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 100373c:	defffd04 	addi	sp,sp,-12
 1003740:	dfc00215 	stw	ra,8(sp)
 1003744:	df000115 	stw	fp,4(sp)
 1003748:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( SDCARD_TIMER, sdcard_timer);
 100374c:	01121004 	movi	r4,18496
 1003750:	000b883a 	mov	r5,zero
 1003754:	01800044 	movi	r6,1
 1003758:	01c0fa04 	movi	r7,1000
 100375c:	10045e40 	call	10045e4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, JTAG);
 1003760:	01004074 	movhi	r4,257
 1003764:	21225604 	addi	r4,r4,-30376
 1003768:	000b883a 	mov	r5,zero
 100376c:	000d883a 	mov	r6,zero
 1003770:	1003c100 	call	1003c10 <altera_avalon_jtag_uart_init>
 1003774:	01004074 	movhi	r4,257
 1003778:	21224c04 	addi	r4,r4,-30416
 100377c:	1003a900 	call	1003a90 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_0, audio_0);
 1003780:	01004074 	movhi	r4,257
 1003784:	21266404 	addi	r4,r4,-26224
 1003788:	1003a900 	call	1003a90 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 100378c:	01004074 	movhi	r4,257
 1003790:	21267004 	addi	r4,r4,-26176
 1003794:	100471c0 	call	100471c <alt_up_character_lcd_init>
 1003798:	01004074 	movhi	r4,257
 100379c:	21267004 	addi	r4,r4,-26176
 10037a0:	1003a900 	call	1003a90 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_0, ps2_0);
 10037a4:	01004074 	movhi	r4,257
 10037a8:	21267b04 	addi	r4,r4,-26132
 10037ac:	1004cc80 	call	1004cc8 <alt_up_ps2_init>
 10037b0:	01004074 	movhi	r4,257
 10037b4:	21267b04 	addi	r4,r4,-26132
 10037b8:	1003a900 	call	1003a90 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VIDEO_CHARACTER_BUFFER_WITH_DMA_0, video_character_buffer_with_dma_0);
 10037bc:	00804074 	movhi	r2,257
 10037c0:	10a68904 	addi	r2,r2,-26076
 10037c4:	10800a17 	ldw	r2,40(r2)
 10037c8:	10800104 	addi	r2,r2,4
 10037cc:	10800017 	ldw	r2,0(r2)
 10037d0:	10ffffcc 	andi	r3,r2,65535
 10037d4:	00804074 	movhi	r2,257
 10037d8:	10a68904 	addi	r2,r2,-26076
 10037dc:	10c00c15 	stw	r3,48(r2)
 10037e0:	00804074 	movhi	r2,257
 10037e4:	10a68904 	addi	r2,r2,-26076
 10037e8:	10800a17 	ldw	r2,40(r2)
 10037ec:	10800104 	addi	r2,r2,4
 10037f0:	10800017 	ldw	r2,0(r2)
 10037f4:	1005d43a 	srai	r2,r2,16
 10037f8:	10ffffcc 	andi	r3,r2,65535
 10037fc:	00804074 	movhi	r2,257
 1003800:	10a68904 	addi	r2,r2,-26076
 1003804:	10c00d15 	stw	r3,52(r2)
 1003808:	00804074 	movhi	r2,257
 100380c:	10a68904 	addi	r2,r2,-26076
 1003810:	10800c17 	ldw	r2,48(r2)
 1003814:	10801068 	cmpgeui	r2,r2,65
 1003818:	1000081e 	bne	r2,zero,100383c <alt_sys_init+0x100>
 100381c:	00c04074 	movhi	r3,257
 1003820:	18e68904 	addi	r3,r3,-26076
 1003824:	00800fc4 	movi	r2,63
 1003828:	18800f15 	stw	r2,60(r3)
 100382c:	00c04074 	movhi	r3,257
 1003830:	18e68904 	addi	r3,r3,-26076
 1003834:	00800184 	movi	r2,6
 1003838:	18801015 	stw	r2,64(r3)
 100383c:	00804074 	movhi	r2,257
 1003840:	10a68904 	addi	r2,r2,-26076
 1003844:	10800d17 	ldw	r2,52(r2)
 1003848:	10800868 	cmpgeui	r2,r2,33
 100384c:	1000041e 	bne	r2,zero,1003860 <alt_sys_init+0x124>
 1003850:	00c04074 	movhi	r3,257
 1003854:	18e68904 	addi	r3,r3,-26076
 1003858:	008007c4 	movi	r2,31
 100385c:	18801115 	stw	r2,68(r3)
 1003860:	01004074 	movhi	r4,257
 1003864:	21268904 	addi	r4,r4,-26076
 1003868:	100529c0 	call	100529c <alt_up_char_buffer_init>
 100386c:	01004074 	movhi	r4,257
 1003870:	21268904 	addi	r4,r4,-26076
 1003874:	1003a900 	call	1003a90 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA, video_pixel_buffer_dma);
 1003878:	00804074 	movhi	r2,257
 100387c:	10a69b04 	addi	r2,r2,-26004
 1003880:	10800a17 	ldw	r2,40(r2)
 1003884:	10800017 	ldw	r2,0(r2)
 1003888:	1007883a 	mov	r3,r2
 100388c:	00804074 	movhi	r2,257
 1003890:	10a69b04 	addi	r2,r2,-26004
 1003894:	10c00b15 	stw	r3,44(r2)
 1003898:	00804074 	movhi	r2,257
 100389c:	10a69b04 	addi	r2,r2,-26004
 10038a0:	10800a17 	ldw	r2,40(r2)
 10038a4:	10800104 	addi	r2,r2,4
 10038a8:	10800017 	ldw	r2,0(r2)
 10038ac:	1007883a 	mov	r3,r2
 10038b0:	00804074 	movhi	r2,257
 10038b4:	10a69b04 	addi	r2,r2,-26004
 10038b8:	10c00c15 	stw	r3,48(r2)
 10038bc:	00804074 	movhi	r2,257
 10038c0:	10a69b04 	addi	r2,r2,-26004
 10038c4:	10800a17 	ldw	r2,40(r2)
 10038c8:	10800204 	addi	r2,r2,8
 10038cc:	10800017 	ldw	r2,0(r2)
 10038d0:	10ffffcc 	andi	r3,r2,65535
 10038d4:	00804074 	movhi	r2,257
 10038d8:	10a69b04 	addi	r2,r2,-26004
 10038dc:	10c00f15 	stw	r3,60(r2)
 10038e0:	00804074 	movhi	r2,257
 10038e4:	10a69b04 	addi	r2,r2,-26004
 10038e8:	10800a17 	ldw	r2,40(r2)
 10038ec:	10800204 	addi	r2,r2,8
 10038f0:	10800017 	ldw	r2,0(r2)
 10038f4:	1005d43a 	srai	r2,r2,16
 10038f8:	10ffffcc 	andi	r3,r2,65535
 10038fc:	00804074 	movhi	r2,257
 1003900:	10a69b04 	addi	r2,r2,-26004
 1003904:	10c01015 	stw	r3,64(r2)
 1003908:	00804074 	movhi	r2,257
 100390c:	10a69b04 	addi	r2,r2,-26004
 1003910:	10800a17 	ldw	r2,40(r2)
 1003914:	10800304 	addi	r2,r2,12
 1003918:	10800017 	ldw	r2,0(r2)
 100391c:	1005d07a 	srai	r2,r2,1
 1003920:	10c0004c 	andi	r3,r2,1
 1003924:	00804074 	movhi	r2,257
 1003928:	10a69b04 	addi	r2,r2,-26004
 100392c:	10c00d15 	stw	r3,52(r2)
 1003930:	00804074 	movhi	r2,257
 1003934:	10a69b04 	addi	r2,r2,-26004
 1003938:	10800a17 	ldw	r2,40(r2)
 100393c:	10800304 	addi	r2,r2,12
 1003940:	10800017 	ldw	r2,0(r2)
 1003944:	1005d13a 	srai	r2,r2,4
 1003948:	10c003cc 	andi	r3,r2,15
 100394c:	00804074 	movhi	r2,257
 1003950:	10a69b04 	addi	r2,r2,-26004
 1003954:	10c00e15 	stw	r3,56(r2)
 1003958:	00804074 	movhi	r2,257
 100395c:	10a69b04 	addi	r2,r2,-26004
 1003960:	10800a17 	ldw	r2,40(r2)
 1003964:	10800304 	addi	r2,r2,12
 1003968:	10800017 	ldw	r2,0(r2)
 100396c:	1005d43a 	srai	r2,r2,16
 1003970:	1007883a 	mov	r3,r2
 1003974:	00bfffc4 	movi	r2,-1
 1003978:	1884703a 	and	r2,r3,r2
 100397c:	e0bfff45 	stb	r2,-3(fp)
 1003980:	00804074 	movhi	r2,257
 1003984:	10a69b04 	addi	r2,r2,-26004
 1003988:	10800a17 	ldw	r2,40(r2)
 100398c:	10800304 	addi	r2,r2,12
 1003990:	10800017 	ldw	r2,0(r2)
 1003994:	1005d63a 	srai	r2,r2,24
 1003998:	1007883a 	mov	r3,r2
 100399c:	00bfffc4 	movi	r2,-1
 10039a0:	1884703a 	and	r2,r3,r2
 10039a4:	e0bfff05 	stb	r2,-4(fp)
 10039a8:	00804074 	movhi	r2,257
 10039ac:	10a69b04 	addi	r2,r2,-26004
 10039b0:	10800e17 	ldw	r2,56(r2)
 10039b4:	10800058 	cmpnei	r2,r2,1
 10039b8:	1000041e 	bne	r2,zero,10039cc <alt_sys_init+0x290>
 10039bc:	00804074 	movhi	r2,257
 10039c0:	10a69b04 	addi	r2,r2,-26004
 10039c4:	10001115 	stw	zero,68(r2)
 10039c8:	00000e06 	br	1003a04 <alt_sys_init+0x2c8>
 10039cc:	00804074 	movhi	r2,257
 10039d0:	10a69b04 	addi	r2,r2,-26004
 10039d4:	10800e17 	ldw	r2,56(r2)
 10039d8:	10800098 	cmpnei	r2,r2,2
 10039dc:	1000051e 	bne	r2,zero,10039f4 <alt_sys_init+0x2b8>
 10039e0:	00c04074 	movhi	r3,257
 10039e4:	18e69b04 	addi	r3,r3,-26004
 10039e8:	00800044 	movi	r2,1
 10039ec:	18801115 	stw	r2,68(r3)
 10039f0:	00000406 	br	1003a04 <alt_sys_init+0x2c8>
 10039f4:	00c04074 	movhi	r3,257
 10039f8:	18e69b04 	addi	r3,r3,-26004
 10039fc:	00800084 	movi	r2,2
 1003a00:	18801115 	stw	r2,68(r3)
 1003a04:	e0ffff43 	ldbu	r3,-3(fp)
 1003a08:	00800804 	movi	r2,32
 1003a0c:	10c7c83a 	sub	r3,r2,r3
 1003a10:	00bfffc4 	movi	r2,-1
 1003a14:	10c6d83a 	srl	r3,r2,r3
 1003a18:	00804074 	movhi	r2,257
 1003a1c:	10a69b04 	addi	r2,r2,-26004
 1003a20:	10c01215 	stw	r3,72(r2)
 1003a24:	e0ffff43 	ldbu	r3,-3(fp)
 1003a28:	00804074 	movhi	r2,257
 1003a2c:	10a69b04 	addi	r2,r2,-26004
 1003a30:	10801117 	ldw	r2,68(r2)
 1003a34:	1887883a 	add	r3,r3,r2
 1003a38:	00804074 	movhi	r2,257
 1003a3c:	10a69b04 	addi	r2,r2,-26004
 1003a40:	10c01315 	stw	r3,76(r2)
 1003a44:	e0ffff03 	ldbu	r3,-4(fp)
 1003a48:	00800804 	movi	r2,32
 1003a4c:	10c7c83a 	sub	r3,r2,r3
 1003a50:	00bfffc4 	movi	r2,-1
 1003a54:	10c6d83a 	srl	r3,r2,r3
 1003a58:	00804074 	movhi	r2,257
 1003a5c:	10a69b04 	addi	r2,r2,-26004
 1003a60:	10c01415 	stw	r3,80(r2)
 1003a64:	01004074 	movhi	r4,257
 1003a68:	21269b04 	addi	r4,r4,-26004
 1003a6c:	1003a900 	call	1003a90 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
 1003a70:	01004074 	movhi	r4,257
 1003a74:	2126b004 	addi	r4,r4,-25920
 1003a78:	1003a900 	call	1003a90 <alt_dev_reg>
}
 1003a7c:	e037883a 	mov	sp,fp
 1003a80:	dfc00117 	ldw	ra,4(sp)
 1003a84:	df000017 	ldw	fp,0(sp)
 1003a88:	dec00204 	addi	sp,sp,8
 1003a8c:	f800283a 	ret

01003a90 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 1003a90:	defffd04 	addi	sp,sp,-12
 1003a94:	dfc00215 	stw	ra,8(sp)
 1003a98:	df000115 	stw	fp,4(sp)
 1003a9c:	df000104 	addi	fp,sp,4
 1003aa0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 1003aa4:	e13fff17 	ldw	r4,-4(fp)
 1003aa8:	01404074 	movhi	r5,257
 1003aac:	2966c104 	addi	r5,r5,-25852
 1003ab0:	1006ca40 	call	1006ca4 <alt_dev_llist_insert>
}
 1003ab4:	e037883a 	mov	sp,fp
 1003ab8:	dfc00117 	ldw	ra,4(sp)
 1003abc:	df000017 	ldw	fp,0(sp)
 1003ac0:	dec00204 	addi	sp,sp,8
 1003ac4:	f800283a 	ret

01003ac8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 1003ac8:	defffa04 	addi	sp,sp,-24
 1003acc:	dfc00515 	stw	ra,20(sp)
 1003ad0:	df000415 	stw	fp,16(sp)
 1003ad4:	df000404 	addi	fp,sp,16
 1003ad8:	e13ffd15 	stw	r4,-12(fp)
 1003adc:	e17ffe15 	stw	r5,-8(fp)
 1003ae0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1003ae4:	e0bffd17 	ldw	r2,-12(fp)
 1003ae8:	10800017 	ldw	r2,0(r2)
 1003aec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 1003af0:	e0bffc17 	ldw	r2,-16(fp)
 1003af4:	11000a04 	addi	r4,r2,40
 1003af8:	e0bffd17 	ldw	r2,-12(fp)
 1003afc:	11c00217 	ldw	r7,8(r2)
 1003b00:	e17ffe17 	ldw	r5,-8(fp)
 1003b04:	e1bfff17 	ldw	r6,-4(fp)
 1003b08:	100410c0 	call	100410c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 1003b0c:	e037883a 	mov	sp,fp
 1003b10:	dfc00117 	ldw	ra,4(sp)
 1003b14:	df000017 	ldw	fp,0(sp)
 1003b18:	dec00204 	addi	sp,sp,8
 1003b1c:	f800283a 	ret

01003b20 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 1003b20:	defffa04 	addi	sp,sp,-24
 1003b24:	dfc00515 	stw	ra,20(sp)
 1003b28:	df000415 	stw	fp,16(sp)
 1003b2c:	df000404 	addi	fp,sp,16
 1003b30:	e13ffd15 	stw	r4,-12(fp)
 1003b34:	e17ffe15 	stw	r5,-8(fp)
 1003b38:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1003b3c:	e0bffd17 	ldw	r2,-12(fp)
 1003b40:	10800017 	ldw	r2,0(r2)
 1003b44:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 1003b48:	e0bffc17 	ldw	r2,-16(fp)
 1003b4c:	11000a04 	addi	r4,r2,40
 1003b50:	e0bffd17 	ldw	r2,-12(fp)
 1003b54:	11c00217 	ldw	r7,8(r2)
 1003b58:	e17ffe17 	ldw	r5,-8(fp)
 1003b5c:	e1bfff17 	ldw	r6,-4(fp)
 1003b60:	10043300 	call	1004330 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 1003b64:	e037883a 	mov	sp,fp
 1003b68:	dfc00117 	ldw	ra,4(sp)
 1003b6c:	df000017 	ldw	fp,0(sp)
 1003b70:	dec00204 	addi	sp,sp,8
 1003b74:	f800283a 	ret

01003b78 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 1003b78:	defffc04 	addi	sp,sp,-16
 1003b7c:	dfc00315 	stw	ra,12(sp)
 1003b80:	df000215 	stw	fp,8(sp)
 1003b84:	df000204 	addi	fp,sp,8
 1003b88:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1003b8c:	e0bfff17 	ldw	r2,-4(fp)
 1003b90:	10800017 	ldw	r2,0(r2)
 1003b94:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 1003b98:	e0bffe17 	ldw	r2,-8(fp)
 1003b9c:	11000a04 	addi	r4,r2,40
 1003ba0:	e0bfff17 	ldw	r2,-4(fp)
 1003ba4:	11400217 	ldw	r5,8(r2)
 1003ba8:	1003fa40 	call	1003fa4 <altera_avalon_jtag_uart_close>
}
 1003bac:	e037883a 	mov	sp,fp
 1003bb0:	dfc00117 	ldw	ra,4(sp)
 1003bb4:	df000017 	ldw	fp,0(sp)
 1003bb8:	dec00204 	addi	sp,sp,8
 1003bbc:	f800283a 	ret

01003bc0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 1003bc0:	defffa04 	addi	sp,sp,-24
 1003bc4:	dfc00515 	stw	ra,20(sp)
 1003bc8:	df000415 	stw	fp,16(sp)
 1003bcc:	df000404 	addi	fp,sp,16
 1003bd0:	e13ffd15 	stw	r4,-12(fp)
 1003bd4:	e17ffe15 	stw	r5,-8(fp)
 1003bd8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 1003bdc:	e0bffd17 	ldw	r2,-12(fp)
 1003be0:	10800017 	ldw	r2,0(r2)
 1003be4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 1003be8:	e0bffc17 	ldw	r2,-16(fp)
 1003bec:	11000a04 	addi	r4,r2,40
 1003bf0:	e17ffe17 	ldw	r5,-8(fp)
 1003bf4:	e1bfff17 	ldw	r6,-4(fp)
 1003bf8:	10040180 	call	1004018 <altera_avalon_jtag_uart_ioctl>
}
 1003bfc:	e037883a 	mov	sp,fp
 1003c00:	dfc00117 	ldw	ra,4(sp)
 1003c04:	df000017 	ldw	fp,0(sp)
 1003c08:	dec00204 	addi	sp,sp,8
 1003c0c:	f800283a 	ret

01003c10 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 1003c10:	defffb04 	addi	sp,sp,-20
 1003c14:	dfc00415 	stw	ra,16(sp)
 1003c18:	df000315 	stw	fp,12(sp)
 1003c1c:	df000304 	addi	fp,sp,12
 1003c20:	e13ffd15 	stw	r4,-12(fp)
 1003c24:	e17ffe15 	stw	r5,-8(fp)
 1003c28:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1003c2c:	e0fffd17 	ldw	r3,-12(fp)
 1003c30:	00800044 	movi	r2,1
 1003c34:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 1003c38:	e0bffd17 	ldw	r2,-12(fp)
 1003c3c:	10800017 	ldw	r2,0(r2)
 1003c40:	11000104 	addi	r4,r2,4
 1003c44:	e0bffd17 	ldw	r2,-12(fp)
 1003c48:	10800817 	ldw	r2,32(r2)
 1003c4c:	1007883a 	mov	r3,r2
 1003c50:	2005883a 	mov	r2,r4
 1003c54:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 1003c58:	e13fff17 	ldw	r4,-4(fp)
 1003c5c:	e17ffd17 	ldw	r5,-12(fp)
 1003c60:	01804034 	movhi	r6,256
 1003c64:	318f3204 	addi	r6,r6,15560
 1003c68:	10070800 	call	1007080 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 1003c6c:	e0bffd17 	ldw	r2,-12(fp)
 1003c70:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 1003c74:	e0bffd17 	ldw	r2,-12(fp)
 1003c78:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1003c7c:	00804074 	movhi	r2,257
 1003c80:	10adba04 	addi	r2,r2,-18712
 1003c84:	10800017 	ldw	r2,0(r2)
 1003c88:	100b883a 	mov	r5,r2
 1003c8c:	01804034 	movhi	r6,256
 1003c90:	318fbd04 	addi	r6,r6,16116
 1003c94:	e1fffd17 	ldw	r7,-12(fp)
 1003c98:	1006b0c0 	call	1006b0c <alt_alarm_start>
 1003c9c:	1004403a 	cmpge	r2,r2,zero
 1003ca0:	1000041e 	bne	r2,zero,1003cb4 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 1003ca4:	e0fffd17 	ldw	r3,-12(fp)
 1003ca8:	00a00034 	movhi	r2,32768
 1003cac:	10bfffc4 	addi	r2,r2,-1
 1003cb0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 1003cb4:	e037883a 	mov	sp,fp
 1003cb8:	dfc00117 	ldw	ra,4(sp)
 1003cbc:	df000017 	ldw	fp,0(sp)
 1003cc0:	dec00204 	addi	sp,sp,8
 1003cc4:	f800283a 	ret

01003cc8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 1003cc8:	defff704 	addi	sp,sp,-36
 1003ccc:	df000815 	stw	fp,32(sp)
 1003cd0:	df000804 	addi	fp,sp,32
 1003cd4:	e13ffe15 	stw	r4,-8(fp)
 1003cd8:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 1003cdc:	e0bffe17 	ldw	r2,-8(fp)
 1003ce0:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 1003ce4:	e0bffd17 	ldw	r2,-12(fp)
 1003ce8:	10800017 	ldw	r2,0(r2)
 1003cec:	e0bffc15 	stw	r2,-16(fp)
 1003cf0:	00000006 	br	1003cf4 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1003cf4:	e0bffc17 	ldw	r2,-16(fp)
 1003cf8:	10800104 	addi	r2,r2,4
 1003cfc:	10800037 	ldwio	r2,0(r2)
 1003d00:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 1003d04:	e0bffb17 	ldw	r2,-20(fp)
 1003d08:	1080c00c 	andi	r2,r2,768
 1003d0c:	1005003a 	cmpeq	r2,r2,zero
 1003d10:	1000741e 	bne	r2,zero,1003ee4 <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 1003d14:	e0bffb17 	ldw	r2,-20(fp)
 1003d18:	1080400c 	andi	r2,r2,256
 1003d1c:	1005003a 	cmpeq	r2,r2,zero
 1003d20:	1000351e 	bne	r2,zero,1003df8 <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 1003d24:	00800074 	movhi	r2,1
 1003d28:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1003d2c:	e0bffd17 	ldw	r2,-12(fp)
 1003d30:	10800a17 	ldw	r2,40(r2)
 1003d34:	10800044 	addi	r2,r2,1
 1003d38:	1081ffcc 	andi	r2,r2,2047
 1003d3c:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
 1003d40:	e0bffd17 	ldw	r2,-12(fp)
 1003d44:	10c00b17 	ldw	r3,44(r2)
 1003d48:	e0bff917 	ldw	r2,-28(fp)
 1003d4c:	18801626 	beq	r3,r2,1003da8 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 1003d50:	e0bffc17 	ldw	r2,-16(fp)
 1003d54:	10800037 	ldwio	r2,0(r2)
 1003d58:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 1003d5c:	e0bffa17 	ldw	r2,-24(fp)
 1003d60:	10a0000c 	andi	r2,r2,32768
 1003d64:	1005003a 	cmpeq	r2,r2,zero
 1003d68:	10000f1e 	bne	r2,zero,1003da8 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 1003d6c:	e0bffd17 	ldw	r2,-12(fp)
 1003d70:	10c00a17 	ldw	r3,40(r2)
 1003d74:	e0bffa17 	ldw	r2,-24(fp)
 1003d78:	1009883a 	mov	r4,r2
 1003d7c:	e0bffd17 	ldw	r2,-12(fp)
 1003d80:	1885883a 	add	r2,r3,r2
 1003d84:	10800e04 	addi	r2,r2,56
 1003d88:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1003d8c:	e0bffd17 	ldw	r2,-12(fp)
 1003d90:	10800a17 	ldw	r2,40(r2)
 1003d94:	10800044 	addi	r2,r2,1
 1003d98:	10c1ffcc 	andi	r3,r2,2047
 1003d9c:	e0bffd17 	ldw	r2,-12(fp)
 1003da0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 1003da4:	003fe106 	br	1003d2c <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 1003da8:	e0bffa17 	ldw	r2,-24(fp)
 1003dac:	10bfffec 	andhi	r2,r2,65535
 1003db0:	1005003a 	cmpeq	r2,r2,zero
 1003db4:	1000101e 	bne	r2,zero,1003df8 <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1003db8:	e0bffd17 	ldw	r2,-12(fp)
 1003dbc:	10c00817 	ldw	r3,32(r2)
 1003dc0:	00bfff84 	movi	r2,-2
 1003dc4:	1886703a 	and	r3,r3,r2
 1003dc8:	e0bffd17 	ldw	r2,-12(fp)
 1003dcc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 1003dd0:	e0bffc17 	ldw	r2,-16(fp)
 1003dd4:	11000104 	addi	r4,r2,4
 1003dd8:	e0bffd17 	ldw	r2,-12(fp)
 1003ddc:	10800817 	ldw	r2,32(r2)
 1003de0:	1007883a 	mov	r3,r2
 1003de4:	2005883a 	mov	r2,r4
 1003de8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1003dec:	e0bffc17 	ldw	r2,-16(fp)
 1003df0:	10800104 	addi	r2,r2,4
 1003df4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 1003df8:	e0bffb17 	ldw	r2,-20(fp)
 1003dfc:	1080800c 	andi	r2,r2,512
 1003e00:	1005003a 	cmpeq	r2,r2,zero
 1003e04:	103fbb1e 	bne	r2,zero,1003cf4 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 1003e08:	e0bffb17 	ldw	r2,-20(fp)
 1003e0c:	10bfffec 	andhi	r2,r2,65535
 1003e10:	1004d43a 	srli	r2,r2,16
 1003e14:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 1003e18:	00001506 	br	1003e70 <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 1003e1c:	e13ffc17 	ldw	r4,-16(fp)
 1003e20:	e0bffd17 	ldw	r2,-12(fp)
 1003e24:	10c00d17 	ldw	r3,52(r2)
 1003e28:	e0bffd17 	ldw	r2,-12(fp)
 1003e2c:	1885883a 	add	r2,r3,r2
 1003e30:	10820e04 	addi	r2,r2,2104
 1003e34:	10800003 	ldbu	r2,0(r2)
 1003e38:	10c03fcc 	andi	r3,r2,255
 1003e3c:	18c0201c 	xori	r3,r3,128
 1003e40:	18ffe004 	addi	r3,r3,-128
 1003e44:	2005883a 	mov	r2,r4
 1003e48:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1003e4c:	e0bffd17 	ldw	r2,-12(fp)
 1003e50:	10800d17 	ldw	r2,52(r2)
 1003e54:	10800044 	addi	r2,r2,1
 1003e58:	10c1ffcc 	andi	r3,r2,2047
 1003e5c:	e0bffd17 	ldw	r2,-12(fp)
 1003e60:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 1003e64:	e0bff817 	ldw	r2,-32(fp)
 1003e68:	10bfffc4 	addi	r2,r2,-1
 1003e6c:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 1003e70:	e0bff817 	ldw	r2,-32(fp)
 1003e74:	1005003a 	cmpeq	r2,r2,zero
 1003e78:	1000051e 	bne	r2,zero,1003e90 <altera_avalon_jtag_uart_irq+0x1c8>
 1003e7c:	e0bffd17 	ldw	r2,-12(fp)
 1003e80:	10c00d17 	ldw	r3,52(r2)
 1003e84:	e0bffd17 	ldw	r2,-12(fp)
 1003e88:	10800c17 	ldw	r2,48(r2)
 1003e8c:	18bfe31e 	bne	r3,r2,1003e1c <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 1003e90:	e0bff817 	ldw	r2,-32(fp)
 1003e94:	1005003a 	cmpeq	r2,r2,zero
 1003e98:	103f961e 	bne	r2,zero,1003cf4 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1003e9c:	e0bffd17 	ldw	r2,-12(fp)
 1003ea0:	10c00817 	ldw	r3,32(r2)
 1003ea4:	00bfff44 	movi	r2,-3
 1003ea8:	1886703a 	and	r3,r3,r2
 1003eac:	e0bffd17 	ldw	r2,-12(fp)
 1003eb0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1003eb4:	e0bffd17 	ldw	r2,-12(fp)
 1003eb8:	10800017 	ldw	r2,0(r2)
 1003ebc:	11000104 	addi	r4,r2,4
 1003ec0:	e0bffd17 	ldw	r2,-12(fp)
 1003ec4:	10800817 	ldw	r2,32(r2)
 1003ec8:	1007883a 	mov	r3,r2
 1003ecc:	2005883a 	mov	r2,r4
 1003ed0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1003ed4:	e0bffc17 	ldw	r2,-16(fp)
 1003ed8:	10800104 	addi	r2,r2,4
 1003edc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 1003ee0:	003f8406 	br	1003cf4 <altera_avalon_jtag_uart_irq+0x2c>
}
 1003ee4:	e037883a 	mov	sp,fp
 1003ee8:	df000017 	ldw	fp,0(sp)
 1003eec:	dec00104 	addi	sp,sp,4
 1003ef0:	f800283a 	ret

01003ef4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 1003ef4:	defffc04 	addi	sp,sp,-16
 1003ef8:	df000315 	stw	fp,12(sp)
 1003efc:	df000304 	addi	fp,sp,12
 1003f00:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 1003f04:	e0bfff17 	ldw	r2,-4(fp)
 1003f08:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 1003f0c:	e0bffe17 	ldw	r2,-8(fp)
 1003f10:	10800017 	ldw	r2,0(r2)
 1003f14:	10800104 	addi	r2,r2,4
 1003f18:	10800037 	ldwio	r2,0(r2)
 1003f1c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 1003f20:	e0bffd17 	ldw	r2,-12(fp)
 1003f24:	1081000c 	andi	r2,r2,1024
 1003f28:	1005003a 	cmpeq	r2,r2,zero
 1003f2c:	10000c1e 	bne	r2,zero,1003f60 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 1003f30:	e0bffe17 	ldw	r2,-8(fp)
 1003f34:	10800017 	ldw	r2,0(r2)
 1003f38:	11000104 	addi	r4,r2,4
 1003f3c:	e0bffe17 	ldw	r2,-8(fp)
 1003f40:	10800817 	ldw	r2,32(r2)
 1003f44:	10810014 	ori	r2,r2,1024
 1003f48:	1007883a 	mov	r3,r2
 1003f4c:	2005883a 	mov	r2,r4
 1003f50:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 1003f54:	e0bffe17 	ldw	r2,-8(fp)
 1003f58:	10000915 	stw	zero,36(r2)
 1003f5c:	00000a06 	br	1003f88 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 1003f60:	e0bffe17 	ldw	r2,-8(fp)
 1003f64:	10c00917 	ldw	r3,36(r2)
 1003f68:	00a00034 	movhi	r2,32768
 1003f6c:	10bfff04 	addi	r2,r2,-4
 1003f70:	10c00536 	bltu	r2,r3,1003f88 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 1003f74:	e0bffe17 	ldw	r2,-8(fp)
 1003f78:	10800917 	ldw	r2,36(r2)
 1003f7c:	10c00044 	addi	r3,r2,1
 1003f80:	e0bffe17 	ldw	r2,-8(fp)
 1003f84:	10c00915 	stw	r3,36(r2)
 1003f88:	00804074 	movhi	r2,257
 1003f8c:	10adba04 	addi	r2,r2,-18712
 1003f90:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 1003f94:	e037883a 	mov	sp,fp
 1003f98:	df000017 	ldw	fp,0(sp)
 1003f9c:	dec00104 	addi	sp,sp,4
 1003fa0:	f800283a 	ret

01003fa4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 1003fa4:	defffc04 	addi	sp,sp,-16
 1003fa8:	df000315 	stw	fp,12(sp)
 1003fac:	df000304 	addi	fp,sp,12
 1003fb0:	e13ffd15 	stw	r4,-12(fp)
 1003fb4:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1003fb8:	00000706 	br	1003fd8 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 1003fbc:	e0bffe17 	ldw	r2,-8(fp)
 1003fc0:	1090000c 	andi	r2,r2,16384
 1003fc4:	1005003a 	cmpeq	r2,r2,zero
 1003fc8:	1000031e 	bne	r2,zero,1003fd8 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 1003fcc:	00bffd44 	movi	r2,-11
 1003fd0:	e0bfff15 	stw	r2,-4(fp)
 1003fd4:	00000b06 	br	1004004 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1003fd8:	e0bffd17 	ldw	r2,-12(fp)
 1003fdc:	10c00d17 	ldw	r3,52(r2)
 1003fe0:	e0bffd17 	ldw	r2,-12(fp)
 1003fe4:	10800c17 	ldw	r2,48(r2)
 1003fe8:	18800526 	beq	r3,r2,1004000 <altera_avalon_jtag_uart_close+0x5c>
 1003fec:	e0bffd17 	ldw	r2,-12(fp)
 1003ff0:	10c00917 	ldw	r3,36(r2)
 1003ff4:	e0bffd17 	ldw	r2,-12(fp)
 1003ff8:	10800117 	ldw	r2,4(r2)
 1003ffc:	18bfef36 	bltu	r3,r2,1003fbc <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 1004000:	e03fff15 	stw	zero,-4(fp)
 1004004:	e0bfff17 	ldw	r2,-4(fp)
}
 1004008:	e037883a 	mov	sp,fp
 100400c:	df000017 	ldw	fp,0(sp)
 1004010:	dec00104 	addi	sp,sp,4
 1004014:	f800283a 	ret

01004018 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 1004018:	defff804 	addi	sp,sp,-32
 100401c:	df000715 	stw	fp,28(sp)
 1004020:	df000704 	addi	fp,sp,28
 1004024:	e13ffb15 	stw	r4,-20(fp)
 1004028:	e17ffc15 	stw	r5,-16(fp)
 100402c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 1004030:	00bff9c4 	movi	r2,-25
 1004034:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 1004038:	e0bffc17 	ldw	r2,-16(fp)
 100403c:	e0bfff15 	stw	r2,-4(fp)
 1004040:	e0ffff17 	ldw	r3,-4(fp)
 1004044:	189a8060 	cmpeqi	r2,r3,27137
 1004048:	1000041e 	bne	r2,zero,100405c <altera_avalon_jtag_uart_ioctl+0x44>
 100404c:	e0ffff17 	ldw	r3,-4(fp)
 1004050:	189a80a0 	cmpeqi	r2,r3,27138
 1004054:	10001b1e 	bne	r2,zero,10040c4 <altera_avalon_jtag_uart_ioctl+0xac>
 1004058:	00002706 	br	10040f8 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 100405c:	e0bffb17 	ldw	r2,-20(fp)
 1004060:	10c00117 	ldw	r3,4(r2)
 1004064:	00a00034 	movhi	r2,32768
 1004068:	10bfffc4 	addi	r2,r2,-1
 100406c:	18802226 	beq	r3,r2,10040f8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 1004070:	e0bffd17 	ldw	r2,-12(fp)
 1004074:	10800017 	ldw	r2,0(r2)
 1004078:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 100407c:	e0bff917 	ldw	r2,-28(fp)
 1004080:	10800090 	cmplti	r2,r2,2
 1004084:	1000071e 	bne	r2,zero,10040a4 <altera_avalon_jtag_uart_ioctl+0x8c>
 1004088:	e0fff917 	ldw	r3,-28(fp)
 100408c:	00a00034 	movhi	r2,32768
 1004090:	10bfffc4 	addi	r2,r2,-1
 1004094:	18800326 	beq	r3,r2,10040a4 <altera_avalon_jtag_uart_ioctl+0x8c>
 1004098:	e0bff917 	ldw	r2,-28(fp)
 100409c:	e0bffe15 	stw	r2,-8(fp)
 10040a0:	00000306 	br	10040b0 <altera_avalon_jtag_uart_ioctl+0x98>
 10040a4:	00e00034 	movhi	r3,32768
 10040a8:	18ffff84 	addi	r3,r3,-2
 10040ac:	e0fffe15 	stw	r3,-8(fp)
 10040b0:	e0bffb17 	ldw	r2,-20(fp)
 10040b4:	e0fffe17 	ldw	r3,-8(fp)
 10040b8:	10c00115 	stw	r3,4(r2)
      rc = 0;
 10040bc:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 10040c0:	00000d06 	br	10040f8 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 10040c4:	e0bffb17 	ldw	r2,-20(fp)
 10040c8:	10c00117 	ldw	r3,4(r2)
 10040cc:	00a00034 	movhi	r2,32768
 10040d0:	10bfffc4 	addi	r2,r2,-1
 10040d4:	18800826 	beq	r3,r2,10040f8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 10040d8:	e13ffd17 	ldw	r4,-12(fp)
 10040dc:	e0bffb17 	ldw	r2,-20(fp)
 10040e0:	10c00917 	ldw	r3,36(r2)
 10040e4:	e0bffb17 	ldw	r2,-20(fp)
 10040e8:	10800117 	ldw	r2,4(r2)
 10040ec:	1885803a 	cmpltu	r2,r3,r2
 10040f0:	20800015 	stw	r2,0(r4)
      rc = 0;
 10040f4:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 10040f8:	e0bffa17 	ldw	r2,-24(fp)
}
 10040fc:	e037883a 	mov	sp,fp
 1004100:	df000017 	ldw	fp,0(sp)
 1004104:	dec00104 	addi	sp,sp,4
 1004108:	f800283a 	ret

0100410c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 100410c:	defff204 	addi	sp,sp,-56
 1004110:	dfc00d15 	stw	ra,52(sp)
 1004114:	df000c15 	stw	fp,48(sp)
 1004118:	df000c04 	addi	fp,sp,48
 100411c:	e13ffb15 	stw	r4,-20(fp)
 1004120:	e17ffc15 	stw	r5,-16(fp)
 1004124:	e1bffd15 	stw	r6,-12(fp)
 1004128:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 100412c:	e0bffc17 	ldw	r2,-16(fp)
 1004130:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1004134:	00004806 	br	1004258 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 1004138:	e0bffb17 	ldw	r2,-20(fp)
 100413c:	10800a17 	ldw	r2,40(r2)
 1004140:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 1004144:	e0bffb17 	ldw	r2,-20(fp)
 1004148:	10800b17 	ldw	r2,44(r2)
 100414c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 1004150:	e0fff717 	ldw	r3,-36(fp)
 1004154:	e0bff617 	ldw	r2,-40(fp)
 1004158:	18800536 	bltu	r3,r2,1004170 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 100415c:	e0bff717 	ldw	r2,-36(fp)
 1004160:	e0fff617 	ldw	r3,-40(fp)
 1004164:	10c5c83a 	sub	r2,r2,r3
 1004168:	e0bff815 	stw	r2,-32(fp)
 100416c:	00000406 	br	1004180 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 1004170:	00820004 	movi	r2,2048
 1004174:	e0fff617 	ldw	r3,-40(fp)
 1004178:	10c5c83a 	sub	r2,r2,r3
 100417c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 1004180:	e0bff817 	ldw	r2,-32(fp)
 1004184:	1005003a 	cmpeq	r2,r2,zero
 1004188:	10001f1e 	bne	r2,zero,1004208 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 100418c:	e0fffd17 	ldw	r3,-12(fp)
 1004190:	e0bff817 	ldw	r2,-32(fp)
 1004194:	1880022e 	bgeu	r3,r2,10041a0 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 1004198:	e0bffd17 	ldw	r2,-12(fp)
 100419c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 10041a0:	e0bffb17 	ldw	r2,-20(fp)
 10041a4:	10c00e04 	addi	r3,r2,56
 10041a8:	e0bff617 	ldw	r2,-40(fp)
 10041ac:	1887883a 	add	r3,r3,r2
 10041b0:	e0bffa17 	ldw	r2,-24(fp)
 10041b4:	1009883a 	mov	r4,r2
 10041b8:	180b883a 	mov	r5,r3
 10041bc:	e1bff817 	ldw	r6,-32(fp)
 10041c0:	10011000 	call	1001100 <memcpy>
      ptr   += n;
 10041c4:	e0fff817 	ldw	r3,-32(fp)
 10041c8:	e0bffa17 	ldw	r2,-24(fp)
 10041cc:	10c5883a 	add	r2,r2,r3
 10041d0:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 10041d4:	e0fffd17 	ldw	r3,-12(fp)
 10041d8:	e0bff817 	ldw	r2,-32(fp)
 10041dc:	1885c83a 	sub	r2,r3,r2
 10041e0:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10041e4:	e0fff617 	ldw	r3,-40(fp)
 10041e8:	e0bff817 	ldw	r2,-32(fp)
 10041ec:	1885883a 	add	r2,r3,r2
 10041f0:	10c1ffcc 	andi	r3,r2,2047
 10041f4:	e0bffb17 	ldw	r2,-20(fp)
 10041f8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 10041fc:	e0bffd17 	ldw	r2,-12(fp)
 1004200:	10800048 	cmpgei	r2,r2,1
 1004204:	103fcc1e 	bne	r2,zero,1004138 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 1004208:	e0fffa17 	ldw	r3,-24(fp)
 100420c:	e0bffc17 	ldw	r2,-16(fp)
 1004210:	1880141e 	bne	r3,r2,1004264 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 1004214:	e0bffe17 	ldw	r2,-8(fp)
 1004218:	1090000c 	andi	r2,r2,16384
 100421c:	1004c03a 	cmpne	r2,r2,zero
 1004220:	1000101e 	bne	r2,zero,1004264 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 1004224:	e0bffb17 	ldw	r2,-20(fp)
 1004228:	10c00a17 	ldw	r3,40(r2)
 100422c:	e0bff717 	ldw	r2,-36(fp)
 1004230:	1880051e 	bne	r3,r2,1004248 <altera_avalon_jtag_uart_read+0x13c>
 1004234:	e0bffb17 	ldw	r2,-20(fp)
 1004238:	10c00917 	ldw	r3,36(r2)
 100423c:	e0bffb17 	ldw	r2,-20(fp)
 1004240:	10800117 	ldw	r2,4(r2)
 1004244:	18bff736 	bltu	r3,r2,1004224 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 1004248:	e0bffb17 	ldw	r2,-20(fp)
 100424c:	10c00a17 	ldw	r3,40(r2)
 1004250:	e0bff717 	ldw	r2,-36(fp)
 1004254:	18800326 	beq	r3,r2,1004264 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1004258:	e0bffd17 	ldw	r2,-12(fp)
 100425c:	10800048 	cmpgei	r2,r2,1
 1004260:	103fb51e 	bne	r2,zero,1004138 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 1004264:	e0fffa17 	ldw	r3,-24(fp)
 1004268:	e0bffc17 	ldw	r2,-16(fp)
 100426c:	18801926 	beq	r3,r2,10042d4 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1004270:	0005303a 	rdctl	r2,status
 1004274:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1004278:	e0fff517 	ldw	r3,-44(fp)
 100427c:	00bfff84 	movi	r2,-2
 1004280:	1884703a 	and	r2,r3,r2
 1004284:	1001703a 	wrctl	status,r2
  
  return context;
 1004288:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 100428c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1004290:	e0bffb17 	ldw	r2,-20(fp)
 1004294:	10800817 	ldw	r2,32(r2)
 1004298:	10c00054 	ori	r3,r2,1
 100429c:	e0bffb17 	ldw	r2,-20(fp)
 10042a0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 10042a4:	e0bffb17 	ldw	r2,-20(fp)
 10042a8:	10800017 	ldw	r2,0(r2)
 10042ac:	11000104 	addi	r4,r2,4
 10042b0:	e0bffb17 	ldw	r2,-20(fp)
 10042b4:	10800817 	ldw	r2,32(r2)
 10042b8:	1007883a 	mov	r3,r2
 10042bc:	2005883a 	mov	r2,r4
 10042c0:	10c00035 	stwio	r3,0(r2)
 10042c4:	e0bff917 	ldw	r2,-28(fp)
 10042c8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10042cc:	e0bff417 	ldw	r2,-48(fp)
 10042d0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 10042d4:	e0fffa17 	ldw	r3,-24(fp)
 10042d8:	e0bffc17 	ldw	r2,-16(fp)
 10042dc:	18800526 	beq	r3,r2,10042f4 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 10042e0:	e0fffa17 	ldw	r3,-24(fp)
 10042e4:	e0bffc17 	ldw	r2,-16(fp)
 10042e8:	1887c83a 	sub	r3,r3,r2
 10042ec:	e0ffff15 	stw	r3,-4(fp)
 10042f0:	00000906 	br	1004318 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 10042f4:	e0bffe17 	ldw	r2,-8(fp)
 10042f8:	1090000c 	andi	r2,r2,16384
 10042fc:	1005003a 	cmpeq	r2,r2,zero
 1004300:	1000031e 	bne	r2,zero,1004310 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 1004304:	00bffd44 	movi	r2,-11
 1004308:	e0bfff15 	stw	r2,-4(fp)
 100430c:	00000206 	br	1004318 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 1004310:	00bffec4 	movi	r2,-5
 1004314:	e0bfff15 	stw	r2,-4(fp)
 1004318:	e0bfff17 	ldw	r2,-4(fp)
}
 100431c:	e037883a 	mov	sp,fp
 1004320:	dfc00117 	ldw	ra,4(sp)
 1004324:	df000017 	ldw	fp,0(sp)
 1004328:	dec00204 	addi	sp,sp,8
 100432c:	f800283a 	ret

01004330 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 1004330:	defff204 	addi	sp,sp,-56
 1004334:	dfc00d15 	stw	ra,52(sp)
 1004338:	df000c15 	stw	fp,48(sp)
 100433c:	df000c04 	addi	fp,sp,48
 1004340:	e13ffb15 	stw	r4,-20(fp)
 1004344:	e17ffc15 	stw	r5,-16(fp)
 1004348:	e1bffd15 	stw	r6,-12(fp)
 100434c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 1004350:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 1004354:	e0bffc17 	ldw	r2,-16(fp)
 1004358:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 100435c:	00003a06 	br	1004448 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 1004360:	e0bffb17 	ldw	r2,-20(fp)
 1004364:	10800c17 	ldw	r2,48(r2)
 1004368:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 100436c:	e0bffb17 	ldw	r2,-20(fp)
 1004370:	10800d17 	ldw	r2,52(r2)
 1004374:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 1004378:	e0fffa17 	ldw	r3,-24(fp)
 100437c:	e0bff917 	ldw	r2,-28(fp)
 1004380:	1880062e 	bgeu	r3,r2,100439c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 1004384:	e0fff917 	ldw	r3,-28(fp)
 1004388:	e0bffa17 	ldw	r2,-24(fp)
 100438c:	1885c83a 	sub	r2,r3,r2
 1004390:	10bfffc4 	addi	r2,r2,-1
 1004394:	e0bff815 	stw	r2,-32(fp)
 1004398:	00000c06 	br	10043cc <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 100439c:	e0bff917 	ldw	r2,-28(fp)
 10043a0:	1005003a 	cmpeq	r2,r2,zero
 10043a4:	1000051e 	bne	r2,zero,10043bc <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 10043a8:	00820004 	movi	r2,2048
 10043ac:	e0fffa17 	ldw	r3,-24(fp)
 10043b0:	10c5c83a 	sub	r2,r2,r3
 10043b4:	e0bff815 	stw	r2,-32(fp)
 10043b8:	00000406 	br	10043cc <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 10043bc:	0081ffc4 	movi	r2,2047
 10043c0:	e0fffa17 	ldw	r3,-24(fp)
 10043c4:	10c5c83a 	sub	r2,r2,r3
 10043c8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 10043cc:	e0bff817 	ldw	r2,-32(fp)
 10043d0:	1005003a 	cmpeq	r2,r2,zero
 10043d4:	10001f1e 	bne	r2,zero,1004454 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 10043d8:	e0fffd17 	ldw	r3,-12(fp)
 10043dc:	e0bff817 	ldw	r2,-32(fp)
 10043e0:	1880022e 	bgeu	r3,r2,10043ec <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 10043e4:	e0bffd17 	ldw	r2,-12(fp)
 10043e8:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 10043ec:	e0bffb17 	ldw	r2,-20(fp)
 10043f0:	10c20e04 	addi	r3,r2,2104
 10043f4:	e0bffa17 	ldw	r2,-24(fp)
 10043f8:	1885883a 	add	r2,r3,r2
 10043fc:	e0fffc17 	ldw	r3,-16(fp)
 1004400:	1009883a 	mov	r4,r2
 1004404:	180b883a 	mov	r5,r3
 1004408:	e1bff817 	ldw	r6,-32(fp)
 100440c:	10011000 	call	1001100 <memcpy>
      ptr   += n;
 1004410:	e0fff817 	ldw	r3,-32(fp)
 1004414:	e0bffc17 	ldw	r2,-16(fp)
 1004418:	10c5883a 	add	r2,r2,r3
 100441c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 1004420:	e0fffd17 	ldw	r3,-12(fp)
 1004424:	e0bff817 	ldw	r2,-32(fp)
 1004428:	1885c83a 	sub	r2,r3,r2
 100442c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1004430:	e0fffa17 	ldw	r3,-24(fp)
 1004434:	e0bff817 	ldw	r2,-32(fp)
 1004438:	1885883a 	add	r2,r3,r2
 100443c:	10c1ffcc 	andi	r3,r2,2047
 1004440:	e0bffb17 	ldw	r2,-20(fp)
 1004444:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1004448:	e0bffd17 	ldw	r2,-12(fp)
 100444c:	10800048 	cmpgei	r2,r2,1
 1004450:	103fc31e 	bne	r2,zero,1004360 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1004454:	0005303a 	rdctl	r2,status
 1004458:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100445c:	e0fff517 	ldw	r3,-44(fp)
 1004460:	00bfff84 	movi	r2,-2
 1004464:	1884703a 	and	r2,r3,r2
 1004468:	1001703a 	wrctl	status,r2
  
  return context;
 100446c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 1004470:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1004474:	e0bffb17 	ldw	r2,-20(fp)
 1004478:	10800817 	ldw	r2,32(r2)
 100447c:	10c00094 	ori	r3,r2,2
 1004480:	e0bffb17 	ldw	r2,-20(fp)
 1004484:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1004488:	e0bffb17 	ldw	r2,-20(fp)
 100448c:	10800017 	ldw	r2,0(r2)
 1004490:	11000104 	addi	r4,r2,4
 1004494:	e0bffb17 	ldw	r2,-20(fp)
 1004498:	10800817 	ldw	r2,32(r2)
 100449c:	1007883a 	mov	r3,r2
 10044a0:	2005883a 	mov	r2,r4
 10044a4:	10c00035 	stwio	r3,0(r2)
 10044a8:	e0bff717 	ldw	r2,-36(fp)
 10044ac:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10044b0:	e0bff417 	ldw	r2,-48(fp)
 10044b4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 10044b8:	e0bffd17 	ldw	r2,-12(fp)
 10044bc:	10800050 	cmplti	r2,r2,1
 10044c0:	1000111e 	bne	r2,zero,1004508 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 10044c4:	e0bffe17 	ldw	r2,-8(fp)
 10044c8:	1090000c 	andi	r2,r2,16384
 10044cc:	1004c03a 	cmpne	r2,r2,zero
 10044d0:	1000101e 	bne	r2,zero,1004514 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 10044d4:	e0bffb17 	ldw	r2,-20(fp)
 10044d8:	10c00d17 	ldw	r3,52(r2)
 10044dc:	e0bff917 	ldw	r2,-28(fp)
 10044e0:	1880051e 	bne	r3,r2,10044f8 <altera_avalon_jtag_uart_write+0x1c8>
 10044e4:	e0bffb17 	ldw	r2,-20(fp)
 10044e8:	10c00917 	ldw	r3,36(r2)
 10044ec:	e0bffb17 	ldw	r2,-20(fp)
 10044f0:	10800117 	ldw	r2,4(r2)
 10044f4:	18bff736 	bltu	r3,r2,10044d4 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 10044f8:	e0bffb17 	ldw	r2,-20(fp)
 10044fc:	10c00d17 	ldw	r3,52(r2)
 1004500:	e0bff917 	ldw	r2,-28(fp)
 1004504:	18800326 	beq	r3,r2,1004514 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
 1004508:	e0bffd17 	ldw	r2,-12(fp)
 100450c:	10800048 	cmpgei	r2,r2,1
 1004510:	103fcd1e 	bne	r2,zero,1004448 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 1004514:	e0fffc17 	ldw	r3,-16(fp)
 1004518:	e0bff617 	ldw	r2,-40(fp)
 100451c:	18800526 	beq	r3,r2,1004534 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 1004520:	e0fffc17 	ldw	r3,-16(fp)
 1004524:	e0bff617 	ldw	r2,-40(fp)
 1004528:	1887c83a 	sub	r3,r3,r2
 100452c:	e0ffff15 	stw	r3,-4(fp)
 1004530:	00000906 	br	1004558 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 1004534:	e0bffe17 	ldw	r2,-8(fp)
 1004538:	1090000c 	andi	r2,r2,16384
 100453c:	1005003a 	cmpeq	r2,r2,zero
 1004540:	1000031e 	bne	r2,zero,1004550 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 1004544:	00bffd44 	movi	r2,-11
 1004548:	e0bfff15 	stw	r2,-4(fp)
 100454c:	00000206 	br	1004558 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 1004550:	00bffec4 	movi	r2,-5
 1004554:	e0bfff15 	stw	r2,-4(fp)
 1004558:	e0bfff17 	ldw	r2,-4(fp)
}
 100455c:	e037883a 	mov	sp,fp
 1004560:	dfc00117 	ldw	ra,4(sp)
 1004564:	df000017 	ldw	fp,0(sp)
 1004568:	dec00204 	addi	sp,sp,8
 100456c:	f800283a 	ret

01004570 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 1004570:	defff904 	addi	sp,sp,-28
 1004574:	dfc00615 	stw	ra,24(sp)
 1004578:	df000515 	stw	fp,20(sp)
 100457c:	df000504 	addi	fp,sp,20
 1004580:	e13ffe15 	stw	r4,-8(fp)
 1004584:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 1004588:	e0bffe17 	ldw	r2,-8(fp)
 100458c:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 1004590:	e0bffe17 	ldw	r2,-8(fp)
 1004594:	10800104 	addi	r2,r2,4
 1004598:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100459c:	0005303a 	rdctl	r2,status
 10045a0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10045a4:	e0fffc17 	ldw	r3,-16(fp)
 10045a8:	00bfff84 	movi	r2,-2
 10045ac:	1884703a 	and	r2,r3,r2
 10045b0:	1001703a 	wrctl	status,r2
  
  return context;
 10045b4:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 10045b8:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
 10045bc:	100759c0 	call	100759c <alt_tick>
 10045c0:	e0bffd17 	ldw	r2,-12(fp)
 10045c4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10045c8:	e0bffb17 	ldw	r2,-20(fp)
 10045cc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 10045d0:	e037883a 	mov	sp,fp
 10045d4:	dfc00117 	ldw	ra,4(sp)
 10045d8:	df000017 	ldw	fp,0(sp)
 10045dc:	dec00204 	addi	sp,sp,8
 10045e0:	f800283a 	ret

010045e4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 10045e4:	defff904 	addi	sp,sp,-28
 10045e8:	dfc00615 	stw	ra,24(sp)
 10045ec:	df000515 	stw	fp,20(sp)
 10045f0:	df000504 	addi	fp,sp,20
 10045f4:	e13ffc15 	stw	r4,-16(fp)
 10045f8:	e17ffd15 	stw	r5,-12(fp)
 10045fc:	e1bffe15 	stw	r6,-8(fp)
 1004600:	e1ffff15 	stw	r7,-4(fp)
 1004604:	e0bfff17 	ldw	r2,-4(fp)
 1004608:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 100460c:	00804074 	movhi	r2,257
 1004610:	10adba04 	addi	r2,r2,-18712
 1004614:	10800017 	ldw	r2,0(r2)
 1004618:	1004c03a 	cmpne	r2,r2,zero
 100461c:	1000041e 	bne	r2,zero,1004630 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 1004620:	00c04074 	movhi	r3,257
 1004624:	18edba04 	addi	r3,r3,-18712
 1004628:	e0bffb17 	ldw	r2,-20(fp)
 100462c:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 1004630:	e0bffc17 	ldw	r2,-16(fp)
 1004634:	10800104 	addi	r2,r2,4
 1004638:	1007883a 	mov	r3,r2
 100463c:	008001c4 	movi	r2,7
 1004640:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
 1004644:	e13ffe17 	ldw	r4,-8(fp)
 1004648:	e17ffc17 	ldw	r5,-16(fp)
 100464c:	01804034 	movhi	r6,256
 1004650:	31915c04 	addi	r6,r6,17776
 1004654:	10070800 	call	1007080 <alt_irq_register>
#endif  
}
 1004658:	e037883a 	mov	sp,fp
 100465c:	dfc00117 	ldw	ra,4(sp)
 1004660:	df000017 	ldw	fp,0(sp)
 1004664:	dec00204 	addi	sp,sp,8
 1004668:	f800283a 	ret

0100466c <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 100466c:	defffc04 	addi	sp,sp,-16
 1004670:	df000315 	stw	fp,12(sp)
 1004674:	df000304 	addi	fp,sp,12
 1004678:	e13ffe15 	stw	r4,-8(fp)
 100467c:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 1004680:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 1004684:	e0bfff17 	ldw	r2,-4(fp)
 1004688:	1004c03a 	cmpne	r2,r2,zero
 100468c:	1000061e 	bne	r2,zero,10046a8 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
 1004690:	e0bffe17 	ldw	r2,-8(fp)
 1004694:	1007883a 	mov	r3,r2
 1004698:	e0bffd03 	ldbu	r2,-12(fp)
 100469c:	10c4b03a 	or	r2,r2,r3
 10046a0:	e0bffd05 	stb	r2,-12(fp)
 10046a4:	00000806 	br	10046c8 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
 10046a8:	e0bffe17 	ldw	r2,-8(fp)
 10046ac:	1007883a 	mov	r3,r2
 10046b0:	e0bffd03 	ldbu	r2,-12(fp)
 10046b4:	10c4b03a 	or	r2,r2,r3
 10046b8:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 10046bc:	e0bffd03 	ldbu	r2,-12(fp)
 10046c0:	10801014 	ori	r2,r2,64
 10046c4:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 10046c8:	e0fffd03 	ldbu	r3,-12(fp)
 10046cc:	00bfe004 	movi	r2,-128
 10046d0:	1884b03a 	or	r2,r3,r2
 10046d4:	10803fcc 	andi	r2,r2,255
}
 10046d8:	e037883a 	mov	sp,fp
 10046dc:	df000017 	ldw	fp,0(sp)
 10046e0:	dec00104 	addi	sp,sp,4
 10046e4:	f800283a 	ret

010046e8 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 10046e8:	defffd04 	addi	sp,sp,-12
 10046ec:	df000215 	stw	fp,8(sp)
 10046f0:	df000204 	addi	fp,sp,8
 10046f4:	e13ffe15 	stw	r4,-8(fp)
 10046f8:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 10046fc:	e0bffe17 	ldw	r2,-8(fp)
 1004700:	10800a17 	ldw	r2,40(r2)
 1004704:	e0ffff03 	ldbu	r3,-4(fp)
 1004708:	10c00025 	stbio	r3,0(r2)
}
 100470c:	e037883a 	mov	sp,fp
 1004710:	df000017 	ldw	fp,0(sp)
 1004714:	dec00104 	addi	sp,sp,4
 1004718:	f800283a 	ret

0100471c <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 100471c:	defffe04 	addi	sp,sp,-8
 1004720:	df000115 	stw	fp,4(sp)
 1004724:	df000104 	addi	fp,sp,4
 1004728:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 100472c:	e0bfff17 	ldw	r2,-4(fp)
 1004730:	10800a17 	ldw	r2,40(r2)
 1004734:	1007883a 	mov	r3,r2
 1004738:	00800044 	movi	r2,1
 100473c:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 1004740:	e037883a 	mov	sp,fp
 1004744:	df000017 	ldw	fp,0(sp)
 1004748:	dec00104 	addi	sp,sp,4
 100474c:	f800283a 	ret

01004750 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 1004750:	defffc04 	addi	sp,sp,-16
 1004754:	dfc00315 	stw	ra,12(sp)
 1004758:	df000215 	stw	fp,8(sp)
 100475c:	df000204 	addi	fp,sp,8
 1004760:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 1004764:	e13fff17 	ldw	r4,-4(fp)
 1004768:	01404074 	movhi	r5,257
 100476c:	2966c104 	addi	r5,r5,-25852
 1004770:	1006e800 	call	1006e80 <alt_find_dev>
 1004774:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 1004778:	e0bffe17 	ldw	r2,-8(fp)
}
 100477c:	e037883a 	mov	sp,fp
 1004780:	dfc00117 	ldw	ra,4(sp)
 1004784:	df000017 	ldw	fp,0(sp)
 1004788:	dec00204 	addi	sp,sp,8
 100478c:	f800283a 	ret

01004790 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 1004790:	defffb04 	addi	sp,sp,-20
 1004794:	df000415 	stw	fp,16(sp)
 1004798:	df000404 	addi	fp,sp,16
 100479c:	e13ffd15 	stw	r4,-12(fp)
 10047a0:	e17ffe15 	stw	r5,-8(fp)
 10047a4:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 10047a8:	e03ffc15 	stw	zero,-16(fp)
 10047ac:	00000f06 	br	10047ec <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 10047b0:	e0bffd17 	ldw	r2,-12(fp)
 10047b4:	10800a17 	ldw	r2,40(r2)
 10047b8:	11000044 	addi	r4,r2,1
 10047bc:	e0fffc17 	ldw	r3,-16(fp)
 10047c0:	e0bffe17 	ldw	r2,-8(fp)
 10047c4:	1885883a 	add	r2,r3,r2
 10047c8:	10800003 	ldbu	r2,0(r2)
 10047cc:	10c03fcc 	andi	r3,r2,255
 10047d0:	18c0201c 	xori	r3,r3,128
 10047d4:	18ffe004 	addi	r3,r3,-128
 10047d8:	2005883a 	mov	r2,r4
 10047dc:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 10047e0:	e0bffc17 	ldw	r2,-16(fp)
 10047e4:	10800044 	addi	r2,r2,1
 10047e8:	e0bffc15 	stw	r2,-16(fp)
 10047ec:	e0fffc17 	ldw	r3,-16(fp)
 10047f0:	e0bfff17 	ldw	r2,-4(fp)
 10047f4:	18bfee36 	bltu	r3,r2,10047b0 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 10047f8:	e037883a 	mov	sp,fp
 10047fc:	df000017 	ldw	fp,0(sp)
 1004800:	dec00104 	addi	sp,sp,4
 1004804:	f800283a 	ret

01004808 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 1004808:	defffd04 	addi	sp,sp,-12
 100480c:	df000215 	stw	fp,8(sp)
 1004810:	df000204 	addi	fp,sp,8
 1004814:	e13ffe15 	stw	r4,-8(fp)
 1004818:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 100481c:	00000d06 	br	1004854 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 1004820:	e0bffe17 	ldw	r2,-8(fp)
 1004824:	10800a17 	ldw	r2,40(r2)
 1004828:	11000044 	addi	r4,r2,1
 100482c:	e0bfff17 	ldw	r2,-4(fp)
 1004830:	10800003 	ldbu	r2,0(r2)
 1004834:	10c03fcc 	andi	r3,r2,255
 1004838:	18c0201c 	xori	r3,r3,128
 100483c:	18ffe004 	addi	r3,r3,-128
 1004840:	2005883a 	mov	r2,r4
 1004844:	10c00025 	stbio	r3,0(r2)
		++ptr;
 1004848:	e0bfff17 	ldw	r2,-4(fp)
 100484c:	10800044 	addi	r2,r2,1
 1004850:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 1004854:	e0bfff17 	ldw	r2,-4(fp)
 1004858:	10800003 	ldbu	r2,0(r2)
 100485c:	10803fcc 	andi	r2,r2,255
 1004860:	1080201c 	xori	r2,r2,128
 1004864:	10bfe004 	addi	r2,r2,-128
 1004868:	1004c03a 	cmpne	r2,r2,zero
 100486c:	103fec1e 	bne	r2,zero,1004820 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 1004870:	e037883a 	mov	sp,fp
 1004874:	df000017 	ldw	fp,0(sp)
 1004878:	dec00104 	addi	sp,sp,4
 100487c:	f800283a 	ret

01004880 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 1004880:	defffb04 	addi	sp,sp,-20
 1004884:	dfc00415 	stw	ra,16(sp)
 1004888:	df000315 	stw	fp,12(sp)
 100488c:	df000304 	addi	fp,sp,12
 1004890:	e13ffd15 	stw	r4,-12(fp)
 1004894:	e17ffe15 	stw	r5,-8(fp)
 1004898:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 100489c:	e0bffd17 	ldw	r2,-12(fp)
 10048a0:	10800017 	ldw	r2,0(r2)
 10048a4:	1009883a 	mov	r4,r2
 10048a8:	e1bfff17 	ldw	r6,-4(fp)
 10048ac:	e17ffe17 	ldw	r5,-8(fp)
 10048b0:	10047900 	call	1004790 <alt_up_character_lcd_write>
	return 0;
 10048b4:	0005883a 	mov	r2,zero
}
 10048b8:	e037883a 	mov	sp,fp
 10048bc:	dfc00117 	ldw	ra,4(sp)
 10048c0:	df000017 	ldw	fp,0(sp)
 10048c4:	dec00204 	addi	sp,sp,8
 10048c8:	f800283a 	ret

010048cc <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 10048cc:	defff904 	addi	sp,sp,-28
 10048d0:	dfc00615 	stw	ra,24(sp)
 10048d4:	df000515 	stw	fp,20(sp)
 10048d8:	df000504 	addi	fp,sp,20
 10048dc:	e13ffc15 	stw	r4,-16(fp)
 10048e0:	e17ffd15 	stw	r5,-12(fp)
 10048e4:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 10048e8:	e0bffd17 	ldw	r2,-12(fp)
 10048ec:	10800a28 	cmpgeui	r2,r2,40
 10048f0:	1000031e 	bne	r2,zero,1004900 <alt_up_character_lcd_set_cursor_pos+0x34>
 10048f4:	e0bffe17 	ldw	r2,-8(fp)
 10048f8:	108000b0 	cmpltui	r2,r2,2
 10048fc:	1000031e 	bne	r2,zero,100490c <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
 1004900:	00bfffc4 	movi	r2,-1
 1004904:	e0bfff15 	stw	r2,-4(fp)
 1004908:	00000806 	br	100492c <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 100490c:	e13ffd17 	ldw	r4,-12(fp)
 1004910:	e17ffe17 	ldw	r5,-8(fp)
 1004914:	100466c0 	call	100466c <get_DDRAM_addr>
 1004918:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 100491c:	e17ffb03 	ldbu	r5,-20(fp)
 1004920:	e13ffc17 	ldw	r4,-16(fp)
 1004924:	10046e80 	call	10046e8 <alt_up_character_lcd_send_cmd>
	return 0;
 1004928:	e03fff15 	stw	zero,-4(fp)
 100492c:	e0bfff17 	ldw	r2,-4(fp)
}
 1004930:	e037883a 	mov	sp,fp
 1004934:	dfc00117 	ldw	ra,4(sp)
 1004938:	df000017 	ldw	fp,0(sp)
 100493c:	dec00204 	addi	sp,sp,8
 1004940:	f800283a 	ret

01004944 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 1004944:	defff904 	addi	sp,sp,-28
 1004948:	dfc00615 	stw	ra,24(sp)
 100494c:	df000515 	stw	fp,20(sp)
 1004950:	df000504 	addi	fp,sp,20
 1004954:	e13ffc15 	stw	r4,-16(fp)
 1004958:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 100495c:	e0bffd17 	ldw	r2,-12(fp)
 1004960:	1005003a 	cmpeq	r2,r2,zero
 1004964:	10001e1e 	bne	r2,zero,10049e0 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
 1004968:	e0bffd17 	ldw	r2,-12(fp)
 100496c:	10800050 	cmplti	r2,r2,1
 1004970:	1000031e 	bne	r2,zero,1004980 <alt_up_character_lcd_shift_cursor+0x3c>
 1004974:	00800504 	movi	r2,20
 1004978:	e0bfff05 	stb	r2,-4(fp)
 100497c:	00000206 	br	1004988 <alt_up_character_lcd_shift_cursor+0x44>
 1004980:	00c00404 	movi	r3,16
 1004984:	e0ffff05 	stb	r3,-4(fp)
 1004988:	e0bfff03 	ldbu	r2,-4(fp)
 100498c:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 1004990:	e0fffd17 	ldw	r3,-12(fp)
 1004994:	e0fffe15 	stw	r3,-8(fp)
 1004998:	e0fffe17 	ldw	r3,-8(fp)
 100499c:	1804403a 	cmpge	r2,r3,zero
 10049a0:	1000031e 	bne	r2,zero,10049b0 <alt_up_character_lcd_shift_cursor+0x6c>
 10049a4:	e0bffe17 	ldw	r2,-8(fp)
 10049a8:	0085c83a 	sub	r2,zero,r2
 10049ac:	e0bffe15 	stw	r2,-8(fp)
 10049b0:	e0fffe17 	ldw	r3,-8(fp)
 10049b4:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 10049b8:	00000306 	br	10049c8 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 10049bc:	e17ffb43 	ldbu	r5,-19(fp)
 10049c0:	e13ffc17 	ldw	r4,-16(fp)
 10049c4:	10046e80 	call	10046e8 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 10049c8:	e0bffb03 	ldbu	r2,-20(fp)
 10049cc:	10bfffc4 	addi	r2,r2,-1
 10049d0:	e0bffb05 	stb	r2,-20(fp)
 10049d4:	e0bffb03 	ldbu	r2,-20(fp)
 10049d8:	10803fd8 	cmpnei	r2,r2,255
 10049dc:	103ff71e 	bne	r2,zero,10049bc <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 10049e0:	e037883a 	mov	sp,fp
 10049e4:	dfc00117 	ldw	ra,4(sp)
 10049e8:	df000017 	ldw	fp,0(sp)
 10049ec:	dec00204 	addi	sp,sp,8
 10049f0:	f800283a 	ret

010049f4 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 10049f4:	defff904 	addi	sp,sp,-28
 10049f8:	dfc00615 	stw	ra,24(sp)
 10049fc:	df000515 	stw	fp,20(sp)
 1004a00:	df000504 	addi	fp,sp,20
 1004a04:	e13ffc15 	stw	r4,-16(fp)
 1004a08:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 1004a0c:	e0bffd17 	ldw	r2,-12(fp)
 1004a10:	1005003a 	cmpeq	r2,r2,zero
 1004a14:	10001e1e 	bne	r2,zero,1004a90 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
 1004a18:	e0bffd17 	ldw	r2,-12(fp)
 1004a1c:	10800050 	cmplti	r2,r2,1
 1004a20:	1000031e 	bne	r2,zero,1004a30 <alt_up_character_lcd_shift_display+0x3c>
 1004a24:	00800704 	movi	r2,28
 1004a28:	e0bfff05 	stb	r2,-4(fp)
 1004a2c:	00000206 	br	1004a38 <alt_up_character_lcd_shift_display+0x44>
 1004a30:	00c00604 	movi	r3,24
 1004a34:	e0ffff05 	stb	r3,-4(fp)
 1004a38:	e0bfff03 	ldbu	r2,-4(fp)
 1004a3c:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 1004a40:	e0fffd17 	ldw	r3,-12(fp)
 1004a44:	e0fffe15 	stw	r3,-8(fp)
 1004a48:	e0fffe17 	ldw	r3,-8(fp)
 1004a4c:	1804403a 	cmpge	r2,r3,zero
 1004a50:	1000031e 	bne	r2,zero,1004a60 <alt_up_character_lcd_shift_display+0x6c>
 1004a54:	e0bffe17 	ldw	r2,-8(fp)
 1004a58:	0085c83a 	sub	r2,zero,r2
 1004a5c:	e0bffe15 	stw	r2,-8(fp)
 1004a60:	e0fffe17 	ldw	r3,-8(fp)
 1004a64:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 1004a68:	00000306 	br	1004a78 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 1004a6c:	e17ffb43 	ldbu	r5,-19(fp)
 1004a70:	e13ffc17 	ldw	r4,-16(fp)
 1004a74:	10046e80 	call	10046e8 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 1004a78:	e0bffb03 	ldbu	r2,-20(fp)
 1004a7c:	10bfffc4 	addi	r2,r2,-1
 1004a80:	e0bffb05 	stb	r2,-20(fp)
 1004a84:	e0bffb03 	ldbu	r2,-20(fp)
 1004a88:	10803fd8 	cmpnei	r2,r2,255
 1004a8c:	103ff71e 	bne	r2,zero,1004a6c <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 1004a90:	e037883a 	mov	sp,fp
 1004a94:	dfc00117 	ldw	ra,4(sp)
 1004a98:	df000017 	ldw	fp,0(sp)
 1004a9c:	dec00204 	addi	sp,sp,8
 1004aa0:	f800283a 	ret

01004aa4 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 1004aa4:	defff904 	addi	sp,sp,-28
 1004aa8:	dfc00615 	stw	ra,24(sp)
 1004aac:	df000515 	stw	fp,20(sp)
 1004ab0:	df000504 	addi	fp,sp,20
 1004ab4:	e13ffc15 	stw	r4,-16(fp)
 1004ab8:	e17ffd15 	stw	r5,-12(fp)
 1004abc:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 1004ac0:	e0bffd17 	ldw	r2,-12(fp)
 1004ac4:	10800a28 	cmpgeui	r2,r2,40
 1004ac8:	1000031e 	bne	r2,zero,1004ad8 <alt_up_character_lcd_erase_pos+0x34>
 1004acc:	e0bffe17 	ldw	r2,-8(fp)
 1004ad0:	108000b0 	cmpltui	r2,r2,2
 1004ad4:	1000031e 	bne	r2,zero,1004ae4 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
 1004ad8:	00bfffc4 	movi	r2,-1
 1004adc:	e0bfff15 	stw	r2,-4(fp)
 1004ae0:	00000e06 	br	1004b1c <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 1004ae4:	e13ffd17 	ldw	r4,-12(fp)
 1004ae8:	e17ffe17 	ldw	r5,-8(fp)
 1004aec:	100466c0 	call	100466c <get_DDRAM_addr>
 1004af0:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 1004af4:	e17ffb03 	ldbu	r5,-20(fp)
 1004af8:	e13ffc17 	ldw	r4,-16(fp)
 1004afc:	10046e80 	call	10046e8 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 1004b00:	e0bffc17 	ldw	r2,-16(fp)
 1004b04:	10800a17 	ldw	r2,40(r2)
 1004b08:	10800044 	addi	r2,r2,1
 1004b0c:	1007883a 	mov	r3,r2
 1004b10:	00800084 	movi	r2,2
 1004b14:	18800025 	stbio	r2,0(r3)
	return 0;
 1004b18:	e03fff15 	stw	zero,-4(fp)
 1004b1c:	e0bfff17 	ldw	r2,-4(fp)
}
 1004b20:	e037883a 	mov	sp,fp
 1004b24:	dfc00117 	ldw	ra,4(sp)
 1004b28:	df000017 	ldw	fp,0(sp)
 1004b2c:	dec00204 	addi	sp,sp,8
 1004b30:	f800283a 	ret

01004b34 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 1004b34:	defffd04 	addi	sp,sp,-12
 1004b38:	dfc00215 	stw	ra,8(sp)
 1004b3c:	df000115 	stw	fp,4(sp)
 1004b40:	df000104 	addi	fp,sp,4
 1004b44:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 1004b48:	e13fff17 	ldw	r4,-4(fp)
 1004b4c:	01400304 	movi	r5,12
 1004b50:	10046e80 	call	10046e8 <alt_up_character_lcd_send_cmd>
}
 1004b54:	e037883a 	mov	sp,fp
 1004b58:	dfc00117 	ldw	ra,4(sp)
 1004b5c:	df000017 	ldw	fp,0(sp)
 1004b60:	dec00204 	addi	sp,sp,8
 1004b64:	f800283a 	ret

01004b68 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 1004b68:	defffd04 	addi	sp,sp,-12
 1004b6c:	dfc00215 	stw	ra,8(sp)
 1004b70:	df000115 	stw	fp,4(sp)
 1004b74:	df000104 	addi	fp,sp,4
 1004b78:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 1004b7c:	e13fff17 	ldw	r4,-4(fp)
 1004b80:	014003c4 	movi	r5,15
 1004b84:	10046e80 	call	10046e8 <alt_up_character_lcd_send_cmd>
}
 1004b88:	e037883a 	mov	sp,fp
 1004b8c:	dfc00117 	ldw	ra,4(sp)
 1004b90:	df000017 	ldw	fp,0(sp)
 1004b94:	dec00204 	addi	sp,sp,8
 1004b98:	f800283a 	ret

01004b9c <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
 1004b9c:	defffd04 	addi	sp,sp,-12
 1004ba0:	df000215 	stw	fp,8(sp)
 1004ba4:	df000204 	addi	fp,sp,8
 1004ba8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
 1004bac:	e0bfff17 	ldw	r2,-4(fp)
 1004bb0:	1080400c 	andi	r2,r2,256
 1004bb4:	1004d23a 	srli	r2,r2,8
 1004bb8:	e0bffe05 	stb	r2,-8(fp)
	return ri;
 1004bbc:	e0bffe03 	ldbu	r2,-8(fp)
}
 1004bc0:	e037883a 	mov	sp,fp
 1004bc4:	df000017 	ldw	fp,0(sp)
 1004bc8:	dec00104 	addi	sp,sp,4
 1004bcc:	f800283a 	ret

01004bd0 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
 1004bd0:	defffd04 	addi	sp,sp,-12
 1004bd4:	df000215 	stw	fp,8(sp)
 1004bd8:	df000204 	addi	fp,sp,8
 1004bdc:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
 1004be0:	e0bfff17 	ldw	r2,-4(fp)
 1004be4:	1080004c 	andi	r2,r2,1
 1004be8:	e0bffe05 	stb	r2,-8(fp)
	return re;
 1004bec:	e0bffe03 	ldbu	r2,-8(fp)
}
 1004bf0:	e037883a 	mov	sp,fp
 1004bf4:	df000017 	ldw	fp,0(sp)
 1004bf8:	dec00104 	addi	sp,sp,4
 1004bfc:	f800283a 	ret

01004c00 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
 1004c00:	defffd04 	addi	sp,sp,-12
 1004c04:	df000215 	stw	fp,8(sp)
 1004c08:	df000204 	addi	fp,sp,8
 1004c0c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
 1004c10:	e0bfff17 	ldw	r2,-4(fp)
 1004c14:	1081000c 	andi	r2,r2,1024
 1004c18:	1004d2ba 	srli	r2,r2,10
 1004c1c:	e0bffe05 	stb	r2,-8(fp)
	return re;
 1004c20:	e0bffe03 	ldbu	r2,-8(fp)
}
 1004c24:	e037883a 	mov	sp,fp
 1004c28:	df000017 	ldw	fp,0(sp)
 1004c2c:	dec00104 	addi	sp,sp,4
 1004c30:	f800283a 	ret

01004c34 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
 1004c34:	defffd04 	addi	sp,sp,-12
 1004c38:	df000215 	stw	fp,8(sp)
 1004c3c:	df000204 	addi	fp,sp,8
 1004c40:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
 1004c44:	e0bfff17 	ldw	r2,-4(fp)
 1004c48:	10bfffec 	andhi	r2,r2,65535
 1004c4c:	1004d43a 	srli	r2,r2,16
 1004c50:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
 1004c54:	e0bffe0b 	ldhu	r2,-8(fp)
}
 1004c58:	e037883a 	mov	sp,fp
 1004c5c:	df000017 	ldw	fp,0(sp)
 1004c60:	dec00104 	addi	sp,sp,4
 1004c64:	f800283a 	ret

01004c68 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
 1004c68:	defffd04 	addi	sp,sp,-12
 1004c6c:	df000215 	stw	fp,8(sp)
 1004c70:	df000204 	addi	fp,sp,8
 1004c74:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
 1004c78:	e0bfff17 	ldw	r2,-4(fp)
 1004c7c:	10a0000c 	andi	r2,r2,32768
 1004c80:	1004d3fa 	srli	r2,r2,15
 1004c84:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
 1004c88:	e0bffe03 	ldbu	r2,-8(fp)
}
 1004c8c:	e037883a 	mov	sp,fp
 1004c90:	df000017 	ldw	fp,0(sp)
 1004c94:	dec00104 	addi	sp,sp,4
 1004c98:	f800283a 	ret

01004c9c <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
 1004c9c:	defffd04 	addi	sp,sp,-12
 1004ca0:	df000215 	stw	fp,8(sp)
 1004ca4:	df000204 	addi	fp,sp,8
 1004ca8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
 1004cac:	e0bfff17 	ldw	r2,-4(fp)
 1004cb0:	e0bffe05 	stb	r2,-8(fp)
	return data;
 1004cb4:	e0bffe03 	ldbu	r2,-8(fp)
}
 1004cb8:	e037883a 	mov	sp,fp
 1004cbc:	df000017 	ldw	fp,0(sp)
 1004cc0:	dec00104 	addi	sp,sp,4
 1004cc4:	f800283a 	ret

01004cc8 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
 1004cc8:	defffb04 	addi	sp,sp,-20
 1004ccc:	dfc00415 	stw	ra,16(sp)
 1004cd0:	df000315 	stw	fp,12(sp)
 1004cd4:	df000304 	addi	fp,sp,12
 1004cd8:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
 1004cdc:	e13fff17 	ldw	r4,-4(fp)
 1004ce0:	01403fc4 	movi	r5,255
 1004ce4:	1004f280 	call	1004f28 <alt_up_ps2_write_data_byte_with_ack>
 1004ce8:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
 1004cec:	e0bffd17 	ldw	r2,-12(fp)
 1004cf0:	1004c03a 	cmpne	r2,r2,zero
 1004cf4:	1000221e 	bne	r2,zero,1004d80 <alt_up_ps2_init+0xb8>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
 1004cf8:	e17ffe04 	addi	r5,fp,-8
 1004cfc:	e13fff17 	ldw	r4,-4(fp)
 1004d00:	1004f940 	call	1004f94 <alt_up_ps2_read_data_byte_timeout>
 1004d04:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
 1004d08:	e0bffd17 	ldw	r2,-12(fp)
 1004d0c:	1004c03a 	cmpne	r2,r2,zero
 1004d10:	10001b1e 	bne	r2,zero,1004d80 <alt_up_ps2_init+0xb8>
 1004d14:	e0bffe03 	ldbu	r2,-8(fp)
 1004d18:	10803fcc 	andi	r2,r2,255
 1004d1c:	10802a98 	cmpnei	r2,r2,170
 1004d20:	1000171e 	bne	r2,zero,1004d80 <alt_up_ps2_init+0xb8>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
 1004d24:	e17ffe04 	addi	r5,fp,-8
 1004d28:	e13fff17 	ldw	r4,-4(fp)
 1004d2c:	1004f940 	call	1004f94 <alt_up_ps2_read_data_byte_timeout>
 1004d30:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
 1004d34:	e0bffd17 	ldw	r2,-12(fp)
 1004d38:	10bfe318 	cmpnei	r2,r2,-116
 1004d3c:	1000041e 	bne	r2,zero,1004d50 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
 1004d40:	e0ffff17 	ldw	r3,-4(fp)
 1004d44:	00800044 	movi	r2,1
 1004d48:	18800d15 	stw	r2,52(r3)
 1004d4c:	00000c06 	br	1004d80 <alt_up_ps2_init+0xb8>
			}
			else if (status == 0 && byte == 0x00)
 1004d50:	e0bffd17 	ldw	r2,-12(fp)
 1004d54:	1004c03a 	cmpne	r2,r2,zero
 1004d58:	1000091e 	bne	r2,zero,1004d80 <alt_up_ps2_init+0xb8>
 1004d5c:	e0bffe03 	ldbu	r2,-8(fp)
 1004d60:	10803fcc 	andi	r2,r2,255
 1004d64:	1004c03a 	cmpne	r2,r2,zero
 1004d68:	1000051e 	bne	r2,zero,1004d80 <alt_up_ps2_init+0xb8>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
 1004d6c:	e0bfff17 	ldw	r2,-4(fp)
 1004d70:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
 1004d74:	e13fff17 	ldw	r4,-4(fp)
 1004d78:	01403d04 	movi	r5,244
 1004d7c:	1004e400 	call	1004e40 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
 1004d80:	e037883a 	mov	sp,fp
 1004d84:	dfc00117 	ldw	ra,4(sp)
 1004d88:	df000017 	ldw	fp,0(sp)
 1004d8c:	dec00204 	addi	sp,sp,8
 1004d90:	f800283a 	ret

01004d94 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
 1004d94:	defffd04 	addi	sp,sp,-12
 1004d98:	df000215 	stw	fp,8(sp)
 1004d9c:	df000204 	addi	fp,sp,8
 1004da0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
 1004da4:	e0bfff17 	ldw	r2,-4(fp)
 1004da8:	10800a17 	ldw	r2,40(r2)
 1004dac:	10800104 	addi	r2,r2,4
 1004db0:	10800037 	ldwio	r2,0(r2)
 1004db4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
 1004db8:	e0bffe17 	ldw	r2,-8(fp)
 1004dbc:	10800054 	ori	r2,r2,1
 1004dc0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
 1004dc4:	e0bfff17 	ldw	r2,-4(fp)
 1004dc8:	10800a17 	ldw	r2,40(r2)
 1004dcc:	10800104 	addi	r2,r2,4
 1004dd0:	e0fffe17 	ldw	r3,-8(fp)
 1004dd4:	10c00035 	stwio	r3,0(r2)
}
 1004dd8:	e037883a 	mov	sp,fp
 1004ddc:	df000017 	ldw	fp,0(sp)
 1004de0:	dec00104 	addi	sp,sp,4
 1004de4:	f800283a 	ret

01004de8 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
 1004de8:	defffd04 	addi	sp,sp,-12
 1004dec:	df000215 	stw	fp,8(sp)
 1004df0:	df000204 	addi	fp,sp,8
 1004df4:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
 1004df8:	e0bfff17 	ldw	r2,-4(fp)
 1004dfc:	10800a17 	ldw	r2,40(r2)
 1004e00:	10800104 	addi	r2,r2,4
 1004e04:	10800037 	ldwio	r2,0(r2)
 1004e08:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
 1004e0c:	e0fffe17 	ldw	r3,-8(fp)
 1004e10:	00bfff84 	movi	r2,-2
 1004e14:	1884703a 	and	r2,r3,r2
 1004e18:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
 1004e1c:	e0bfff17 	ldw	r2,-4(fp)
 1004e20:	10800a17 	ldw	r2,40(r2)
 1004e24:	10800104 	addi	r2,r2,4
 1004e28:	e0fffe17 	ldw	r3,-8(fp)
 1004e2c:	10c00035 	stwio	r3,0(r2)
}
 1004e30:	e037883a 	mov	sp,fp
 1004e34:	df000017 	ldw	fp,0(sp)
 1004e38:	dec00104 	addi	sp,sp,4
 1004e3c:	f800283a 	ret

01004e40 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
 1004e40:	defffa04 	addi	sp,sp,-24
 1004e44:	dfc00515 	stw	ra,20(sp)
 1004e48:	df000415 	stw	fp,16(sp)
 1004e4c:	df000404 	addi	fp,sp,16
 1004e50:	e13ffd15 	stw	r4,-12(fp)
 1004e54:	e17ffe05 	stb	r5,-8(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
 1004e58:	e0bffd17 	ldw	r2,-12(fp)
 1004e5c:	10800a17 	ldw	r2,40(r2)
 1004e60:	e0fffe03 	ldbu	r3,-8(fp)
 1004e64:	10c00025 	stbio	r3,0(r2)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
 1004e68:	e0bffd17 	ldw	r2,-12(fp)
 1004e6c:	10800a17 	ldw	r2,40(r2)
 1004e70:	10800104 	addi	r2,r2,4
 1004e74:	10800037 	ldwio	r2,0(r2)
 1004e78:	e0bffc15 	stw	r2,-16(fp)
	if (read_CE_bit(ctrl_reg))
 1004e7c:	e13ffc17 	ldw	r4,-16(fp)
 1004e80:	1004c000 	call	1004c00 <read_CE_bit>
 1004e84:	10803fcc 	andi	r2,r2,255
 1004e88:	1005003a 	cmpeq	r2,r2,zero
 1004e8c:	1000031e 	bne	r2,zero,1004e9c <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
 1004e90:	00bffec4 	movi	r2,-5
 1004e94:	e0bfff15 	stw	r2,-4(fp)
 1004e98:	00000106 	br	1004ea0 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
 1004e9c:	e03fff15 	stw	zero,-4(fp)
 1004ea0:	e0bfff17 	ldw	r2,-4(fp)
}
 1004ea4:	e037883a 	mov	sp,fp
 1004ea8:	dfc00117 	ldw	ra,4(sp)
 1004eac:	df000017 	ldw	fp,0(sp)
 1004eb0:	dec00204 	addi	sp,sp,8
 1004eb4:	f800283a 	ret

01004eb8 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
 1004eb8:	defffb04 	addi	sp,sp,-20
 1004ebc:	dfc00415 	stw	ra,16(sp)
 1004ec0:	df000315 	stw	fp,12(sp)
 1004ec4:	df000304 	addi	fp,sp,12
 1004ec8:	e13ffe15 	stw	r4,-8(fp)
	unsigned char data = 0;
 1004ecc:	e03ffd45 	stb	zero,-11(fp)
	unsigned char status = 0;
 1004ed0:	e03ffd05 	stb	zero,-12(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
 1004ed4:	e17ffd44 	addi	r5,fp,-11
 1004ed8:	e13ffe17 	ldw	r4,-8(fp)
 1004edc:	1004f940 	call	1004f94 <alt_up_ps2_read_data_byte_timeout>
 1004ee0:	e0bffd05 	stb	r2,-12(fp)
		if ( status == 0)
 1004ee4:	e0bffd03 	ldbu	r2,-12(fp)
 1004ee8:	1004c03a 	cmpne	r2,r2,zero
 1004eec:	1000061e 	bne	r2,zero,1004f08 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
 1004ef0:	e0bffd43 	ldbu	r2,-11(fp)
 1004ef4:	10803fcc 	andi	r2,r2,255
 1004ef8:	10803e98 	cmpnei	r2,r2,250
 1004efc:	103ff51e 	bne	r2,zero,1004ed4 <alt_up_ps2_wait_for_ack+0x1c>
				return 0;
 1004f00:	e03fff15 	stw	zero,-4(fp)
 1004f04:	00000206 	br	1004f10 <alt_up_ps2_wait_for_ack+0x58>
		}
		else 
		{
			return status;
 1004f08:	e0bffd03 	ldbu	r2,-12(fp)
 1004f0c:	e0bfff15 	stw	r2,-4(fp)
 1004f10:	e0bfff17 	ldw	r2,-4(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
 1004f14:	e037883a 	mov	sp,fp
 1004f18:	dfc00117 	ldw	ra,4(sp)
 1004f1c:	df000017 	ldw	fp,0(sp)
 1004f20:	dec00204 	addi	sp,sp,8
 1004f24:	f800283a 	ret

01004f28 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
 1004f28:	defff904 	addi	sp,sp,-28
 1004f2c:	dfc00615 	stw	ra,24(sp)
 1004f30:	df000515 	stw	fp,20(sp)
 1004f34:	df000504 	addi	fp,sp,20
 1004f38:	e13ffd15 	stw	r4,-12(fp)
 1004f3c:	e17ffe05 	stb	r5,-8(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
 1004f40:	e17ffe03 	ldbu	r5,-8(fp)
 1004f44:	e13ffd17 	ldw	r4,-12(fp)
 1004f48:	1004e400 	call	1004e40 <alt_up_ps2_write_data_byte>
 1004f4c:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
 1004f50:	e0bffc17 	ldw	r2,-16(fp)
 1004f54:	1005003a 	cmpeq	r2,r2,zero
 1004f58:	1000031e 	bne	r2,zero,1004f68 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
 1004f5c:	e0bffc17 	ldw	r2,-16(fp)
 1004f60:	e0bfff15 	stw	r2,-4(fp)
 1004f64:	00000506 	br	1004f7c <alt_up_ps2_write_data_byte_with_ack+0x54>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
 1004f68:	e13ffd17 	ldw	r4,-12(fp)
 1004f6c:	1004eb80 	call	1004eb8 <alt_up_ps2_wait_for_ack>
 1004f70:	e0bffb15 	stw	r2,-20(fp)
	return ack_status;
 1004f74:	e0bffb17 	ldw	r2,-20(fp)
 1004f78:	e0bfff15 	stw	r2,-4(fp)
 1004f7c:	e0bfff17 	ldw	r2,-4(fp)
}
 1004f80:	e037883a 	mov	sp,fp
 1004f84:	dfc00117 	ldw	ra,4(sp)
 1004f88:	df000017 	ldw	fp,0(sp)
 1004f8c:	dec00204 	addi	sp,sp,8
 1004f90:	f800283a 	ret

01004f94 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
 1004f94:	defff904 	addi	sp,sp,-28
 1004f98:	dfc00615 	stw	ra,24(sp)
 1004f9c:	df000515 	stw	fp,20(sp)
 1004fa0:	df000504 	addi	fp,sp,20
 1004fa4:	e13ffd15 	stw	r4,-12(fp)
 1004fa8:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
 1004fac:	e03ffc15 	stw	zero,-16(fp)
	unsigned int count = 0;
 1004fb0:	e03ffb15 	stw	zero,-20(fp)
 1004fb4:	00000006 	br	1004fb8 <alt_up_ps2_read_data_byte_timeout+0x24>
	do {
		count++;
 1004fb8:	e0bffb17 	ldw	r2,-20(fp)
 1004fbc:	10800044 	addi	r2,r2,1
 1004fc0:	e0bffb15 	stw	r2,-20(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
 1004fc4:	e0bffd17 	ldw	r2,-12(fp)
 1004fc8:	10800a17 	ldw	r2,40(r2)
 1004fcc:	10800037 	ldwio	r2,0(r2)
 1004fd0:	e0bffc15 	stw	r2,-16(fp)
		if (read_data_valid(data_reg))
 1004fd4:	e13ffc17 	ldw	r4,-16(fp)
 1004fd8:	1004c680 	call	1004c68 <read_data_valid>
 1004fdc:	10803fcc 	andi	r2,r2,255
 1004fe0:	1005003a 	cmpeq	r2,r2,zero
 1004fe4:	1000071e 	bne	r2,zero,1005004 <alt_up_ps2_read_data_byte_timeout+0x70>
		{
			*byte = read_data_byte(data_reg);
 1004fe8:	e13ffc17 	ldw	r4,-16(fp)
 1004fec:	1004c9c0 	call	1004c9c <read_data_byte>
 1004ff0:	1007883a 	mov	r3,r2
 1004ff4:	e0bffe17 	ldw	r2,-8(fp)
 1004ff8:	10c00005 	stb	r3,0(r2)
			return 0;
 1004ffc:	e03fff15 	stw	zero,-4(fp)
 1005000:	00000a06 	br	100502c <alt_up_ps2_read_data_byte_timeout+0x98>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
 1005004:	e0bffd17 	ldw	r2,-12(fp)
 1005008:	10800c17 	ldw	r2,48(r2)
 100500c:	1005003a 	cmpeq	r2,r2,zero
 1005010:	103fe91e 	bne	r2,zero,1004fb8 <alt_up_ps2_read_data_byte_timeout+0x24>
 1005014:	e0bffd17 	ldw	r2,-12(fp)
 1005018:	10c00c17 	ldw	r3,48(r2)
 100501c:	e0bffb17 	ldw	r2,-20(fp)
 1005020:	18bfe52e 	bgeu	r3,r2,1004fb8 <alt_up_ps2_read_data_byte_timeout+0x24>
		{
			return -ETIMEDOUT;
 1005024:	00bfe304 	movi	r2,-116
 1005028:	e0bfff15 	stw	r2,-4(fp)
		}
	} while (1);
 100502c:	e0bfff17 	ldw	r2,-4(fp)
}
 1005030:	e037883a 	mov	sp,fp
 1005034:	dfc00117 	ldw	ra,4(sp)
 1005038:	df000017 	ldw	fp,0(sp)
 100503c:	dec00204 	addi	sp,sp,8
 1005040:	f800283a 	ret

01005044 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
 1005044:	defffa04 	addi	sp,sp,-24
 1005048:	dfc00515 	stw	ra,20(sp)
 100504c:	df000415 	stw	fp,16(sp)
 1005050:	df000404 	addi	fp,sp,16
 1005054:	e13ffd15 	stw	r4,-12(fp)
 1005058:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
 100505c:	e03ffc15 	stw	zero,-16(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
 1005060:	e0bffd17 	ldw	r2,-12(fp)
 1005064:	10800a17 	ldw	r2,40(r2)
 1005068:	10800037 	ldwio	r2,0(r2)
 100506c:	e0bffc15 	stw	r2,-16(fp)
	if (read_data_valid(data_reg))
 1005070:	e13ffc17 	ldw	r4,-16(fp)
 1005074:	1004c680 	call	1004c68 <read_data_valid>
 1005078:	10803fcc 	andi	r2,r2,255
 100507c:	1005003a 	cmpeq	r2,r2,zero
 1005080:	1000071e 	bne	r2,zero,10050a0 <alt_up_ps2_read_data_byte+0x5c>
	{
		*byte = read_data_byte(data_reg);
 1005084:	e13ffc17 	ldw	r4,-16(fp)
 1005088:	1004c9c0 	call	1004c9c <read_data_byte>
 100508c:	1007883a 	mov	r3,r2
 1005090:	e0bffe17 	ldw	r2,-8(fp)
 1005094:	10c00005 	stb	r3,0(r2)
		return 0;
 1005098:	e03fff15 	stw	zero,-4(fp)
 100509c:	00000206 	br	10050a8 <alt_up_ps2_read_data_byte+0x64>
	}
	return -1;
 10050a0:	00bfffc4 	movi	r2,-1
 10050a4:	e0bfff15 	stw	r2,-4(fp)
 10050a8:	e0bfff17 	ldw	r2,-4(fp)
}
 10050ac:	e037883a 	mov	sp,fp
 10050b0:	dfc00117 	ldw	ra,4(sp)
 10050b4:	df000017 	ldw	fp,0(sp)
 10050b8:	dec00204 	addi	sp,sp,8
 10050bc:	f800283a 	ret

010050c0 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
 10050c0:	defffb04 	addi	sp,sp,-20
 10050c4:	dfc00415 	stw	ra,16(sp)
 10050c8:	df000315 	stw	fp,12(sp)
 10050cc:	df000304 	addi	fp,sp,12
 10050d0:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
 10050d4:	e03ffe0d 	sth	zero,-8(fp)
	unsigned int data_reg = 0;
 10050d8:	e03ffd15 	stw	zero,-12(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
 10050dc:	e0bfff17 	ldw	r2,-4(fp)
 10050e0:	10800a17 	ldw	r2,40(r2)
 10050e4:	10800037 	ldwio	r2,0(r2)
 10050e8:	e0bffd15 	stw	r2,-12(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
 10050ec:	e13ffd17 	ldw	r4,-12(fp)
 10050f0:	1004c340 	call	1004c34 <read_num_bytes_available>
 10050f4:	e0bffe0d 	sth	r2,-8(fp)
	} while (num > 0);
 10050f8:	e0bffe0b 	ldhu	r2,-8(fp)
 10050fc:	1004c03a 	cmpne	r2,r2,zero
 1005100:	103ff61e 	bne	r2,zero,10050dc <alt_up_ps2_clear_fifo+0x1c>
}
 1005104:	e037883a 	mov	sp,fp
 1005108:	dfc00117 	ldw	ra,4(sp)
 100510c:	df000017 	ldw	fp,0(sp)
 1005110:	dec00204 	addi	sp,sp,8
 1005114:	f800283a 	ret

01005118 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
 1005118:	defff704 	addi	sp,sp,-36
 100511c:	dfc00815 	stw	ra,32(sp)
 1005120:	df000715 	stw	fp,28(sp)
 1005124:	df000704 	addi	fp,sp,28
 1005128:	e13ffc15 	stw	r4,-16(fp)
 100512c:	e17ffd15 	stw	r5,-12(fp)
 1005130:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
 1005134:	e0bffc17 	ldw	r2,-16(fp)
 1005138:	10800017 	ldw	r2,0(r2)
 100513c:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
 1005140:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
 1005144:	e03ff915 	stw	zero,-28(fp)
	while (count < len);
 1005148:	e0fff917 	ldw	r3,-28(fp)
 100514c:	e0bffe17 	ldw	r2,-8(fp)
 1005150:	18bffd16 	blt	r3,r2,1005148 <alt_up_ps2_read_fd+0x30>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, ptr++);
 1005154:	e17ffd17 	ldw	r5,-12(fp)
 1005158:	e0bffd17 	ldw	r2,-12(fp)
 100515c:	10800044 	addi	r2,r2,1
 1005160:	e0bffd15 	stw	r2,-12(fp)
 1005164:	e13ffb17 	ldw	r4,-20(fp)
 1005168:	1004f940 	call	1004f94 <alt_up_ps2_read_data_byte_timeout>
 100516c:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
 1005170:	e0bffa17 	ldw	r2,-24(fp)
 1005174:	1005003a 	cmpeq	r2,r2,zero
 1005178:	1000031e 	bne	r2,zero,1005188 <alt_up_ps2_read_fd+0x70>
			return count;
 100517c:	e0bff917 	ldw	r2,-28(fp)
 1005180:	e0bfff15 	stw	r2,-4(fp)
 1005184:	00000506 	br	100519c <alt_up_ps2_read_fd+0x84>
		count++;
 1005188:	e0bff917 	ldw	r2,-28(fp)
 100518c:	10800044 	addi	r2,r2,1
 1005190:	e0bff915 	stw	r2,-28(fp)
	} 
	return count;
 1005194:	e0bff917 	ldw	r2,-28(fp)
 1005198:	e0bfff15 	stw	r2,-4(fp)
 100519c:	e0bfff17 	ldw	r2,-4(fp)
}
 10051a0:	e037883a 	mov	sp,fp
 10051a4:	dfc00117 	ldw	ra,4(sp)
 10051a8:	df000017 	ldw	fp,0(sp)
 10051ac:	dec00204 	addi	sp,sp,8
 10051b0:	f800283a 	ret

010051b4 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
 10051b4:	defff704 	addi	sp,sp,-36
 10051b8:	dfc00815 	stw	ra,32(sp)
 10051bc:	df000715 	stw	fp,28(sp)
 10051c0:	df000704 	addi	fp,sp,28
 10051c4:	e13ffc15 	stw	r4,-16(fp)
 10051c8:	e17ffd15 	stw	r5,-12(fp)
 10051cc:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
 10051d0:	e0bffc17 	ldw	r2,-16(fp)
 10051d4:	10800017 	ldw	r2,0(r2)
 10051d8:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
 10051dc:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
 10051e0:	e03ff915 	stw	zero,-28(fp)
	while (count < len)
 10051e4:	00001206 	br	1005230 <alt_up_ps2_write_fd+0x7c>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
 10051e8:	e0bffd17 	ldw	r2,-12(fp)
 10051ec:	10800003 	ldbu	r2,0(r2)
 10051f0:	11403fcc 	andi	r5,r2,255
 10051f4:	e0bffd17 	ldw	r2,-12(fp)
 10051f8:	10800044 	addi	r2,r2,1
 10051fc:	e0bffd15 	stw	r2,-12(fp)
 1005200:	e13ffb17 	ldw	r4,-20(fp)
 1005204:	1004e400 	call	1004e40 <alt_up_ps2_write_data_byte>
 1005208:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
 100520c:	e0bffa17 	ldw	r2,-24(fp)
 1005210:	1005003a 	cmpeq	r2,r2,zero
 1005214:	1000031e 	bne	r2,zero,1005224 <alt_up_ps2_write_fd+0x70>
			return count;
 1005218:	e0bff917 	ldw	r2,-28(fp)
 100521c:	e0bfff15 	stw	r2,-4(fp)
 1005220:	00000806 	br	1005244 <alt_up_ps2_write_fd+0x90>
		count++;
 1005224:	e0bff917 	ldw	r2,-28(fp)
 1005228:	10800044 	addi	r2,r2,1
 100522c:	e0bff915 	stw	r2,-28(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
 1005230:	e0fff917 	ldw	r3,-28(fp)
 1005234:	e0bffe17 	ldw	r2,-8(fp)
 1005238:	18bfeb16 	blt	r3,r2,10051e8 <alt_up_ps2_write_fd+0x34>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
 100523c:	e0bff917 	ldw	r2,-28(fp)
 1005240:	e0bfff15 	stw	r2,-4(fp)
 1005244:	e0bfff17 	ldw	r2,-4(fp)
}
 1005248:	e037883a 	mov	sp,fp
 100524c:	dfc00117 	ldw	ra,4(sp)
 1005250:	df000017 	ldw	fp,0(sp)
 1005254:	dec00204 	addi	sp,sp,8
 1005258:	f800283a 	ret

0100525c <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
 100525c:	defffc04 	addi	sp,sp,-16
 1005260:	dfc00315 	stw	ra,12(sp)
 1005264:	df000215 	stw	fp,8(sp)
 1005268:	df000204 	addi	fp,sp,8
 100526c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
 1005270:	e13fff17 	ldw	r4,-4(fp)
 1005274:	01404074 	movhi	r5,257
 1005278:	2966c104 	addi	r5,r5,-25852
 100527c:	1006e800 	call	1006e80 <alt_find_dev>
 1005280:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 1005284:	e0bffe17 	ldw	r2,-8(fp)
}
 1005288:	e037883a 	mov	sp,fp
 100528c:	dfc00117 	ldw	ra,4(sp)
 1005290:	df000017 	ldw	fp,0(sp)
 1005294:	dec00204 	addi	sp,sp,8
 1005298:	f800283a 	ret

0100529c <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
 100529c:	defffc04 	addi	sp,sp,-16
 10052a0:	dfc00315 	stw	ra,12(sp)
 10052a4:	df000215 	stw	fp,8(sp)
 10052a8:	df000204 	addi	fp,sp,8
 10052ac:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
 10052b0:	e0bfff17 	ldw	r2,-4(fp)
 10052b4:	10800217 	ldw	r2,8(r2)
 10052b8:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
 10052bc:	00000c06 	br	10052f0 <alt_up_char_buffer_init+0x54>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
 10052c0:	e13ffe17 	ldw	r4,-8(fp)
 10052c4:	01404034 	movhi	r5,256
 10052c8:	295fd904 	addi	r5,r5,32612
 10052cc:	10079f00 	call	10079f0 <strcmp>
 10052d0:	1004c03a 	cmpne	r2,r2,zero
 10052d4:	1000031e 	bne	r2,zero,10052e4 <alt_up_char_buffer_init+0x48>
			(*name) = '\0';
 10052d8:	e0bffe17 	ldw	r2,-8(fp)
 10052dc:	10000005 	stb	zero,0(r2)
			break;
 10052e0:	00000a06 	br	100530c <alt_up_char_buffer_init+0x70>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
 10052e4:	e0bffe17 	ldw	r2,-8(fp)
 10052e8:	10800044 	addi	r2,r2,1
 10052ec:	e0bffe15 	stw	r2,-8(fp)
 10052f0:	e0bffe17 	ldw	r2,-8(fp)
 10052f4:	10800003 	ldbu	r2,0(r2)
 10052f8:	10803fcc 	andi	r2,r2,255
 10052fc:	1080201c 	xori	r2,r2,128
 1005300:	10bfe004 	addi	r2,r2,-128
 1005304:	1004c03a 	cmpne	r2,r2,zero
 1005308:	103fed1e 	bne	r2,zero,10052c0 <alt_up_char_buffer_init+0x24>
			break;
		}
	}
	
	return;
}
 100530c:	e037883a 	mov	sp,fp
 1005310:	dfc00117 	ldw	ra,4(sp)
 1005314:	df000017 	ldw	fp,0(sp)
 1005318:	dec00204 	addi	sp,sp,8
 100531c:	f800283a 	ret

01005320 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
 1005320:	defffc04 	addi	sp,sp,-16
 1005324:	dfc00315 	stw	ra,12(sp)
 1005328:	df000215 	stw	fp,8(sp)
 100532c:	df000204 	addi	fp,sp,8
 1005330:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
 1005334:	e13fff17 	ldw	r4,-4(fp)
 1005338:	01404074 	movhi	r5,257
 100533c:	2966c104 	addi	r5,r5,-25852
 1005340:	1006e800 	call	1006e80 <alt_find_dev>
 1005344:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 1005348:	e0bffe17 	ldw	r2,-8(fp)
}
 100534c:	e037883a 	mov	sp,fp
 1005350:	dfc00117 	ldw	ra,4(sp)
 1005354:	df000017 	ldw	fp,0(sp)
 1005358:	dec00204 	addi	sp,sp,8
 100535c:	f800283a 	ret

01005360 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
 1005360:	defff904 	addi	sp,sp,-28
 1005364:	df000615 	stw	fp,24(sp)
 1005368:	df000604 	addi	fp,sp,24
 100536c:	e13ffb15 	stw	r4,-20(fp)
 1005370:	e1bffd15 	stw	r6,-12(fp)
 1005374:	e1fffe15 	stw	r7,-8(fp)
 1005378:	e17ffc05 	stb	r5,-16(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 100537c:	e0bffb17 	ldw	r2,-20(fp)
 1005380:	10c00c17 	ldw	r3,48(r2)
 1005384:	e0bffd17 	ldw	r2,-12(fp)
 1005388:	10c0042e 	bgeu	r2,r3,100539c <alt_up_char_buffer_draw+0x3c>
 100538c:	e0bffb17 	ldw	r2,-20(fp)
 1005390:	10c00d17 	ldw	r3,52(r2)
 1005394:	e0bffe17 	ldw	r2,-8(fp)
 1005398:	10c00336 	bltu	r2,r3,10053a8 <alt_up_char_buffer_draw+0x48>
		return -1;
 100539c:	00bfffc4 	movi	r2,-1
 10053a0:	e0bfff15 	stw	r2,-4(fp)
 10053a4:	00001d06 	br	100541c <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
 10053a8:	e03ffa15 	stw	zero,-24(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
 10053ac:	e0bffb17 	ldw	r2,-20(fp)
 10053b0:	10c00f17 	ldw	r3,60(r2)
 10053b4:	e0bffd17 	ldw	r2,-12(fp)
 10053b8:	1886703a 	and	r3,r3,r2
 10053bc:	e0bffb17 	ldw	r2,-20(fp)
 10053c0:	10800e17 	ldw	r2,56(r2)
 10053c4:	1886983a 	sll	r3,r3,r2
 10053c8:	e0bffa17 	ldw	r2,-24(fp)
 10053cc:	10c4b03a 	or	r2,r2,r3
 10053d0:	e0bffa15 	stw	r2,-24(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
 10053d4:	e0bffb17 	ldw	r2,-20(fp)
 10053d8:	10c01117 	ldw	r3,68(r2)
 10053dc:	e0bffe17 	ldw	r2,-8(fp)
 10053e0:	1886703a 	and	r3,r3,r2
 10053e4:	e0bffb17 	ldw	r2,-20(fp)
 10053e8:	10801017 	ldw	r2,64(r2)
 10053ec:	1886983a 	sll	r3,r3,r2
 10053f0:	e0bffa17 	ldw	r2,-24(fp)
 10053f4:	10c4b03a 	or	r2,r2,r3
 10053f8:	e0bffa15 	stw	r2,-24(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
 10053fc:	e0bffb17 	ldw	r2,-20(fp)
 1005400:	10800b17 	ldw	r2,44(r2)
 1005404:	1007883a 	mov	r3,r2
 1005408:	e0bffa17 	ldw	r2,-24(fp)
 100540c:	1885883a 	add	r2,r3,r2
 1005410:	e0fffc03 	ldbu	r3,-16(fp)
 1005414:	10c00025 	stbio	r3,0(r2)

	return 0;
 1005418:	e03fff15 	stw	zero,-4(fp)
 100541c:	e0bfff17 	ldw	r2,-4(fp)
}
 1005420:	e037883a 	mov	sp,fp
 1005424:	df000017 	ldw	fp,0(sp)
 1005428:	dec00104 	addi	sp,sp,4
 100542c:	f800283a 	ret

01005430 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
 1005430:	defff904 	addi	sp,sp,-28
 1005434:	df000615 	stw	fp,24(sp)
 1005438:	df000604 	addi	fp,sp,24
 100543c:	e13ffb15 	stw	r4,-20(fp)
 1005440:	e17ffc15 	stw	r5,-16(fp)
 1005444:	e1bffd15 	stw	r6,-12(fp)
 1005448:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 100544c:	e0bffb17 	ldw	r2,-20(fp)
 1005450:	10c00c17 	ldw	r3,48(r2)
 1005454:	e0bffd17 	ldw	r2,-12(fp)
 1005458:	10c0042e 	bgeu	r2,r3,100546c <alt_up_char_buffer_string+0x3c>
 100545c:	e0bffb17 	ldw	r2,-20(fp)
 1005460:	10c00d17 	ldw	r3,52(r2)
 1005464:	e0bffe17 	ldw	r2,-8(fp)
 1005468:	10c00336 	bltu	r2,r3,1005478 <alt_up_char_buffer_string+0x48>
		return -1;
 100546c:	00bfffc4 	movi	r2,-1
 1005470:	e0bfff15 	stw	r2,-4(fp)
 1005474:	00002e06 	br	1005530 <alt_up_char_buffer_string+0x100>
	
	unsigned int offset = 0;
 1005478:	e03ffa15 	stw	zero,-24(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
 100547c:	e0bffb17 	ldw	r2,-20(fp)
 1005480:	10801017 	ldw	r2,64(r2)
 1005484:	1007883a 	mov	r3,r2
 1005488:	e0bffe17 	ldw	r2,-8(fp)
 100548c:	10c6983a 	sll	r3,r2,r3
 1005490:	e0bffd17 	ldw	r2,-12(fp)
 1005494:	1885883a 	add	r2,r3,r2
 1005498:	e0bffa15 	stw	r2,-24(fp)

	while ( *ptr )
 100549c:	00001c06 	br	1005510 <alt_up_char_buffer_string+0xe0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
 10054a0:	e0bffb17 	ldw	r2,-20(fp)
 10054a4:	10800b17 	ldw	r2,44(r2)
 10054a8:	1007883a 	mov	r3,r2
 10054ac:	e0bffa17 	ldw	r2,-24(fp)
 10054b0:	1889883a 	add	r4,r3,r2
 10054b4:	e0bffc17 	ldw	r2,-16(fp)
 10054b8:	10800003 	ldbu	r2,0(r2)
 10054bc:	10c03fcc 	andi	r3,r2,255
 10054c0:	18c0201c 	xori	r3,r3,128
 10054c4:	18ffe004 	addi	r3,r3,-128
 10054c8:	2005883a 	mov	r2,r4
 10054cc:	10c00025 	stbio	r3,0(r2)
		++ptr;
 10054d0:	e0bffc17 	ldw	r2,-16(fp)
 10054d4:	10800044 	addi	r2,r2,1
 10054d8:	e0bffc15 	stw	r2,-16(fp)
		if (++x >= char_buffer->x_resolution)
 10054dc:	e0bffd17 	ldw	r2,-12(fp)
 10054e0:	10800044 	addi	r2,r2,1
 10054e4:	e0bffd15 	stw	r2,-12(fp)
 10054e8:	e0bffb17 	ldw	r2,-20(fp)
 10054ec:	10c00c17 	ldw	r3,48(r2)
 10054f0:	e0bffd17 	ldw	r2,-12(fp)
 10054f4:	10c00336 	bltu	r2,r3,1005504 <alt_up_char_buffer_string+0xd4>
			return -1;
 10054f8:	00bfffc4 	movi	r2,-1
 10054fc:	e0bfff15 	stw	r2,-4(fp)
 1005500:	00000b06 	br	1005530 <alt_up_char_buffer_string+0x100>
		++offset;
 1005504:	e0bffa17 	ldw	r2,-24(fp)
 1005508:	10800044 	addi	r2,r2,1
 100550c:	e0bffa15 	stw	r2,-24(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
 1005510:	e0bffc17 	ldw	r2,-16(fp)
 1005514:	10800003 	ldbu	r2,0(r2)
 1005518:	10803fcc 	andi	r2,r2,255
 100551c:	1080201c 	xori	r2,r2,128
 1005520:	10bfe004 	addi	r2,r2,-128
 1005524:	1004c03a 	cmpne	r2,r2,zero
 1005528:	103fdd1e 	bne	r2,zero,10054a0 <alt_up_char_buffer_string+0x70>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
 100552c:	e03fff15 	stw	zero,-4(fp)
 1005530:	e0bfff17 	ldw	r2,-4(fp)
}
 1005534:	e037883a 	mov	sp,fp
 1005538:	df000017 	ldw	fp,0(sp)
 100553c:	dec00104 	addi	sp,sp,4
 1005540:	f800283a 	ret

01005544 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
 1005544:	defffe04 	addi	sp,sp,-8
 1005548:	df000115 	stw	fp,4(sp)
 100554c:	df000104 	addi	fp,sp,4
 1005550:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
 1005554:	e0bfff17 	ldw	r2,-4(fp)
 1005558:	10800a17 	ldw	r2,40(r2)
 100555c:	10800084 	addi	r2,r2,2
 1005560:	1007883a 	mov	r3,r2
 1005564:	00800044 	movi	r2,1
 1005568:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
 100556c:	e0bfff17 	ldw	r2,-4(fp)
 1005570:	10800a17 	ldw	r2,40(r2)
 1005574:	10800084 	addi	r2,r2,2
 1005578:	10800023 	ldbuio	r2,0(r2)
 100557c:	1080004c 	andi	r2,r2,1
 1005580:	10803fcc 	andi	r2,r2,255
 1005584:	1004c03a 	cmpne	r2,r2,zero
 1005588:	103ff81e 	bne	r2,zero,100556c <alt_up_char_buffer_clear+0x28>
	return 0;
 100558c:	0005883a 	mov	r2,zero
}
 1005590:	e037883a 	mov	sp,fp
 1005594:	df000017 	ldw	fp,0(sp)
 1005598:	dec00104 	addi	sp,sp,4
 100559c:	f800283a 	ret

010055a0 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
 10055a0:	defffc04 	addi	sp,sp,-16
 10055a4:	dfc00315 	stw	ra,12(sp)
 10055a8:	df000215 	stw	fp,8(sp)
 10055ac:	df000204 	addi	fp,sp,8
 10055b0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
 10055b4:	e13fff17 	ldw	r4,-4(fp)
 10055b8:	01404074 	movhi	r5,257
 10055bc:	2966c104 	addi	r5,r5,-25852
 10055c0:	1006e800 	call	1006e80 <alt_find_dev>
 10055c4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 10055c8:	e0bffe17 	ldw	r2,-8(fp)
}
 10055cc:	e037883a 	mov	sp,fp
 10055d0:	dfc00117 	ldw	ra,4(sp)
 10055d4:	df000017 	ldw	fp,0(sp)
 10055d8:	dec00204 	addi	sp,sp,8
 10055dc:	f800283a 	ret

010055e0 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
 10055e0:	defff904 	addi	sp,sp,-28
 10055e4:	df000615 	stw	fp,24(sp)
 10055e8:	df000604 	addi	fp,sp,24
 10055ec:	e13ffb15 	stw	r4,-20(fp)
 10055f0:	e17ffc15 	stw	r5,-16(fp)
 10055f4:	e1bffd15 	stw	r6,-12(fp)
 10055f8:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
 10055fc:	e0bffb17 	ldw	r2,-20(fp)
 1005600:	10c00f17 	ldw	r3,60(r2)
 1005604:	e0bffd17 	ldw	r2,-12(fp)
 1005608:	10c0042e 	bgeu	r2,r3,100561c <alt_up_pixel_buffer_dma_draw+0x3c>
 100560c:	e0bffb17 	ldw	r2,-20(fp)
 1005610:	10c01017 	ldw	r3,64(r2)
 1005614:	e0bffe17 	ldw	r2,-8(fp)
 1005618:	10c00336 	bltu	r2,r3,1005628 <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
 100561c:	00bfffc4 	movi	r2,-1
 1005620:	e0bfff15 	stw	r2,-4(fp)
 1005624:	00005106 	br	100576c <alt_up_pixel_buffer_dma_draw+0x18c>

	unsigned int addr = 0;
 1005628:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 100562c:	e0bffb17 	ldw	r2,-20(fp)
 1005630:	10800d17 	ldw	r2,52(r2)
 1005634:	1004c03a 	cmpne	r2,r2,zero
 1005638:	1000151e 	bne	r2,zero,1005690 <alt_up_pixel_buffer_dma_draw+0xb0>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 100563c:	e0bffb17 	ldw	r2,-20(fp)
 1005640:	10c01217 	ldw	r3,72(r2)
 1005644:	e0bffd17 	ldw	r2,-12(fp)
 1005648:	1886703a 	and	r3,r3,r2
 100564c:	e0bffb17 	ldw	r2,-20(fp)
 1005650:	10801117 	ldw	r2,68(r2)
 1005654:	1886983a 	sll	r3,r3,r2
 1005658:	e0bffa17 	ldw	r2,-24(fp)
 100565c:	10c4b03a 	or	r2,r2,r3
 1005660:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
 1005664:	e0bffb17 	ldw	r2,-20(fp)
 1005668:	10c01417 	ldw	r3,80(r2)
 100566c:	e0bffe17 	ldw	r2,-8(fp)
 1005670:	1886703a 	and	r3,r3,r2
 1005674:	e0bffb17 	ldw	r2,-20(fp)
 1005678:	10801317 	ldw	r2,76(r2)
 100567c:	1886983a 	sll	r3,r3,r2
 1005680:	e0bffa17 	ldw	r2,-24(fp)
 1005684:	10c4b03a 	or	r2,r2,r3
 1005688:	e0bffa15 	stw	r2,-24(fp)
 100568c:	00001706 	br	10056ec <alt_up_pixel_buffer_dma_draw+0x10c>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 1005690:	e0bffb17 	ldw	r2,-20(fp)
 1005694:	10c01217 	ldw	r3,72(r2)
 1005698:	e0bffd17 	ldw	r2,-12(fp)
 100569c:	1886703a 	and	r3,r3,r2
 10056a0:	e0bffb17 	ldw	r2,-20(fp)
 10056a4:	10801117 	ldw	r2,68(r2)
 10056a8:	1886983a 	sll	r3,r3,r2
 10056ac:	e0bffa17 	ldw	r2,-24(fp)
 10056b0:	10c5883a 	add	r2,r2,r3
 10056b4:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
 10056b8:	e0bffb17 	ldw	r2,-20(fp)
 10056bc:	10c01417 	ldw	r3,80(r2)
 10056c0:	e0bffe17 	ldw	r2,-8(fp)
 10056c4:	1886703a 	and	r3,r3,r2
 10056c8:	e0bffb17 	ldw	r2,-20(fp)
 10056cc:	10800f17 	ldw	r2,60(r2)
 10056d0:	1887383a 	mul	r3,r3,r2
 10056d4:	e0bffb17 	ldw	r2,-20(fp)
 10056d8:	10801117 	ldw	r2,68(r2)
 10056dc:	1886983a 	sll	r3,r3,r2
 10056e0:	e0bffa17 	ldw	r2,-24(fp)
 10056e4:	10c5883a 	add	r2,r2,r3
 10056e8:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 10056ec:	e0bffb17 	ldw	r2,-20(fp)
 10056f0:	10800e17 	ldw	r2,56(r2)
 10056f4:	10800058 	cmpnei	r2,r2,1
 10056f8:	1000081e 	bne	r2,zero,100571c <alt_up_pixel_buffer_dma_draw+0x13c>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 10056fc:	e0bffb17 	ldw	r2,-20(fp)
 1005700:	10800c17 	ldw	r2,48(r2)
 1005704:	1007883a 	mov	r3,r2
 1005708:	e0bffa17 	ldw	r2,-24(fp)
 100570c:	1885883a 	add	r2,r3,r2
 1005710:	e0fffc17 	ldw	r3,-16(fp)
 1005714:	10c00025 	stbio	r3,0(r2)
 1005718:	00001306 	br	1005768 <alt_up_pixel_buffer_dma_draw+0x188>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 100571c:	e0bffb17 	ldw	r2,-20(fp)
 1005720:	10800e17 	ldw	r2,56(r2)
 1005724:	10800098 	cmpnei	r2,r2,2
 1005728:	1000081e 	bne	r2,zero,100574c <alt_up_pixel_buffer_dma_draw+0x16c>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 100572c:	e0bffb17 	ldw	r2,-20(fp)
 1005730:	10800c17 	ldw	r2,48(r2)
 1005734:	1007883a 	mov	r3,r2
 1005738:	e0bffa17 	ldw	r2,-24(fp)
 100573c:	1885883a 	add	r2,r3,r2
 1005740:	e0fffc17 	ldw	r3,-16(fp)
 1005744:	10c0002d 	sthio	r3,0(r2)
 1005748:	00000706 	br	1005768 <alt_up_pixel_buffer_dma_draw+0x188>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 100574c:	e0bffb17 	ldw	r2,-20(fp)
 1005750:	10800c17 	ldw	r2,48(r2)
 1005754:	1007883a 	mov	r3,r2
 1005758:	e0bffa17 	ldw	r2,-24(fp)
 100575c:	1885883a 	add	r2,r3,r2
 1005760:	e0fffc17 	ldw	r3,-16(fp)
 1005764:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
 1005768:	e03fff15 	stw	zero,-4(fp)
 100576c:	e0bfff17 	ldw	r2,-4(fp)
}
 1005770:	e037883a 	mov	sp,fp
 1005774:	df000017 	ldw	fp,0(sp)
 1005778:	dec00104 	addi	sp,sp,4
 100577c:	f800283a 	ret

01005780 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
 1005780:	defffd04 	addi	sp,sp,-12
 1005784:	df000215 	stw	fp,8(sp)
 1005788:	df000204 	addi	fp,sp,8
 100578c:	e13ffe15 	stw	r4,-8(fp)
 1005790:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
 1005794:	e0bffe17 	ldw	r2,-8(fp)
 1005798:	10800a17 	ldw	r2,40(r2)
 100579c:	10800104 	addi	r2,r2,4
 10057a0:	e0ffff17 	ldw	r3,-4(fp)
 10057a4:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
 10057a8:	e0bffe17 	ldw	r2,-8(fp)
 10057ac:	10800a17 	ldw	r2,40(r2)
 10057b0:	10800104 	addi	r2,r2,4
 10057b4:	10800037 	ldwio	r2,0(r2)
 10057b8:	1007883a 	mov	r3,r2
 10057bc:	e0bffe17 	ldw	r2,-8(fp)
 10057c0:	10c00c15 	stw	r3,48(r2)
	return 0;
 10057c4:	0005883a 	mov	r2,zero
}
 10057c8:	e037883a 	mov	sp,fp
 10057cc:	df000017 	ldw	fp,0(sp)
 10057d0:	dec00104 	addi	sp,sp,4
 10057d4:	f800283a 	ret

010057d8 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
 10057d8:	defffe04 	addi	sp,sp,-8
 10057dc:	df000115 	stw	fp,4(sp)
 10057e0:	df000104 	addi	fp,sp,4
 10057e4:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
 10057e8:	e0bfff17 	ldw	r2,-4(fp)
 10057ec:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
 10057f0:	e0bfff17 	ldw	r2,-4(fp)
 10057f4:	10800a17 	ldw	r2,40(r2)
 10057f8:	1007883a 	mov	r3,r2
 10057fc:	00800044 	movi	r2,1
 1005800:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
 1005804:	e0bfff17 	ldw	r2,-4(fp)
 1005808:	10c00b17 	ldw	r3,44(r2)
 100580c:	e0bfff17 	ldw	r2,-4(fp)
 1005810:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
 1005814:	e0bfff17 	ldw	r2,-4(fp)
 1005818:	11000b15 	stw	r4,44(r2)
	return 0;
 100581c:	0005883a 	mov	r2,zero
}
 1005820:	e037883a 	mov	sp,fp
 1005824:	df000017 	ldw	fp,0(sp)
 1005828:	dec00104 	addi	sp,sp,4
 100582c:	f800283a 	ret

01005830 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
 1005830:	defffe04 	addi	sp,sp,-8
 1005834:	df000115 	stw	fp,4(sp)
 1005838:	df000104 	addi	fp,sp,4
 100583c:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
 1005840:	e0bfff17 	ldw	r2,-4(fp)
 1005844:	10800a17 	ldw	r2,40(r2)
 1005848:	10800304 	addi	r2,r2,12
 100584c:	10800037 	ldwio	r2,0(r2)
 1005850:	1080004c 	andi	r2,r2,1
}
 1005854:	e037883a 	mov	sp,fp
 1005858:	df000017 	ldw	fp,0(sp)
 100585c:	dec00104 	addi	sp,sp,4
 1005860:	f800283a 	ret

01005864 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
 1005864:	defff604 	addi	sp,sp,-40
 1005868:	df000915 	stw	fp,36(sp)
 100586c:	df000904 	addi	fp,sp,36
 1005870:	e13ff715 	stw	r4,-36(fp)
 1005874:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 1005878:	e0bff817 	ldw	r2,-32(fp)
 100587c:	10800058 	cmpnei	r2,r2,1
 1005880:	1000041e 	bne	r2,zero,1005894 <alt_up_pixel_buffer_dma_clear_screen+0x30>
		addr = pixel_buffer->back_buffer_start_address;
 1005884:	e0bff717 	ldw	r2,-36(fp)
 1005888:	10800c17 	ldw	r2,48(r2)
 100588c:	e0bfff15 	stw	r2,-4(fp)
 1005890:	00000306 	br	10058a0 <alt_up_pixel_buffer_dma_clear_screen+0x3c>
	else
		addr = pixel_buffer->buffer_start_address;
 1005894:	e0bff717 	ldw	r2,-36(fp)
 1005898:	10800b17 	ldw	r2,44(r2)
 100589c:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
 10058a0:	e0bff717 	ldw	r2,-36(fp)
 10058a4:	10800f17 	ldw	r2,60(r2)
 10058a8:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 10058ac:	e0bff717 	ldw	r2,-36(fp)
 10058b0:	10800e17 	ldw	r2,56(r2)
 10058b4:	10800098 	cmpnei	r2,r2,2
 10058b8:	1000051e 	bne	r2,zero,10058d0 <alt_up_pixel_buffer_dma_clear_screen+0x6c>
		limit_x = limit_x << 1;
 10058bc:	e0fffe17 	ldw	r3,-8(fp)
 10058c0:	e0fffe17 	ldw	r3,-8(fp)
 10058c4:	18c5883a 	add	r2,r3,r3
 10058c8:	e0bffe15 	stw	r2,-8(fp)
 10058cc:	00000506 	br	10058e4 <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
 10058d0:	e13ffe17 	ldw	r4,-8(fp)
 10058d4:	e13ffe17 	ldw	r4,-8(fp)
 10058d8:	2105883a 	add	r2,r4,r4
 10058dc:	1085883a 	add	r2,r2,r2
 10058e0:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
 10058e4:	e0bff717 	ldw	r2,-36(fp)
 10058e8:	10801017 	ldw	r2,64(r2)
 10058ec:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 10058f0:	e0bff717 	ldw	r2,-36(fp)
 10058f4:	10800d17 	ldw	r2,52(r2)
 10058f8:	1004c03a 	cmpne	r2,r2,zero
 10058fc:	10001e1e 	bne	r2,zero,1005978 <alt_up_pixel_buffer_dma_clear_screen+0x114>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 1005900:	e0bff717 	ldw	r2,-36(fp)
 1005904:	10801317 	ldw	r2,76(r2)
 1005908:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
 100590c:	e03ffb15 	stw	zero,-20(fp)
 1005910:	00001506 	br	1005968 <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			for (x = 0; x < limit_x; x = x + 4)
 1005914:	e03ffc15 	stw	zero,-16(fp)
 1005918:	00000706 	br	1005938 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
			{
				IOWR_32DIRECT(addr, x, 0);
 100591c:	e0ffff17 	ldw	r3,-4(fp)
 1005920:	e0bffc17 	ldw	r2,-16(fp)
 1005924:	1885883a 	add	r2,r3,r2
 1005928:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
 100592c:	e0bffc17 	ldw	r2,-16(fp)
 1005930:	10800104 	addi	r2,r2,4
 1005934:	e0bffc15 	stw	r2,-16(fp)
 1005938:	e0fffc17 	ldw	r3,-16(fp)
 100593c:	e13ffe17 	ldw	r4,-8(fp)
 1005940:	193ff636 	bltu	r3,r4,100591c <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
 1005944:	e0fffa17 	ldw	r3,-24(fp)
 1005948:	00800044 	movi	r2,1
 100594c:	10c4983a 	sll	r2,r2,r3
 1005950:	e0ffff17 	ldw	r3,-4(fp)
 1005954:	1887883a 	add	r3,r3,r2
 1005958:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
 100595c:	e13ffb17 	ldw	r4,-20(fp)
 1005960:	21000044 	addi	r4,r4,1
 1005964:	e13ffb15 	stw	r4,-20(fp)
 1005968:	e0bffb17 	ldw	r2,-20(fp)
 100596c:	e0fffd17 	ldw	r3,-12(fp)
 1005970:	10ffe836 	bltu	r2,r3,1005914 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
 1005974:	00001006 	br	10059b8 <alt_up_pixel_buffer_dma_clear_screen+0x154>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
 1005978:	e13ffd17 	ldw	r4,-12(fp)
 100597c:	e0bffe17 	ldw	r2,-8(fp)
 1005980:	2089383a 	mul	r4,r4,r2
 1005984:	e13ffd15 	stw	r4,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
 1005988:	e03ff915 	stw	zero,-28(fp)
 100598c:	00000706 	br	10059ac <alt_up_pixel_buffer_dma_clear_screen+0x148>
		{
			IOWR_32DIRECT(addr, x, 0);
 1005990:	e0ffff17 	ldw	r3,-4(fp)
 1005994:	e0bff917 	ldw	r2,-28(fp)
 1005998:	1885883a 	add	r2,r3,r2
 100599c:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
 10059a0:	e0fff917 	ldw	r3,-28(fp)
 10059a4:	18c00104 	addi	r3,r3,4
 10059a8:	e0fff915 	stw	r3,-28(fp)
 10059ac:	e0bff917 	ldw	r2,-28(fp)
 10059b0:	e13ffd17 	ldw	r4,-12(fp)
 10059b4:	113ff636 	bltu	r2,r4,1005990 <alt_up_pixel_buffer_dma_clear_screen+0x12c>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 10059b8:	e037883a 	mov	sp,fp
 10059bc:	df000017 	ldw	fp,0(sp)
 10059c0:	dec00104 	addi	sp,sp,4
 10059c4:	f800283a 	ret

010059c8 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
 10059c8:	deffed04 	addi	sp,sp,-76
 10059cc:	df001215 	stw	fp,72(sp)
 10059d0:	df001204 	addi	fp,sp,72
 10059d4:	e13fee15 	stw	r4,-72(fp)
 10059d8:	e17fef15 	stw	r5,-68(fp)
 10059dc:	e1bff015 	stw	r6,-64(fp)
 10059e0:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 10059e4:	e0bfee17 	ldw	r2,-72(fp)
 10059e8:	10800f17 	ldw	r2,60(r2)
 10059ec:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 10059f0:	e0bfee17 	ldw	r2,-72(fp)
 10059f4:	10801017 	ldw	r2,64(r2)
 10059f8:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
 10059fc:	e0bfef17 	ldw	r2,-68(fp)
 1005a00:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
 1005a04:	e0fff117 	ldw	r3,-60(fp)
 1005a08:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
 1005a0c:	e13ff017 	ldw	r4,-64(fp)
 1005a10:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
 1005a14:	e0800117 	ldw	r2,4(fp)
 1005a18:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
 1005a1c:	e0c00217 	ldw	r3,8(fp)
 1005a20:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 1005a24:	e13ffa17 	ldw	r4,-24(fp)
 1005a28:	e0bffb17 	ldw	r2,-20(fp)
 1005a2c:	2080062e 	bgeu	r4,r2,1005a48 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = l_x;
 1005a30:	e0fffb17 	ldw	r3,-20(fp)
 1005a34:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
 1005a38:	e13ffa17 	ldw	r4,-24(fp)
 1005a3c:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
 1005a40:	e0bffc17 	ldw	r2,-16(fp)
 1005a44:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
 1005a48:	e0fff817 	ldw	r3,-32(fp)
 1005a4c:	e13ff917 	ldw	r4,-28(fp)
 1005a50:	1900062e 	bgeu	r3,r4,1005a6c <alt_up_pixel_buffer_dma_draw_box+0xa4>
	{
		temp = t_y;
 1005a54:	e0bff917 	ldw	r2,-28(fp)
 1005a58:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
 1005a5c:	e0fff817 	ldw	r3,-32(fp)
 1005a60:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
 1005a64:	e13ffc17 	ldw	r4,-16(fp)
 1005a68:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
 1005a6c:	e0bffb17 	ldw	r2,-20(fp)
 1005a70:	e0fffe17 	ldw	r3,-8(fp)
 1005a74:	10c10d2e 	bgeu	r2,r3,1005eac <alt_up_pixel_buffer_dma_draw_box+0x4e4>
 1005a78:	e13ff917 	ldw	r4,-28(fp)
 1005a7c:	e0bffd17 	ldw	r2,-12(fp)
 1005a80:	20800136 	bltu	r4,r2,1005a88 <alt_up_pixel_buffer_dma_draw_box+0xc0>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 1005a84:	00010906 	br	1005eac <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 1005a88:	e0fffa17 	ldw	r3,-24(fp)
 1005a8c:	e13ffe17 	ldw	r4,-8(fp)
 1005a90:	19000336 	bltu	r3,r4,1005aa0 <alt_up_pixel_buffer_dma_draw_box+0xd8>
	{
		r_x = limit_x - 1;
 1005a94:	e0bffe17 	ldw	r2,-8(fp)
 1005a98:	10bfffc4 	addi	r2,r2,-1
 1005a9c:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 1005aa0:	e0fff817 	ldw	r3,-32(fp)
 1005aa4:	e13ffd17 	ldw	r4,-12(fp)
 1005aa8:	19000336 	bltu	r3,r4,1005ab8 <alt_up_pixel_buffer_dma_draw_box+0xf0>
	{
		b_y = limit_y - 1;
 1005aac:	e0bffd17 	ldw	r2,-12(fp)
 1005ab0:	10bfffc4 	addi	r2,r2,-1
 1005ab4:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 1005ab8:	e0800317 	ldw	r2,12(fp)
 1005abc:	10800058 	cmpnei	r2,r2,1
 1005ac0:	1000041e 	bne	r2,zero,1005ad4 <alt_up_pixel_buffer_dma_draw_box+0x10c>
		addr = pixel_buffer->back_buffer_start_address;
 1005ac4:	e0bfee17 	ldw	r2,-72(fp)
 1005ac8:	10800c17 	ldw	r2,48(r2)
 1005acc:	e0bfff15 	stw	r2,-4(fp)
 1005ad0:	00000306 	br	1005ae0 <alt_up_pixel_buffer_dma_draw_box+0x118>
	else
		addr = pixel_buffer->buffer_start_address;
 1005ad4:	e0bfee17 	ldw	r2,-72(fp)
 1005ad8:	10800b17 	ldw	r2,44(r2)
 1005adc:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 1005ae0:	e0bfee17 	ldw	r2,-72(fp)
 1005ae4:	10800d17 	ldw	r2,52(r2)
 1005ae8:	1004c03a 	cmpne	r2,r2,zero
 1005aec:	1000721e 	bne	r2,zero,1005cb8 <alt_up_pixel_buffer_dma_draw_box+0x2f0>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 1005af0:	e0bfee17 	ldw	r2,-72(fp)
 1005af4:	10801317 	ldw	r2,76(r2)
 1005af8:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
 1005afc:	e0bff417 	ldw	r2,-48(fp)
 1005b00:	e0fff917 	ldw	r3,-28(fp)
 1005b04:	1884983a 	sll	r2,r3,r2
 1005b08:	e13fff17 	ldw	r4,-4(fp)
 1005b0c:	2089883a 	add	r4,r4,r2
 1005b10:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 1005b14:	e0bfee17 	ldw	r2,-72(fp)
 1005b18:	10800e17 	ldw	r2,56(r2)
 1005b1c:	10800058 	cmpnei	r2,r2,1
 1005b20:	10001e1e 	bne	r2,zero,1005b9c <alt_up_pixel_buffer_dma_draw_box+0x1d4>
			for (y = t_y; y <= b_y; y++)
 1005b24:	e0bff917 	ldw	r2,-28(fp)
 1005b28:	e0bff515 	stw	r2,-44(fp)
 1005b2c:	00001706 	br	1005b8c <alt_up_pixel_buffer_dma_draw_box+0x1c4>
			{
				for (x = l_x; x <= r_x; x++)
 1005b30:	e0fffb17 	ldw	r3,-20(fp)
 1005b34:	e0fff615 	stw	r3,-40(fp)
 1005b38:	00000806 	br	1005b5c <alt_up_pixel_buffer_dma_draw_box+0x194>
				{
					IOWR_8DIRECT(addr, x, local_color);
 1005b3c:	e0ffff17 	ldw	r3,-4(fp)
 1005b40:	e0bff617 	ldw	r2,-40(fp)
 1005b44:	1885883a 	add	r2,r3,r2
 1005b48:	e0fff717 	ldw	r3,-36(fp)
 1005b4c:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 1005b50:	e13ff617 	ldw	r4,-40(fp)
 1005b54:	21000044 	addi	r4,r4,1
 1005b58:	e13ff615 	stw	r4,-40(fp)
 1005b5c:	e0bffa17 	ldw	r2,-24(fp)
 1005b60:	e0fff617 	ldw	r3,-40(fp)
 1005b64:	10fff52e 	bgeu	r2,r3,1005b3c <alt_up_pixel_buffer_dma_draw_box+0x174>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
 1005b68:	e0fff417 	ldw	r3,-48(fp)
 1005b6c:	00800044 	movi	r2,1
 1005b70:	10c4983a 	sll	r2,r2,r3
 1005b74:	e13fff17 	ldw	r4,-4(fp)
 1005b78:	2089883a 	add	r4,r4,r2
 1005b7c:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 1005b80:	e0bff517 	ldw	r2,-44(fp)
 1005b84:	10800044 	addi	r2,r2,1
 1005b88:	e0bff515 	stw	r2,-44(fp)
 1005b8c:	e0fff817 	ldw	r3,-32(fp)
 1005b90:	e13ff517 	ldw	r4,-44(fp)
 1005b94:	193fe62e 	bgeu	r3,r4,1005b30 <alt_up_pixel_buffer_dma_draw_box+0x168>
 1005b98:	0000c406 	br	1005eac <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 1005b9c:	e0bfee17 	ldw	r2,-72(fp)
 1005ba0:	10800e17 	ldw	r2,56(r2)
 1005ba4:	10800098 	cmpnei	r2,r2,2
 1005ba8:	1000211e 	bne	r2,zero,1005c30 <alt_up_pixel_buffer_dma_draw_box+0x268>
			for (y = t_y; y <= b_y; y++)
 1005bac:	e0bff917 	ldw	r2,-28(fp)
 1005bb0:	e0bff515 	stw	r2,-44(fp)
 1005bb4:	00001a06 	br	1005c20 <alt_up_pixel_buffer_dma_draw_box+0x258>
			{
				for (x = l_x; x <= r_x; x++)
 1005bb8:	e0fffb17 	ldw	r3,-20(fp)
 1005bbc:	e0fff615 	stw	r3,-40(fp)
 1005bc0:	00000b06 	br	1005bf0 <alt_up_pixel_buffer_dma_draw_box+0x228>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 1005bc4:	e13ff617 	ldw	r4,-40(fp)
 1005bc8:	e13ff617 	ldw	r4,-40(fp)
 1005bcc:	2105883a 	add	r2,r4,r4
 1005bd0:	1007883a 	mov	r3,r2
 1005bd4:	e0bfff17 	ldw	r2,-4(fp)
 1005bd8:	1885883a 	add	r2,r3,r2
 1005bdc:	e0fff717 	ldw	r3,-36(fp)
 1005be0:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 1005be4:	e0bff617 	ldw	r2,-40(fp)
 1005be8:	10800044 	addi	r2,r2,1
 1005bec:	e0bff615 	stw	r2,-40(fp)
 1005bf0:	e0fffa17 	ldw	r3,-24(fp)
 1005bf4:	e13ff617 	ldw	r4,-40(fp)
 1005bf8:	193ff22e 	bgeu	r3,r4,1005bc4 <alt_up_pixel_buffer_dma_draw_box+0x1fc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
 1005bfc:	e0fff417 	ldw	r3,-48(fp)
 1005c00:	00800044 	movi	r2,1
 1005c04:	10c4983a 	sll	r2,r2,r3
 1005c08:	e0ffff17 	ldw	r3,-4(fp)
 1005c0c:	1887883a 	add	r3,r3,r2
 1005c10:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 1005c14:	e13ff517 	ldw	r4,-44(fp)
 1005c18:	21000044 	addi	r4,r4,1
 1005c1c:	e13ff515 	stw	r4,-44(fp)
 1005c20:	e0bff817 	ldw	r2,-32(fp)
 1005c24:	e0fff517 	ldw	r3,-44(fp)
 1005c28:	10ffe32e 	bgeu	r2,r3,1005bb8 <alt_up_pixel_buffer_dma_draw_box+0x1f0>
 1005c2c:	00009f06 	br	1005eac <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 1005c30:	e13ff917 	ldw	r4,-28(fp)
 1005c34:	e13ff515 	stw	r4,-44(fp)
 1005c38:	00001b06 	br	1005ca8 <alt_up_pixel_buffer_dma_draw_box+0x2e0>
			{
				for (x = l_x; x <= r_x; x++)
 1005c3c:	e0bffb17 	ldw	r2,-20(fp)
 1005c40:	e0bff615 	stw	r2,-40(fp)
 1005c44:	00000c06 	br	1005c78 <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 1005c48:	e0fff617 	ldw	r3,-40(fp)
 1005c4c:	e0fff617 	ldw	r3,-40(fp)
 1005c50:	18c5883a 	add	r2,r3,r3
 1005c54:	1085883a 	add	r2,r2,r2
 1005c58:	1007883a 	mov	r3,r2
 1005c5c:	e0bfff17 	ldw	r2,-4(fp)
 1005c60:	1885883a 	add	r2,r3,r2
 1005c64:	e0fff717 	ldw	r3,-36(fp)
 1005c68:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 1005c6c:	e13ff617 	ldw	r4,-40(fp)
 1005c70:	21000044 	addi	r4,r4,1
 1005c74:	e13ff615 	stw	r4,-40(fp)
 1005c78:	e0bffa17 	ldw	r2,-24(fp)
 1005c7c:	e0fff617 	ldw	r3,-40(fp)
 1005c80:	10fff12e 	bgeu	r2,r3,1005c48 <alt_up_pixel_buffer_dma_draw_box+0x280>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
 1005c84:	e0fff417 	ldw	r3,-48(fp)
 1005c88:	00800044 	movi	r2,1
 1005c8c:	10c4983a 	sll	r2,r2,r3
 1005c90:	e13fff17 	ldw	r4,-4(fp)
 1005c94:	2089883a 	add	r4,r4,r2
 1005c98:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 1005c9c:	e0bff517 	ldw	r2,-44(fp)
 1005ca0:	10800044 	addi	r2,r2,1
 1005ca4:	e0bff515 	stw	r2,-44(fp)
 1005ca8:	e0fff817 	ldw	r3,-32(fp)
 1005cac:	e13ff517 	ldw	r4,-44(fp)
 1005cb0:	193fe22e 	bgeu	r3,r4,1005c3c <alt_up_pixel_buffer_dma_draw_box+0x274>
 1005cb4:	00007d06 	br	1005eac <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 1005cb8:	e0bfee17 	ldw	r2,-72(fp)
 1005cbc:	10800e17 	ldw	r2,56(r2)
 1005cc0:	10800058 	cmpnei	r2,r2,1
 1005cc4:	1000221e 	bne	r2,zero,1005d50 <alt_up_pixel_buffer_dma_draw_box+0x388>
			addr = addr + t_y * limit_x;
 1005cc8:	e0fff917 	ldw	r3,-28(fp)
 1005ccc:	e13ffe17 	ldw	r4,-8(fp)
 1005cd0:	1905383a 	mul	r2,r3,r4
 1005cd4:	e0ffff17 	ldw	r3,-4(fp)
 1005cd8:	1887883a 	add	r3,r3,r2
 1005cdc:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 1005ce0:	e13ff917 	ldw	r4,-28(fp)
 1005ce4:	e13ff215 	stw	r4,-56(fp)
 1005ce8:	00001506 	br	1005d40 <alt_up_pixel_buffer_dma_draw_box+0x378>
			{
				for (x = l_x; x <= r_x; x++)
 1005cec:	e0bffb17 	ldw	r2,-20(fp)
 1005cf0:	e0bff315 	stw	r2,-52(fp)
 1005cf4:	00000806 	br	1005d18 <alt_up_pixel_buffer_dma_draw_box+0x350>
				{
					IOWR_8DIRECT(addr, x, local_color);
 1005cf8:	e0ffff17 	ldw	r3,-4(fp)
 1005cfc:	e0bff317 	ldw	r2,-52(fp)
 1005d00:	1885883a 	add	r2,r3,r2
 1005d04:	e0fff717 	ldw	r3,-36(fp)
 1005d08:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 1005d0c:	e0fff317 	ldw	r3,-52(fp)
 1005d10:	18c00044 	addi	r3,r3,1
 1005d14:	e0fff315 	stw	r3,-52(fp)
 1005d18:	e13ffa17 	ldw	r4,-24(fp)
 1005d1c:	e0bff317 	ldw	r2,-52(fp)
 1005d20:	20bff52e 	bgeu	r4,r2,1005cf8 <alt_up_pixel_buffer_dma_draw_box+0x330>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
 1005d24:	e0ffff17 	ldw	r3,-4(fp)
 1005d28:	e13ffe17 	ldw	r4,-8(fp)
 1005d2c:	1907883a 	add	r3,r3,r4
 1005d30:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 1005d34:	e0bff217 	ldw	r2,-56(fp)
 1005d38:	10800044 	addi	r2,r2,1
 1005d3c:	e0bff215 	stw	r2,-56(fp)
 1005d40:	e0fff817 	ldw	r3,-32(fp)
 1005d44:	e13ff217 	ldw	r4,-56(fp)
 1005d48:	193fe82e 	bgeu	r3,r4,1005cec <alt_up_pixel_buffer_dma_draw_box+0x324>
 1005d4c:	00005706 	br	1005eac <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 1005d50:	e0bfee17 	ldw	r2,-72(fp)
 1005d54:	10800e17 	ldw	r2,56(r2)
 1005d58:	10800098 	cmpnei	r2,r2,2
 1005d5c:	1000291e 	bne	r2,zero,1005e04 <alt_up_pixel_buffer_dma_draw_box+0x43c>
			limit_x = limit_x << 1;
 1005d60:	e0fffe17 	ldw	r3,-8(fp)
 1005d64:	e0fffe17 	ldw	r3,-8(fp)
 1005d68:	18c5883a 	add	r2,r3,r3
 1005d6c:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 1005d70:	e13ff917 	ldw	r4,-28(fp)
 1005d74:	e0fffe17 	ldw	r3,-8(fp)
 1005d78:	20c5383a 	mul	r2,r4,r3
 1005d7c:	e13fff17 	ldw	r4,-4(fp)
 1005d80:	2089883a 	add	r4,r4,r2
 1005d84:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
 1005d88:	e0bff917 	ldw	r2,-28(fp)
 1005d8c:	e0bff215 	stw	r2,-56(fp)
 1005d90:	00001806 	br	1005df4 <alt_up_pixel_buffer_dma_draw_box+0x42c>
			{
				for (x = l_x; x <= r_x; x++)
 1005d94:	e0fffb17 	ldw	r3,-20(fp)
 1005d98:	e0fff315 	stw	r3,-52(fp)
 1005d9c:	00000b06 	br	1005dcc <alt_up_pixel_buffer_dma_draw_box+0x404>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 1005da0:	e13ff317 	ldw	r4,-52(fp)
 1005da4:	e13ff317 	ldw	r4,-52(fp)
 1005da8:	2105883a 	add	r2,r4,r4
 1005dac:	1007883a 	mov	r3,r2
 1005db0:	e0bfff17 	ldw	r2,-4(fp)
 1005db4:	1885883a 	add	r2,r3,r2
 1005db8:	e0fff717 	ldw	r3,-36(fp)
 1005dbc:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 1005dc0:	e0bff317 	ldw	r2,-52(fp)
 1005dc4:	10800044 	addi	r2,r2,1
 1005dc8:	e0bff315 	stw	r2,-52(fp)
 1005dcc:	e0fffa17 	ldw	r3,-24(fp)
 1005dd0:	e13ff317 	ldw	r4,-52(fp)
 1005dd4:	193ff22e 	bgeu	r3,r4,1005da0 <alt_up_pixel_buffer_dma_draw_box+0x3d8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
 1005dd8:	e0bfff17 	ldw	r2,-4(fp)
 1005ddc:	e0fffe17 	ldw	r3,-8(fp)
 1005de0:	10c5883a 	add	r2,r2,r3
 1005de4:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 1005de8:	e13ff217 	ldw	r4,-56(fp)
 1005dec:	21000044 	addi	r4,r4,1
 1005df0:	e13ff215 	stw	r4,-56(fp)
 1005df4:	e0bff817 	ldw	r2,-32(fp)
 1005df8:	e0fff217 	ldw	r3,-56(fp)
 1005dfc:	10ffe52e 	bgeu	r2,r3,1005d94 <alt_up_pixel_buffer_dma_draw_box+0x3cc>
 1005e00:	00002a06 	br	1005eac <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 1005e04:	e13ffe17 	ldw	r4,-8(fp)
 1005e08:	e13ffe17 	ldw	r4,-8(fp)
 1005e0c:	2105883a 	add	r2,r4,r4
 1005e10:	1085883a 	add	r2,r2,r2
 1005e14:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 1005e18:	e0fff917 	ldw	r3,-28(fp)
 1005e1c:	e13ffe17 	ldw	r4,-8(fp)
 1005e20:	1905383a 	mul	r2,r3,r4
 1005e24:	e0ffff17 	ldw	r3,-4(fp)
 1005e28:	1887883a 	add	r3,r3,r2
 1005e2c:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 1005e30:	e13ff917 	ldw	r4,-28(fp)
 1005e34:	e13ff215 	stw	r4,-56(fp)
 1005e38:	00001906 	br	1005ea0 <alt_up_pixel_buffer_dma_draw_box+0x4d8>
			{
				for (x = l_x; x <= r_x; x++)
 1005e3c:	e0bffb17 	ldw	r2,-20(fp)
 1005e40:	e0bff315 	stw	r2,-52(fp)
 1005e44:	00000c06 	br	1005e78 <alt_up_pixel_buffer_dma_draw_box+0x4b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 1005e48:	e0fff317 	ldw	r3,-52(fp)
 1005e4c:	e0fff317 	ldw	r3,-52(fp)
 1005e50:	18c5883a 	add	r2,r3,r3
 1005e54:	1085883a 	add	r2,r2,r2
 1005e58:	1007883a 	mov	r3,r2
 1005e5c:	e0bfff17 	ldw	r2,-4(fp)
 1005e60:	1885883a 	add	r2,r3,r2
 1005e64:	e0fff717 	ldw	r3,-36(fp)
 1005e68:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 1005e6c:	e13ff317 	ldw	r4,-52(fp)
 1005e70:	21000044 	addi	r4,r4,1
 1005e74:	e13ff315 	stw	r4,-52(fp)
 1005e78:	e0bffa17 	ldw	r2,-24(fp)
 1005e7c:	e0fff317 	ldw	r3,-52(fp)
 1005e80:	10fff12e 	bgeu	r2,r3,1005e48 <alt_up_pixel_buffer_dma_draw_box+0x480>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
 1005e84:	e13fff17 	ldw	r4,-4(fp)
 1005e88:	e0bffe17 	ldw	r2,-8(fp)
 1005e8c:	2089883a 	add	r4,r4,r2
 1005e90:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 1005e94:	e0fff217 	ldw	r3,-56(fp)
 1005e98:	18c00044 	addi	r3,r3,1
 1005e9c:	e0fff215 	stw	r3,-56(fp)
 1005ea0:	e13ff817 	ldw	r4,-32(fp)
 1005ea4:	e0bff217 	ldw	r2,-56(fp)
 1005ea8:	20bfe42e 	bgeu	r4,r2,1005e3c <alt_up_pixel_buffer_dma_draw_box+0x474>
				}
				addr = addr + limit_x;
			}
		}
	}
}
 1005eac:	e037883a 	mov	sp,fp
 1005eb0:	df000017 	ldw	fp,0(sp)
 1005eb4:	dec00104 	addi	sp,sp,4
 1005eb8:	f800283a 	ret

01005ebc <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
 1005ebc:	defff204 	addi	sp,sp,-56
 1005ec0:	df000d15 	stw	fp,52(sp)
 1005ec4:	df000d04 	addi	fp,sp,52
 1005ec8:	e13ff315 	stw	r4,-52(fp)
 1005ecc:	e17ff415 	stw	r5,-48(fp)
 1005ed0:	e1bff515 	stw	r6,-44(fp)
 1005ed4:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 1005ed8:	e0bff317 	ldw	r2,-52(fp)
 1005edc:	10800f17 	ldw	r2,60(r2)
 1005ee0:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 1005ee4:	e0bff317 	ldw	r2,-52(fp)
 1005ee8:	10801017 	ldw	r2,64(r2)
 1005eec:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
 1005ef0:	e0bff417 	ldw	r2,-48(fp)
 1005ef4:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
 1005ef8:	e0fff517 	ldw	r3,-44(fp)
 1005efc:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
 1005f00:	e13ff617 	ldw	r4,-40(fp)
 1005f04:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
 1005f08:	e0800117 	ldw	r2,4(fp)
 1005f0c:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 1005f10:	e0fffb17 	ldw	r3,-20(fp)
 1005f14:	e13ffc17 	ldw	r4,-16(fp)
 1005f18:	1900042e 	bgeu	r3,r4,1005f2c <alt_up_pixel_buffer_dma_draw_hline+0x70>
	{
		temp = l_x;
 1005f1c:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
 1005f20:	e0fffb17 	ldw	r3,-20(fp)
 1005f24:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
 1005f28:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
 1005f2c:	e13ffc17 	ldw	r4,-16(fp)
 1005f30:	e0bffe17 	ldw	r2,-8(fp)
 1005f34:	2080b12e 	bgeu	r4,r2,10061fc <alt_up_pixel_buffer_dma_draw_hline+0x340>
 1005f38:	e0fffa17 	ldw	r3,-24(fp)
 1005f3c:	e13ffd17 	ldw	r4,-12(fp)
 1005f40:	19000136 	bltu	r3,r4,1005f48 <alt_up_pixel_buffer_dma_draw_hline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 1005f44:	0000ad06 	br	10061fc <alt_up_pixel_buffer_dma_draw_hline+0x340>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 1005f48:	e0bffb17 	ldw	r2,-20(fp)
 1005f4c:	e0fffe17 	ldw	r3,-8(fp)
 1005f50:	10c00336 	bltu	r2,r3,1005f60 <alt_up_pixel_buffer_dma_draw_hline+0xa4>
	{
		r_x = limit_x - 1;
 1005f54:	e13ffe17 	ldw	r4,-8(fp)
 1005f58:	213fffc4 	addi	r4,r4,-1
 1005f5c:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 1005f60:	e0800217 	ldw	r2,8(fp)
 1005f64:	10800058 	cmpnei	r2,r2,1
 1005f68:	1000041e 	bne	r2,zero,1005f7c <alt_up_pixel_buffer_dma_draw_hline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
 1005f6c:	e0bff317 	ldw	r2,-52(fp)
 1005f70:	10800c17 	ldw	r2,48(r2)
 1005f74:	e0bfff15 	stw	r2,-4(fp)
 1005f78:	00000306 	br	1005f88 <alt_up_pixel_buffer_dma_draw_hline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
 1005f7c:	e0bff317 	ldw	r2,-52(fp)
 1005f80:	10800b17 	ldw	r2,44(r2)
 1005f84:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 1005f88:	e0bff317 	ldw	r2,-52(fp)
 1005f8c:	10800d17 	ldw	r2,52(r2)
 1005f90:	1004c03a 	cmpne	r2,r2,zero
 1005f94:	1000431e 	bne	r2,zero,10060a4 <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 1005f98:	e0bff317 	ldw	r2,-52(fp)
 1005f9c:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
 1005fa0:	e0fffa17 	ldw	r3,-24(fp)
 1005fa4:	1884983a 	sll	r2,r3,r2
 1005fa8:	e13fff17 	ldw	r4,-4(fp)
 1005fac:	2089883a 	add	r4,r4,r2
 1005fb0:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 1005fb4:	e0bff317 	ldw	r2,-52(fp)
 1005fb8:	10800e17 	ldw	r2,56(r2)
 1005fbc:	10800058 	cmpnei	r2,r2,1
 1005fc0:	10000f1e 	bne	r2,zero,1006000 <alt_up_pixel_buffer_dma_draw_hline+0x144>
			for (x = l_x; x <= r_x; x++)
 1005fc4:	e0bffc17 	ldw	r2,-16(fp)
 1005fc8:	e0bff815 	stw	r2,-32(fp)
 1005fcc:	00000806 	br	1005ff0 <alt_up_pixel_buffer_dma_draw_hline+0x134>
			{
				IOWR_8DIRECT(addr, x, local_color);
 1005fd0:	e0ffff17 	ldw	r3,-4(fp)
 1005fd4:	e0bff817 	ldw	r2,-32(fp)
 1005fd8:	1885883a 	add	r2,r3,r2
 1005fdc:	e0fff917 	ldw	r3,-28(fp)
 1005fe0:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 1005fe4:	e0fff817 	ldw	r3,-32(fp)
 1005fe8:	18c00044 	addi	r3,r3,1
 1005fec:	e0fff815 	stw	r3,-32(fp)
 1005ff0:	e13ffb17 	ldw	r4,-20(fp)
 1005ff4:	e0bff817 	ldw	r2,-32(fp)
 1005ff8:	20bff52e 	bgeu	r4,r2,1005fd0 <alt_up_pixel_buffer_dma_draw_hline+0x114>
 1005ffc:	00007f06 	br	10061fc <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 1006000:	e0bff317 	ldw	r2,-52(fp)
 1006004:	10800e17 	ldw	r2,56(r2)
 1006008:	10800098 	cmpnei	r2,r2,2
 100600c:	1000121e 	bne	r2,zero,1006058 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			for (x = l_x; x <= r_x; x++)
 1006010:	e0fffc17 	ldw	r3,-16(fp)
 1006014:	e0fff815 	stw	r3,-32(fp)
 1006018:	00000b06 	br	1006048 <alt_up_pixel_buffer_dma_draw_hline+0x18c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 100601c:	e13ff817 	ldw	r4,-32(fp)
 1006020:	e13ff817 	ldw	r4,-32(fp)
 1006024:	2105883a 	add	r2,r4,r4
 1006028:	1007883a 	mov	r3,r2
 100602c:	e0bfff17 	ldw	r2,-4(fp)
 1006030:	1885883a 	add	r2,r3,r2
 1006034:	e0fff917 	ldw	r3,-28(fp)
 1006038:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 100603c:	e0bff817 	ldw	r2,-32(fp)
 1006040:	10800044 	addi	r2,r2,1
 1006044:	e0bff815 	stw	r2,-32(fp)
 1006048:	e0fffb17 	ldw	r3,-20(fp)
 100604c:	e13ff817 	ldw	r4,-32(fp)
 1006050:	193ff22e 	bgeu	r3,r4,100601c <alt_up_pixel_buffer_dma_draw_hline+0x160>
 1006054:	00006906 	br	10061fc <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 1006058:	e0bffc17 	ldw	r2,-16(fp)
 100605c:	e0bff815 	stw	r2,-32(fp)
 1006060:	00000c06 	br	1006094 <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 1006064:	e0fff817 	ldw	r3,-32(fp)
 1006068:	e0fff817 	ldw	r3,-32(fp)
 100606c:	18c5883a 	add	r2,r3,r3
 1006070:	1085883a 	add	r2,r2,r2
 1006074:	1007883a 	mov	r3,r2
 1006078:	e0bfff17 	ldw	r2,-4(fp)
 100607c:	1885883a 	add	r2,r3,r2
 1006080:	e0fff917 	ldw	r3,-28(fp)
 1006084:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 1006088:	e13ff817 	ldw	r4,-32(fp)
 100608c:	21000044 	addi	r4,r4,1
 1006090:	e13ff815 	stw	r4,-32(fp)
 1006094:	e0bffb17 	ldw	r2,-20(fp)
 1006098:	e0fff817 	ldw	r3,-32(fp)
 100609c:	10fff12e 	bgeu	r2,r3,1006064 <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
 10060a0:	00005606 	br	10061fc <alt_up_pixel_buffer_dma_draw_hline+0x340>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 10060a4:	e0bff317 	ldw	r2,-52(fp)
 10060a8:	10800e17 	ldw	r2,56(r2)
 10060ac:	10800058 	cmpnei	r2,r2,1
 10060b0:	1000151e 	bne	r2,zero,1006108 <alt_up_pixel_buffer_dma_draw_hline+0x24c>
			addr = addr + line_y * limit_x;
 10060b4:	e13ffa17 	ldw	r4,-24(fp)
 10060b8:	e0fffe17 	ldw	r3,-8(fp)
 10060bc:	20c5383a 	mul	r2,r4,r3
 10060c0:	e13fff17 	ldw	r4,-4(fp)
 10060c4:	2089883a 	add	r4,r4,r2
 10060c8:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
 10060cc:	e0bffc17 	ldw	r2,-16(fp)
 10060d0:	e0bff715 	stw	r2,-36(fp)
 10060d4:	00000806 	br	10060f8 <alt_up_pixel_buffer_dma_draw_hline+0x23c>
			{
				IOWR_8DIRECT(addr, x, local_color);
 10060d8:	e0ffff17 	ldw	r3,-4(fp)
 10060dc:	e0bff717 	ldw	r2,-36(fp)
 10060e0:	1885883a 	add	r2,r3,r2
 10060e4:	e0fff917 	ldw	r3,-28(fp)
 10060e8:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 10060ec:	e0fff717 	ldw	r3,-36(fp)
 10060f0:	18c00044 	addi	r3,r3,1
 10060f4:	e0fff715 	stw	r3,-36(fp)
 10060f8:	e13ffb17 	ldw	r4,-20(fp)
 10060fc:	e0bff717 	ldw	r2,-36(fp)
 1006100:	20bff52e 	bgeu	r4,r2,10060d8 <alt_up_pixel_buffer_dma_draw_hline+0x21c>
 1006104:	00003d06 	br	10061fc <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 1006108:	e0bff317 	ldw	r2,-52(fp)
 100610c:	10800e17 	ldw	r2,56(r2)
 1006110:	10800098 	cmpnei	r2,r2,2
 1006114:	10001c1e 	bne	r2,zero,1006188 <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
			limit_x = limit_x << 1;
 1006118:	e0fffe17 	ldw	r3,-8(fp)
 100611c:	e0fffe17 	ldw	r3,-8(fp)
 1006120:	18c5883a 	add	r2,r3,r3
 1006124:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
 1006128:	e13ffa17 	ldw	r4,-24(fp)
 100612c:	e0fffe17 	ldw	r3,-8(fp)
 1006130:	20c5383a 	mul	r2,r4,r3
 1006134:	e13fff17 	ldw	r4,-4(fp)
 1006138:	2089883a 	add	r4,r4,r2
 100613c:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
 1006140:	e0bffc17 	ldw	r2,-16(fp)
 1006144:	e0bff715 	stw	r2,-36(fp)
 1006148:	00000b06 	br	1006178 <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 100614c:	e0fff717 	ldw	r3,-36(fp)
 1006150:	e0fff717 	ldw	r3,-36(fp)
 1006154:	18c5883a 	add	r2,r3,r3
 1006158:	1007883a 	mov	r3,r2
 100615c:	e0bfff17 	ldw	r2,-4(fp)
 1006160:	1885883a 	add	r2,r3,r2
 1006164:	e0fff917 	ldw	r3,-28(fp)
 1006168:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 100616c:	e13ff717 	ldw	r4,-36(fp)
 1006170:	21000044 	addi	r4,r4,1
 1006174:	e13ff715 	stw	r4,-36(fp)
 1006178:	e0bffb17 	ldw	r2,-20(fp)
 100617c:	e0fff717 	ldw	r3,-36(fp)
 1006180:	10fff22e 	bgeu	r2,r3,100614c <alt_up_pixel_buffer_dma_draw_hline+0x290>
 1006184:	00001d06 	br	10061fc <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
 1006188:	e13ffe17 	ldw	r4,-8(fp)
 100618c:	e13ffe17 	ldw	r4,-8(fp)
 1006190:	2105883a 	add	r2,r4,r4
 1006194:	1085883a 	add	r2,r2,r2
 1006198:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
 100619c:	e0fffa17 	ldw	r3,-24(fp)
 10061a0:	e13ffe17 	ldw	r4,-8(fp)
 10061a4:	1905383a 	mul	r2,r3,r4
 10061a8:	e0ffff17 	ldw	r3,-4(fp)
 10061ac:	1887883a 	add	r3,r3,r2
 10061b0:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
 10061b4:	e13ffc17 	ldw	r4,-16(fp)
 10061b8:	e13ff715 	stw	r4,-36(fp)
 10061bc:	00000c06 	br	10061f0 <alt_up_pixel_buffer_dma_draw_hline+0x334>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 10061c0:	e0fff717 	ldw	r3,-36(fp)
 10061c4:	e0fff717 	ldw	r3,-36(fp)
 10061c8:	18c5883a 	add	r2,r3,r3
 10061cc:	1085883a 	add	r2,r2,r2
 10061d0:	1007883a 	mov	r3,r2
 10061d4:	e0bfff17 	ldw	r2,-4(fp)
 10061d8:	1885883a 	add	r2,r3,r2
 10061dc:	e0fff917 	ldw	r3,-28(fp)
 10061e0:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 10061e4:	e13ff717 	ldw	r4,-36(fp)
 10061e8:	21000044 	addi	r4,r4,1
 10061ec:	e13ff715 	stw	r4,-36(fp)
 10061f0:	e0bffb17 	ldw	r2,-20(fp)
 10061f4:	e0fff717 	ldw	r3,-36(fp)
 10061f8:	10fff12e 	bgeu	r2,r3,10061c0 <alt_up_pixel_buffer_dma_draw_hline+0x304>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
 10061fc:	e037883a 	mov	sp,fp
 1006200:	df000017 	ldw	fp,0(sp)
 1006204:	dec00104 	addi	sp,sp,4
 1006208:	f800283a 	ret

0100620c <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
 100620c:	defff104 	addi	sp,sp,-60
 1006210:	df000e15 	stw	fp,56(sp)
 1006214:	df000e04 	addi	fp,sp,56
 1006218:	e13ff215 	stw	r4,-56(fp)
 100621c:	e17ff315 	stw	r5,-52(fp)
 1006220:	e1bff415 	stw	r6,-48(fp)
 1006224:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 1006228:	e0bff217 	ldw	r2,-56(fp)
 100622c:	10800f17 	ldw	r2,60(r2)
 1006230:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 1006234:	e0bff217 	ldw	r2,-56(fp)
 1006238:	10801017 	ldw	r2,64(r2)
 100623c:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
 1006240:	e0bff317 	ldw	r2,-52(fp)
 1006244:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
 1006248:	e0fff417 	ldw	r3,-48(fp)
 100624c:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
 1006250:	e13ff517 	ldw	r4,-44(fp)
 1006254:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
 1006258:	e0800117 	ldw	r2,4(fp)
 100625c:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
 1006260:	e0fffa17 	ldw	r3,-24(fp)
 1006264:	e13ffb17 	ldw	r4,-20(fp)
 1006268:	1900042e 	bgeu	r3,r4,100627c <alt_up_pixel_buffer_dma_draw_vline+0x70>
	{
		temp = t_y;
 100626c:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
 1006270:	e0fffa17 	ldw	r3,-24(fp)
 1006274:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
 1006278:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
 100627c:	e13ffc17 	ldw	r4,-16(fp)
 1006280:	e0bffe17 	ldw	r2,-8(fp)
 1006284:	2080d12e 	bgeu	r4,r2,10065cc <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
 1006288:	e0fffb17 	ldw	r3,-20(fp)
 100628c:	e13ffd17 	ldw	r4,-12(fp)
 1006290:	19000136 	bltu	r3,r4,1006298 <alt_up_pixel_buffer_dma_draw_vline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 1006294:	0000cd06 	br	10065cc <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 1006298:	e0bffa17 	ldw	r2,-24(fp)
 100629c:	e0fffd17 	ldw	r3,-12(fp)
 10062a0:	10c00336 	bltu	r2,r3,10062b0 <alt_up_pixel_buffer_dma_draw_vline+0xa4>
	{
		b_y = limit_y - 1;
 10062a4:	e13ffd17 	ldw	r4,-12(fp)
 10062a8:	213fffc4 	addi	r4,r4,-1
 10062ac:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 10062b0:	e0800217 	ldw	r2,8(fp)
 10062b4:	10800058 	cmpnei	r2,r2,1
 10062b8:	1000041e 	bne	r2,zero,10062cc <alt_up_pixel_buffer_dma_draw_vline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
 10062bc:	e0bff217 	ldw	r2,-56(fp)
 10062c0:	10800c17 	ldw	r2,48(r2)
 10062c4:	e0bfff15 	stw	r2,-4(fp)
 10062c8:	00000306 	br	10062d8 <alt_up_pixel_buffer_dma_draw_vline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
 10062cc:	e0bff217 	ldw	r2,-56(fp)
 10062d0:	10800b17 	ldw	r2,44(r2)
 10062d4:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 10062d8:	e0bff217 	ldw	r2,-56(fp)
 10062dc:	10800d17 	ldw	r2,52(r2)
 10062e0:	1004c03a 	cmpne	r2,r2,zero
 10062e4:	1000571e 	bne	r2,zero,1006444 <alt_up_pixel_buffer_dma_draw_vline+0x238>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 10062e8:	e0bff217 	ldw	r2,-56(fp)
 10062ec:	10801317 	ldw	r2,76(r2)
 10062f0:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
 10062f4:	e0bff717 	ldw	r2,-36(fp)
 10062f8:	e0fffb17 	ldw	r3,-20(fp)
 10062fc:	1884983a 	sll	r2,r3,r2
 1006300:	e13fff17 	ldw	r4,-4(fp)
 1006304:	2089883a 	add	r4,r4,r2
 1006308:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 100630c:	e0bff217 	ldw	r2,-56(fp)
 1006310:	10800e17 	ldw	r2,56(r2)
 1006314:	10800058 	cmpnei	r2,r2,1
 1006318:	1000151e 	bne	r2,zero,1006370 <alt_up_pixel_buffer_dma_draw_vline+0x164>
			for (y = t_y; y <= b_y; y++)
 100631c:	e0bffb17 	ldw	r2,-20(fp)
 1006320:	e0bff815 	stw	r2,-32(fp)
 1006324:	00000e06 	br	1006360 <alt_up_pixel_buffer_dma_draw_vline+0x154>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 1006328:	e0ffff17 	ldw	r3,-4(fp)
 100632c:	e0bffc17 	ldw	r2,-16(fp)
 1006330:	1885883a 	add	r2,r3,r2
 1006334:	e0fff917 	ldw	r3,-28(fp)
 1006338:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
 100633c:	e0fff717 	ldw	r3,-36(fp)
 1006340:	00800044 	movi	r2,1
 1006344:	10c4983a 	sll	r2,r2,r3
 1006348:	e0ffff17 	ldw	r3,-4(fp)
 100634c:	1887883a 	add	r3,r3,r2
 1006350:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 1006354:	e13ff817 	ldw	r4,-32(fp)
 1006358:	21000044 	addi	r4,r4,1
 100635c:	e13ff815 	stw	r4,-32(fp)
 1006360:	e0bffa17 	ldw	r2,-24(fp)
 1006364:	e0fff817 	ldw	r3,-32(fp)
 1006368:	10ffef2e 	bgeu	r2,r3,1006328 <alt_up_pixel_buffer_dma_draw_vline+0x11c>
 100636c:	00009706 	br	10065cc <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 1006370:	e0bff217 	ldw	r2,-56(fp)
 1006374:	10800e17 	ldw	r2,56(r2)
 1006378:	10800098 	cmpnei	r2,r2,2
 100637c:	1000181e 	bne	r2,zero,10063e0 <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
			for (y = t_y; y <= b_y; y++)
 1006380:	e13ffb17 	ldw	r4,-20(fp)
 1006384:	e13ff815 	stw	r4,-32(fp)
 1006388:	00001106 	br	10063d0 <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 100638c:	e0fffc17 	ldw	r3,-16(fp)
 1006390:	e0fffc17 	ldw	r3,-16(fp)
 1006394:	18c5883a 	add	r2,r3,r3
 1006398:	1007883a 	mov	r3,r2
 100639c:	e0bfff17 	ldw	r2,-4(fp)
 10063a0:	1885883a 	add	r2,r3,r2
 10063a4:	e0fff917 	ldw	r3,-28(fp)
 10063a8:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
 10063ac:	e0fff717 	ldw	r3,-36(fp)
 10063b0:	00800044 	movi	r2,1
 10063b4:	10c4983a 	sll	r2,r2,r3
 10063b8:	e13fff17 	ldw	r4,-4(fp)
 10063bc:	2089883a 	add	r4,r4,r2
 10063c0:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 10063c4:	e0bff817 	ldw	r2,-32(fp)
 10063c8:	10800044 	addi	r2,r2,1
 10063cc:	e0bff815 	stw	r2,-32(fp)
 10063d0:	e0fffa17 	ldw	r3,-24(fp)
 10063d4:	e13ff817 	ldw	r4,-32(fp)
 10063d8:	193fec2e 	bgeu	r3,r4,100638c <alt_up_pixel_buffer_dma_draw_vline+0x180>
 10063dc:	00007b06 	br	10065cc <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 10063e0:	e0bffb17 	ldw	r2,-20(fp)
 10063e4:	e0bff815 	stw	r2,-32(fp)
 10063e8:	00001206 	br	1006434 <alt_up_pixel_buffer_dma_draw_vline+0x228>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 10063ec:	e0fffc17 	ldw	r3,-16(fp)
 10063f0:	e0fffc17 	ldw	r3,-16(fp)
 10063f4:	18c5883a 	add	r2,r3,r3
 10063f8:	1085883a 	add	r2,r2,r2
 10063fc:	1007883a 	mov	r3,r2
 1006400:	e0bfff17 	ldw	r2,-4(fp)
 1006404:	1885883a 	add	r2,r3,r2
 1006408:	e0fff917 	ldw	r3,-28(fp)
 100640c:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
 1006410:	e0fff717 	ldw	r3,-36(fp)
 1006414:	00800044 	movi	r2,1
 1006418:	10c4983a 	sll	r2,r2,r3
 100641c:	e13fff17 	ldw	r4,-4(fp)
 1006420:	2089883a 	add	r4,r4,r2
 1006424:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 1006428:	e0bff817 	ldw	r2,-32(fp)
 100642c:	10800044 	addi	r2,r2,1
 1006430:	e0bff815 	stw	r2,-32(fp)
 1006434:	e0fffa17 	ldw	r3,-24(fp)
 1006438:	e13ff817 	ldw	r4,-32(fp)
 100643c:	193feb2e 	bgeu	r3,r4,10063ec <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
 1006440:	00006206 	br	10065cc <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 1006444:	e0bff217 	ldw	r2,-56(fp)
 1006448:	10800e17 	ldw	r2,56(r2)
 100644c:	10800058 	cmpnei	r2,r2,1
 1006450:	1000191e 	bne	r2,zero,10064b8 <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
			addr = addr + t_y * limit_x;
 1006454:	e0fffb17 	ldw	r3,-20(fp)
 1006458:	e13ffe17 	ldw	r4,-8(fp)
 100645c:	1905383a 	mul	r2,r3,r4
 1006460:	e0ffff17 	ldw	r3,-4(fp)
 1006464:	1887883a 	add	r3,r3,r2
 1006468:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 100646c:	e13ffb17 	ldw	r4,-20(fp)
 1006470:	e13ff615 	stw	r4,-40(fp)
 1006474:	00000c06 	br	10064a8 <alt_up_pixel_buffer_dma_draw_vline+0x29c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 1006478:	e0ffff17 	ldw	r3,-4(fp)
 100647c:	e0bffc17 	ldw	r2,-16(fp)
 1006480:	1885883a 	add	r2,r3,r2
 1006484:	e0fff917 	ldw	r3,-28(fp)
 1006488:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
 100648c:	e0bfff17 	ldw	r2,-4(fp)
 1006490:	e0fffe17 	ldw	r3,-8(fp)
 1006494:	10c5883a 	add	r2,r2,r3
 1006498:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 100649c:	e13ff617 	ldw	r4,-40(fp)
 10064a0:	21000044 	addi	r4,r4,1
 10064a4:	e13ff615 	stw	r4,-40(fp)
 10064a8:	e0bffa17 	ldw	r2,-24(fp)
 10064ac:	e0fff617 	ldw	r3,-40(fp)
 10064b0:	10fff12e 	bgeu	r2,r3,1006478 <alt_up_pixel_buffer_dma_draw_vline+0x26c>
 10064b4:	00004506 	br	10065cc <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 10064b8:	e0bff217 	ldw	r2,-56(fp)
 10064bc:	10800e17 	ldw	r2,56(r2)
 10064c0:	10800098 	cmpnei	r2,r2,2
 10064c4:	1000201e 	bne	r2,zero,1006548 <alt_up_pixel_buffer_dma_draw_vline+0x33c>
			limit_x = limit_x << 1;
 10064c8:	e13ffe17 	ldw	r4,-8(fp)
 10064cc:	e13ffe17 	ldw	r4,-8(fp)
 10064d0:	2105883a 	add	r2,r4,r4
 10064d4:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 10064d8:	e0fffb17 	ldw	r3,-20(fp)
 10064dc:	e13ffe17 	ldw	r4,-8(fp)
 10064e0:	1905383a 	mul	r2,r3,r4
 10064e4:	e0ffff17 	ldw	r3,-4(fp)
 10064e8:	1887883a 	add	r3,r3,r2
 10064ec:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 10064f0:	e13ffb17 	ldw	r4,-20(fp)
 10064f4:	e13ff615 	stw	r4,-40(fp)
 10064f8:	00000f06 	br	1006538 <alt_up_pixel_buffer_dma_draw_vline+0x32c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 10064fc:	e0fffc17 	ldw	r3,-16(fp)
 1006500:	e0fffc17 	ldw	r3,-16(fp)
 1006504:	18c5883a 	add	r2,r3,r3
 1006508:	1007883a 	mov	r3,r2
 100650c:	e0bfff17 	ldw	r2,-4(fp)
 1006510:	1885883a 	add	r2,r3,r2
 1006514:	e0fff917 	ldw	r3,-28(fp)
 1006518:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
 100651c:	e13fff17 	ldw	r4,-4(fp)
 1006520:	e0bffe17 	ldw	r2,-8(fp)
 1006524:	2089883a 	add	r4,r4,r2
 1006528:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 100652c:	e0fff617 	ldw	r3,-40(fp)
 1006530:	18c00044 	addi	r3,r3,1
 1006534:	e0fff615 	stw	r3,-40(fp)
 1006538:	e13ffa17 	ldw	r4,-24(fp)
 100653c:	e0bff617 	ldw	r2,-40(fp)
 1006540:	20bfee2e 	bgeu	r4,r2,10064fc <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
 1006544:	00002106 	br	10065cc <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 1006548:	e0fffe17 	ldw	r3,-8(fp)
 100654c:	e0fffe17 	ldw	r3,-8(fp)
 1006550:	18c5883a 	add	r2,r3,r3
 1006554:	1085883a 	add	r2,r2,r2
 1006558:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 100655c:	e13ffb17 	ldw	r4,-20(fp)
 1006560:	e0fffe17 	ldw	r3,-8(fp)
 1006564:	20c5383a 	mul	r2,r4,r3
 1006568:	e13fff17 	ldw	r4,-4(fp)
 100656c:	2089883a 	add	r4,r4,r2
 1006570:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
 1006574:	e0bffb17 	ldw	r2,-20(fp)
 1006578:	e0bff615 	stw	r2,-40(fp)
 100657c:	00001006 	br	10065c0 <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 1006580:	e0fffc17 	ldw	r3,-16(fp)
 1006584:	e0fffc17 	ldw	r3,-16(fp)
 1006588:	18c5883a 	add	r2,r3,r3
 100658c:	1085883a 	add	r2,r2,r2
 1006590:	1007883a 	mov	r3,r2
 1006594:	e0bfff17 	ldw	r2,-4(fp)
 1006598:	1885883a 	add	r2,r3,r2
 100659c:	e0fff917 	ldw	r3,-28(fp)
 10065a0:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
 10065a4:	e13fff17 	ldw	r4,-4(fp)
 10065a8:	e0bffe17 	ldw	r2,-8(fp)
 10065ac:	2089883a 	add	r4,r4,r2
 10065b0:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 10065b4:	e0fff617 	ldw	r3,-40(fp)
 10065b8:	18c00044 	addi	r3,r3,1
 10065bc:	e0fff615 	stw	r3,-40(fp)
 10065c0:	e13ffa17 	ldw	r4,-24(fp)
 10065c4:	e0bff617 	ldw	r2,-40(fp)
 10065c8:	20bfed2e 	bgeu	r4,r2,1006580 <alt_up_pixel_buffer_dma_draw_vline+0x374>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
 10065cc:	e037883a 	mov	sp,fp
 10065d0:	df000017 	ldw	fp,0(sp)
 10065d4:	dec00104 	addi	sp,sp,4
 10065d8:	f800283a 	ret

010065dc <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
 10065dc:	defff804 	addi	sp,sp,-32
 10065e0:	dfc00715 	stw	ra,28(sp)
 10065e4:	df000615 	stw	fp,24(sp)
 10065e8:	df000604 	addi	fp,sp,24
 10065ec:	e13ffc15 	stw	r4,-16(fp)
 10065f0:	e17ffd15 	stw	r5,-12(fp)
 10065f4:	e1bffe15 	stw	r6,-8(fp)
 10065f8:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
 10065fc:	e0800317 	ldw	r2,12(fp)
 1006600:	d8800015 	stw	r2,0(sp)
 1006604:	e0800417 	ldw	r2,16(fp)
 1006608:	d8800115 	stw	r2,4(sp)
 100660c:	e13ffc17 	ldw	r4,-16(fp)
 1006610:	e17ffd17 	ldw	r5,-12(fp)
 1006614:	e1bfff17 	ldw	r6,-4(fp)
 1006618:	e1fffe17 	ldw	r7,-8(fp)
 100661c:	1005ebc0 	call	1005ebc <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
 1006620:	e0800317 	ldw	r2,12(fp)
 1006624:	d8800015 	stw	r2,0(sp)
 1006628:	e0800417 	ldw	r2,16(fp)
 100662c:	d8800115 	stw	r2,4(sp)
 1006630:	e13ffc17 	ldw	r4,-16(fp)
 1006634:	e17ffd17 	ldw	r5,-12(fp)
 1006638:	e1bfff17 	ldw	r6,-4(fp)
 100663c:	e1c00217 	ldw	r7,8(fp)
 1006640:	1005ebc0 	call	1005ebc <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
 1006644:	e0800317 	ldw	r2,12(fp)
 1006648:	d8800015 	stw	r2,0(sp)
 100664c:	e0800417 	ldw	r2,16(fp)
 1006650:	d8800115 	stw	r2,4(sp)
 1006654:	e13ffc17 	ldw	r4,-16(fp)
 1006658:	e17ffd17 	ldw	r5,-12(fp)
 100665c:	e1bffe17 	ldw	r6,-8(fp)
 1006660:	e1c00217 	ldw	r7,8(fp)
 1006664:	100620c0 	call	100620c <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
 1006668:	e0800317 	ldw	r2,12(fp)
 100666c:	d8800015 	stw	r2,0(sp)
 1006670:	e0800417 	ldw	r2,16(fp)
 1006674:	d8800115 	stw	r2,4(sp)
 1006678:	e13ffc17 	ldw	r4,-16(fp)
 100667c:	e17fff17 	ldw	r5,-4(fp)
 1006680:	e1bffe17 	ldw	r6,-8(fp)
 1006684:	e1c00217 	ldw	r7,8(fp)
 1006688:	100620c0 	call	100620c <alt_up_pixel_buffer_dma_draw_vline>
}
 100668c:	e037883a 	mov	sp,fp
 1006690:	dfc00117 	ldw	ra,4(sp)
 1006694:	df000017 	ldw	fp,0(sp)
 1006698:	dec00204 	addi	sp,sp,8
 100669c:	f800283a 	ret

010066a0 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
 10066a0:	defffb04 	addi	sp,sp,-20
 10066a4:	df000415 	stw	fp,16(sp)
 10066a8:	df000404 	addi	fp,sp,16
 10066ac:	e13ffc15 	stw	r4,-16(fp)
 10066b0:	e17ffd15 	stw	r5,-12(fp)
 10066b4:	e1bffe15 	stw	r6,-8(fp)
 10066b8:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
 10066bc:	e0c00217 	ldw	r3,8(fp)
 10066c0:	1804c03a 	cmpne	r2,r3,zero
 10066c4:	10000b1e 	bne	r2,zero,10066f4 <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
 10066c8:	e13ffd17 	ldw	r4,-12(fp)
 10066cc:	e0ffff17 	ldw	r3,-4(fp)
 10066d0:	20c5383a 	mul	r2,r4,r3
 10066d4:	e13ffe17 	ldw	r4,-8(fp)
 10066d8:	1105883a 	add	r2,r2,r4
 10066dc:	1007883a 	mov	r3,r2
 10066e0:	e0bffc17 	ldw	r2,-16(fp)
 10066e4:	1885883a 	add	r2,r3,r2
 10066e8:	e0c00117 	ldw	r3,4(fp)
 10066ec:	10c00025 	stbio	r3,0(r2)
 10066f0:	00001b06 	br	1006760 <helper_plot_pixel+0xc0>
	else if (mode == 1)
 10066f4:	e1000217 	ldw	r4,8(fp)
 10066f8:	20800058 	cmpnei	r2,r4,1
 10066fc:	10000c1e 	bne	r2,zero,1006730 <helper_plot_pixel+0x90>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
 1006700:	e0fffd17 	ldw	r3,-12(fp)
 1006704:	e13fff17 	ldw	r4,-4(fp)
 1006708:	1905383a 	mul	r2,r3,r4
 100670c:	e0fffe17 	ldw	r3,-8(fp)
 1006710:	10c5883a 	add	r2,r2,r3
 1006714:	1085883a 	add	r2,r2,r2
 1006718:	1007883a 	mov	r3,r2
 100671c:	e0bffc17 	ldw	r2,-16(fp)
 1006720:	1885883a 	add	r2,r3,r2
 1006724:	e1000117 	ldw	r4,4(fp)
 1006728:	1100002d 	sthio	r4,0(r2)
 100672c:	00000c06 	br	1006760 <helper_plot_pixel+0xc0>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
 1006730:	e0fffd17 	ldw	r3,-12(fp)
 1006734:	e13fff17 	ldw	r4,-4(fp)
 1006738:	1905383a 	mul	r2,r3,r4
 100673c:	e0fffe17 	ldw	r3,-8(fp)
 1006740:	10c5883a 	add	r2,r2,r3
 1006744:	1085883a 	add	r2,r2,r2
 1006748:	1085883a 	add	r2,r2,r2
 100674c:	1007883a 	mov	r3,r2
 1006750:	e0bffc17 	ldw	r2,-16(fp)
 1006754:	1885883a 	add	r2,r3,r2
 1006758:	e1000117 	ldw	r4,4(fp)
 100675c:	11000035 	stwio	r4,0(r2)
}
 1006760:	e037883a 	mov	sp,fp
 1006764:	df000017 	ldw	fp,0(sp)
 1006768:	dec00104 	addi	sp,sp,4
 100676c:	f800283a 	ret

01006770 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
 1006770:	deffe404 	addi	sp,sp,-112
 1006774:	dfc01b15 	stw	ra,108(sp)
 1006778:	df001a15 	stw	fp,104(sp)
 100677c:	df001a04 	addi	fp,sp,104
 1006780:	e13fe815 	stw	r4,-96(fp)
 1006784:	e17fe915 	stw	r5,-92(fp)
 1006788:	e1bfea15 	stw	r6,-88(fp)
 100678c:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
 1006790:	e0bfe917 	ldw	r2,-92(fp)
 1006794:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
 1006798:	e0ffea17 	ldw	r3,-88(fp)
 100679c:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
 10067a0:	e13feb17 	ldw	r4,-84(fp)
 10067a4:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
 10067a8:	e0800217 	ldw	r2,8(fp)
 10067ac:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
 10067b0:	e0fff717 	ldw	r3,-36(fp)
 10067b4:	e13ff917 	ldw	r4,-28(fp)
 10067b8:	1905c83a 	sub	r2,r3,r4
 10067bc:	e0bfff15 	stw	r2,-4(fp)
 10067c0:	e0ffff17 	ldw	r3,-4(fp)
 10067c4:	1804403a 	cmpge	r2,r3,zero
 10067c8:	1000031e 	bne	r2,zero,10067d8 <alt_up_pixel_buffer_dma_draw_line+0x68>
 10067cc:	e13fff17 	ldw	r4,-4(fp)
 10067d0:	0109c83a 	sub	r4,zero,r4
 10067d4:	e13fff15 	stw	r4,-4(fp)
 10067d8:	e0fff817 	ldw	r3,-32(fp)
 10067dc:	e13ffa17 	ldw	r4,-24(fp)
 10067e0:	1905c83a 	sub	r2,r3,r4
 10067e4:	e0bffe15 	stw	r2,-8(fp)
 10067e8:	e0fffe17 	ldw	r3,-8(fp)
 10067ec:	1804403a 	cmpge	r2,r3,zero
 10067f0:	1000031e 	bne	r2,zero,1006800 <alt_up_pixel_buffer_dma_draw_line+0x90>
 10067f4:	e13ffe17 	ldw	r4,-8(fp)
 10067f8:	0109c83a 	sub	r4,zero,r4
 10067fc:	e13ffe15 	stw	r4,-8(fp)
 1006800:	e0fffe17 	ldw	r3,-8(fp)
 1006804:	e13fff17 	ldw	r4,-4(fp)
 1006808:	1904803a 	cmplt	r2,r3,r4
 100680c:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
 1006810:	e0bfe817 	ldw	r2,-96(fp)
 1006814:	10800e17 	ldw	r2,56(r2)
 1006818:	10800060 	cmpeqi	r2,r2,1
 100681c:	10000c1e 	bne	r2,zero,1006850 <alt_up_pixel_buffer_dma_draw_line+0xe0>
 1006820:	e0bfe817 	ldw	r2,-96(fp)
 1006824:	10800e17 	ldw	r2,56(r2)
 1006828:	10800098 	cmpnei	r2,r2,2
 100682c:	1000031e 	bne	r2,zero,100683c <alt_up_pixel_buffer_dma_draw_line+0xcc>
 1006830:	00800044 	movi	r2,1
 1006834:	e0bffc15 	stw	r2,-16(fp)
 1006838:	00000206 	br	1006844 <alt_up_pixel_buffer_dma_draw_line+0xd4>
 100683c:	00c00084 	movi	r3,2
 1006840:	e0fffc15 	stw	r3,-16(fp)
 1006844:	e13ffc17 	ldw	r4,-16(fp)
 1006848:	e13ffd15 	stw	r4,-12(fp)
 100684c:	00000106 	br	1006854 <alt_up_pixel_buffer_dma_draw_line+0xe4>
 1006850:	e03ffd15 	stw	zero,-12(fp)
 1006854:	e0bffd17 	ldw	r2,-12(fp)
 1006858:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
 100685c:	e0c00317 	ldw	r3,12(fp)
 1006860:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
 1006864:	e0bfe817 	ldw	r2,-96(fp)
 1006868:	10800d17 	ldw	r2,52(r2)
 100686c:	1004c03a 	cmpne	r2,r2,zero
 1006870:	1000091e 	bne	r2,zero,1006898 <alt_up_pixel_buffer_dma_draw_line+0x128>
 1006874:	e0bfe817 	ldw	r2,-96(fp)
 1006878:	10c01317 	ldw	r3,76(r2)
 100687c:	e0bfef17 	ldw	r2,-68(fp)
 1006880:	1885c83a 	sub	r2,r3,r2
 1006884:	1007883a 	mov	r3,r2
 1006888:	00800044 	movi	r2,1
 100688c:	10c4983a 	sll	r2,r2,r3
 1006890:	e0bffb15 	stw	r2,-20(fp)
 1006894:	00000306 	br	10068a4 <alt_up_pixel_buffer_dma_draw_line+0x134>
 1006898:	e0bfe817 	ldw	r2,-96(fp)
 100689c:	10800f17 	ldw	r2,60(r2)
 10068a0:	e0bffb15 	stw	r2,-20(fp)
 10068a4:	e13ffb17 	ldw	r4,-20(fp)
 10068a8:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
 10068ac:	e0800417 	ldw	r2,16(fp)
 10068b0:	10800058 	cmpnei	r2,r2,1
 10068b4:	1000041e 	bne	r2,zero,10068c8 <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
 10068b8:	e0bfe817 	ldw	r2,-96(fp)
 10068bc:	10800c17 	ldw	r2,48(r2)
 10068c0:	e0bfed15 	stw	r2,-76(fp)
 10068c4:	00000306 	br	10068d4 <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
 10068c8:	e0bfe817 	ldw	r2,-96(fp)
 10068cc:	10800b17 	ldw	r2,44(r2)
 10068d0:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
 10068d4:	e0fff603 	ldbu	r3,-40(fp)
 10068d8:	18803fcc 	andi	r2,r3,255
 10068dc:	1080201c 	xori	r2,r2,128
 10068e0:	10bfe004 	addi	r2,r2,-128
 10068e4:	10800050 	cmplti	r2,r2,1
 10068e8:	10000c1e 	bne	r2,zero,100691c <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
 10068ec:	e13ffa17 	ldw	r4,-24(fp)
 10068f0:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
 10068f4:	e0bff917 	ldw	r2,-28(fp)
 10068f8:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
 10068fc:	e0fff317 	ldw	r3,-52(fp)
 1006900:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
 1006904:	e13ff817 	ldw	r4,-32(fp)
 1006908:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
 100690c:	e0bff717 	ldw	r2,-36(fp)
 1006910:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
 1006914:	e0fff317 	ldw	r3,-52(fp)
 1006918:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
 100691c:	e13ff817 	ldw	r4,-32(fp)
 1006920:	e0bffa17 	ldw	r2,-24(fp)
 1006924:	20800c0e 	bge	r4,r2,1006958 <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
 1006928:	e0fffa17 	ldw	r3,-24(fp)
 100692c:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
 1006930:	e13ff817 	ldw	r4,-32(fp)
 1006934:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
 1006938:	e0bff317 	ldw	r2,-52(fp)
 100693c:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
 1006940:	e0fff917 	ldw	r3,-28(fp)
 1006944:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
 1006948:	e13ff717 	ldw	r4,-36(fp)
 100694c:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
 1006950:	e0bff317 	ldw	r2,-52(fp)
 1006954:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
 1006958:	e0fff817 	ldw	r3,-32(fp)
 100695c:	e13ffa17 	ldw	r4,-24(fp)
 1006960:	1907c83a 	sub	r3,r3,r4
 1006964:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
 1006968:	e0fff717 	ldw	r3,-36(fp)
 100696c:	e13ff917 	ldw	r4,-28(fp)
 1006970:	1905c83a 	sub	r2,r3,r4
 1006974:	e0bff415 	stw	r2,-48(fp)
 1006978:	e0fff417 	ldw	r3,-48(fp)
 100697c:	1804403a 	cmpge	r2,r3,zero
 1006980:	1000031e 	bne	r2,zero,1006990 <alt_up_pixel_buffer_dma_draw_line+0x220>
 1006984:	e13ff417 	ldw	r4,-48(fp)
 1006988:	0109c83a 	sub	r4,zero,r4
 100698c:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
 1006990:	e0fff517 	ldw	r3,-44(fp)
 1006994:	1804d7fa 	srli	r2,r3,31
 1006998:	e13ff517 	ldw	r4,-44(fp)
 100699c:	1105883a 	add	r2,r2,r4
 10069a0:	1005d07a 	srai	r2,r2,1
 10069a4:	0085c83a 	sub	r2,zero,r2
 10069a8:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
 10069ac:	e0bff917 	ldw	r2,-28(fp)
 10069b0:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
 10069b4:	e0fff917 	ldw	r3,-28(fp)
 10069b8:	e13ff717 	ldw	r4,-36(fp)
 10069bc:	1900030e 	bge	r3,r4,10069cc <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
 10069c0:	00800044 	movi	r2,1
 10069c4:	e0bff215 	stw	r2,-56(fp)
 10069c8:	00000206 	br	10069d4 <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
 10069cc:	00ffffc4 	movi	r3,-1
 10069d0:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
 10069d4:	e13ff603 	ldbu	r4,-40(fp)
 10069d8:	20803fcc 	andi	r2,r4,255
 10069dc:	1080201c 	xori	r2,r2,128
 10069e0:	10bfe004 	addi	r2,r2,-128
 10069e4:	10800058 	cmpnei	r2,r2,1
 10069e8:	1000221e 	bne	r2,zero,1006a74 <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
 10069ec:	e0bffa17 	ldw	r2,-24(fp)
 10069f0:	e0bff115 	stw	r2,-60(fp)
 10069f4:	00001b06 	br	1006a64 <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
 10069f8:	e0ffee17 	ldw	r3,-72(fp)
 10069fc:	d8c00015 	stw	r3,0(sp)
 1006a00:	e13fef17 	ldw	r4,-68(fp)
 1006a04:	d9000115 	stw	r4,4(sp)
 1006a08:	e13fed17 	ldw	r4,-76(fp)
 1006a0c:	e17fec17 	ldw	r5,-80(fp)
 1006a10:	e1bff017 	ldw	r6,-64(fp)
 1006a14:	e1fff117 	ldw	r7,-60(fp)
 1006a18:	10066a00 	call	10066a0 <helper_plot_pixel>
			error = error + deltay;
 1006a1c:	e0bff317 	ldw	r2,-52(fp)
 1006a20:	e0fff417 	ldw	r3,-48(fp)
 1006a24:	10c5883a 	add	r2,r2,r3
 1006a28:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
 1006a2c:	e13ff317 	ldw	r4,-52(fp)
 1006a30:	20800050 	cmplti	r2,r4,1
 1006a34:	1000081e 	bne	r2,zero,1006a58 <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
 1006a38:	e0bff017 	ldw	r2,-64(fp)
 1006a3c:	e0fff217 	ldw	r3,-56(fp)
 1006a40:	10c5883a 	add	r2,r2,r3
 1006a44:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
 1006a48:	e13ff317 	ldw	r4,-52(fp)
 1006a4c:	e0bff517 	ldw	r2,-44(fp)
 1006a50:	2089c83a 	sub	r4,r4,r2
 1006a54:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
 1006a58:	e0fff117 	ldw	r3,-60(fp)
 1006a5c:	18c00044 	addi	r3,r3,1
 1006a60:	e0fff115 	stw	r3,-60(fp)
 1006a64:	e13ff817 	ldw	r4,-32(fp)
 1006a68:	e0bff117 	ldw	r2,-60(fp)
 1006a6c:	20bfe20e 	bge	r4,r2,10069f8 <alt_up_pixel_buffer_dma_draw_line+0x288>
 1006a70:	00002106 	br	1006af8 <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 1006a74:	e0fffa17 	ldw	r3,-24(fp)
 1006a78:	e0fff115 	stw	r3,-60(fp)
 1006a7c:	00001b06 	br	1006aec <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
 1006a80:	e13fee17 	ldw	r4,-72(fp)
 1006a84:	d9000015 	stw	r4,0(sp)
 1006a88:	e0bfef17 	ldw	r2,-68(fp)
 1006a8c:	d8800115 	stw	r2,4(sp)
 1006a90:	e13fed17 	ldw	r4,-76(fp)
 1006a94:	e17fec17 	ldw	r5,-80(fp)
 1006a98:	e1bff117 	ldw	r6,-60(fp)
 1006a9c:	e1fff017 	ldw	r7,-64(fp)
 1006aa0:	10066a00 	call	10066a0 <helper_plot_pixel>
			error = error + deltay;
 1006aa4:	e0fff317 	ldw	r3,-52(fp)
 1006aa8:	e13ff417 	ldw	r4,-48(fp)
 1006aac:	1907883a 	add	r3,r3,r4
 1006ab0:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
 1006ab4:	e0fff317 	ldw	r3,-52(fp)
 1006ab8:	18800050 	cmplti	r2,r3,1
 1006abc:	1000081e 	bne	r2,zero,1006ae0 <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
 1006ac0:	e13ff017 	ldw	r4,-64(fp)
 1006ac4:	e0bff217 	ldw	r2,-56(fp)
 1006ac8:	2089883a 	add	r4,r4,r2
 1006acc:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
 1006ad0:	e0fff317 	ldw	r3,-52(fp)
 1006ad4:	e13ff517 	ldw	r4,-44(fp)
 1006ad8:	1907c83a 	sub	r3,r3,r4
 1006adc:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 1006ae0:	e0bff117 	ldw	r2,-60(fp)
 1006ae4:	10800044 	addi	r2,r2,1
 1006ae8:	e0bff115 	stw	r2,-60(fp)
 1006aec:	e0fff817 	ldw	r3,-32(fp)
 1006af0:	e13ff117 	ldw	r4,-60(fp)
 1006af4:	193fe20e 	bge	r3,r4,1006a80 <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 1006af8:	e037883a 	mov	sp,fp
 1006afc:	dfc00117 	ldw	ra,4(sp)
 1006b00:	df000017 	ldw	fp,0(sp)
 1006b04:	dec00204 	addi	sp,sp,8
 1006b08:	f800283a 	ret

01006b0c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 1006b0c:	defff404 	addi	sp,sp,-48
 1006b10:	df000b15 	stw	fp,44(sp)
 1006b14:	df000b04 	addi	fp,sp,44
 1006b18:	e13ffb15 	stw	r4,-20(fp)
 1006b1c:	e17ffc15 	stw	r5,-16(fp)
 1006b20:	e1bffd15 	stw	r6,-12(fp)
 1006b24:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 1006b28:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1006b2c:	00804074 	movhi	r2,257
 1006b30:	10adba04 	addi	r2,r2,-18712
 1006b34:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 1006b38:	1005003a 	cmpeq	r2,r2,zero
 1006b3c:	1000411e 	bne	r2,zero,1006c44 <alt_alarm_start+0x138>
  {
    if (alarm)
 1006b40:	e0bffb17 	ldw	r2,-20(fp)
 1006b44:	1005003a 	cmpeq	r2,r2,zero
 1006b48:	10003b1e 	bne	r2,zero,1006c38 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 1006b4c:	e0fffb17 	ldw	r3,-20(fp)
 1006b50:	e0bffd17 	ldw	r2,-12(fp)
 1006b54:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 1006b58:	e0fffb17 	ldw	r3,-20(fp)
 1006b5c:	e0bffe17 	ldw	r2,-8(fp)
 1006b60:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1006b64:	0005303a 	rdctl	r2,status
 1006b68:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1006b6c:	e0fff817 	ldw	r3,-32(fp)
 1006b70:	00bfff84 	movi	r2,-2
 1006b74:	1884703a 	and	r2,r3,r2
 1006b78:	1001703a 	wrctl	status,r2
  
  return context;
 1006b7c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 1006b80:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 1006b84:	00804074 	movhi	r2,257
 1006b88:	10adbb04 	addi	r2,r2,-18708
 1006b8c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 1006b90:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 1006b94:	e0fffc17 	ldw	r3,-16(fp)
 1006b98:	e0bff917 	ldw	r2,-28(fp)
 1006b9c:	1885883a 	add	r2,r3,r2
 1006ba0:	10c00044 	addi	r3,r2,1
 1006ba4:	e0bffb17 	ldw	r2,-20(fp)
 1006ba8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 1006bac:	e0bffb17 	ldw	r2,-20(fp)
 1006bb0:	10c00217 	ldw	r3,8(r2)
 1006bb4:	e0bff917 	ldw	r2,-28(fp)
 1006bb8:	1880042e 	bgeu	r3,r2,1006bcc <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 1006bbc:	e0fffb17 	ldw	r3,-20(fp)
 1006bc0:	00800044 	movi	r2,1
 1006bc4:	18800405 	stb	r2,16(r3)
 1006bc8:	00000206 	br	1006bd4 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 1006bcc:	e0bffb17 	ldw	r2,-20(fp)
 1006bd0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 1006bd4:	e0fffb17 	ldw	r3,-20(fp)
 1006bd8:	00804074 	movhi	r2,257
 1006bdc:	10a6c704 	addi	r2,r2,-25828
 1006be0:	e0bff615 	stw	r2,-40(fp)
 1006be4:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1006be8:	e0fff717 	ldw	r3,-36(fp)
 1006bec:	e0bff617 	ldw	r2,-40(fp)
 1006bf0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 1006bf4:	e0bff617 	ldw	r2,-40(fp)
 1006bf8:	10c00017 	ldw	r3,0(r2)
 1006bfc:	e0bff717 	ldw	r2,-36(fp)
 1006c00:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1006c04:	e0bff617 	ldw	r2,-40(fp)
 1006c08:	10c00017 	ldw	r3,0(r2)
 1006c0c:	e0bff717 	ldw	r2,-36(fp)
 1006c10:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 1006c14:	e0fff617 	ldw	r3,-40(fp)
 1006c18:	e0bff717 	ldw	r2,-36(fp)
 1006c1c:	18800015 	stw	r2,0(r3)
 1006c20:	e0bffa17 	ldw	r2,-24(fp)
 1006c24:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1006c28:	e0bff517 	ldw	r2,-44(fp)
 1006c2c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 1006c30:	e03fff15 	stw	zero,-4(fp)
 1006c34:	00000506 	br	1006c4c <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 1006c38:	00bffa84 	movi	r2,-22
 1006c3c:	e0bfff15 	stw	r2,-4(fp)
 1006c40:	00000206 	br	1006c4c <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 1006c44:	00bfde84 	movi	r2,-134
 1006c48:	e0bfff15 	stw	r2,-4(fp)
 1006c4c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 1006c50:	e037883a 	mov	sp,fp
 1006c54:	df000017 	ldw	fp,0(sp)
 1006c58:	dec00104 	addi	sp,sp,4
 1006c5c:	f800283a 	ret

01006c60 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 1006c60:	defffe04 	addi	sp,sp,-8
 1006c64:	df000115 	stw	fp,4(sp)
 1006c68:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 1006c6c:	e03fff15 	stw	zero,-4(fp)
 1006c70:	00000506 	br	1006c88 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 1006c74:	e0bfff17 	ldw	r2,-4(fp)
 1006c78:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 1006c7c:	e0bfff17 	ldw	r2,-4(fp)
 1006c80:	10800804 	addi	r2,r2,32
 1006c84:	e0bfff15 	stw	r2,-4(fp)
 1006c88:	e0bfff17 	ldw	r2,-4(fp)
 1006c8c:	10820030 	cmpltui	r2,r2,2048
 1006c90:	103ff81e 	bne	r2,zero,1006c74 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 1006c94:	e037883a 	mov	sp,fp
 1006c98:	df000017 	ldw	fp,0(sp)
 1006c9c:	dec00104 	addi	sp,sp,4
 1006ca0:	f800283a 	ret

01006ca4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 1006ca4:	defff904 	addi	sp,sp,-28
 1006ca8:	dfc00615 	stw	ra,24(sp)
 1006cac:	df000515 	stw	fp,20(sp)
 1006cb0:	df000504 	addi	fp,sp,20
 1006cb4:	e13ffd15 	stw	r4,-12(fp)
 1006cb8:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 1006cbc:	e0bffd17 	ldw	r2,-12(fp)
 1006cc0:	1005003a 	cmpeq	r2,r2,zero
 1006cc4:	1000041e 	bne	r2,zero,1006cd8 <alt_dev_llist_insert+0x34>
 1006cc8:	e0bffd17 	ldw	r2,-12(fp)
 1006ccc:	10800217 	ldw	r2,8(r2)
 1006cd0:	1004c03a 	cmpne	r2,r2,zero
 1006cd4:	1000071e 	bne	r2,zero,1006cf4 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 1006cd8:	1006d580 	call	1006d58 <alt_get_errno>
 1006cdc:	1007883a 	mov	r3,r2
 1006ce0:	00800584 	movi	r2,22
 1006ce4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 1006ce8:	00bffa84 	movi	r2,-22
 1006cec:	e0bfff15 	stw	r2,-4(fp)
 1006cf0:	00001306 	br	1006d40 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 1006cf4:	e0fffd17 	ldw	r3,-12(fp)
 1006cf8:	e0bffe17 	ldw	r2,-8(fp)
 1006cfc:	e0bffb15 	stw	r2,-20(fp)
 1006d00:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1006d04:	e0fffc17 	ldw	r3,-16(fp)
 1006d08:	e0bffb17 	ldw	r2,-20(fp)
 1006d0c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 1006d10:	e0bffb17 	ldw	r2,-20(fp)
 1006d14:	10c00017 	ldw	r3,0(r2)
 1006d18:	e0bffc17 	ldw	r2,-16(fp)
 1006d1c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1006d20:	e0bffb17 	ldw	r2,-20(fp)
 1006d24:	10c00017 	ldw	r3,0(r2)
 1006d28:	e0bffc17 	ldw	r2,-16(fp)
 1006d2c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 1006d30:	e0fffb17 	ldw	r3,-20(fp)
 1006d34:	e0bffc17 	ldw	r2,-16(fp)
 1006d38:	18800015 	stw	r2,0(r3)

  return 0;  
 1006d3c:	e03fff15 	stw	zero,-4(fp)
 1006d40:	e0bfff17 	ldw	r2,-4(fp)
}
 1006d44:	e037883a 	mov	sp,fp
 1006d48:	dfc00117 	ldw	ra,4(sp)
 1006d4c:	df000017 	ldw	fp,0(sp)
 1006d50:	dec00204 	addi	sp,sp,8
 1006d54:	f800283a 	ret

01006d58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1006d58:	defffd04 	addi	sp,sp,-12
 1006d5c:	dfc00215 	stw	ra,8(sp)
 1006d60:	df000115 	stw	fp,4(sp)
 1006d64:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1006d68:	00804074 	movhi	r2,257
 1006d6c:	10a6c404 	addi	r2,r2,-25840
 1006d70:	10800017 	ldw	r2,0(r2)
 1006d74:	1005003a 	cmpeq	r2,r2,zero
 1006d78:	1000061e 	bne	r2,zero,1006d94 <alt_get_errno+0x3c>
 1006d7c:	00804074 	movhi	r2,257
 1006d80:	10a6c404 	addi	r2,r2,-25840
 1006d84:	10800017 	ldw	r2,0(r2)
 1006d88:	103ee83a 	callr	r2
 1006d8c:	e0bfff15 	stw	r2,-4(fp)
 1006d90:	00000306 	br	1006da0 <alt_get_errno+0x48>
 1006d94:	00804074 	movhi	r2,257
 1006d98:	10adb504 	addi	r2,r2,-18732
 1006d9c:	e0bfff15 	stw	r2,-4(fp)
 1006da0:	e0bfff17 	ldw	r2,-4(fp)
}
 1006da4:	e037883a 	mov	sp,fp
 1006da8:	dfc00117 	ldw	ra,4(sp)
 1006dac:	df000017 	ldw	fp,0(sp)
 1006db0:	dec00204 	addi	sp,sp,8
 1006db4:	f800283a 	ret

01006db8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 1006db8:	defffd04 	addi	sp,sp,-12
 1006dbc:	dfc00215 	stw	ra,8(sp)
 1006dc0:	df000115 	stw	fp,4(sp)
 1006dc4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1006dc8:	00bfff04 	movi	r2,-4
 1006dcc:	00c04034 	movhi	r3,256
 1006dd0:	18df7e04 	addi	r3,r3,32248
 1006dd4:	1885883a 	add	r2,r3,r2
 1006dd8:	e0bfff15 	stw	r2,-4(fp)
 1006ddc:	00000606 	br	1006df8 <_do_ctors+0x40>
        (*ctor) (); 
 1006de0:	e0bfff17 	ldw	r2,-4(fp)
 1006de4:	10800017 	ldw	r2,0(r2)
 1006de8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1006dec:	e0bfff17 	ldw	r2,-4(fp)
 1006df0:	10bfff04 	addi	r2,r2,-4
 1006df4:	e0bfff15 	stw	r2,-4(fp)
 1006df8:	e0ffff17 	ldw	r3,-4(fp)
 1006dfc:	00804034 	movhi	r2,256
 1006e00:	109f7d04 	addi	r2,r2,32244
 1006e04:	18bff62e 	bgeu	r3,r2,1006de0 <_do_ctors+0x28>
        (*ctor) (); 
}
 1006e08:	e037883a 	mov	sp,fp
 1006e0c:	dfc00117 	ldw	ra,4(sp)
 1006e10:	df000017 	ldw	fp,0(sp)
 1006e14:	dec00204 	addi	sp,sp,8
 1006e18:	f800283a 	ret

01006e1c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 1006e1c:	defffd04 	addi	sp,sp,-12
 1006e20:	dfc00215 	stw	ra,8(sp)
 1006e24:	df000115 	stw	fp,4(sp)
 1006e28:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1006e2c:	00bfff04 	movi	r2,-4
 1006e30:	00c04034 	movhi	r3,256
 1006e34:	18df7e04 	addi	r3,r3,32248
 1006e38:	1885883a 	add	r2,r3,r2
 1006e3c:	e0bfff15 	stw	r2,-4(fp)
 1006e40:	00000606 	br	1006e5c <_do_dtors+0x40>
        (*dtor) (); 
 1006e44:	e0bfff17 	ldw	r2,-4(fp)
 1006e48:	10800017 	ldw	r2,0(r2)
 1006e4c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1006e50:	e0bfff17 	ldw	r2,-4(fp)
 1006e54:	10bfff04 	addi	r2,r2,-4
 1006e58:	e0bfff15 	stw	r2,-4(fp)
 1006e5c:	e0ffff17 	ldw	r3,-4(fp)
 1006e60:	00804034 	movhi	r2,256
 1006e64:	109f7e04 	addi	r2,r2,32248
 1006e68:	18bff62e 	bgeu	r3,r2,1006e44 <_do_dtors+0x28>
        (*dtor) (); 
}
 1006e6c:	e037883a 	mov	sp,fp
 1006e70:	dfc00117 	ldw	ra,4(sp)
 1006e74:	df000017 	ldw	fp,0(sp)
 1006e78:	dec00204 	addi	sp,sp,8
 1006e7c:	f800283a 	ret

01006e80 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 1006e80:	defff904 	addi	sp,sp,-28
 1006e84:	dfc00615 	stw	ra,24(sp)
 1006e88:	df000515 	stw	fp,20(sp)
 1006e8c:	df000504 	addi	fp,sp,20
 1006e90:	e13ffd15 	stw	r4,-12(fp)
 1006e94:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 1006e98:	e0bffe17 	ldw	r2,-8(fp)
 1006e9c:	10800017 	ldw	r2,0(r2)
 1006ea0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 1006ea4:	e13ffd17 	ldw	r4,-12(fp)
 1006ea8:	10003cc0 	call	10003cc <strlen>
 1006eac:	10800044 	addi	r2,r2,1
 1006eb0:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1006eb4:	00000d06 	br	1006eec <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 1006eb8:	e0bffc17 	ldw	r2,-16(fp)
 1006ebc:	11000217 	ldw	r4,8(r2)
 1006ec0:	e1bffb17 	ldw	r6,-20(fp)
 1006ec4:	e17ffd17 	ldw	r5,-12(fp)
 1006ec8:	100797c0 	call	100797c <memcmp>
 1006ecc:	1004c03a 	cmpne	r2,r2,zero
 1006ed0:	1000031e 	bne	r2,zero,1006ee0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 1006ed4:	e0bffc17 	ldw	r2,-16(fp)
 1006ed8:	e0bfff15 	stw	r2,-4(fp)
 1006edc:	00000706 	br	1006efc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 1006ee0:	e0bffc17 	ldw	r2,-16(fp)
 1006ee4:	10800017 	ldw	r2,0(r2)
 1006ee8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1006eec:	e0fffe17 	ldw	r3,-8(fp)
 1006ef0:	e0bffc17 	ldw	r2,-16(fp)
 1006ef4:	10fff01e 	bne	r2,r3,1006eb8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 1006ef8:	e03fff15 	stw	zero,-4(fp)
 1006efc:	e0bfff17 	ldw	r2,-4(fp)
}
 1006f00:	e037883a 	mov	sp,fp
 1006f04:	dfc00117 	ldw	ra,4(sp)
 1006f08:	df000017 	ldw	fp,0(sp)
 1006f0c:	dec00204 	addi	sp,sp,8
 1006f10:	f800283a 	ret

01006f14 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 1006f14:	defffe04 	addi	sp,sp,-8
 1006f18:	dfc00115 	stw	ra,4(sp)
 1006f1c:	df000015 	stw	fp,0(sp)
 1006f20:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 1006f24:	0009883a 	mov	r4,zero
 1006f28:	01440004 	movi	r5,4096
 1006f2c:	10078a00 	call	10078a0 <alt_icache_flush>
#endif
}
 1006f30:	e037883a 	mov	sp,fp
 1006f34:	dfc00117 	ldw	ra,4(sp)
 1006f38:	df000017 	ldw	fp,0(sp)
 1006f3c:	dec00204 	addi	sp,sp,8
 1006f40:	f800283a 	ret

01006f44 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 1006f44:	defff904 	addi	sp,sp,-28
 1006f48:	dfc00615 	stw	ra,24(sp)
 1006f4c:	df000515 	stw	fp,20(sp)
 1006f50:	df000504 	addi	fp,sp,20
 1006f54:	e13ffc15 	stw	r4,-16(fp)
 1006f58:	e17ffd15 	stw	r5,-12(fp)
 1006f5c:	e1bffe15 	stw	r6,-8(fp)
 1006f60:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 1006f64:	e13ffd17 	ldw	r4,-12(fp)
 1006f68:	e17ffe17 	ldw	r5,-8(fp)
 1006f6c:	e1bfff17 	ldw	r6,-4(fp)
 1006f70:	100731c0 	call	100731c <open>
 1006f74:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 1006f78:	e0bffb17 	ldw	r2,-20(fp)
 1006f7c:	1004803a 	cmplt	r2,r2,zero
 1006f80:	10001c1e 	bne	r2,zero,1006ff4 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 1006f84:	e0bffb17 	ldw	r2,-20(fp)
 1006f88:	00c04074 	movhi	r3,257
 1006f8c:	18e1ec04 	addi	r3,r3,-30800
 1006f90:	10800324 	muli	r2,r2,12
 1006f94:	10c5883a 	add	r2,r2,r3
 1006f98:	10c00017 	ldw	r3,0(r2)
 1006f9c:	e0bffc17 	ldw	r2,-16(fp)
 1006fa0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 1006fa4:	e0bffb17 	ldw	r2,-20(fp)
 1006fa8:	00c04074 	movhi	r3,257
 1006fac:	18e1ec04 	addi	r3,r3,-30800
 1006fb0:	10800324 	muli	r2,r2,12
 1006fb4:	10c5883a 	add	r2,r2,r3
 1006fb8:	10800104 	addi	r2,r2,4
 1006fbc:	10c00017 	ldw	r3,0(r2)
 1006fc0:	e0bffc17 	ldw	r2,-16(fp)
 1006fc4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 1006fc8:	e0bffb17 	ldw	r2,-20(fp)
 1006fcc:	00c04074 	movhi	r3,257
 1006fd0:	18e1ec04 	addi	r3,r3,-30800
 1006fd4:	10800324 	muli	r2,r2,12
 1006fd8:	10c5883a 	add	r2,r2,r3
 1006fdc:	10800204 	addi	r2,r2,8
 1006fe0:	10c00017 	ldw	r3,0(r2)
 1006fe4:	e0bffc17 	ldw	r2,-16(fp)
 1006fe8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 1006fec:	e13ffb17 	ldw	r4,-20(fp)
 1006ff0:	100346c0 	call	100346c <alt_release_fd>
  }
} 
 1006ff4:	e037883a 	mov	sp,fp
 1006ff8:	dfc00117 	ldw	ra,4(sp)
 1006ffc:	df000017 	ldw	fp,0(sp)
 1007000:	dec00204 	addi	sp,sp,8
 1007004:	f800283a 	ret

01007008 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 1007008:	defffb04 	addi	sp,sp,-20
 100700c:	dfc00415 	stw	ra,16(sp)
 1007010:	df000315 	stw	fp,12(sp)
 1007014:	df000304 	addi	fp,sp,12
 1007018:	e13ffd15 	stw	r4,-12(fp)
 100701c:	e17ffe15 	stw	r5,-8(fp)
 1007020:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 1007024:	01004074 	movhi	r4,257
 1007028:	2121ef04 	addi	r4,r4,-30788
 100702c:	e17ffd17 	ldw	r5,-12(fp)
 1007030:	01800044 	movi	r6,1
 1007034:	01c07fc4 	movi	r7,511
 1007038:	1006f440 	call	1006f44 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 100703c:	01004074 	movhi	r4,257
 1007040:	2121ec04 	addi	r4,r4,-30800
 1007044:	e17ffe17 	ldw	r5,-8(fp)
 1007048:	000d883a 	mov	r6,zero
 100704c:	01c07fc4 	movi	r7,511
 1007050:	1006f440 	call	1006f44 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 1007054:	01004074 	movhi	r4,257
 1007058:	2121f204 	addi	r4,r4,-30776
 100705c:	e17fff17 	ldw	r5,-4(fp)
 1007060:	01800044 	movi	r6,1
 1007064:	01c07fc4 	movi	r7,511
 1007068:	1006f440 	call	1006f44 <alt_open_fd>
}  
 100706c:	e037883a 	mov	sp,fp
 1007070:	dfc00117 	ldw	ra,4(sp)
 1007074:	df000017 	ldw	fp,0(sp)
 1007078:	dec00204 	addi	sp,sp,8
 100707c:	f800283a 	ret

01007080 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 1007080:	deffef04 	addi	sp,sp,-68
 1007084:	df001015 	stw	fp,64(sp)
 1007088:	df001004 	addi	fp,sp,64
 100708c:	e13ffc15 	stw	r4,-16(fp)
 1007090:	e17ffd15 	stw	r5,-12(fp)
 1007094:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
 1007098:	00bffa84 	movi	r2,-22
 100709c:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 10070a0:	e0bffc17 	ldw	r2,-16(fp)
 10070a4:	10800828 	cmpgeui	r2,r2,32
 10070a8:	1000601e 	bne	r2,zero,100722c <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10070ac:	0005303a 	rdctl	r2,status
 10070b0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10070b4:	e0fff917 	ldw	r3,-28(fp)
 10070b8:	00bfff84 	movi	r2,-2
 10070bc:	1884703a 	and	r2,r3,r2
 10070c0:	1001703a 	wrctl	status,r2
  
  return context;
 10070c4:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 10070c8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
 10070cc:	e0bffc17 	ldw	r2,-16(fp)
 10070d0:	00c04074 	movhi	r3,257
 10070d4:	18edc604 	addi	r3,r3,-18664
 10070d8:	100490fa 	slli	r2,r2,3
 10070dc:	10c7883a 	add	r3,r2,r3
 10070e0:	e0bffe17 	ldw	r2,-8(fp)
 10070e4:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
 10070e8:	e0bffc17 	ldw	r2,-16(fp)
 10070ec:	00c04074 	movhi	r3,257
 10070f0:	18edc604 	addi	r3,r3,-18664
 10070f4:	100490fa 	slli	r2,r2,3
 10070f8:	10c5883a 	add	r2,r2,r3
 10070fc:	10c00104 	addi	r3,r2,4
 1007100:	e0bffd17 	ldw	r2,-12(fp)
 1007104:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 1007108:	e0bffe17 	ldw	r2,-8(fp)
 100710c:	1005003a 	cmpeq	r2,r2,zero
 1007110:	1000201e 	bne	r2,zero,1007194 <alt_irq_register+0x114>
 1007114:	e0bffc17 	ldw	r2,-16(fp)
 1007118:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100711c:	0005303a 	rdctl	r2,status
 1007120:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1007124:	e0fff617 	ldw	r3,-40(fp)
 1007128:	00bfff84 	movi	r2,-2
 100712c:	1884703a 	and	r2,r3,r2
 1007130:	1001703a 	wrctl	status,r2
  
  return context;
 1007134:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1007138:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 100713c:	e0fff717 	ldw	r3,-36(fp)
 1007140:	00800044 	movi	r2,1
 1007144:	10c4983a 	sll	r2,r2,r3
 1007148:	1007883a 	mov	r3,r2
 100714c:	00804074 	movhi	r2,257
 1007150:	10adb904 	addi	r2,r2,-18716
 1007154:	10800017 	ldw	r2,0(r2)
 1007158:	1886b03a 	or	r3,r3,r2
 100715c:	00804074 	movhi	r2,257
 1007160:	10adb904 	addi	r2,r2,-18716
 1007164:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1007168:	00804074 	movhi	r2,257
 100716c:	10adb904 	addi	r2,r2,-18716
 1007170:	10800017 	ldw	r2,0(r2)
 1007174:	100170fa 	wrctl	ienable,r2
 1007178:	e0bff817 	ldw	r2,-32(fp)
 100717c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1007180:	e0bff517 	ldw	r2,-44(fp)
 1007184:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1007188:	0005883a 	mov	r2,zero
 100718c:	e0bfff15 	stw	r2,-4(fp)
 1007190:	00002006 	br	1007214 <alt_irq_register+0x194>
 1007194:	e0bffc17 	ldw	r2,-16(fp)
 1007198:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100719c:	0005303a 	rdctl	r2,status
 10071a0:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10071a4:	e0fff217 	ldw	r3,-56(fp)
 10071a8:	00bfff84 	movi	r2,-2
 10071ac:	1884703a 	and	r2,r3,r2
 10071b0:	1001703a 	wrctl	status,r2
  
  return context;
 10071b4:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 10071b8:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
 10071bc:	e0fff317 	ldw	r3,-52(fp)
 10071c0:	00800044 	movi	r2,1
 10071c4:	10c4983a 	sll	r2,r2,r3
 10071c8:	0084303a 	nor	r2,zero,r2
 10071cc:	1007883a 	mov	r3,r2
 10071d0:	00804074 	movhi	r2,257
 10071d4:	10adb904 	addi	r2,r2,-18716
 10071d8:	10800017 	ldw	r2,0(r2)
 10071dc:	1886703a 	and	r3,r3,r2
 10071e0:	00804074 	movhi	r2,257
 10071e4:	10adb904 	addi	r2,r2,-18716
 10071e8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 10071ec:	00804074 	movhi	r2,257
 10071f0:	10adb904 	addi	r2,r2,-18716
 10071f4:	10800017 	ldw	r2,0(r2)
 10071f8:	100170fa 	wrctl	ienable,r2
 10071fc:	e0bff417 	ldw	r2,-48(fp)
 1007200:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1007204:	e0bff117 	ldw	r2,-60(fp)
 1007208:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 100720c:	0005883a 	mov	r2,zero
 1007210:	e0bfff15 	stw	r2,-4(fp)
 1007214:	e0bfff17 	ldw	r2,-4(fp)
 1007218:	e0bffb15 	stw	r2,-20(fp)
 100721c:	e0bffa17 	ldw	r2,-24(fp)
 1007220:	e0bff015 	stw	r2,-64(fp)
 1007224:	e0bff017 	ldw	r2,-64(fp)
 1007228:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 100722c:	e0bffb17 	ldw	r2,-20(fp)
}
 1007230:	e037883a 	mov	sp,fp
 1007234:	df000017 	ldw	fp,0(sp)
 1007238:	dec00104 	addi	sp,sp,4
 100723c:	f800283a 	ret

01007240 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 1007240:	defffc04 	addi	sp,sp,-16
 1007244:	df000315 	stw	fp,12(sp)
 1007248:	df000304 	addi	fp,sp,12
 100724c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 1007250:	e0bffe17 	ldw	r2,-8(fp)
 1007254:	10800217 	ldw	r2,8(r2)
 1007258:	10d00034 	orhi	r3,r2,16384
 100725c:	e0bffe17 	ldw	r2,-8(fp)
 1007260:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1007264:	e03ffd15 	stw	zero,-12(fp)
 1007268:	00002006 	br	10072ec <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 100726c:	e0bffd17 	ldw	r2,-12(fp)
 1007270:	00c04074 	movhi	r3,257
 1007274:	18e1ec04 	addi	r3,r3,-30800
 1007278:	10800324 	muli	r2,r2,12
 100727c:	10c5883a 	add	r2,r2,r3
 1007280:	10c00017 	ldw	r3,0(r2)
 1007284:	e0bffe17 	ldw	r2,-8(fp)
 1007288:	10800017 	ldw	r2,0(r2)
 100728c:	1880141e 	bne	r3,r2,10072e0 <alt_file_locked+0xa0>
 1007290:	e0bffd17 	ldw	r2,-12(fp)
 1007294:	00c04074 	movhi	r3,257
 1007298:	18e1ec04 	addi	r3,r3,-30800
 100729c:	10800324 	muli	r2,r2,12
 10072a0:	10c5883a 	add	r2,r2,r3
 10072a4:	10800204 	addi	r2,r2,8
 10072a8:	10800017 	ldw	r2,0(r2)
 10072ac:	1004403a 	cmpge	r2,r2,zero
 10072b0:	10000b1e 	bne	r2,zero,10072e0 <alt_file_locked+0xa0>
 10072b4:	e0bffd17 	ldw	r2,-12(fp)
 10072b8:	10800324 	muli	r2,r2,12
 10072bc:	1007883a 	mov	r3,r2
 10072c0:	00804074 	movhi	r2,257
 10072c4:	10a1ec04 	addi	r2,r2,-30800
 10072c8:	1887883a 	add	r3,r3,r2
 10072cc:	e0bffe17 	ldw	r2,-8(fp)
 10072d0:	18800326 	beq	r3,r2,10072e0 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 10072d4:	00bffcc4 	movi	r2,-13
 10072d8:	e0bfff15 	stw	r2,-4(fp)
 10072dc:	00000a06 	br	1007308 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 10072e0:	e0bffd17 	ldw	r2,-12(fp)
 10072e4:	10800044 	addi	r2,r2,1
 10072e8:	e0bffd15 	stw	r2,-12(fp)
 10072ec:	00804074 	movhi	r2,257
 10072f0:	10a6c304 	addi	r2,r2,-25844
 10072f4:	10800017 	ldw	r2,0(r2)
 10072f8:	1007883a 	mov	r3,r2
 10072fc:	e0bffd17 	ldw	r2,-12(fp)
 1007300:	18bfda2e 	bgeu	r3,r2,100726c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 1007304:	e03fff15 	stw	zero,-4(fp)
 1007308:	e0bfff17 	ldw	r2,-4(fp)
}
 100730c:	e037883a 	mov	sp,fp
 1007310:	df000017 	ldw	fp,0(sp)
 1007314:	dec00104 	addi	sp,sp,4
 1007318:	f800283a 	ret

0100731c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 100731c:	defff404 	addi	sp,sp,-48
 1007320:	dfc00b15 	stw	ra,44(sp)
 1007324:	df000a15 	stw	fp,40(sp)
 1007328:	df000a04 	addi	fp,sp,40
 100732c:	e13ffb15 	stw	r4,-20(fp)
 1007330:	e17ffc15 	stw	r5,-16(fp)
 1007334:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 1007338:	00bfffc4 	movi	r2,-1
 100733c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 1007340:	00bffb44 	movi	r2,-19
 1007344:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 1007348:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 100734c:	e13ffb17 	ldw	r4,-20(fp)
 1007350:	01404074 	movhi	r5,257
 1007354:	2966c104 	addi	r5,r5,-25852
 1007358:	1006e800 	call	1006e80 <alt_find_dev>
 100735c:	e0bffa15 	stw	r2,-24(fp)
 1007360:	e0bffa17 	ldw	r2,-24(fp)
 1007364:	1004c03a 	cmpne	r2,r2,zero
 1007368:	1000051e 	bne	r2,zero,1007380 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 100736c:	e13ffb17 	ldw	r4,-20(fp)
 1007370:	10076c80 	call	10076c8 <alt_find_file>
 1007374:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 1007378:	00800044 	movi	r2,1
 100737c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 1007380:	e0bffa17 	ldw	r2,-24(fp)
 1007384:	1005003a 	cmpeq	r2,r2,zero
 1007388:	1000301e 	bne	r2,zero,100744c <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 100738c:	e13ffa17 	ldw	r4,-24(fp)
 1007390:	10077e80 	call	10077e8 <alt_get_fd>
 1007394:	e0bff815 	stw	r2,-32(fp)
 1007398:	e0bff817 	ldw	r2,-32(fp)
 100739c:	1004403a 	cmpge	r2,r2,zero
 10073a0:	1000031e 	bne	r2,zero,10073b0 <open+0x94>
    {
      status = index;
 10073a4:	e0bff817 	ldw	r2,-32(fp)
 10073a8:	e0bff715 	stw	r2,-36(fp)
 10073ac:	00002906 	br	1007454 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 10073b0:	e0bff817 	ldw	r2,-32(fp)
 10073b4:	10800324 	muli	r2,r2,12
 10073b8:	1007883a 	mov	r3,r2
 10073bc:	00804074 	movhi	r2,257
 10073c0:	10a1ec04 	addi	r2,r2,-30800
 10073c4:	1885883a 	add	r2,r3,r2
 10073c8:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 10073cc:	e0fffc17 	ldw	r3,-16(fp)
 10073d0:	00900034 	movhi	r2,16384
 10073d4:	10bfffc4 	addi	r2,r2,-1
 10073d8:	1886703a 	and	r3,r3,r2
 10073dc:	e0bff917 	ldw	r2,-28(fp)
 10073e0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 10073e4:	e0bff617 	ldw	r2,-40(fp)
 10073e8:	1004c03a 	cmpne	r2,r2,zero
 10073ec:	1000061e 	bne	r2,zero,1007408 <open+0xec>
 10073f0:	e13ff917 	ldw	r4,-28(fp)
 10073f4:	10072400 	call	1007240 <alt_file_locked>
 10073f8:	e0bff715 	stw	r2,-36(fp)
 10073fc:	e0bff717 	ldw	r2,-36(fp)
 1007400:	1004803a 	cmplt	r2,r2,zero
 1007404:	1000131e 	bne	r2,zero,1007454 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 1007408:	e0bffa17 	ldw	r2,-24(fp)
 100740c:	10800317 	ldw	r2,12(r2)
 1007410:	1005003a 	cmpeq	r2,r2,zero
 1007414:	1000091e 	bne	r2,zero,100743c <open+0x120>
 1007418:	e0bffa17 	ldw	r2,-24(fp)
 100741c:	10800317 	ldw	r2,12(r2)
 1007420:	e13ff917 	ldw	r4,-28(fp)
 1007424:	e17ffb17 	ldw	r5,-20(fp)
 1007428:	e1bffc17 	ldw	r6,-16(fp)
 100742c:	e1fffd17 	ldw	r7,-12(fp)
 1007430:	103ee83a 	callr	r2
 1007434:	e0bfff15 	stw	r2,-4(fp)
 1007438:	00000106 	br	1007440 <open+0x124>
 100743c:	e03fff15 	stw	zero,-4(fp)
 1007440:	e0bfff17 	ldw	r2,-4(fp)
 1007444:	e0bff715 	stw	r2,-36(fp)
 1007448:	00000206 	br	1007454 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 100744c:	00bffb44 	movi	r2,-19
 1007450:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 1007454:	e0bff717 	ldw	r2,-36(fp)
 1007458:	1004403a 	cmpge	r2,r2,zero
 100745c:	1000091e 	bne	r2,zero,1007484 <open+0x168>
  {
    alt_release_fd (index);  
 1007460:	e13ff817 	ldw	r4,-32(fp)
 1007464:	100346c0 	call	100346c <alt_release_fd>
    ALT_ERRNO = -status;
 1007468:	10074a40 	call	10074a4 <alt_get_errno>
 100746c:	e0fff717 	ldw	r3,-36(fp)
 1007470:	00c7c83a 	sub	r3,zero,r3
 1007474:	10c00015 	stw	r3,0(r2)
    return -1;
 1007478:	00bfffc4 	movi	r2,-1
 100747c:	e0bffe15 	stw	r2,-8(fp)
 1007480:	00000206 	br	100748c <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 1007484:	e0bff817 	ldw	r2,-32(fp)
 1007488:	e0bffe15 	stw	r2,-8(fp)
 100748c:	e0bffe17 	ldw	r2,-8(fp)
}
 1007490:	e037883a 	mov	sp,fp
 1007494:	dfc00117 	ldw	ra,4(sp)
 1007498:	df000017 	ldw	fp,0(sp)
 100749c:	dec00204 	addi	sp,sp,8
 10074a0:	f800283a 	ret

010074a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10074a4:	defffd04 	addi	sp,sp,-12
 10074a8:	dfc00215 	stw	ra,8(sp)
 10074ac:	df000115 	stw	fp,4(sp)
 10074b0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10074b4:	00804074 	movhi	r2,257
 10074b8:	10a6c404 	addi	r2,r2,-25840
 10074bc:	10800017 	ldw	r2,0(r2)
 10074c0:	1005003a 	cmpeq	r2,r2,zero
 10074c4:	1000061e 	bne	r2,zero,10074e0 <alt_get_errno+0x3c>
 10074c8:	00804074 	movhi	r2,257
 10074cc:	10a6c404 	addi	r2,r2,-25840
 10074d0:	10800017 	ldw	r2,0(r2)
 10074d4:	103ee83a 	callr	r2
 10074d8:	e0bfff15 	stw	r2,-4(fp)
 10074dc:	00000306 	br	10074ec <alt_get_errno+0x48>
 10074e0:	00804074 	movhi	r2,257
 10074e4:	10adb504 	addi	r2,r2,-18732
 10074e8:	e0bfff15 	stw	r2,-4(fp)
 10074ec:	e0bfff17 	ldw	r2,-4(fp)
}
 10074f0:	e037883a 	mov	sp,fp
 10074f4:	dfc00117 	ldw	ra,4(sp)
 10074f8:	df000017 	ldw	fp,0(sp)
 10074fc:	dec00204 	addi	sp,sp,8
 1007500:	f800283a 	ret

01007504 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 1007504:	defffa04 	addi	sp,sp,-24
 1007508:	df000515 	stw	fp,20(sp)
 100750c:	df000504 	addi	fp,sp,20
 1007510:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1007514:	0005303a 	rdctl	r2,status
 1007518:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100751c:	e0fffd17 	ldw	r3,-12(fp)
 1007520:	00bfff84 	movi	r2,-2
 1007524:	1884703a 	and	r2,r3,r2
 1007528:	1001703a 	wrctl	status,r2
  
  return context;
 100752c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 1007530:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 1007534:	e0bfff17 	ldw	r2,-4(fp)
 1007538:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 100753c:	e0bffc17 	ldw	r2,-16(fp)
 1007540:	10c00017 	ldw	r3,0(r2)
 1007544:	e0bffc17 	ldw	r2,-16(fp)
 1007548:	10800117 	ldw	r2,4(r2)
 100754c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 1007550:	e0bffc17 	ldw	r2,-16(fp)
 1007554:	10c00117 	ldw	r3,4(r2)
 1007558:	e0bffc17 	ldw	r2,-16(fp)
 100755c:	10800017 	ldw	r2,0(r2)
 1007560:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 1007564:	e0fffc17 	ldw	r3,-16(fp)
 1007568:	e0bffc17 	ldw	r2,-16(fp)
 100756c:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 1007570:	e0fffc17 	ldw	r3,-16(fp)
 1007574:	e0bffc17 	ldw	r2,-16(fp)
 1007578:	18800015 	stw	r2,0(r3)
 100757c:	e0bffe17 	ldw	r2,-8(fp)
 1007580:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1007584:	e0bffb17 	ldw	r2,-20(fp)
 1007588:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 100758c:	e037883a 	mov	sp,fp
 1007590:	df000017 	ldw	fp,0(sp)
 1007594:	dec00104 	addi	sp,sp,4
 1007598:	f800283a 	ret

0100759c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 100759c:	defffb04 	addi	sp,sp,-20
 10075a0:	dfc00415 	stw	ra,16(sp)
 10075a4:	df000315 	stw	fp,12(sp)
 10075a8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 10075ac:	d0a00c17 	ldw	r2,-32720(gp)
 10075b0:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 10075b4:	d0a70017 	ldw	r2,-25600(gp)
 10075b8:	10800044 	addi	r2,r2,1
 10075bc:	d0a70015 	stw	r2,-25600(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 10075c0:	00003106 	br	1007688 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 10075c4:	e0bffe17 	ldw	r2,-8(fp)
 10075c8:	10800017 	ldw	r2,0(r2)
 10075cc:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 10075d0:	e0bffe17 	ldw	r2,-8(fp)
 10075d4:	10800403 	ldbu	r2,16(r2)
 10075d8:	10803fcc 	andi	r2,r2,255
 10075dc:	1005003a 	cmpeq	r2,r2,zero
 10075e0:	1000051e 	bne	r2,zero,10075f8 <alt_tick+0x5c>
 10075e4:	d0a70017 	ldw	r2,-25600(gp)
 10075e8:	1004c03a 	cmpne	r2,r2,zero
 10075ec:	1000021e 	bne	r2,zero,10075f8 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 10075f0:	e0bffe17 	ldw	r2,-8(fp)
 10075f4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 10075f8:	e0bffe17 	ldw	r2,-8(fp)
 10075fc:	10c00217 	ldw	r3,8(r2)
 1007600:	d0a70017 	ldw	r2,-25600(gp)
 1007604:	10c01e36 	bltu	r2,r3,1007680 <alt_tick+0xe4>
 1007608:	e0bffe17 	ldw	r2,-8(fp)
 100760c:	10800403 	ldbu	r2,16(r2)
 1007610:	10803fcc 	andi	r2,r2,255
 1007614:	1004c03a 	cmpne	r2,r2,zero
 1007618:	1000191e 	bne	r2,zero,1007680 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 100761c:	e0bffe17 	ldw	r2,-8(fp)
 1007620:	10c00317 	ldw	r3,12(r2)
 1007624:	e0bffe17 	ldw	r2,-8(fp)
 1007628:	11000517 	ldw	r4,20(r2)
 100762c:	183ee83a 	callr	r3
 1007630:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 1007634:	e0bffd17 	ldw	r2,-12(fp)
 1007638:	1004c03a 	cmpne	r2,r2,zero
 100763c:	1000031e 	bne	r2,zero,100764c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 1007640:	e13ffe17 	ldw	r4,-8(fp)
 1007644:	10075040 	call	1007504 <alt_alarm_stop>
 1007648:	00000d06 	br	1007680 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 100764c:	e0bffe17 	ldw	r2,-8(fp)
 1007650:	10c00217 	ldw	r3,8(r2)
 1007654:	e0bffd17 	ldw	r2,-12(fp)
 1007658:	1887883a 	add	r3,r3,r2
 100765c:	e0bffe17 	ldw	r2,-8(fp)
 1007660:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 1007664:	e0bffe17 	ldw	r2,-8(fp)
 1007668:	10c00217 	ldw	r3,8(r2)
 100766c:	d0a70017 	ldw	r2,-25600(gp)
 1007670:	1880032e 	bgeu	r3,r2,1007680 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 1007674:	e0fffe17 	ldw	r3,-8(fp)
 1007678:	00800044 	movi	r2,1
 100767c:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 1007680:	e0bfff17 	ldw	r2,-4(fp)
 1007684:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1007688:	d0e00c04 	addi	r3,gp,-32720
 100768c:	e0bffe17 	ldw	r2,-8(fp)
 1007690:	10ffcc1e 	bne	r2,r3,10075c4 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 1007694:	e037883a 	mov	sp,fp
 1007698:	dfc00117 	ldw	ra,4(sp)
 100769c:	df000017 	ldw	fp,0(sp)
 10076a0:	dec00204 	addi	sp,sp,8
 10076a4:	f800283a 	ret

010076a8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 10076a8:	deffff04 	addi	sp,sp,-4
 10076ac:	df000015 	stw	fp,0(sp)
 10076b0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 10076b4:	000170fa 	wrctl	ienable,zero
}
 10076b8:	e037883a 	mov	sp,fp
 10076bc:	df000017 	ldw	fp,0(sp)
 10076c0:	dec00104 	addi	sp,sp,4
 10076c4:	f800283a 	ret

010076c8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 10076c8:	defffa04 	addi	sp,sp,-24
 10076cc:	dfc00515 	stw	ra,20(sp)
 10076d0:	df000415 	stw	fp,16(sp)
 10076d4:	df000404 	addi	fp,sp,16
 10076d8:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 10076dc:	00804074 	movhi	r2,257
 10076e0:	10a6bf04 	addi	r2,r2,-25860
 10076e4:	10800017 	ldw	r2,0(r2)
 10076e8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 10076ec:	00003306 	br	10077bc <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 10076f0:	e0bffd17 	ldw	r2,-12(fp)
 10076f4:	11000217 	ldw	r4,8(r2)
 10076f8:	10003cc0 	call	10003cc <strlen>
 10076fc:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 1007700:	e0bffd17 	ldw	r2,-12(fp)
 1007704:	10c00217 	ldw	r3,8(r2)
 1007708:	e0bffc17 	ldw	r2,-16(fp)
 100770c:	1885883a 	add	r2,r3,r2
 1007710:	10bfffc4 	addi	r2,r2,-1
 1007714:	10800003 	ldbu	r2,0(r2)
 1007718:	10803fcc 	andi	r2,r2,255
 100771c:	1080201c 	xori	r2,r2,128
 1007720:	10bfe004 	addi	r2,r2,-128
 1007724:	10800bd8 	cmpnei	r2,r2,47
 1007728:	1000031e 	bne	r2,zero,1007738 <alt_find_file+0x70>
    {
      len -= 1;
 100772c:	e0bffc17 	ldw	r2,-16(fp)
 1007730:	10bfffc4 	addi	r2,r2,-1
 1007734:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1007738:	e0bffc17 	ldw	r2,-16(fp)
 100773c:	1007883a 	mov	r3,r2
 1007740:	e0bffe17 	ldw	r2,-8(fp)
 1007744:	1885883a 	add	r2,r3,r2
 1007748:	10800003 	ldbu	r2,0(r2)
 100774c:	10803fcc 	andi	r2,r2,255
 1007750:	1080201c 	xori	r2,r2,128
 1007754:	10bfe004 	addi	r2,r2,-128
 1007758:	10800be0 	cmpeqi	r2,r2,47
 100775c:	10000a1e 	bne	r2,zero,1007788 <alt_find_file+0xc0>
 1007760:	e0bffc17 	ldw	r2,-16(fp)
 1007764:	1007883a 	mov	r3,r2
 1007768:	e0bffe17 	ldw	r2,-8(fp)
 100776c:	1885883a 	add	r2,r3,r2
 1007770:	10800003 	ldbu	r2,0(r2)
 1007774:	10803fcc 	andi	r2,r2,255
 1007778:	1080201c 	xori	r2,r2,128
 100777c:	10bfe004 	addi	r2,r2,-128
 1007780:	1004c03a 	cmpne	r2,r2,zero
 1007784:	10000a1e 	bne	r2,zero,10077b0 <alt_find_file+0xe8>
 1007788:	e0bffd17 	ldw	r2,-12(fp)
 100778c:	11000217 	ldw	r4,8(r2)
 1007790:	e1bffc17 	ldw	r6,-16(fp)
 1007794:	e17ffe17 	ldw	r5,-8(fp)
 1007798:	100797c0 	call	100797c <memcmp>
 100779c:	1004c03a 	cmpne	r2,r2,zero
 10077a0:	1000031e 	bne	r2,zero,10077b0 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 10077a4:	e0bffd17 	ldw	r2,-12(fp)
 10077a8:	e0bfff15 	stw	r2,-4(fp)
 10077ac:	00000806 	br	10077d0 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 10077b0:	e0bffd17 	ldw	r2,-12(fp)
 10077b4:	10800017 	ldw	r2,0(r2)
 10077b8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 10077bc:	00c04074 	movhi	r3,257
 10077c0:	18e6bf04 	addi	r3,r3,-25860
 10077c4:	e0bffd17 	ldw	r2,-12(fp)
 10077c8:	10ffc91e 	bne	r2,r3,10076f0 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 10077cc:	e03fff15 	stw	zero,-4(fp)
 10077d0:	e0bfff17 	ldw	r2,-4(fp)
}
 10077d4:	e037883a 	mov	sp,fp
 10077d8:	dfc00117 	ldw	ra,4(sp)
 10077dc:	df000017 	ldw	fp,0(sp)
 10077e0:	dec00204 	addi	sp,sp,8
 10077e4:	f800283a 	ret

010077e8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 10077e8:	defffc04 	addi	sp,sp,-16
 10077ec:	df000315 	stw	fp,12(sp)
 10077f0:	df000304 	addi	fp,sp,12
 10077f4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 10077f8:	00bffa04 	movi	r2,-24
 10077fc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1007800:	e03ffe15 	stw	zero,-8(fp)
 1007804:	00001e06 	br	1007880 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 1007808:	e0bffe17 	ldw	r2,-8(fp)
 100780c:	00c04074 	movhi	r3,257
 1007810:	18e1ec04 	addi	r3,r3,-30800
 1007814:	10800324 	muli	r2,r2,12
 1007818:	10c5883a 	add	r2,r2,r3
 100781c:	10800017 	ldw	r2,0(r2)
 1007820:	1004c03a 	cmpne	r2,r2,zero
 1007824:	1000131e 	bne	r2,zero,1007874 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 1007828:	e0bffe17 	ldw	r2,-8(fp)
 100782c:	00c04074 	movhi	r3,257
 1007830:	18e1ec04 	addi	r3,r3,-30800
 1007834:	10800324 	muli	r2,r2,12
 1007838:	10c7883a 	add	r3,r2,r3
 100783c:	e0bfff17 	ldw	r2,-4(fp)
 1007840:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 1007844:	00804074 	movhi	r2,257
 1007848:	10a6c304 	addi	r2,r2,-25844
 100784c:	10c00017 	ldw	r3,0(r2)
 1007850:	e0bffe17 	ldw	r2,-8(fp)
 1007854:	1880040e 	bge	r3,r2,1007868 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 1007858:	00c04074 	movhi	r3,257
 100785c:	18e6c304 	addi	r3,r3,-25844
 1007860:	e0bffe17 	ldw	r2,-8(fp)
 1007864:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 1007868:	e0bffe17 	ldw	r2,-8(fp)
 100786c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 1007870:	00000606 	br	100788c <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1007874:	e0bffe17 	ldw	r2,-8(fp)
 1007878:	10800044 	addi	r2,r2,1
 100787c:	e0bffe15 	stw	r2,-8(fp)
 1007880:	e0bffe17 	ldw	r2,-8(fp)
 1007884:	10800810 	cmplti	r2,r2,32
 1007888:	103fdf1e 	bne	r2,zero,1007808 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 100788c:	e0bffd17 	ldw	r2,-12(fp)
}
 1007890:	e037883a 	mov	sp,fp
 1007894:	df000017 	ldw	fp,0(sp)
 1007898:	dec00104 	addi	sp,sp,4
 100789c:	f800283a 	ret

010078a0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 10078a0:	defffb04 	addi	sp,sp,-20
 10078a4:	df000415 	stw	fp,16(sp)
 10078a8:	df000404 	addi	fp,sp,16
 10078ac:	e13ffe15 	stw	r4,-8(fp)
 10078b0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 10078b4:	e0bfff17 	ldw	r2,-4(fp)
 10078b8:	10840070 	cmpltui	r2,r2,4097
 10078bc:	1000021e 	bne	r2,zero,10078c8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 10078c0:	00840004 	movi	r2,4096
 10078c4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 10078c8:	e0fffe17 	ldw	r3,-8(fp)
 10078cc:	e0bfff17 	ldw	r2,-4(fp)
 10078d0:	1885883a 	add	r2,r3,r2
 10078d4:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 10078d8:	e0bffe17 	ldw	r2,-8(fp)
 10078dc:	e0bffd15 	stw	r2,-12(fp)
 10078e0:	00000506 	br	10078f8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 10078e4:	e0bffd17 	ldw	r2,-12(fp)
 10078e8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 10078ec:	e0bffd17 	ldw	r2,-12(fp)
 10078f0:	10800804 	addi	r2,r2,32
 10078f4:	e0bffd15 	stw	r2,-12(fp)
 10078f8:	e0fffd17 	ldw	r3,-12(fp)
 10078fc:	e0bffc17 	ldw	r2,-16(fp)
 1007900:	18bff836 	bltu	r3,r2,10078e4 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 1007904:	e0bffe17 	ldw	r2,-8(fp)
 1007908:	108007cc 	andi	r2,r2,31
 100790c:	1005003a 	cmpeq	r2,r2,zero
 1007910:	1000021e 	bne	r2,zero,100791c <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 1007914:	e0bffd17 	ldw	r2,-12(fp)
 1007918:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 100791c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 1007920:	e037883a 	mov	sp,fp
 1007924:	df000017 	ldw	fp,0(sp)
 1007928:	dec00104 	addi	sp,sp,4
 100792c:	f800283a 	ret

01007930 <atexit>:
 1007930:	200b883a 	mov	r5,r4
 1007934:	000d883a 	mov	r6,zero
 1007938:	0009883a 	mov	r4,zero
 100793c:	000f883a 	mov	r7,zero
 1007940:	1007aac1 	jmpi	1007aac <__register_exitproc>

01007944 <exit>:
 1007944:	defffe04 	addi	sp,sp,-8
 1007948:	000b883a 	mov	r5,zero
 100794c:	dc000015 	stw	r16,0(sp)
 1007950:	dfc00115 	stw	ra,4(sp)
 1007954:	2021883a 	mov	r16,r4
 1007958:	1007be40 	call	1007be4 <__call_exitprocs>
 100795c:	00804074 	movhi	r2,257
 1007960:	10a6bc04 	addi	r2,r2,-25872
 1007964:	11000017 	ldw	r4,0(r2)
 1007968:	20800f17 	ldw	r2,60(r4)
 100796c:	10000126 	beq	r2,zero,1007974 <exit+0x30>
 1007970:	103ee83a 	callr	r2
 1007974:	8009883a 	mov	r4,r16
 1007978:	1007dd40 	call	1007dd4 <_exit>

0100797c <memcmp>:
 100797c:	00c000c4 	movi	r3,3
 1007980:	1980032e 	bgeu	r3,r6,1007990 <memcmp+0x14>
 1007984:	2144b03a 	or	r2,r4,r5
 1007988:	10c4703a 	and	r2,r2,r3
 100798c:	10000f26 	beq	r2,zero,10079cc <memcmp+0x50>
 1007990:	31ffffc4 	addi	r7,r6,-1
 1007994:	3000061e 	bne	r6,zero,10079b0 <memcmp+0x34>
 1007998:	00000a06 	br	10079c4 <memcmp+0x48>
 100799c:	39ffffc4 	addi	r7,r7,-1
 10079a0:	00bfffc4 	movi	r2,-1
 10079a4:	21000044 	addi	r4,r4,1
 10079a8:	29400044 	addi	r5,r5,1
 10079ac:	38800526 	beq	r7,r2,10079c4 <memcmp+0x48>
 10079b0:	20c00003 	ldbu	r3,0(r4)
 10079b4:	28800003 	ldbu	r2,0(r5)
 10079b8:	18bff826 	beq	r3,r2,100799c <memcmp+0x20>
 10079bc:	1885c83a 	sub	r2,r3,r2
 10079c0:	f800283a 	ret
 10079c4:	0005883a 	mov	r2,zero
 10079c8:	f800283a 	ret
 10079cc:	180f883a 	mov	r7,r3
 10079d0:	20c00017 	ldw	r3,0(r4)
 10079d4:	28800017 	ldw	r2,0(r5)
 10079d8:	18bfed1e 	bne	r3,r2,1007990 <memcmp+0x14>
 10079dc:	31bfff04 	addi	r6,r6,-4
 10079e0:	21000104 	addi	r4,r4,4
 10079e4:	29400104 	addi	r5,r5,4
 10079e8:	39bff936 	bltu	r7,r6,10079d0 <memcmp+0x54>
 10079ec:	003fe806 	br	1007990 <memcmp+0x14>

010079f0 <strcmp>:
 10079f0:	2144b03a 	or	r2,r4,r5
 10079f4:	108000cc 	andi	r2,r2,3
 10079f8:	10001d1e 	bne	r2,zero,1007a70 <strcmp+0x80>
 10079fc:	200f883a 	mov	r7,r4
 1007a00:	28800017 	ldw	r2,0(r5)
 1007a04:	21000017 	ldw	r4,0(r4)
 1007a08:	280d883a 	mov	r6,r5
 1007a0c:	2080161e 	bne	r4,r2,1007a68 <strcmp+0x78>
 1007a10:	023fbff4 	movhi	r8,65279
 1007a14:	423fbfc4 	addi	r8,r8,-257
 1007a18:	2207883a 	add	r3,r4,r8
 1007a1c:	01602074 	movhi	r5,32897
 1007a20:	29602004 	addi	r5,r5,-32640
 1007a24:	1946703a 	and	r3,r3,r5
 1007a28:	0104303a 	nor	r2,zero,r4
 1007a2c:	10c4703a 	and	r2,r2,r3
 1007a30:	10001c1e 	bne	r2,zero,1007aa4 <strcmp+0xb4>
 1007a34:	4013883a 	mov	r9,r8
 1007a38:	2811883a 	mov	r8,r5
 1007a3c:	00000106 	br	1007a44 <strcmp+0x54>
 1007a40:	1800181e 	bne	r3,zero,1007aa4 <strcmp+0xb4>
 1007a44:	39c00104 	addi	r7,r7,4
 1007a48:	39000017 	ldw	r4,0(r7)
 1007a4c:	31800104 	addi	r6,r6,4
 1007a50:	31400017 	ldw	r5,0(r6)
 1007a54:	2245883a 	add	r2,r4,r9
 1007a58:	1204703a 	and	r2,r2,r8
 1007a5c:	0106303a 	nor	r3,zero,r4
 1007a60:	1886703a 	and	r3,r3,r2
 1007a64:	217ff626 	beq	r4,r5,1007a40 <strcmp+0x50>
 1007a68:	3809883a 	mov	r4,r7
 1007a6c:	300b883a 	mov	r5,r6
 1007a70:	20c00007 	ldb	r3,0(r4)
 1007a74:	1800051e 	bne	r3,zero,1007a8c <strcmp+0x9c>
 1007a78:	00000606 	br	1007a94 <strcmp+0xa4>
 1007a7c:	21000044 	addi	r4,r4,1
 1007a80:	20c00007 	ldb	r3,0(r4)
 1007a84:	29400044 	addi	r5,r5,1
 1007a88:	18000226 	beq	r3,zero,1007a94 <strcmp+0xa4>
 1007a8c:	28800007 	ldb	r2,0(r5)
 1007a90:	18bffa26 	beq	r3,r2,1007a7c <strcmp+0x8c>
 1007a94:	20c00003 	ldbu	r3,0(r4)
 1007a98:	28800003 	ldbu	r2,0(r5)
 1007a9c:	1885c83a 	sub	r2,r3,r2
 1007aa0:	f800283a 	ret
 1007aa4:	0005883a 	mov	r2,zero
 1007aa8:	f800283a 	ret

01007aac <__register_exitproc>:
 1007aac:	defffa04 	addi	sp,sp,-24
 1007ab0:	00804074 	movhi	r2,257
 1007ab4:	10a6bc04 	addi	r2,r2,-25872
 1007ab8:	dc000015 	stw	r16,0(sp)
 1007abc:	14000017 	ldw	r16,0(r2)
 1007ac0:	dd000415 	stw	r20,16(sp)
 1007ac4:	2829883a 	mov	r20,r5
 1007ac8:	81405217 	ldw	r5,328(r16)
 1007acc:	dcc00315 	stw	r19,12(sp)
 1007ad0:	dc800215 	stw	r18,8(sp)
 1007ad4:	dc400115 	stw	r17,4(sp)
 1007ad8:	dfc00515 	stw	ra,20(sp)
 1007adc:	2023883a 	mov	r17,r4
 1007ae0:	3027883a 	mov	r19,r6
 1007ae4:	3825883a 	mov	r18,r7
 1007ae8:	28002526 	beq	r5,zero,1007b80 <__register_exitproc+0xd4>
 1007aec:	29000117 	ldw	r4,4(r5)
 1007af0:	008007c4 	movi	r2,31
 1007af4:	11002716 	blt	r2,r4,1007b94 <__register_exitproc+0xe8>
 1007af8:	8800101e 	bne	r17,zero,1007b3c <__register_exitproc+0x90>
 1007afc:	2105883a 	add	r2,r4,r4
 1007b00:	1085883a 	add	r2,r2,r2
 1007b04:	20c00044 	addi	r3,r4,1
 1007b08:	1145883a 	add	r2,r2,r5
 1007b0c:	0009883a 	mov	r4,zero
 1007b10:	15000215 	stw	r20,8(r2)
 1007b14:	28c00115 	stw	r3,4(r5)
 1007b18:	2005883a 	mov	r2,r4
 1007b1c:	dfc00517 	ldw	ra,20(sp)
 1007b20:	dd000417 	ldw	r20,16(sp)
 1007b24:	dcc00317 	ldw	r19,12(sp)
 1007b28:	dc800217 	ldw	r18,8(sp)
 1007b2c:	dc400117 	ldw	r17,4(sp)
 1007b30:	dc000017 	ldw	r16,0(sp)
 1007b34:	dec00604 	addi	sp,sp,24
 1007b38:	f800283a 	ret
 1007b3c:	29802204 	addi	r6,r5,136
 1007b40:	00800044 	movi	r2,1
 1007b44:	110e983a 	sll	r7,r2,r4
 1007b48:	30c04017 	ldw	r3,256(r6)
 1007b4c:	2105883a 	add	r2,r4,r4
 1007b50:	1085883a 	add	r2,r2,r2
 1007b54:	1185883a 	add	r2,r2,r6
 1007b58:	19c6b03a 	or	r3,r3,r7
 1007b5c:	14802015 	stw	r18,128(r2)
 1007b60:	14c00015 	stw	r19,0(r2)
 1007b64:	00800084 	movi	r2,2
 1007b68:	30c04015 	stw	r3,256(r6)
 1007b6c:	88bfe31e 	bne	r17,r2,1007afc <__register_exitproc+0x50>
 1007b70:	30804117 	ldw	r2,260(r6)
 1007b74:	11c4b03a 	or	r2,r2,r7
 1007b78:	30804115 	stw	r2,260(r6)
 1007b7c:	003fdf06 	br	1007afc <__register_exitproc+0x50>
 1007b80:	00804074 	movhi	r2,257
 1007b84:	10ae0604 	addi	r2,r2,-18408
 1007b88:	100b883a 	mov	r5,r2
 1007b8c:	80805215 	stw	r2,328(r16)
 1007b90:	003fd606 	br	1007aec <__register_exitproc+0x40>
 1007b94:	00800034 	movhi	r2,0
 1007b98:	10800004 	addi	r2,r2,0
 1007b9c:	1000021e 	bne	r2,zero,1007ba8 <__register_exitproc+0xfc>
 1007ba0:	013fffc4 	movi	r4,-1
 1007ba4:	003fdc06 	br	1007b18 <__register_exitproc+0x6c>
 1007ba8:	01006404 	movi	r4,400
 1007bac:	103ee83a 	callr	r2
 1007bb0:	1007883a 	mov	r3,r2
 1007bb4:	103ffa26 	beq	r2,zero,1007ba0 <__register_exitproc+0xf4>
 1007bb8:	80805217 	ldw	r2,328(r16)
 1007bbc:	180b883a 	mov	r5,r3
 1007bc0:	18000115 	stw	zero,4(r3)
 1007bc4:	18800015 	stw	r2,0(r3)
 1007bc8:	80c05215 	stw	r3,328(r16)
 1007bcc:	18006215 	stw	zero,392(r3)
 1007bd0:	18006315 	stw	zero,396(r3)
 1007bd4:	0009883a 	mov	r4,zero
 1007bd8:	883fc826 	beq	r17,zero,1007afc <__register_exitproc+0x50>
 1007bdc:	003fd706 	br	1007b3c <__register_exitproc+0x90>

01007be0 <register_fini>:
 1007be0:	f800283a 	ret

01007be4 <__call_exitprocs>:
 1007be4:	00804074 	movhi	r2,257
 1007be8:	10a6bc04 	addi	r2,r2,-25872
 1007bec:	10800017 	ldw	r2,0(r2)
 1007bf0:	defff304 	addi	sp,sp,-52
 1007bf4:	df000b15 	stw	fp,44(sp)
 1007bf8:	d8800115 	stw	r2,4(sp)
 1007bfc:	00800034 	movhi	r2,0
 1007c00:	10800004 	addi	r2,r2,0
 1007c04:	1005003a 	cmpeq	r2,r2,zero
 1007c08:	d8800215 	stw	r2,8(sp)
 1007c0c:	d8800117 	ldw	r2,4(sp)
 1007c10:	dd400815 	stw	r21,32(sp)
 1007c14:	dd000715 	stw	r20,28(sp)
 1007c18:	10805204 	addi	r2,r2,328
 1007c1c:	dfc00c15 	stw	ra,48(sp)
 1007c20:	ddc00a15 	stw	r23,40(sp)
 1007c24:	dd800915 	stw	r22,36(sp)
 1007c28:	dcc00615 	stw	r19,24(sp)
 1007c2c:	dc800515 	stw	r18,20(sp)
 1007c30:	dc400415 	stw	r17,16(sp)
 1007c34:	dc000315 	stw	r16,12(sp)
 1007c38:	282b883a 	mov	r21,r5
 1007c3c:	2039883a 	mov	fp,r4
 1007c40:	d8800015 	stw	r2,0(sp)
 1007c44:	2829003a 	cmpeq	r20,r5,zero
 1007c48:	d8800117 	ldw	r2,4(sp)
 1007c4c:	14405217 	ldw	r17,328(r2)
 1007c50:	88001026 	beq	r17,zero,1007c94 <__call_exitprocs+0xb0>
 1007c54:	ddc00017 	ldw	r23,0(sp)
 1007c58:	88800117 	ldw	r2,4(r17)
 1007c5c:	8c802204 	addi	r18,r17,136
 1007c60:	143fffc4 	addi	r16,r2,-1
 1007c64:	80000916 	blt	r16,zero,1007c8c <__call_exitprocs+0xa8>
 1007c68:	05bfffc4 	movi	r22,-1
 1007c6c:	a000151e 	bne	r20,zero,1007cc4 <__call_exitprocs+0xe0>
 1007c70:	8409883a 	add	r4,r16,r16
 1007c74:	2105883a 	add	r2,r4,r4
 1007c78:	1485883a 	add	r2,r2,r18
 1007c7c:	10c02017 	ldw	r3,128(r2)
 1007c80:	a8c01126 	beq	r21,r3,1007cc8 <__call_exitprocs+0xe4>
 1007c84:	843fffc4 	addi	r16,r16,-1
 1007c88:	85bff81e 	bne	r16,r22,1007c6c <__call_exitprocs+0x88>
 1007c8c:	d8800217 	ldw	r2,8(sp)
 1007c90:	10003126 	beq	r2,zero,1007d58 <__call_exitprocs+0x174>
 1007c94:	dfc00c17 	ldw	ra,48(sp)
 1007c98:	df000b17 	ldw	fp,44(sp)
 1007c9c:	ddc00a17 	ldw	r23,40(sp)
 1007ca0:	dd800917 	ldw	r22,36(sp)
 1007ca4:	dd400817 	ldw	r21,32(sp)
 1007ca8:	dd000717 	ldw	r20,28(sp)
 1007cac:	dcc00617 	ldw	r19,24(sp)
 1007cb0:	dc800517 	ldw	r18,20(sp)
 1007cb4:	dc400417 	ldw	r17,16(sp)
 1007cb8:	dc000317 	ldw	r16,12(sp)
 1007cbc:	dec00d04 	addi	sp,sp,52
 1007cc0:	f800283a 	ret
 1007cc4:	8409883a 	add	r4,r16,r16
 1007cc8:	88c00117 	ldw	r3,4(r17)
 1007ccc:	2105883a 	add	r2,r4,r4
 1007cd0:	1445883a 	add	r2,r2,r17
 1007cd4:	18ffffc4 	addi	r3,r3,-1
 1007cd8:	11800217 	ldw	r6,8(r2)
 1007cdc:	1c001526 	beq	r3,r16,1007d34 <__call_exitprocs+0x150>
 1007ce0:	10000215 	stw	zero,8(r2)
 1007ce4:	303fe726 	beq	r6,zero,1007c84 <__call_exitprocs+0xa0>
 1007ce8:	00c00044 	movi	r3,1
 1007cec:	1c06983a 	sll	r3,r3,r16
 1007cf0:	90804017 	ldw	r2,256(r18)
 1007cf4:	8cc00117 	ldw	r19,4(r17)
 1007cf8:	1884703a 	and	r2,r3,r2
 1007cfc:	10001426 	beq	r2,zero,1007d50 <__call_exitprocs+0x16c>
 1007d00:	90804117 	ldw	r2,260(r18)
 1007d04:	1884703a 	and	r2,r3,r2
 1007d08:	10000c1e 	bne	r2,zero,1007d3c <__call_exitprocs+0x158>
 1007d0c:	2105883a 	add	r2,r4,r4
 1007d10:	1485883a 	add	r2,r2,r18
 1007d14:	11400017 	ldw	r5,0(r2)
 1007d18:	e009883a 	mov	r4,fp
 1007d1c:	303ee83a 	callr	r6
 1007d20:	88800117 	ldw	r2,4(r17)
 1007d24:	98bfc81e 	bne	r19,r2,1007c48 <__call_exitprocs+0x64>
 1007d28:	b8800017 	ldw	r2,0(r23)
 1007d2c:	147fd526 	beq	r2,r17,1007c84 <__call_exitprocs+0xa0>
 1007d30:	003fc506 	br	1007c48 <__call_exitprocs+0x64>
 1007d34:	8c000115 	stw	r16,4(r17)
 1007d38:	003fea06 	br	1007ce4 <__call_exitprocs+0x100>
 1007d3c:	2105883a 	add	r2,r4,r4
 1007d40:	1485883a 	add	r2,r2,r18
 1007d44:	11000017 	ldw	r4,0(r2)
 1007d48:	303ee83a 	callr	r6
 1007d4c:	003ff406 	br	1007d20 <__call_exitprocs+0x13c>
 1007d50:	303ee83a 	callr	r6
 1007d54:	003ff206 	br	1007d20 <__call_exitprocs+0x13c>
 1007d58:	88800117 	ldw	r2,4(r17)
 1007d5c:	1000081e 	bne	r2,zero,1007d80 <__call_exitprocs+0x19c>
 1007d60:	89000017 	ldw	r4,0(r17)
 1007d64:	20000726 	beq	r4,zero,1007d84 <__call_exitprocs+0x1a0>
 1007d68:	b9000015 	stw	r4,0(r23)
 1007d6c:	8809883a 	mov	r4,r17
 1007d70:	00000000 	call	0 <__alt_mem_onchip>
 1007d74:	bc400017 	ldw	r17,0(r23)
 1007d78:	883fb71e 	bne	r17,zero,1007c58 <__call_exitprocs+0x74>
 1007d7c:	003fc506 	br	1007c94 <__call_exitprocs+0xb0>
 1007d80:	89000017 	ldw	r4,0(r17)
 1007d84:	882f883a 	mov	r23,r17
 1007d88:	2023883a 	mov	r17,r4
 1007d8c:	883fb21e 	bne	r17,zero,1007c58 <__call_exitprocs+0x74>
 1007d90:	003fc006 	br	1007c94 <__call_exitprocs+0xb0>

01007d94 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 1007d94:	defffd04 	addi	sp,sp,-12
 1007d98:	df000215 	stw	fp,8(sp)
 1007d9c:	df000204 	addi	fp,sp,8
 1007da0:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 1007da4:	e0bfff17 	ldw	r2,-4(fp)
 1007da8:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 1007dac:	e0bffe17 	ldw	r2,-8(fp)
 1007db0:	1005003a 	cmpeq	r2,r2,zero
 1007db4:	1000021e 	bne	r2,zero,1007dc0 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 1007db8:	002af070 	cmpltui	zero,zero,43969
 1007dbc:	00000106 	br	1007dc4 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 1007dc0:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 1007dc4:	e037883a 	mov	sp,fp
 1007dc8:	df000017 	ldw	fp,0(sp)
 1007dcc:	dec00104 	addi	sp,sp,4
 1007dd0:	f800283a 	ret

01007dd4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 1007dd4:	defffd04 	addi	sp,sp,-12
 1007dd8:	dfc00215 	stw	ra,8(sp)
 1007ddc:	df000115 	stw	fp,4(sp)
 1007de0:	df000104 	addi	fp,sp,4
 1007de4:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 1007de8:	e13fff17 	ldw	r4,-4(fp)
 1007dec:	1007d940 	call	1007d94 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 1007df0:	003fff06 	br	1007df0 <_exit+0x1c>
 1007df4:	01007be0 	cmpeqi	r4,zero,495
