
Module1Software.elf:     file format elf32-littlenios2
Module1Software.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x0001fc7c memsz 0x0001fc7c flags r-x
    LOAD off    0x00020c9c vaddr 0x0101fc9c paddr 0x01021b4c align 2**12
         filesz 0x00001eb0 memsz 0x00001eb0 flags rw-
    LOAD off    0x000239fc vaddr 0x010239fc paddr 0x010239fc align 2**12
         filesz 0x00000000 memsz 0x000009a4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001e9e4  010001b8  010001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001100  0101eb9c  0101eb9c  0001fb9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001eb0  0101fc9c  01021b4c  00020c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000009a4  010239fc  010239fc  000239fc  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00022b4c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001498  00000000  00000000  00022b78  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00002af4  00000000  00000000  00024010  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0003e9ca  00000000  00000000  00026b04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000cc9e  00000000  00000000  000654ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00024502  00000000  00000000  0007216c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00003178  00000000  00000000  00096670  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003b49  00000000  00000000  000997e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00016100  00000000  00000000  0009d331  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  000b3434  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000c10  00000000  00000000  000b3498  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000b9595  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000b9598  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000b95a4  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000b95a5  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  000b95a6  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  000b95aa  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  000b95ae  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000c  00000000  00000000  000b95b2  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000031  00000000  00000000  000b95be  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     000a2317  00000000  00000000  000b95ef  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010001b8 l    d  .text	00000000 .text
0101eb9c l    d  .rodata	00000000 .rodata
0101fc9c l    d  .rwdata	00000000 .rwdata
010239fc l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
01000200 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 game.c
00000000 l    df *ABS*	00000000 graphics.c
00000000 l    df *ABS*	00000000 hardware_init.c
00000000 l    df *ABS*	00000000 keyboard.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 player.c
00000000 l    df *ABS*	00000000 setup_graphics.c
00000000 l    df *ABS*	00000000 s_cos.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
0101f13c l     O .rodata	00000108 two_over_pi
0101f0bc l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
0101f244 l     O .rodata	00000010 init_jk
0101f254 l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 dp-bit.c
01004724 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
01005634 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 scanf.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 vfprintf.c
01006964 l     F .text	00000058 __sprint_r
0101f41a l     O .rodata	00000010 blanks.3452
0101f40a l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 vfscanf.c
0101f432 l     O .rodata	00000022 basefix.3357
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 ctype_.c
0101f555 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
0100a148 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0100bb44 l     F .text	00000058 std
0100bc50 l     F .text	00000008 __fp_lock
0100bc58 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 impure.c
010200a4 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
01021b20 l     O .rwdata	00000004 charset
0101f6fc l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0101f844 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
0100e93c l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
0100ec98 l     F .text	00000048 match
010204c4 l     O .rwdata	00000014 fpi.1950
0101f860 l     O .rodata	00000028 tinytens
010204b0 l     O .rwdata	00000014 fpinan.1986
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
01011390 l     F .text	00000024 htinit
0101141c l     F .text	000000b0 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
01011c84 l     F .text	0000004c L_shift
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
01013520 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
01013580 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
01013680 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_isatty.c
010139bc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
01013a9c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
01013bf8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
01013e24 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
01021b3c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
01014294 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
01020680 l     O .rwdata	00001060 JTAG
010216e0 l     O .rwdata	00000030 audio_0
01021710 l     O .rwdata	0000002c character_lcd_0
0102173c l     O .rwdata	00000038 ps2_0
01021774 l     O .rwdata	00000048 video_character_buffer_with_dma_0
010217bc l     O .rwdata	00000054 video_pixel_buffer_dma
01021810 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
0101468c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 Altera_UP_SD_Card_Avalon_Interface.c
0101f984 l     O .rodata	00000016 __func__.4813
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
01018ec8 l     F .text	0000022c altera_avalon_jtag_uart_irq
010190f4 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 altera_up_ps2_keyboard.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0101c588 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0101c774 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0101ca70 l     F .text	000000dc alt_file_locked
0101ccd4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0101d33c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 vfprintf.c
0101d858 l     F .text	00000058 __sprint_r
0101fc8c l     O .rodata	00000010 blanks.3391
0101fc7c l     O .rodata	00000010 zeroes.3392
00000000 l    df *ABS*	00000000 alt_exit.c
0101e978 l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_kill.c
0101eb38 l     F .text	00000060 alt_get_errno
01023a48 g     O .bss	00000004 aux_status_register
0100d59c g     F .text	00000094 _mprec_log10
01000204 g     F .text	00000020 getVelocityInput
0100d688 g     F .text	00000088 __any_on
01011f18 g     F .text	00000070 _isatty_r
0101f81c g     O .rodata	00000028 __mprec_tinytens
01013c58 g     F .text	0000006c alt_main
0101d160 g     F .text	0000008c strcpy
0101b310 g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
0100658c g     F .text	000000a0 _puts_r
01024110 g     O .bss	00000100 alt_irq
01019eec g     F .text	00000058 alt_up_ps2_disable_read_interrupt
010042e4 g     F .text	00000018 fabs
01011f88 g     F .text	00000078 _lseek_r
01021b4c g       *ABS*	00000000 __flash_rwdata_start
01001d6c g     F .text	00000140 draw_power_bar
010197ec g     F .text	00000034 alt_up_character_lcd_send_cmd
01005244 g     F .text	00000088 __eqdf2
01014a74 g     F .text	000001b0 Check_for_Master_Boot_Record
0100ca9c g     F .text	00000074 _gettimeofday_r
010243a0 g       *ABS*	00000000 __alt_heap_start
01018944 g     F .text	000001f8 alt_up_sd_card_fclose
0101d7e4 g     F .text	00000074 _kill_r
01006514 g     F .text	00000044 printf
01000de0 g     F .text	00000060 initiate_sd_card
0101d724 g     F .text	000000a0 _signal_r
01000d78 g     F .text	00000068 initiate_char_buffer
0100ea98 g     F .text	00000068 __sseek
0100bbac g     F .text	000000a4 __sinit
0101a534 g     F .text	00000114 alt_up_char_buffer_string
01019d04 g     F .text	00000034 read_CE_bit
0100cb60 g     F .text	00000084 _setlocale_r
0100bcac g     F .text	00000068 __sfmoreglue
01011040 g     F .text	0000001c ungetc
01013ce4 g     F .text	00000020 __malloc_unlock
0101a098 g     F .text	000000b0 alt_up_ps2_read_data_byte_timeout
0100ece0 g     F .text	000014e4 _strtod_r
01023a6c g     O .bss	00000004 current_sector_modified
0101a464 g     F .text	000000d0 alt_up_char_buffer_draw
01018c38 g     F .text	00000090 Read_Sector_Data_Attempt_CRC
01023a78 g     O .bss	00000004 altera_avalon_timer_ts_freq
0100d018 g     F .text	000000e0 memmove
0102183c g     O .rwdata	00000198 key_table
0100bc9c g     F .text	00000010 _cleanup
0100d710 g     F .text	000000bc _Balloc
010174f0 g     F .text	000000c8 alt_up_sd_card_is_Present
01000ea8 g     F .text	00000094 system_init
0101478c g     F .text	00000050 Save_Modified_Sector
0101a6e4 g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
01005354 g     F .text	00000088 __gtdf2
010014b0 g     F .text	0000008c makePlayer
00000000  w      *UND*	00000000 __errno
01019770 g     F .text	0000007c get_DDRAM_addr
010004b4 g     F .text	00000668 drawCannonBall
0101a6a4 g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
01000370 g     F .text	00000060 drawBox
01000000 g     F .entry	0000001c __reset
01023a64 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
0101bc10 g     F .text	00000078 get_multi_byte_make_code_index
01000020 g       *ABS*	00000000 __flash_exceptions_start
0101131c g     F .text	00000074 _fstat_r
01023a0c g     O .bss	00000004 errno
010042fc g     F .text	00000224 floor
01009f0c g     F .text	00000024 __svfscanf
01013298 g     F .text	0000002c __make_fp
0101c008 g     F .text	00000060 set_keyboard_rate
01023a30 g     O .bss	00000004 alt_argv
01029b08 g       *ABS*	00000000 _gp
01014144 g     F .text	00000030 usleep
01017ab0 g     F .text	000003a8 alt_up_sd_card_fopen
0101762c g     F .text	000000d4 alt_up_sd_card_find_first
0100153c g     F .text	0000003c damagePlayerHealth
01023a58 g     O .bss	00000004 command_argument_register
0101a884 g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
0101e9d8 g     F .text	00000020 getpid
0101c170 g     F .text	00000080 reset_keyboard
01020500 g     O .rwdata	00000180 alt_fd_list
010023fc g     F .text	00000828 __ieee754_rem_pio2
01000ce8 g     F .text	00000090 initiate_pixel_buffer_dma
01016d20 g     F .text	0000012c find_first_empty_record_in_root_directory
0101c6b0 g     F .text	00000094 alt_find_dev
0100cf78 g     F .text	000000a0 memcpy
01011cd0 g     F .text	00000248 __hexnan
01019984 g     F .text	0000004c alt_up_character_lcd_write_fd
0101a648 g     F .text	0000005c alt_up_char_buffer_clear
0100bc90 g     F .text	0000000c _cleanup_r
01005464 g     F .text	000000f8 __floatsidf
0101c838 g     F .text	00000078 alt_io_redirect
01012e10 g     F .text	00000088 __ltdf2
0101eb9c g       *ABS*	00000000 __DTOR_END__
0100662c g     F .text	00000014 puts
0100ce14 g     F .text	00000040 mbrtowc
01016930 g     F .text	000001a4 find_first_empty_cluster
01009f30 g     F .text	00000068 _vfscanf_r
0100d4ec g     F .text	000000b0 __ratio
0101742c g     F .text	000000c4 alt_up_sd_card_open_dev
0101e954 g     F .text	00000024 __vfiprintf_internal
0101a934 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
0101930c g     F .text	00000224 altera_avalon_jtag_uart_read
01005dc0 g     F .text	00000014 malloc
01006558 g     F .text	00000034 _printf_r
01005770 g     F .text	00000008 __udivsi3
010138fc g     F .text	000000c0 isatty
0101d508 g     F .text	000000cc _raise_r
0100cb10 g     F .text	0000002c iswspace
0101cfbc g     F .text	00000064 __assert_func
0101f72c g     O .rodata	000000c8 __mprec_tens
0101afc0 g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
0100cb3c g     F .text	00000008 __locale_charset
01002c24 g     F .text	0000052c __kernel_cos
01023a1c g     O .bss	00000008 alt_timezone
01012078 g     F .text	000000a4 __fixunsdfsi
0101cf2c g     F .text	00000090 alt_icache_flush
01023a00 g     O .bss	00000004 __malloc_top_pad
0101d7e0 g     F .text	00000004 _getpid_r
01010ab4 g     F .text	00000024 strtoul
01021b1c g     O .rwdata	00000004 __mb_cur_max
0100cb44 g     F .text	0000000c _localeconv_r
01010ad8 g     F .text	000002f0 _strtoull_r
0100de08 g     F .text	0000003c __i2b
0100c480 g     F .text	0000049c __sfvwrite_r
0101d65c g     F .text	000000b4 __sigtramp_r
01015c0c g     F .text	000000c0 get_dir_divider_location
010066d4 g     F .text	00000070 _sbrk_r
0101b7a4 g     F .text	000000d0 helper_plot_pixel
010158ac g     F .text	000000d0 filename_to_upper_case
01017e58 g     F .text	00000090 alt_up_sd_card_set_attributes
01014c24 g     F .text	00000284 Read_File_Record_At_Offset
01012000 g     F .text	00000078 _read_r
010204a4 g     O .rwdata	0000000c __lc_ctype
01021b34 g     O .rwdata	00000004 alt_max_fd
01005bac g     F .text	00000138 __unpack_d
010164cc g     F .text	00000464 find_file_in_directory
010111f8 g     F .text	00000110 _fclose_r
01002084 g     F .text	000000a4 draw_ball
01019d38 g     F .text	00000034 read_num_bytes_available
0100bb10 g     F .text	00000034 fflush
010219d4 g     O .rwdata	00000066 ascii_codes
01023a04 g     O .bss	00000004 __malloc_max_sbrked_mem
0101c8b0 g     F .text	000001c0 alt_irq_register
01019ca0 g     F .text	00000034 read_RI_bit
01000264 g     F .text	000000a0 formatColor
01003fcc g     F .text	00000318 __kernel_sin
010175b8 g     F .text	00000074 alt_up_sd_card_is_FAT16
01004bb4 g     F .text	00000074 __adddf3
01012ca8 g     F .text	00000078 __nesf2
0100d3cc g     F .text	00000120 __b2d
0101a968 g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
010126f8 g     F .text	000005b0 __umoddi3
01013b08 g     F .text	000000f0 lseek
01021b18 g     O .rwdata	00000004 _global_impure_ptr
01015fb8 g     F .text	00000514 get_home_directory_cluster_for_file
0100e184 g     F .text	000005f4 _realloc_r
010243a0 g       *ABS*	00000000 __bss_end
0101aacc g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
01014038 g     F .text	0000010c alt_tick
01023aa8 g     O .bss	00000100 __hexdig
0101211c g     F .text	000005dc __udivdi3
0101f7f4 g     O .rodata	00000028 __mprec_bigtens
0100e064 g     F .text	00000120 __s2b
0101d4f0 g     F .text	00000018 abort
01012f94 g     F .text	00000194 __floatunsidf
0100d2ec g     F .text	00000060 __mcmp
01023a70 g     O .bss	00000004 current_sector_index
01019da0 g     F .text	0000002c read_data_byte
01021b10 g     O .rwdata	00000004 __ctype_ptr
0100bc78 g     F .text	00000018 __fp_lock_all
01013fa0 g     F .text	00000098 alt_alarm_stop
01010548 g     F .text	00000024 strtol
01019cd4 g     F .text	00000030 read_RE_bit
01014990 g     F .text	000000e4 mark_cluster
01023a7c g     O .bss	00000004 alt_irq_active
010000ec g     F .exceptions	000000cc alt_irq_handler
010204d8 g     O .rwdata	00000028 alt_dev_null
01003150 g     F .text	00000e7c __kernel_rem_pio2
01016e4c g     F .text	000001b8 convert_filename_to_name_extension
01013128 g     F .text	000000c8 __unpack_f
01019c6c g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
010239fc g     O .bss	00000004 background_colour
01019f44 g     F .text	00000078 alt_up_ps2_write_data_byte
0101c490 g     F .text	00000044 alt_dcache_flush_all
0100d1b8 g     F .text	00000070 __hi0bits
0101b6e0 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
01023a44 g     O .bss	00000004 is_sd_card_formated_as_FAT16
0100555c g     F .text	000000d8 __fixdfsi
01016ad4 g     F .text	0000024c find_first_empty_record_in_a_subdirectory
010102e8 g     F .text	0000001c strtod
01021b4c g       *ABS*	00000000 __ram_rwdata_end
01021aa0 g     O .rwdata	00000066 multi_byte_make_code
01021b2c g     O .rwdata	00000008 alt_dev_list
01014174 g     F .text	00000120 write
01023a68 g     O .bss	00000004 device_pointer
01012d20 g     F .text	00000078 __gtsf2
0101b874 g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
0101fc9c g       *ABS*	00000000 __ram_rodata_end
010135ac g     F .text	000000d4 fstat
010015d8 g     F .text	00000468 main_show
0101e9f8 g     F .text	00000140 kill
01012e98 g     F .text	00000088 __ledf2
0100df44 g     F .text	00000120 __pow5mult
0101d8b0 g     F .text	000010a4 ___vfiprintf_internal_r
01023a10 g     O .bss	00000004 __nlocale_changed
01005778 g     F .text	00000008 __umodsi3
01006744 g     F .text	00000034 _scanf_r
010243a0 g       *ABS*	00000000 end
0101a2b8 g     F .text	000000a8 alt_up_ps2_write_fd
010132c4 g     F .text	00000160 __pack_f
01001d08 g     F .text	00000064 clear_last_line
0101a3a0 g     F .text	00000084 alt_up_char_buffer_init
01018e10 g     F .text	000000b8 altera_avalon_jtag_uart_init
0101eb98 g       *ABS*	00000000 __CTOR_LIST__
01800000 g       *ABS*	00000000 __alt_stack_pointer
01005818 g     F .text	00000080 __clzsi2
01019530 g     F .text	00000240 altera_avalon_jtag_uart_write
01002128 g     F .text	00000168 cos
0100bb9c g     F .text	00000004 __sfp_lock_acquire
0100ce94 g     F .text	000000e4 memchr
01019894 g     F .text	00000078 alt_up_character_lcd_write
010069bc g     F .text	00001eac ___vfprintf_internal_r
01006834 g     F .text	00000060 _sprintf_r
0100c16c g     F .text	00000314 _free_r
01001a40 g     F .text	000002c8 show_angle
0101d340 g     F .text	000001b0 __call_exitprocs
0101c068 g     F .text	00000108 translate_make_code
01023a14 g     O .bss	00000004 __mlocale_changed
01021b0c g     O .rwdata	00000004 __malloc_sbrk_base
010001b8 g     F .text	0000004c _start
01023a38 g     O .bss	00000004 _alt_tick_rate
0101056c g     F .text	00000318 _strtoll_r
01002290 g     F .text	0000016c sin
0100665c g     F .text	00000078 rand
0100dad4 g     F .text	0000014c __lshift
01023a3c g     O .bss	00000004 _alt_nticks
0101d7c4 g     F .text	0000001c signal
01013d04 g     F .text	00000120 read
01014328 g     F .text	00000364 alt_sys_init
01019af8 g     F .text	000000b0 alt_up_character_lcd_shift_display
0101d208 g     F .text	00000134 __register_exitproc
0101a1c4 g     F .text	00000058 alt_up_ps2_clear_fifo
0100dc20 g     F .text	000001e8 __multiply
01019ba8 g     F .text	00000090 alt_up_character_lcd_erase_pos
010191a4 g     F .text	00000074 altera_avalon_jtag_uart_close
0101fc9c g       *ABS*	00000000 __ram_rwdata_start
0101eb9c g       *ABS*	00000000 __ram_rodata_start
01023a80 g     O .bss	00000028 __malloc_current_mallinfo
0100d7cc g     F .text	0000017c __d2b
01023a40 g     O .bss	00000004 initialized
01018cc8 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
01010884 g     F .text	00000230 _strtoul_r
0101ce74 g     F .text	000000b8 alt_get_fd
01023ba8 g     O .bss	00000014 search_data
0101c344 g     F .text	0000014c alt_busy_sleep
01005ce4 g     F .text	000000c8 __fpcmp_parts_d
01011188 g     F .text	00000070 _close_r
0101bf5c g     F .text	000000ac decode_scancode
0101d0ec g     F .text	00000074 memcmp
01018d78 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
010243a0 g       *ABS*	00000000 __alt_stack_base
01018dc0 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
01002000 g     F .text	00000084 draw_box
010015a8 g     F .text	00000030 setPlayerVelocity
0100a00c g     F .text	0000013c __swsetup_r
01004fec g     F .text	00000258 __divdf3
0100bd14 g     F .text	000000f0 __sfp
01023bbc g     O .bss	00000054 boot_sector_data
0100d630 g     F .text	00000058 __copybits
0101fc9c g     O .rwdata	00000408 __malloc_av_
0100bba8 g     F .text	00000004 __sinit_lock_release
01004c28 g     F .text	000003c4 __muldf3
0100eb7c g     F .text	00000060 __sread
0100c000 g     F .text	00000040 fread
0101cd54 g     F .text	00000120 alt_find_file
0101c4d4 g     F .text	000000b4 alt_dev_llist_insert
01013cc4 g     F .text	00000020 __malloc_lock
01013ee4 g     F .text	000000bc sbrk
0100b914 g     F .text	000001fc _fflush_r
010110d4 g     F .text	000000b4 _calloc_r
010136e0 g     F .text	0000021c gettimeofday
010239fc g       *ABS*	00000000 __bss_start
0100d0f8 g     F .text	00000098 memset
01001180 g     F .text	00000330 main
0101bc88 g     F .text	00000078 get_single_byte_make_code_index
01023a34 g     O .bss	00000004 alt_envp
01023a08 g     O .bss	00000004 __malloc_max_total_mem
0101a8dc g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
0101a424 g     F .text	00000040 alt_up_char_buffer_open_dev
01018d20 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
01006640 g     F .text	0000001c srand
01012d98 g     F .text	00000078 __ltsf2
01017ee8 g     F .text	0000008c alt_up_sd_card_get_attributes
0100be04 g     F .text	000001fc _fread_r
010146c4 g     F .text	000000c8 Write_Sector_Data
01018308 g     F .text	0000063c alt_up_sd_card_write
01019a48 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
0100ea90 g     F .text	00000008 __sclose
01800000 g       *ABS*	00000000 __alt_heap_limit
01011308 g     F .text	00000014 fclose
0101a148 g     F .text	0000007c alt_up_ps2_read_data_byte
01010304 g     F .text	00000244 _strtol_r
01012f20 g     F .text	00000074 __truncdfsf2
01024210 g     O .bss	00000190 _atexit0
0100a360 g     F .text	000015b4 _dtoa_r
01005dd4 g     F .text	00000740 _malloc_r
01006908 g     F .text	0000005c time
01021b38 g     O .rwdata	00000004 alt_errno
0101d0c4 g     F .text	00000028 _fiprintf_r
01010dc8 g     F .text	000000dc __submore
0101d64c g     F .text	00000010 _init_signal
0100c9e4 g     F .text	000000b8 _fwalk
0100ce54 g     F .text	00000040 _mbtowc_r
0101a360 g     F .text	00000040 alt_up_ps2_open_dev
010056b0 g     F .text	00000060 __divsi3
0101f294 g     O .rodata	00000014 __thenan_df
01019854 g     F .text	00000040 alt_up_character_lcd_open_dev
0100c040 g     F .text	0000012c _malloc_trim_r
01019e98 g     F .text	00000054 alt_up_ps2_enable_read_interrupt
0101eb9c g       *ABS*	00000000 __CTOR_END__
01000224 g     F .text	00000020 getAngleInput
01023a4c g     O .bss	00000004 status_register
01019820 g     F .text	00000034 alt_up_character_lcd_init
0100ebdc g     F .text	000000bc strcmp
01023a54 g     O .bss	00000004 command_register
0101eb9c g       *ABS*	00000000 __flash_rodata_start
0101eb9c g       *ABS*	00000000 __DTOR_LIST__
01004700 g     F .text	00000024 copysign
01000e40 g     F .text	00000068 initiate_ps2
010052cc g     F .text	00000088 __nedf2
010142f4 g     F .text	00000034 alt_irq_init
010003d0 g     F .text	00000060 drawLine
01013e84 g     F .text	00000060 alt_release_fd
01001eac g     F .text	00000154 update_power
010148d8 g     F .text	000000b8 get_cluster_flag
01019d6c g     F .text	00000034 read_data_valid
010067c0 g     F .text	00000074 sprintf
01019c38 g     F .text	00000034 alt_up_character_lcd_cursor_off
0101f2a8 g     O .rodata	00000100 __clz_tab
01014ea8 g     F .text	000002b8 Write_File_Record_At_Offset
01023a18 g     O .bss	00000004 _PathLocale
010101c4 g     F .text	00000124 strtof
0101a02c g     F .text	0000006c alt_up_ps2_write_data_byte_with_ack
0101d034 g     F .text	00000014 atexit
0101105c g     F .text	00000078 _write_r
0100cbe4 g     F .text	0000001c setlocale
01006778 g     F .text	00000048 scanf
01015160 g     F .text	00000648 Check_for_DOS_FAT
01017004 g     F .text	000002d4 create_file
0100ea88 g     F .text	00000008 nanf
01021b14 g     O .rwdata	00000004 _impure_ptr
01023a50 g     O .bss	00000004 CSD_register_w0
01023a2c g     O .bss	00000004 alt_argc
01004520 g     F .text	000001e0 scalbn
0100cd94 g     F .text	00000080 _mbrtowc_r
01023a74 g     O .bss	00000004 altera_avalon_timer_ts_base
0101c64c g     F .text	00000064 _do_dtors
0100e778 g     F .text	000001c4 __srefill_r
01000020 g       .exceptions	00000000 alt_irq_entry
0100d34c g     F .text	00000080 __ulp
0100e958 g     F .text	00000040 __isinfd
0100bc60 g     F .text	00000018 __fp_unlock_all
01021b24 g     O .rwdata	00000008 alt_fs_list
0101597c g     F .text	00000290 check_file_name_for_FAT16_compliance
01023a5c g     O .bss	00000004 buffer_memory
01023a24 g     O .bss	00000008 alt_resettime
01000020 g       *ABS*	00000000 __ram_exceptions_start
0100cb50 g     F .text	00000010 localeconv
010113b4 g     F .text	00000068 __hexdig_init
01023a60 g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
01021b4c g       *ABS*	00000000 _edata
010243a0 g       *ABS*	00000000 _end
01000244 g     F .text	00000020 calculateResult
01023c10 g     O .bss	00000500 active_files
010001b8 g       *ABS*	00000000 __ram_exceptions_end
01009f98 g     F .text	00000074 vfscanf
010172d8 g     F .text	00000154 copy_file_record_name_to_string
01019218 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
010157a8 g     F .text	00000104 Look_for_FAT16
0100eb00 g     F .text	0000007c __swrite
01021b08 g     O .rwdata	00000004 __malloc_trim_threshold
0101cd34 g     F .text	00000020 altera_nios2_qsys_irq_init
00000000 g       *ABS*	00000000 __alt_mem_onchip
0101d048 g     F .text	00000038 exit
0101d080 g     F .text	00000044 fiprintf
0101d1ec g     F .text	0000001c _vfiprintf_r
01017700 g     F .text	000003b0 alt_up_sd_card_find_next
0100c91c g     F .text	000000c8 _fwalk_reent
01019dcc g     F .text	000000cc alt_up_ps2_init
0100d948 g     F .text	0000018c __mdiff
01000f3c g     F .text	00000244 getKeyboardInput
01005710 g     F .text	00000060 __modsi3
010147dc g     F .text	000000fc Read_Sector_Data
01800000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
0100bba0 g     F .text	00000004 __sfp_lock_release
01000000 g       *ABS*	00000000 __alt_mem_sdram
0101990c g     F .text	00000078 alt_up_character_lcd_string
0100e9c8 g     F .text	000000c0 __sccl
0101f454 g     O .rodata	00000101 _ctype_
010131f0 g     F .text	000000a8 __fpcmp_parts_f
0101e9b8 g     F .text	00000020 _exit
0100e998 g     F .text	00000030 __isnand
0101c1f0 g     F .text	00000154 alt_alarm_start
01005780 g     F .text	00000098 __muldi3
01018b3c g     F .text	000000fc Read_Sector_Data_CRC
01017f74 g     F .text	00000394 alt_up_sd_card_read
0101bd00 g     F .text	0000025c get_next_state
0100cc00 g     F .text	00000194 __smakebuf_r
01019fbc g     F .text	00000070 alt_up_ps2_wait_for_ack
01006894 g     F .text	00000074 strlen
0101d5e8 g     F .text	00000064 _init_signal_r
0101cb4c g     F .text	00000188 open
010053dc g     F .text	00000088 __gedf2
010114cc g     F .text	000007b8 __gethex
01000304 g     F .text	0000006c clearScreen
0101d020 g     F .text	00000014 __assert
0101c744 g     F .text	00000030 alt_icache_flush_all
010199d0 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
01021b48 g     O .rwdata	00000004 alt_priority_mask
01001578 g     F .text	00000030 setPlayerAngle
01008868 g     F .text	00000024 __vfprintf_internal
0101a21c g     F .text	0000009c alt_up_ps2_read_fd
01004b34 g     F .text	00000080 __subdf3
01021a3a g     O .rwdata	00000066 single_byte_make_code
0100d228 g     F .text	000000c4 __lo0bits
0100888c g     F .text	00001680 __svfscanf_r
01021b40 g     O .rwdata	00000008 alt_alarm_list
01010ea4 g     F .text	0000019c _ungetc_r
0101c5e8 g     F .text	00000064 _do_ctors
0101d710 g     F .text	00000014 __sigtramp
01013424 g     F .text	000000fc close
01000430 g     F .text	00000084 drawPlayers
01013a1c g     F .text	00000080 alt_load
01005898 g     F .text	00000314 __pack_d
01000b1c g     F .text	000001cc animateShooting
01015ccc g     F .text	000002ec match_file_record_to_name_ext
0101d5d4 g     F .text	00000014 raise
01005dac g     F .text	00000014 free
0100bba4 g     F .text	00000004 __sinit_lock_acquire
0100de44 g     F .text	00000100 __multadd
0100d190 g     F .text	00000028 _Bfree



Disassembly of section .entry:

01000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 1000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 100000c:	00bffd16 	blt	zero,r2,1000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000010:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000014:	08406e14 	ori	at,at,440
    jmp r1
 1000018:	0800683a 	jmp	at
 100001c:	00000000 	call	0 <__alt_mem_onchip>

Disassembly of section .exceptions:

01000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000ec0 	call	10000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000306 	br	1000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 100008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 100009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 10000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 10000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000e8:	ef80083a 	eret

010000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000ec:	defff904 	addi	sp,sp,-28
 10000f0:	dfc00615 	stw	ra,24(sp)
 10000f4:	df000515 	stw	fp,20(sp)
 10000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 10000fc:	0005313a 	rdctl	r2,ipending
 1000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 1000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 100010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000110:	00800044 	movi	r2,1
 1000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1000118:	e0ffff17 	ldw	r3,-4(fp)
 100011c:	e0bffe17 	ldw	r2,-8(fp)
 1000120:	1884703a 	and	r2,r3,r2
 1000124:	1005003a 	cmpeq	r2,r2,zero
 1000128:	1000171e 	bne	r2,zero,1000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 100012c:	e0bffd17 	ldw	r2,-12(fp)
 1000130:	00c040b4 	movhi	r3,258
 1000134:	18d04404 	addi	r3,r3,16656
 1000138:	100490fa 	slli	r2,r2,3
 100013c:	10c5883a 	add	r2,r2,r3
 1000140:	11800017 	ldw	r6,0(r2)
 1000144:	e0bffd17 	ldw	r2,-12(fp)
 1000148:	00c040b4 	movhi	r3,258
 100014c:	18d04404 	addi	r3,r3,16656
 1000150:	100490fa 	slli	r2,r2,3
 1000154:	10c5883a 	add	r2,r2,r3
 1000158:	10800104 	addi	r2,r2,4
 100015c:	11000017 	ldw	r4,0(r2)
 1000160:	e17ffd17 	ldw	r5,-12(fp)
 1000164:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000168:	0005313a 	rdctl	r2,ipending
 100016c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 1000170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1000174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1000178:	e0bfff17 	ldw	r2,-4(fp)
 100017c:	1004c03a 	cmpne	r2,r2,zero
 1000180:	103fe21e 	bne	r2,zero,100010c <alt_irq_handler+0x20>
 1000184:	00000706 	br	10001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1000188:	e0bffe17 	ldw	r2,-8(fp)
 100018c:	1085883a 	add	r2,r2,r2
 1000190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1000194:	e0bffd17 	ldw	r2,-12(fp)
 1000198:	10800044 	addi	r2,r2,1
 100019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 10001a0:	003fdd06 	br	1000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 10001a4:	e037883a 	mov	sp,fp
 10001a8:	dfc00117 	ldw	ra,4(sp)
 10001ac:	df000017 	ldw	fp,0(sp)
 10001b0:	dec00204 	addi	sp,sp,8
 10001b4:	f800283a 	ret

Disassembly of section .text:

010001b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 10001b8:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 10001bc:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 10001c0:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 10001c4:	00bffd16 	blt	zero,r2,10001bc <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10001c8:	06c06034 	movhi	sp,384
    ori sp, sp, %lo(__alt_stack_pointer)
 10001cc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 10001d0:	068040b4 	movhi	gp,258
    ori gp, gp, %lo(_gp)
 10001d4:	d6a6c214 	ori	gp,gp,39688
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10001d8:	008040b4 	movhi	r2,258
    ori r2, r2, %lo(__bss_start)
 10001dc:	108e7f14 	ori	r2,r2,14844

    movhi r3, %hi(__bss_end)
 10001e0:	00c040b4 	movhi	r3,258
    ori r3, r3, %lo(__bss_end)
 10001e4:	18d0e814 	ori	r3,r3,17312

    beq r2, r3, 1f
 10001e8:	10c00326 	beq	r2,r3,10001f8 <_start+0x40>

0:
    stw zero, (r2)
 10001ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10001f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10001f4:	10fffd36 	bltu	r2,r3,10001ec <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10001f8:	1013a1c0 	call	1013a1c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 10001fc:	1013c580 	call	1013c58 <alt_main>

01000200 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1000200:	003fff06 	br	1000200 <alt_after_alt_main>

01000204 <getVelocityInput>:
 *  Created on: 2014. 10. 1.
 *      Author: Harry
 */
#include "game.h"

void getVelocityInput(player_t* player) {
 1000204:	defffe04 	addi	sp,sp,-8
 1000208:	df000115 	stw	fp,4(sp)
 100020c:	df000104 	addi	fp,sp,4
 1000210:	e13fff15 	stw	r4,-4(fp)
	;
}
 1000214:	e037883a 	mov	sp,fp
 1000218:	df000017 	ldw	fp,0(sp)
 100021c:	dec00104 	addi	sp,sp,4
 1000220:	f800283a 	ret

01000224 <getAngleInput>:

void getAngleInput(player_t* player) {
 1000224:	defffe04 	addi	sp,sp,-8
 1000228:	df000115 	stw	fp,4(sp)
 100022c:	df000104 	addi	fp,sp,4
 1000230:	e13fff15 	stw	r4,-4(fp)
	;
}
 1000234:	e037883a 	mov	sp,fp
 1000238:	df000017 	ldw	fp,0(sp)
 100023c:	dec00104 	addi	sp,sp,4
 1000240:	f800283a 	ret

01000244 <calculateResult>:

void calculateResult(player_t* player) {
 1000244:	defffe04 	addi	sp,sp,-8
 1000248:	df000115 	stw	fp,4(sp)
 100024c:	df000104 	addi	fp,sp,4
 1000250:	e13fff15 	stw	r4,-4(fp)
	;
}
 1000254:	e037883a 	mov	sp,fp
 1000258:	df000017 	ldw	fp,0(sp)
 100025c:	dec00104 	addi	sp,sp,4
 1000260:	f800283a 	ret

01000264 <formatColor>:
 *
 */

#include "graphics.h"

int formatColor(int hexCode) {
 1000264:	defff904 	addi	sp,sp,-28
 1000268:	df000615 	stw	fp,24(sp)
 100026c:	df000604 	addi	fp,sp,24
 1000270:	e13fff15 	stw	r4,-4(fp)
	int red = (hexCode >> 16) & 0xff;
 1000274:	e0bfff17 	ldw	r2,-4(fp)
 1000278:	1005d43a 	srai	r2,r2,16
 100027c:	10803fcc 	andi	r2,r2,255
 1000280:	e0bffe15 	stw	r2,-8(fp)
	int green = (hexCode >> 8) & 0xff;
 1000284:	e0bfff17 	ldw	r2,-4(fp)
 1000288:	1005d23a 	srai	r2,r2,8
 100028c:	10803fcc 	andi	r2,r2,255
 1000290:	e0bffd15 	stw	r2,-12(fp)
	int blue = hexCode & 0xff;
 1000294:	e0bfff17 	ldw	r2,-4(fp)
 1000298:	10803fcc 	andi	r2,r2,255
 100029c:	e0bffc15 	stw	r2,-16(fp)

	unsigned short b = (blue >> 3) & 0x001f;
 10002a0:	e0bffc17 	ldw	r2,-16(fp)
 10002a4:	1005d0fa 	srai	r2,r2,3
 10002a8:	108007cc 	andi	r2,r2,31
 10002ac:	e0bffb0d 	sth	r2,-20(fp)
	unsigned short g = ((green >> 2) & 0x003f) << 6;
 10002b0:	e0bffd17 	ldw	r2,-12(fp)
 10002b4:	1005d0ba 	srai	r2,r2,2
 10002b8:	10800fcc 	andi	r2,r2,63
 10002bc:	100491ba 	slli	r2,r2,6
 10002c0:	e0bffa8d 	sth	r2,-22(fp)
	unsigned short r = ((red >> 3) & 0x001f) << 11;
 10002c4:	e0bffe17 	ldw	r2,-8(fp)
 10002c8:	1005d0fa 	srai	r2,r2,3
 10002cc:	108007cc 	andi	r2,r2,31
 10002d0:	100492fa 	slli	r2,r2,11
 10002d4:	e0bffa0d 	sth	r2,-24(fp)

	return (int) (r | g | b);
 10002d8:	e0fffa0b 	ldhu	r3,-24(fp)
 10002dc:	e0bffa8b 	ldhu	r2,-22(fp)
 10002e0:	1884b03a 	or	r2,r3,r2
 10002e4:	1007883a 	mov	r3,r2
 10002e8:	e0bffb0b 	ldhu	r2,-20(fp)
 10002ec:	1884b03a 	or	r2,r3,r2
 10002f0:	10bfffcc 	andi	r2,r2,65535
}
 10002f4:	e037883a 	mov	sp,fp
 10002f8:	df000017 	ldw	fp,0(sp)
 10002fc:	dec00104 	addi	sp,sp,4
 1000300:	f800283a 	ret

01000304 <clearScreen>:

void clearScreen(system_t* system) {
 1000304:	defff904 	addi	sp,sp,-28
 1000308:	dfc00615 	stw	ra,24(sp)
 100030c:	df000515 	stw	fp,20(sp)
 1000310:	dc000415 	stw	r16,16(sp)
 1000314:	df000404 	addi	fp,sp,16
 1000318:	e13fff15 	stw	r4,-4(fp)
	alt_up_pixel_buffer_dma_draw_box(system->pixel_buffer, 0, 0, 320, 240,
 100031c:	e0bfff17 	ldw	r2,-4(fp)
 1000320:	14000017 	ldw	r16,0(r2)
 1000324:	01004034 	movhi	r4,256
 1000328:	213fffc4 	addi	r4,r4,-1
 100032c:	10002640 	call	1000264 <formatColor>
 1000330:	1007883a 	mov	r3,r2
 1000334:	00803c04 	movi	r2,240
 1000338:	d8800015 	stw	r2,0(sp)
 100033c:	d8c00115 	stw	r3,4(sp)
 1000340:	d8000215 	stw	zero,8(sp)
 1000344:	8009883a 	mov	r4,r16
 1000348:	000b883a 	mov	r5,zero
 100034c:	000d883a 	mov	r6,zero
 1000350:	01c05004 	movi	r7,320
 1000354:	101aacc0 	call	101aacc <alt_up_pixel_buffer_dma_draw_box>
			formatColor(BACKGROUND_HEX), 0);
}
 1000358:	e037883a 	mov	sp,fp
 100035c:	dfc00217 	ldw	ra,8(sp)
 1000360:	df000117 	ldw	fp,4(sp)
 1000364:	dc000017 	ldw	r16,0(sp)
 1000368:	dec00304 	addi	sp,sp,12
 100036c:	f800283a 	ret

01000370 <drawBox>:

void drawBox(system_t* system, int x1, int y1, int x2, int y2, int color) {
 1000370:	defff704 	addi	sp,sp,-36
 1000374:	dfc00815 	stw	ra,32(sp)
 1000378:	df000715 	stw	fp,28(sp)
 100037c:	df000704 	addi	fp,sp,28
 1000380:	e13ffc15 	stw	r4,-16(fp)
 1000384:	e17ffd15 	stw	r5,-12(fp)
 1000388:	e1bffe15 	stw	r6,-8(fp)
 100038c:	e1ffff15 	stw	r7,-4(fp)
		IOWR_32DIRECT(drawer_base, 16, formatColor(color));
		IOWR_32DIRECT(drawer_base, 20, 1);
		while (IORD_32DIRECT(drawer_base, 20) == 0)
			;
	} else {
		alt_up_pixel_buffer_dma_draw_box(system->pixel_buffer, x1, y1, x2, y2,
 1000390:	e0bffc17 	ldw	r2,-16(fp)
 1000394:	11000017 	ldw	r4,0(r2)
 1000398:	e0800217 	ldw	r2,8(fp)
 100039c:	d8800015 	stw	r2,0(sp)
 10003a0:	e0800317 	ldw	r2,12(fp)
 10003a4:	d8800115 	stw	r2,4(sp)
 10003a8:	d8000215 	stw	zero,8(sp)
 10003ac:	e17ffd17 	ldw	r5,-12(fp)
 10003b0:	e1bffe17 	ldw	r6,-8(fp)
 10003b4:	e1ffff17 	ldw	r7,-4(fp)
 10003b8:	101aacc0 	call	101aacc <alt_up_pixel_buffer_dma_draw_box>
				color, 0);
	}
}
 10003bc:	e037883a 	mov	sp,fp
 10003c0:	dfc00117 	ldw	ra,4(sp)
 10003c4:	df000017 	ldw	fp,0(sp)
 10003c8:	dec00204 	addi	sp,sp,8
 10003cc:	f800283a 	ret

010003d0 <drawLine>:

void drawLine(system_t* system, int x1, int y1, int x2, int y2, int color) {
 10003d0:	defff704 	addi	sp,sp,-36
 10003d4:	dfc00815 	stw	ra,32(sp)
 10003d8:	df000715 	stw	fp,28(sp)
 10003dc:	df000704 	addi	fp,sp,28
 10003e0:	e13ffc15 	stw	r4,-16(fp)
 10003e4:	e17ffd15 	stw	r5,-12(fp)
 10003e8:	e1bffe15 	stw	r6,-8(fp)
 10003ec:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_line(system->pixel_buffer, x1, y1, x2, y2,
 10003f0:	e0bffc17 	ldw	r2,-16(fp)
 10003f4:	11000017 	ldw	r4,0(r2)
 10003f8:	e0800217 	ldw	r2,8(fp)
 10003fc:	d8800015 	stw	r2,0(sp)
 1000400:	e0800317 	ldw	r2,12(fp)
 1000404:	d8800115 	stw	r2,4(sp)
 1000408:	d8000215 	stw	zero,8(sp)
 100040c:	e17ffd17 	ldw	r5,-12(fp)
 1000410:	e1bffe17 	ldw	r6,-8(fp)
 1000414:	e1ffff17 	ldw	r7,-4(fp)
 1000418:	101b8740 	call	101b874 <alt_up_pixel_buffer_dma_draw_line>
			color, 0);
}
 100041c:	e037883a 	mov	sp,fp
 1000420:	dfc00117 	ldw	ra,4(sp)
 1000424:	df000017 	ldw	fp,0(sp)
 1000428:	dec00204 	addi	sp,sp,8
 100042c:	f800283a 	ret

01000430 <drawPlayers>:

void drawPlayers(system_t* system, player_t* player) {
 1000430:	defffa04 	addi	sp,sp,-24
 1000434:	dfc00515 	stw	ra,20(sp)
 1000438:	df000415 	stw	fp,16(sp)
 100043c:	df000404 	addi	fp,sp,16
 1000440:	e13ffe15 	stw	r4,-8(fp)
 1000444:	e17fff15 	stw	r5,-4(fp)
	// draw player 1 UI
	drawBox(system, PLAYER_ONE_X1, PLAYER_ONE_Y1, PLAYER_ONE_X2, PLAYER_ONE_Y2,
 1000448:	01003ff4 	movhi	r4,255
 100044c:	10002640 	call	1000264 <formatColor>
 1000450:	1007883a 	mov	r3,r2
 1000454:	00803484 	movi	r2,210
 1000458:	d8800015 	stw	r2,0(sp)
 100045c:	d8c00115 	stw	r3,4(sp)
 1000460:	e13ffe17 	ldw	r4,-8(fp)
 1000464:	000b883a 	mov	r5,zero
 1000468:	01803c04 	movi	r6,240
 100046c:	01c00504 	movi	r7,20
 1000470:	10003700 	call	1000370 <drawBox>
			formatColor(0xff0000));

	// draw player 2 UI
	drawBox(system, PLAYER_TWO_X1, PLAYER_TWO_Y1, PLAYER_TWO_X2, PLAYER_TWO_Y2,
 1000474:	01003fc4 	movi	r4,255
 1000478:	10002640 	call	1000264 <formatColor>
 100047c:	1007883a 	mov	r3,r2
 1000480:	00803484 	movi	r2,210
 1000484:	d8800015 	stw	r2,0(sp)
 1000488:	d8c00115 	stw	r3,4(sp)
 100048c:	e13ffe17 	ldw	r4,-8(fp)
 1000490:	01404b04 	movi	r5,300
 1000494:	01803c04 	movi	r6,240
 1000498:	01c05004 	movi	r7,320
 100049c:	10003700 	call	1000370 <drawBox>
			formatColor(0x0000ff));
}
 10004a0:	e037883a 	mov	sp,fp
 10004a4:	dfc00117 	ldw	ra,4(sp)
 10004a8:	df000017 	ldw	fp,0(sp)
 10004ac:	dec00204 	addi	sp,sp,8
 10004b0:	f800283a 	ret

010004b4 <drawCannonBall>:

int drawCannonBall(system_t* system, player_t* player, dir_t dir, double time,
		int color, int WIND_VEL) {
 10004b4:	deffed04 	addi	sp,sp,-76
 10004b8:	dfc01115 	stw	ra,68(sp)
 10004bc:	df001015 	stw	fp,64(sp)
 10004c0:	dcc00f15 	stw	r19,60(sp)
 10004c4:	dc800e15 	stw	r18,56(sp)
 10004c8:	dc400d15 	stw	r17,52(sp)
 10004cc:	dc000c15 	stw	r16,48(sp)
 10004d0:	df000c04 	addi	fp,sp,48
 10004d4:	e13ffc15 	stw	r4,-16(fp)
 10004d8:	e17ffd15 	stw	r5,-12(fp)
 10004dc:	e1bffe15 	stw	r6,-8(fp)
 10004e0:	e1c00615 	stw	r7,24(fp)
	double theta = player->angle * M_PI / 180;
 10004e4:	e0bffd17 	ldw	r2,-12(fp)
 10004e8:	11000317 	ldw	r4,12(r2)
 10004ec:	10054640 	call	1005464 <__floatsidf>
 10004f0:	100b883a 	mov	r5,r2
 10004f4:	180d883a 	mov	r6,r3
 10004f8:	2809883a 	mov	r4,r5
 10004fc:	300b883a 	mov	r5,r6
 1000500:	01951134 	movhi	r6,21572
 1000504:	318b4604 	addi	r6,r6,11544
 1000508:	01d00274 	movhi	r7,16393
 100050c:	39c87ec4 	addi	r7,r7,8699
 1000510:	1004c280 	call	1004c28 <__muldf3>
 1000514:	1009883a 	mov	r4,r2
 1000518:	180b883a 	mov	r5,r3
 100051c:	2005883a 	mov	r2,r4
 1000520:	2807883a 	mov	r3,r5
 1000524:	1009883a 	mov	r4,r2
 1000528:	180b883a 	mov	r5,r3
 100052c:	000d883a 	mov	r6,zero
 1000530:	01d019f4 	movhi	r7,16487
 1000534:	39e00004 	addi	r7,r7,-32768
 1000538:	1004fec0 	call	1004fec <__divdf3>
 100053c:	1009883a 	mov	r4,r2
 1000540:	180b883a 	mov	r5,r3
 1000544:	e13ffa15 	stw	r4,-24(fp)
 1000548:	e17ffb15 	stw	r5,-20(fp)
	int initXPos, initYPos;

	if (player->id == 1) {
 100054c:	e0bffd17 	ldw	r2,-12(fp)
 1000550:	10800017 	ldw	r2,0(r2)
 1000554:	10800058 	cmpnei	r2,r2,1
 1000558:	1000051e 	bne	r2,zero,1000570 <drawCannonBall+0xbc>
		initXPos = INIT_BALL_XPOS_TO_RIGHT;
 100055c:	00800504 	movi	r2,20
 1000560:	e0bff915 	stw	r2,-28(fp)
		initYPos = INIT_BALL_YPOS_TO_RIGHT;
 1000564:	00803484 	movi	r2,210
 1000568:	e0bff815 	stw	r2,-32(fp)
 100056c:	00000806 	br	1000590 <drawCannonBall+0xdc>
	} else if (player->id == 2) {
 1000570:	e0bffd17 	ldw	r2,-12(fp)
 1000574:	10800017 	ldw	r2,0(r2)
 1000578:	10800098 	cmpnei	r2,r2,2
 100057c:	1000041e 	bne	r2,zero,1000590 <drawCannonBall+0xdc>
		initXPos = INIT_BALL_XPOS_TO_LEFT;
 1000580:	00804a84 	movi	r2,298
 1000584:	e0bff915 	stw	r2,-28(fp)
		initYPos = INIT_BALL_YPOS_TO_LEFT;
 1000588:	00803484 	movi	r2,210
 100058c:	e0bff815 	stw	r2,-32(fp)
	}
	int ballXPos = 0;
 1000590:	e03ff715 	stw	zero,-36(fp)
	int ballYPos = 0;
 1000594:	e03ff615 	stw	zero,-40(fp)

	if (time == 0.0) {
 1000598:	e1000617 	ldw	r4,24(fp)
 100059c:	e1400717 	ldw	r5,28(fp)
 10005a0:	000d883a 	mov	r6,zero
 10005a4:	000f883a 	mov	r7,zero
 10005a8:	10052440 	call	1005244 <__eqdf2>
 10005ac:	1005003a 	cmpeq	r2,r2,zero
 10005b0:	1000011e 	bne	r2,zero,10005b8 <drawCannonBall+0x104>
 10005b4:	00001006 	br	10005f8 <drawCannonBall+0x144>
		if (dir == RIGHT) {
 10005b8:	e0bffe17 	ldw	r2,-8(fp)
 10005bc:	10800058 	cmpnei	r2,r2,1
 10005c0:	1000051e 	bne	r2,zero,10005d8 <drawCannonBall+0x124>
			ballXPos = INIT_BALL_XPOS_TO_RIGHT;
 10005c4:	00800504 	movi	r2,20
 10005c8:	e0bff715 	stw	r2,-36(fp)
			ballYPos = INIT_BALL_YPOS_TO_RIGHT;
 10005cc:	00803484 	movi	r2,210
 10005d0:	e0bff615 	stw	r2,-40(fp)
 10005d4:	00010306 	br	10009e4 <drawCannonBall+0x530>
		} else if (dir == LEFT) {
 10005d8:	e0bffe17 	ldw	r2,-8(fp)
 10005dc:	10800098 	cmpnei	r2,r2,2
 10005e0:	1001001e 	bne	r2,zero,10009e4 <drawCannonBall+0x530>
			ballXPos = INIT_BALL_XPOS_TO_LEFT;
 10005e4:	00804a84 	movi	r2,298
 10005e8:	e0bff715 	stw	r2,-36(fp)
			ballYPos = INIT_BALL_YPOS_TO_LEFT;
 10005ec:	00803484 	movi	r2,210
 10005f0:	e0bff615 	stw	r2,-40(fp)
 10005f4:	0000fb06 	br	10009e4 <drawCannonBall+0x530>
		}
	} else {
		if (dir == RIGHT) {
 10005f8:	e0bffe17 	ldw	r2,-8(fp)
 10005fc:	10800058 	cmpnei	r2,r2,1
 1000600:	1000561e 	bne	r2,zero,100075c <drawCannonBall+0x2a8>
			//x(t) = initial_position_x + velocity*cos(theta)*t
			ballXPos = initXPos + (player->velocity * time * cos(theta))
 1000604:	e13ff917 	ldw	r4,-28(fp)
 1000608:	10054640 	call	1005464 <__floatsidf>
 100060c:	1025883a 	mov	r18,r2
 1000610:	1827883a 	mov	r19,r3
 1000614:	e0bffd17 	ldw	r2,-12(fp)
 1000618:	11000417 	ldw	r4,16(r2)
 100061c:	10054640 	call	1005464 <__floatsidf>
 1000620:	100b883a 	mov	r5,r2
 1000624:	180d883a 	mov	r6,r3
 1000628:	2809883a 	mov	r4,r5
 100062c:	300b883a 	mov	r5,r6
 1000630:	e1800617 	ldw	r6,24(fp)
 1000634:	e1c00717 	ldw	r7,28(fp)
 1000638:	1004c280 	call	1004c28 <__muldf3>
 100063c:	1009883a 	mov	r4,r2
 1000640:	180b883a 	mov	r5,r3
 1000644:	2021883a 	mov	r16,r4
 1000648:	2823883a 	mov	r17,r5
 100064c:	e13ffa17 	ldw	r4,-24(fp)
 1000650:	e17ffb17 	ldw	r5,-20(fp)
 1000654:	10021280 	call	1002128 <cos>
 1000658:	100f883a 	mov	r7,r2
 100065c:	1811883a 	mov	r8,r3
 1000660:	8009883a 	mov	r4,r16
 1000664:	880b883a 	mov	r5,r17
 1000668:	380d883a 	mov	r6,r7
 100066c:	400f883a 	mov	r7,r8
 1000670:	1004c280 	call	1004c28 <__muldf3>
 1000674:	1009883a 	mov	r4,r2
 1000678:	180b883a 	mov	r5,r3
 100067c:	2005883a 	mov	r2,r4
 1000680:	2807883a 	mov	r3,r5
 1000684:	9009883a 	mov	r4,r18
 1000688:	980b883a 	mov	r5,r19
 100068c:	100d883a 	mov	r6,r2
 1000690:	180f883a 	mov	r7,r3
 1000694:	1004bb40 	call	1004bb4 <__adddf3>
 1000698:	1009883a 	mov	r4,r2
 100069c:	180b883a 	mov	r5,r3
 10006a0:	2021883a 	mov	r16,r4
 10006a4:	2823883a 	mov	r17,r5
 10006a8:	e1000917 	ldw	r4,36(fp)
 10006ac:	10054640 	call	1005464 <__floatsidf>
 10006b0:	100b883a 	mov	r5,r2
 10006b4:	180d883a 	mov	r6,r3
 10006b8:	2809883a 	mov	r4,r5
 10006bc:	300b883a 	mov	r5,r6
 10006c0:	000d883a 	mov	r6,zero
 10006c4:	01cff834 	movhi	r7,16352
 10006c8:	1004c280 	call	1004c28 <__muldf3>
 10006cc:	1009883a 	mov	r4,r2
 10006d0:	180b883a 	mov	r5,r3
 10006d4:	2005883a 	mov	r2,r4
 10006d8:	2807883a 	mov	r3,r5
 10006dc:	1009883a 	mov	r4,r2
 10006e0:	180b883a 	mov	r5,r3
 10006e4:	e1800617 	ldw	r6,24(fp)
 10006e8:	e1c00717 	ldw	r7,28(fp)
 10006ec:	1004c280 	call	1004c28 <__muldf3>
 10006f0:	1009883a 	mov	r4,r2
 10006f4:	180b883a 	mov	r5,r3
 10006f8:	2005883a 	mov	r2,r4
 10006fc:	2807883a 	mov	r3,r5
 1000700:	1009883a 	mov	r4,r2
 1000704:	180b883a 	mov	r5,r3
 1000708:	e1800617 	ldw	r6,24(fp)
 100070c:	e1c00717 	ldw	r7,28(fp)
 1000710:	1004c280 	call	1004c28 <__muldf3>
 1000714:	1009883a 	mov	r4,r2
 1000718:	180b883a 	mov	r5,r3
 100071c:	2005883a 	mov	r2,r4
 1000720:	2807883a 	mov	r3,r5
 1000724:	8009883a 	mov	r4,r16
 1000728:	880b883a 	mov	r5,r17
 100072c:	100d883a 	mov	r6,r2
 1000730:	180f883a 	mov	r7,r3
 1000734:	1004bb40 	call	1004bb4 <__adddf3>
 1000738:	1009883a 	mov	r4,r2
 100073c:	180b883a 	mov	r5,r3
 1000740:	2005883a 	mov	r2,r4
 1000744:	2807883a 	mov	r3,r5
 1000748:	1009883a 	mov	r4,r2
 100074c:	180b883a 	mov	r5,r3
 1000750:	100555c0 	call	100555c <__fixdfsi>
 1000754:	e0bff715 	stw	r2,-36(fp)
 1000758:	00005806 	br	10008bc <drawCannonBall+0x408>
					+ 0.5 * WIND_VEL * time * time;
		} else if (dir == LEFT) {
 100075c:	e0bffe17 	ldw	r2,-8(fp)
 1000760:	10800098 	cmpnei	r2,r2,2
 1000764:	1000551e 	bne	r2,zero,10008bc <drawCannonBall+0x408>
			ballXPos = initXPos - (player->velocity * time * cos(theta))
 1000768:	e13ff917 	ldw	r4,-28(fp)
 100076c:	10054640 	call	1005464 <__floatsidf>
 1000770:	1025883a 	mov	r18,r2
 1000774:	1827883a 	mov	r19,r3
 1000778:	e0bffd17 	ldw	r2,-12(fp)
 100077c:	11000417 	ldw	r4,16(r2)
 1000780:	10054640 	call	1005464 <__floatsidf>
 1000784:	100b883a 	mov	r5,r2
 1000788:	180d883a 	mov	r6,r3
 100078c:	2809883a 	mov	r4,r5
 1000790:	300b883a 	mov	r5,r6
 1000794:	e1800617 	ldw	r6,24(fp)
 1000798:	e1c00717 	ldw	r7,28(fp)
 100079c:	1004c280 	call	1004c28 <__muldf3>
 10007a0:	1009883a 	mov	r4,r2
 10007a4:	180b883a 	mov	r5,r3
 10007a8:	2021883a 	mov	r16,r4
 10007ac:	2823883a 	mov	r17,r5
 10007b0:	e13ffa17 	ldw	r4,-24(fp)
 10007b4:	e17ffb17 	ldw	r5,-20(fp)
 10007b8:	10021280 	call	1002128 <cos>
 10007bc:	100f883a 	mov	r7,r2
 10007c0:	1811883a 	mov	r8,r3
 10007c4:	8009883a 	mov	r4,r16
 10007c8:	880b883a 	mov	r5,r17
 10007cc:	380d883a 	mov	r6,r7
 10007d0:	400f883a 	mov	r7,r8
 10007d4:	1004c280 	call	1004c28 <__muldf3>
 10007d8:	1009883a 	mov	r4,r2
 10007dc:	180b883a 	mov	r5,r3
 10007e0:	2005883a 	mov	r2,r4
 10007e4:	2807883a 	mov	r3,r5
 10007e8:	9009883a 	mov	r4,r18
 10007ec:	980b883a 	mov	r5,r19
 10007f0:	100d883a 	mov	r6,r2
 10007f4:	180f883a 	mov	r7,r3
 10007f8:	1004b340 	call	1004b34 <__subdf3>
 10007fc:	1009883a 	mov	r4,r2
 1000800:	180b883a 	mov	r5,r3
 1000804:	2021883a 	mov	r16,r4
 1000808:	2823883a 	mov	r17,r5
 100080c:	e1000917 	ldw	r4,36(fp)
 1000810:	10054640 	call	1005464 <__floatsidf>
 1000814:	100b883a 	mov	r5,r2
 1000818:	180d883a 	mov	r6,r3
 100081c:	2809883a 	mov	r4,r5
 1000820:	300b883a 	mov	r5,r6
 1000824:	000d883a 	mov	r6,zero
 1000828:	01cff834 	movhi	r7,16352
 100082c:	1004c280 	call	1004c28 <__muldf3>
 1000830:	1009883a 	mov	r4,r2
 1000834:	180b883a 	mov	r5,r3
 1000838:	2005883a 	mov	r2,r4
 100083c:	2807883a 	mov	r3,r5
 1000840:	1009883a 	mov	r4,r2
 1000844:	180b883a 	mov	r5,r3
 1000848:	e1800617 	ldw	r6,24(fp)
 100084c:	e1c00717 	ldw	r7,28(fp)
 1000850:	1004c280 	call	1004c28 <__muldf3>
 1000854:	1009883a 	mov	r4,r2
 1000858:	180b883a 	mov	r5,r3
 100085c:	2005883a 	mov	r2,r4
 1000860:	2807883a 	mov	r3,r5
 1000864:	1009883a 	mov	r4,r2
 1000868:	180b883a 	mov	r5,r3
 100086c:	e1800617 	ldw	r6,24(fp)
 1000870:	e1c00717 	ldw	r7,28(fp)
 1000874:	1004c280 	call	1004c28 <__muldf3>
 1000878:	1009883a 	mov	r4,r2
 100087c:	180b883a 	mov	r5,r3
 1000880:	2005883a 	mov	r2,r4
 1000884:	2807883a 	mov	r3,r5
 1000888:	8009883a 	mov	r4,r16
 100088c:	880b883a 	mov	r5,r17
 1000890:	100d883a 	mov	r6,r2
 1000894:	180f883a 	mov	r7,r3
 1000898:	1004bb40 	call	1004bb4 <__adddf3>
 100089c:	1009883a 	mov	r4,r2
 10008a0:	180b883a 	mov	r5,r3
 10008a4:	2005883a 	mov	r2,r4
 10008a8:	2807883a 	mov	r3,r5
 10008ac:	1009883a 	mov	r4,r2
 10008b0:	180b883a 	mov	r5,r3
 10008b4:	100555c0 	call	100555c <__fixdfsi>
 10008b8:	e0bff715 	stw	r2,-36(fp)
					+ 0.5 * WIND_VEL * time * time;
		}

		//y(t) = initial_position_y - (velocity*sin(theta)*t + (0.5)*ACCEL_G*t*t)
		ballYPos = initYPos - (0.5) * ACCEL_G * GRAVITY_SCALE * time * time
 10008bc:	e13ff817 	ldw	r4,-32(fp)
 10008c0:	10054640 	call	1005464 <__floatsidf>
 10008c4:	1021883a 	mov	r16,r2
 10008c8:	1823883a 	mov	r17,r3
 10008cc:	e1000617 	ldw	r4,24(fp)
 10008d0:	e1400717 	ldw	r5,28(fp)
 10008d4:	01947b34 	movhi	r6,20972
 10008d8:	31a147c4 	addi	r6,r6,-31457
 10008dc:	01d00534 	movhi	r7,16404
 10008e0:	39e7ae04 	addi	r7,r7,-24904
 10008e4:	1004c280 	call	1004c28 <__muldf3>
 10008e8:	1009883a 	mov	r4,r2
 10008ec:	180b883a 	mov	r5,r3
 10008f0:	2005883a 	mov	r2,r4
 10008f4:	2807883a 	mov	r3,r5
 10008f8:	1009883a 	mov	r4,r2
 10008fc:	180b883a 	mov	r5,r3
 1000900:	e1800617 	ldw	r6,24(fp)
 1000904:	e1c00717 	ldw	r7,28(fp)
 1000908:	1004c280 	call	1004c28 <__muldf3>
 100090c:	1009883a 	mov	r4,r2
 1000910:	180b883a 	mov	r5,r3
 1000914:	2005883a 	mov	r2,r4
 1000918:	2807883a 	mov	r3,r5
 100091c:	8009883a 	mov	r4,r16
 1000920:	880b883a 	mov	r5,r17
 1000924:	100d883a 	mov	r6,r2
 1000928:	180f883a 	mov	r7,r3
 100092c:	1004bb40 	call	1004bb4 <__adddf3>
 1000930:	1009883a 	mov	r4,r2
 1000934:	180b883a 	mov	r5,r3
 1000938:	2025883a 	mov	r18,r4
 100093c:	2827883a 	mov	r19,r5
 1000940:	e0bffd17 	ldw	r2,-12(fp)
 1000944:	11000417 	ldw	r4,16(r2)
 1000948:	10054640 	call	1005464 <__floatsidf>
 100094c:	100b883a 	mov	r5,r2
 1000950:	180d883a 	mov	r6,r3
 1000954:	2809883a 	mov	r4,r5
 1000958:	300b883a 	mov	r5,r6
 100095c:	e1800617 	ldw	r6,24(fp)
 1000960:	e1c00717 	ldw	r7,28(fp)
 1000964:	1004c280 	call	1004c28 <__muldf3>
 1000968:	1009883a 	mov	r4,r2
 100096c:	180b883a 	mov	r5,r3
 1000970:	2021883a 	mov	r16,r4
 1000974:	2823883a 	mov	r17,r5
 1000978:	e13ffa17 	ldw	r4,-24(fp)
 100097c:	e17ffb17 	ldw	r5,-20(fp)
 1000980:	10022900 	call	1002290 <sin>
 1000984:	100f883a 	mov	r7,r2
 1000988:	1811883a 	mov	r8,r3
 100098c:	8009883a 	mov	r4,r16
 1000990:	880b883a 	mov	r5,r17
 1000994:	380d883a 	mov	r6,r7
 1000998:	400f883a 	mov	r7,r8
 100099c:	1004c280 	call	1004c28 <__muldf3>
 10009a0:	1009883a 	mov	r4,r2
 10009a4:	180b883a 	mov	r5,r3
 10009a8:	2005883a 	mov	r2,r4
 10009ac:	2807883a 	mov	r3,r5
 10009b0:	9009883a 	mov	r4,r18
 10009b4:	980b883a 	mov	r5,r19
 10009b8:	100d883a 	mov	r6,r2
 10009bc:	180f883a 	mov	r7,r3
 10009c0:	1004b340 	call	1004b34 <__subdf3>
 10009c4:	1009883a 	mov	r4,r2
 10009c8:	180b883a 	mov	r5,r3
 10009cc:	2005883a 	mov	r2,r4
 10009d0:	2807883a 	mov	r3,r5
 10009d4:	1009883a 	mov	r4,r2
 10009d8:	180b883a 	mov	r5,r3
 10009dc:	100555c0 	call	100555c <__fixdfsi>
 10009e0:	e0bff615 	stw	r2,-40(fp)
				- player->velocity * time * sin(theta);
	}

	// Cannonball out-of-bound check
	// does not include out of bound to top
	if (ballXPos >= 320 || ballYPos >= 240 || ballXPos <= 0)
 10009e4:	e0bff717 	ldw	r2,-36(fp)
 10009e8:	10805008 	cmpgei	r2,r2,320
 10009ec:	1000061e 	bne	r2,zero,1000a08 <drawCannonBall+0x554>
 10009f0:	e0bff617 	ldw	r2,-40(fp)
 10009f4:	10803c08 	cmpgei	r2,r2,240
 10009f8:	1000031e 	bne	r2,zero,1000a08 <drawCannonBall+0x554>
 10009fc:	e0bff717 	ldw	r2,-36(fp)
 1000a00:	10800048 	cmpgei	r2,r2,1
 1000a04:	1000031e 	bne	r2,zero,1000a14 <drawCannonBall+0x560>
		return 1;
 1000a08:	00800044 	movi	r2,1
 1000a0c:	e0bfff15 	stw	r2,-4(fp)
 1000a10:	00003806 	br	1000af4 <drawCannonBall+0x640>

	// Cannonball hit player check
	if (dir == RIGHT) {
 1000a14:	e0bffe17 	ldw	r2,-8(fp)
 1000a18:	10800058 	cmpnei	r2,r2,1
 1000a1c:	1000121e 	bne	r2,zero,1000a68 <drawCannonBall+0x5b4>
		if ((ballXPos >= PLAYER_TWO_X1 - BALL_SIZE)
 1000a20:	e0bff717 	ldw	r2,-36(fp)
 1000a24:	10804ad0 	cmplti	r2,r2,299
 1000a28:	1000061e 	bne	r2,zero,1000a44 <drawCannonBall+0x590>
 1000a2c:	e0bff617 	ldw	r2,-40(fp)
 1000a30:	10803450 	cmplti	r2,r2,209
 1000a34:	1000031e 	bne	r2,zero,1000a44 <drawCannonBall+0x590>
				&& (ballYPos >= PLAYER_TWO_Y2 - BALL_SIZE)) {
			return 2;
 1000a38:	00800084 	movi	r2,2
 1000a3c:	e0bfff15 	stw	r2,-4(fp)
 1000a40:	00002c06 	br	1000af4 <drawCannonBall+0x640>
		} else if ((ballXPos <= PLAYER_ONE_X2 + BALL_SIZE)
 1000a44:	e0bff717 	ldw	r2,-36(fp)
 1000a48:	10800588 	cmpgei	r2,r2,22
 1000a4c:	10001b1e 	bne	r2,zero,1000abc <drawCannonBall+0x608>
 1000a50:	e0bff617 	ldw	r2,-40(fp)
 1000a54:	108034d0 	cmplti	r2,r2,211
 1000a58:	1000181e 	bne	r2,zero,1000abc <drawCannonBall+0x608>
				&& (ballYPos >= PLAYER_ONE_Y2 + BALL_SIZE)) {
			return 3;
 1000a5c:	008000c4 	movi	r2,3
 1000a60:	e0bfff15 	stw	r2,-4(fp)
 1000a64:	00002306 	br	1000af4 <drawCannonBall+0x640>
		}
	} else if (dir == LEFT) {
 1000a68:	e0bffe17 	ldw	r2,-8(fp)
 1000a6c:	10800098 	cmpnei	r2,r2,2
 1000a70:	1000121e 	bne	r2,zero,1000abc <drawCannonBall+0x608>
		if ((ballXPos <= PLAYER_ONE_X2 + BALL_SIZE)
 1000a74:	e0bff717 	ldw	r2,-36(fp)
 1000a78:	10800588 	cmpgei	r2,r2,22
 1000a7c:	1000061e 	bne	r2,zero,1000a98 <drawCannonBall+0x5e4>
 1000a80:	e0bff617 	ldw	r2,-40(fp)
 1000a84:	108034d0 	cmplti	r2,r2,211
 1000a88:	1000031e 	bne	r2,zero,1000a98 <drawCannonBall+0x5e4>
				&& (ballYPos >= PLAYER_ONE_Y2 + BALL_SIZE)) {
			return 2;
 1000a8c:	00800084 	movi	r2,2
 1000a90:	e0bfff15 	stw	r2,-4(fp)
 1000a94:	00001706 	br	1000af4 <drawCannonBall+0x640>
		} else if ((ballXPos >= PLAYER_TWO_X1 - BALL_SIZE)
 1000a98:	e0bff717 	ldw	r2,-36(fp)
 1000a9c:	10804ad0 	cmplti	r2,r2,299
 1000aa0:	1000061e 	bne	r2,zero,1000abc <drawCannonBall+0x608>
 1000aa4:	e0bff617 	ldw	r2,-40(fp)
 1000aa8:	10803450 	cmplti	r2,r2,209
 1000aac:	1000031e 	bne	r2,zero,1000abc <drawCannonBall+0x608>
				&& (ballYPos >= PLAYER_TWO_Y2 - BALL_SIZE)) {
			return 3;
 1000ab0:	008000c4 	movi	r2,3
 1000ab4:	e0bfff15 	stw	r2,-4(fp)
 1000ab8:	00000e06 	br	1000af4 <drawCannonBall+0x640>
		}
	}

	drawBox(system, ballXPos, ballYPos, ballXPos + BALL_SIZE,
 1000abc:	e0bff717 	ldw	r2,-36(fp)
 1000ac0:	14400044 	addi	r17,r2,1
 1000ac4:	e0bff617 	ldw	r2,-40(fp)
 1000ac8:	143fffc4 	addi	r16,r2,-1
 1000acc:	e1000817 	ldw	r4,32(fp)
 1000ad0:	10002640 	call	1000264 <formatColor>
 1000ad4:	dc000015 	stw	r16,0(sp)
 1000ad8:	d8800115 	stw	r2,4(sp)
 1000adc:	e13ffc17 	ldw	r4,-16(fp)
 1000ae0:	e17ff717 	ldw	r5,-36(fp)
 1000ae4:	e1bff617 	ldw	r6,-40(fp)
 1000ae8:	880f883a 	mov	r7,r17
 1000aec:	10003700 	call	1000370 <drawBox>
			ballYPos - BALL_SIZE, formatColor(color));
	return 0;
 1000af0:	e03fff15 	stw	zero,-4(fp)
 1000af4:	e0bfff17 	ldw	r2,-4(fp)
}
 1000af8:	e037883a 	mov	sp,fp
 1000afc:	dfc00517 	ldw	ra,20(sp)
 1000b00:	df000417 	ldw	fp,16(sp)
 1000b04:	dcc00317 	ldw	r19,12(sp)
 1000b08:	dc800217 	ldw	r18,8(sp)
 1000b0c:	dc400117 	ldw	r17,4(sp)
 1000b10:	dc000017 	ldw	r16,0(sp)
 1000b14:	dec00704 	addi	sp,sp,28
 1000b18:	f800283a 	ret

01000b1c <animateShooting>:

int animateShooting(system_t* system, player_t* player, int wind_vel) {
 1000b1c:	defff304 	addi	sp,sp,-52
 1000b20:	dfc00c15 	stw	ra,48(sp)
 1000b24:	df000b15 	stw	fp,44(sp)
 1000b28:	df000b04 	addi	fp,sp,44
 1000b2c:	e13ffc15 	stw	r4,-16(fp)
 1000b30:	e17ffd15 	stw	r5,-12(fp)
 1000b34:	e1bffe15 	stw	r6,-8(fp)
	dir_t dir;
	int result = 0;
 1000b38:	e03ffa15 	stw	zero,-24(fp)
	double time = 0.0;
 1000b3c:	e03ff815 	stw	zero,-32(fp)
 1000b40:	e03ff915 	stw	zero,-28(fp)

	if (player->id == 1) {
 1000b44:	e0bffd17 	ldw	r2,-12(fp)
 1000b48:	10800017 	ldw	r2,0(r2)
 1000b4c:	10800058 	cmpnei	r2,r2,1
 1000b50:	1000031e 	bne	r2,zero,1000b60 <animateShooting+0x44>
		dir = RIGHT;
 1000b54:	00800044 	movi	r2,1
 1000b58:	e0bffb15 	stw	r2,-20(fp)
 1000b5c:	00004906 	br	1000c84 <animateShooting+0x168>
	} else if (player->id == 2) {
 1000b60:	e0bffd17 	ldw	r2,-12(fp)
 1000b64:	10800017 	ldw	r2,0(r2)
 1000b68:	10800098 	cmpnei	r2,r2,2
 1000b6c:	1000451e 	bne	r2,zero,1000c84 <animateShooting+0x168>
		dir = LEFT;
 1000b70:	00800084 	movi	r2,2
 1000b74:	e0bffb15 	stw	r2,-20(fp)
	}

	while (result == 0) {
 1000b78:	00004206 	br	1000c84 <animateShooting+0x168>
		if (time != 0.0) {
 1000b7c:	e13ff817 	ldw	r4,-32(fp)
 1000b80:	e17ff917 	ldw	r5,-28(fp)
 1000b84:	000d883a 	mov	r6,zero
 1000b88:	000f883a 	mov	r7,zero
 1000b8c:	10052cc0 	call	10052cc <__nedf2>
 1000b90:	1004c03a 	cmpne	r2,r2,zero
 1000b94:	1000011e 	bne	r2,zero,1000b9c <animateShooting+0x80>
 1000b98:	00002206 	br	1000c24 <animateShooting+0x108>
			time -= TIME_SCALE;
 1000b9c:	e13ff817 	ldw	r4,-32(fp)
 1000ba0:	e17ff917 	ldw	r5,-28(fp)
 1000ba4:	01bae174 	movhi	r6,60293
 1000ba8:	3187ae04 	addi	r6,r6,7864
 1000bac:	01cfe7f4 	movhi	r7,16287
 1000bb0:	39ee1444 	addi	r7,r7,-18351
 1000bb4:	1004b340 	call	1004b34 <__subdf3>
 1000bb8:	1009883a 	mov	r4,r2
 1000bbc:	180b883a 	mov	r5,r3
 1000bc0:	e13ff815 	stw	r4,-32(fp)
 1000bc4:	e17ff915 	stw	r5,-28(fp)
			drawCannonBall(system, player, dir, time, BACKGROUND_HEX, wind_vel);
 1000bc8:	00804034 	movhi	r2,256
 1000bcc:	10bfffc4 	addi	r2,r2,-1
 1000bd0:	d8800115 	stw	r2,4(sp)
 1000bd4:	e0bffe17 	ldw	r2,-8(fp)
 1000bd8:	d8800215 	stw	r2,8(sp)
 1000bdc:	e0bff917 	ldw	r2,-28(fp)
 1000be0:	d8800015 	stw	r2,0(sp)
 1000be4:	e1fff817 	ldw	r7,-32(fp)
 1000be8:	e13ffc17 	ldw	r4,-16(fp)
 1000bec:	e17ffd17 	ldw	r5,-12(fp)
 1000bf0:	e1bffb17 	ldw	r6,-20(fp)
 1000bf4:	10004b40 	call	10004b4 <drawCannonBall>
			time += TIME_SCALE;
 1000bf8:	e13ff817 	ldw	r4,-32(fp)
 1000bfc:	e17ff917 	ldw	r5,-28(fp)
 1000c00:	01bae174 	movhi	r6,60293
 1000c04:	3187ae04 	addi	r6,r6,7864
 1000c08:	01cfe7f4 	movhi	r7,16287
 1000c0c:	39ee1444 	addi	r7,r7,-18351
 1000c10:	1004bb40 	call	1004bb4 <__adddf3>
 1000c14:	1009883a 	mov	r4,r2
 1000c18:	180b883a 	mov	r5,r3
 1000c1c:	e13ff815 	stw	r4,-32(fp)
 1000c20:	e17ff915 	stw	r5,-28(fp)
		}
		result = drawCannonBall(system, player, dir, time, BALL_HEX, wind_vel);
 1000c24:	d8000115 	stw	zero,4(sp)
 1000c28:	e0bffe17 	ldw	r2,-8(fp)
 1000c2c:	d8800215 	stw	r2,8(sp)
 1000c30:	e0bff917 	ldw	r2,-28(fp)
 1000c34:	d8800015 	stw	r2,0(sp)
 1000c38:	e1fff817 	ldw	r7,-32(fp)
 1000c3c:	e13ffc17 	ldw	r4,-16(fp)
 1000c40:	e17ffd17 	ldw	r5,-12(fp)
 1000c44:	e1bffb17 	ldw	r6,-20(fp)
 1000c48:	10004b40 	call	10004b4 <drawCannonBall>
 1000c4c:	e0bffa15 	stw	r2,-24(fp)
		time += TIME_SCALE;
 1000c50:	e13ff817 	ldw	r4,-32(fp)
 1000c54:	e17ff917 	ldw	r5,-28(fp)
 1000c58:	01bae174 	movhi	r6,60293
 1000c5c:	3187ae04 	addi	r6,r6,7864
 1000c60:	01cfe7f4 	movhi	r7,16287
 1000c64:	39ee1444 	addi	r7,r7,-18351
 1000c68:	1004bb40 	call	1004bb4 <__adddf3>
 1000c6c:	1009883a 	mov	r4,r2
 1000c70:	180b883a 	mov	r5,r3
 1000c74:	e13ff815 	stw	r4,-32(fp)
 1000c78:	e17ff915 	stw	r5,-28(fp)
		usleep(12000);
 1000c7c:	010bb804 	movi	r4,12000
 1000c80:	10141440 	call	1014144 <usleep>
		dir = RIGHT;
	} else if (player->id == 2) {
		dir = LEFT;
	}

	while (result == 0) {
 1000c84:	e0bffa17 	ldw	r2,-24(fp)
 1000c88:	1005003a 	cmpeq	r2,r2,zero
 1000c8c:	103fbb1e 	bne	r2,zero,1000b7c <animateShooting+0x60>
		}
		result = drawCannonBall(system, player, dir, time, BALL_HEX, wind_vel);
		time += TIME_SCALE;
		usleep(12000);
	}
	drawPlayers(system, player);
 1000c90:	e13ffc17 	ldw	r4,-16(fp)
 1000c94:	e17ffd17 	ldw	r5,-12(fp)
 1000c98:	10004300 	call	1000430 <drawPlayers>
	if (result == 2) {
 1000c9c:	e0bffa17 	ldw	r2,-24(fp)
 1000ca0:	10800098 	cmpnei	r2,r2,2
 1000ca4:	1000031e 	bne	r2,zero,1000cb4 <animateShooting+0x198>
		return 1; //Hit
 1000ca8:	00800044 	movi	r2,1
 1000cac:	e0bfff15 	stw	r2,-4(fp)
 1000cb0:	00000706 	br	1000cd0 <animateShooting+0x1b4>
	} else if (result == 3) {
 1000cb4:	e0bffa17 	ldw	r2,-24(fp)
 1000cb8:	108000d8 	cmpnei	r2,r2,3
 1000cbc:	1000031e 	bne	r2,zero,1000ccc <animateShooting+0x1b0>
		return 2; // self-hit
 1000cc0:	00800084 	movi	r2,2
 1000cc4:	e0bfff15 	stw	r2,-4(fp)
 1000cc8:	00000106 	br	1000cd0 <animateShooting+0x1b4>
	} else
		return 0; //Miss
 1000ccc:	e03fff15 	stw	zero,-4(fp)
 1000cd0:	e0bfff17 	ldw	r2,-4(fp)
}
 1000cd4:	e037883a 	mov	sp,fp
 1000cd8:	dfc00117 	ldw	ra,4(sp)
 1000cdc:	df000017 	ldw	fp,0(sp)
 1000ce0:	dec00204 	addi	sp,sp,8
 1000ce4:	f800283a 	ret

01000ce8 <initiate_pixel_buffer_dma>:
#include <stdlib.h>
#include "hardware_init.h"
#include "global_include.h"

/* Initiates the pixel buffer dma and returns the address */
alt_up_pixel_buffer_dma_dev* initiate_pixel_buffer_dma(char* name) {
 1000ce8:	defffc04 	addi	sp,sp,-16
 1000cec:	dfc00315 	stw	ra,12(sp)
 1000cf0:	df000215 	stw	fp,8(sp)
 1000cf4:	df000204 	addi	fp,sp,8
 1000cf8:	e13fff15 	stw	r4,-4(fp)
	alt_up_pixel_buffer_dma_dev* dev = alt_up_pixel_buffer_dma_open_dev(name);
 1000cfc:	e13fff17 	ldw	r4,-4(fp)
 1000d00:	101a6a40 	call	101a6a4 <alt_up_pixel_buffer_dma_open_dev>
 1000d04:	e0bffe15 	stw	r2,-8(fp)
	if (dev == NULL) {
 1000d08:	e0bffe17 	ldw	r2,-8(fp)
 1000d0c:	1004c03a 	cmpne	r2,r2,zero
 1000d10:	1000041e 	bne	r2,zero,1000d24 <initiate_pixel_buffer_dma+0x3c>
		printf("Unable to grab the Pixel Buffer DMA\n");
 1000d14:	010040b4 	movhi	r4,258
 1000d18:	213ae704 	addi	r4,r4,-5220
 1000d1c:	100662c0 	call	100662c <puts>
 1000d20:	00000306 	br	1000d30 <initiate_pixel_buffer_dma+0x48>
		if (!TEST_MODE) {
			printf("Aborting Session\n");
		}
	} else {
		printf("Pixel Buffer DMA Peripheral Loaded\n");
 1000d24:	010040b4 	movhi	r4,258
 1000d28:	213af004 	addi	r4,r4,-5184
 1000d2c:	100662c0 	call	100662c <puts>
	}

	alt_up_pixel_buffer_dma_change_back_buffer_address(dev, SRAM_0_BASE);
 1000d30:	e13ffe17 	ldw	r4,-8(fp)
 1000d34:	01400234 	movhi	r5,8
 1000d38:	101a8840 	call	101a884 <alt_up_pixel_buffer_dma_change_back_buffer_address>
	alt_up_pixel_buffer_dma_swap_buffers(dev);
 1000d3c:	e13ffe17 	ldw	r4,-8(fp)
 1000d40:	101a8dc0 	call	101a8dc <alt_up_pixel_buffer_dma_swap_buffers>
	while (alt_up_pixel_buffer_dma_check_swap_buffers_status(dev))
 1000d44:	e13ffe17 	ldw	r4,-8(fp)
 1000d48:	101a9340 	call	101a934 <alt_up_pixel_buffer_dma_check_swap_buffers_status>
 1000d4c:	1004c03a 	cmpne	r2,r2,zero
 1000d50:	103ffc1e 	bne	r2,zero,1000d44 <initiate_pixel_buffer_dma+0x5c>
		;
	alt_up_pixel_buffer_dma_clear_screen(dev, 0);
 1000d54:	e13ffe17 	ldw	r4,-8(fp)
 1000d58:	000b883a 	mov	r5,zero
 1000d5c:	101a9680 	call	101a968 <alt_up_pixel_buffer_dma_clear_screen>
	return dev;
 1000d60:	e0bffe17 	ldw	r2,-8(fp)
}
 1000d64:	e037883a 	mov	sp,fp
 1000d68:	dfc00117 	ldw	ra,4(sp)
 1000d6c:	df000017 	ldw	fp,0(sp)
 1000d70:	dec00204 	addi	sp,sp,8
 1000d74:	f800283a 	ret

01000d78 <initiate_char_buffer>:

/* Initiates the character buffer and returns the address */
alt_up_char_buffer_dev* initiate_char_buffer(char* name) {
 1000d78:	defffc04 	addi	sp,sp,-16
 1000d7c:	dfc00315 	stw	ra,12(sp)
 1000d80:	df000215 	stw	fp,8(sp)
 1000d84:	df000204 	addi	fp,sp,8
 1000d88:	e13fff15 	stw	r4,-4(fp)
	alt_up_char_buffer_dev* dev = alt_up_char_buffer_open_dev(name);
 1000d8c:	e13fff17 	ldw	r4,-4(fp)
 1000d90:	101a4240 	call	101a424 <alt_up_char_buffer_open_dev>
 1000d94:	e0bffe15 	stw	r2,-8(fp)
	if (dev == NULL) {
 1000d98:	e0bffe17 	ldw	r2,-8(fp)
 1000d9c:	1004c03a 	cmpne	r2,r2,zero
 1000da0:	1000041e 	bne	r2,zero,1000db4 <initiate_char_buffer+0x3c>
		printf("Unable to get character buffer dev.\n");
 1000da4:	010040b4 	movhi	r4,258
 1000da8:	213af904 	addi	r4,r4,-5148
 1000dac:	100662c0 	call	100662c <puts>
 1000db0:	00000306 	br	1000dc0 <initiate_char_buffer+0x48>
	} else {
		printf("Char buffer loaded");
 1000db4:	010040b4 	movhi	r4,258
 1000db8:	213b0204 	addi	r4,r4,-5112
 1000dbc:	10065140 	call	1006514 <printf>
	}
	alt_up_char_buffer_init(dev);
 1000dc0:	e13ffe17 	ldw	r4,-8(fp)
 1000dc4:	101a3a00 	call	101a3a0 <alt_up_char_buffer_init>
	return dev;
 1000dc8:	e0bffe17 	ldw	r2,-8(fp)
}
 1000dcc:	e037883a 	mov	sp,fp
 1000dd0:	dfc00117 	ldw	ra,4(sp)
 1000dd4:	df000017 	ldw	fp,0(sp)
 1000dd8:	dec00204 	addi	sp,sp,8
 1000ddc:	f800283a 	ret

01000de0 <initiate_sd_card>:

/* Initiates the sd card and returns the address */
alt_up_sd_card_dev* initiate_sd_card(char* name) {
 1000de0:	defffc04 	addi	sp,sp,-16
 1000de4:	dfc00315 	stw	ra,12(sp)
 1000de8:	df000215 	stw	fp,8(sp)
 1000dec:	df000204 	addi	fp,sp,8
 1000df0:	e13fff15 	stw	r4,-4(fp)
	alt_up_sd_card_dev* dev = alt_up_sd_card_open_dev(name);
 1000df4:	e13fff17 	ldw	r4,-4(fp)
 1000df8:	101742c0 	call	101742c <alt_up_sd_card_open_dev>
 1000dfc:	e0bffe15 	stw	r2,-8(fp)
	if (dev == NULL) {
 1000e00:	e0bffe17 	ldw	r2,-8(fp)
 1000e04:	1004c03a 	cmpne	r2,r2,zero
 1000e08:	1000041e 	bne	r2,zero,1000e1c <initiate_sd_card+0x3c>
		printf("Unable to connect to SD Card\n");
 1000e0c:	010040b4 	movhi	r4,258
 1000e10:	213b0704 	addi	r4,r4,-5092
 1000e14:	100662c0 	call	100662c <puts>
 1000e18:	00000306 	br	1000e28 <initiate_sd_card+0x48>
		if (!TEST_MODE) {
			printf("Aborting Session\n");
		}
	} else {
		printf("SD Card Peripheral Loaded\n");
 1000e1c:	010040b4 	movhi	r4,258
 1000e20:	213b0f04 	addi	r4,r4,-5060
 1000e24:	100662c0 	call	100662c <puts>
	}

	// @TODO initialization

	return dev;
 1000e28:	e0bffe17 	ldw	r2,-8(fp)
}
 1000e2c:	e037883a 	mov	sp,fp
 1000e30:	dfc00117 	ldw	ra,4(sp)
 1000e34:	df000017 	ldw	fp,0(sp)
 1000e38:	dec00204 	addi	sp,sp,8
 1000e3c:	f800283a 	ret

01000e40 <initiate_ps2>:

/* Initiates PS/2 and returns the address */
alt_up_ps2_dev* initiate_ps2(char* name) {
 1000e40:	defffc04 	addi	sp,sp,-16
 1000e44:	dfc00315 	stw	ra,12(sp)
 1000e48:	df000215 	stw	fp,8(sp)
 1000e4c:	df000204 	addi	fp,sp,8
 1000e50:	e13fff15 	stw	r4,-4(fp)
	alt_up_ps2_dev* dev = alt_up_ps2_open_dev(name);
 1000e54:	e13fff17 	ldw	r4,-4(fp)
 1000e58:	101a3600 	call	101a360 <alt_up_ps2_open_dev>
 1000e5c:	e0bffe15 	stw	r2,-8(fp)
	if (dev == NULL) {
 1000e60:	e0bffe17 	ldw	r2,-8(fp)
 1000e64:	1004c03a 	cmpne	r2,r2,zero
 1000e68:	1000041e 	bne	r2,zero,1000e7c <initiate_ps2+0x3c>
		printf("Unable to connect to PS/2 Keyboard.\n");
 1000e6c:	010040b4 	movhi	r4,258
 1000e70:	213b1604 	addi	r4,r4,-5032
 1000e74:	100662c0 	call	100662c <puts>
 1000e78:	00000306 	br	1000e88 <initiate_ps2+0x48>
		if (!TEST_MODE & !NO_PS2) {
			printf("Aborting Session\n");
		}
	} else {
		printf("PS/2 Keyboard Peripheral Loaded.\n");
 1000e7c:	010040b4 	movhi	r4,258
 1000e80:	213b1f04 	addi	r4,r4,-4996
 1000e84:	100662c0 	call	100662c <puts>
	}

	/* initialize */
	if (!NO_PS2)
		alt_up_ps2_init(dev);
 1000e88:	e13ffe17 	ldw	r4,-8(fp)
 1000e8c:	1019dcc0 	call	1019dcc <alt_up_ps2_init>
	return dev;
 1000e90:	e0bffe17 	ldw	r2,-8(fp)
}
 1000e94:	e037883a 	mov	sp,fp
 1000e98:	dfc00117 	ldw	ra,4(sp)
 1000e9c:	df000017 	ldw	fp,0(sp)
 1000ea0:	dec00204 	addi	sp,sp,8
 1000ea4:	f800283a 	ret

01000ea8 <system_init>:

/* Initiates the system peripherals and returns the dev_t object */
system_t* system_init(char* pixel_buffer_name, char* char_buffer_name,
		char* sd_card_name, char* ps2_name) {
 1000ea8:	defff904 	addi	sp,sp,-28
 1000eac:	dfc00615 	stw	ra,24(sp)
 1000eb0:	df000515 	stw	fp,20(sp)
 1000eb4:	df000504 	addi	fp,sp,20
 1000eb8:	e13ffc15 	stw	r4,-16(fp)
 1000ebc:	e17ffd15 	stw	r5,-12(fp)
 1000ec0:	e1bffe15 	stw	r6,-8(fp)
 1000ec4:	e1ffff15 	stw	r7,-4(fp)
	system_t* system = (system_t*) malloc(sizeof(system_t));
 1000ec8:	01000404 	movi	r4,16
 1000ecc:	1005dc00 	call	1005dc0 <malloc>
 1000ed0:	e0bffb15 	stw	r2,-20(fp)
	system->pixel_buffer = initiate_pixel_buffer_dma(pixel_buffer_name);
 1000ed4:	e13ffc17 	ldw	r4,-16(fp)
 1000ed8:	1000ce80 	call	1000ce8 <initiate_pixel_buffer_dma>
 1000edc:	1007883a 	mov	r3,r2
 1000ee0:	e0bffb17 	ldw	r2,-20(fp)
 1000ee4:	10c00015 	stw	r3,0(r2)
	system->char_buffer = initiate_char_buffer(char_buffer_name);
 1000ee8:	e13ffd17 	ldw	r4,-12(fp)
 1000eec:	1000d780 	call	1000d78 <initiate_char_buffer>
 1000ef0:	1007883a 	mov	r3,r2
 1000ef4:	e0bffb17 	ldw	r2,-20(fp)
 1000ef8:	10c00115 	stw	r3,4(r2)
	system->sd_card = initiate_sd_card(sd_card_name);
 1000efc:	e13ffe17 	ldw	r4,-8(fp)
 1000f00:	1000de00 	call	1000de0 <initiate_sd_card>
 1000f04:	1007883a 	mov	r3,r2
 1000f08:	e0bffb17 	ldw	r2,-20(fp)
 1000f0c:	10c00215 	stw	r3,8(r2)
	system->ps2 = initiate_ps2(ps2_name);
 1000f10:	e13fff17 	ldw	r4,-4(fp)
 1000f14:	1000e400 	call	1000e40 <initiate_ps2>
 1000f18:	1007883a 	mov	r3,r2
 1000f1c:	e0bffb17 	ldw	r2,-20(fp)
 1000f20:	10c00315 	stw	r3,12(r2)
	return system;
 1000f24:	e0bffb17 	ldw	r2,-20(fp)
}
 1000f28:	e037883a 	mov	sp,fp
 1000f2c:	dfc00117 	ldw	ra,4(sp)
 1000f30:	df000017 	ldw	fp,0(sp)
 1000f34:	dec00204 	addi	sp,sp,8
 1000f38:	f800283a 	ret

01000f3c <getKeyboardInput>:
 * @param	type - 1 for Vel/Pow, 2 for Angle
 * @param	player - player object
 * @param 	system - system dev obejct
 */

void getKeyboardInput(int type, player_t* player, system_t* system) {
 1000f3c:	defff704 	addi	sp,sp,-36
 1000f40:	dfc00815 	stw	ra,32(sp)
 1000f44:	df000715 	stw	fp,28(sp)
 1000f48:	df000704 	addi	fp,sp,28
 1000f4c:	e13ffd15 	stw	r4,-12(fp)
 1000f50:	e17ffe15 	stw	r5,-8(fp)
 1000f54:	e1bfff15 	stw	r6,-4(fp)
	KB_CODE_TYPE code_type;
	char ascii;
	unsigned char buf;
	char* buffer = malloc(6 * sizeof(char));
 1000f58:	01000184 	movi	r4,6
 1000f5c:	1005dc00 	call	1005dc0 <malloc>
 1000f60:	e0bffa15 	stw	r2,-24(fp)

	int status = 1;
 1000f64:	00800044 	movi	r2,1
 1000f68:	e0bff915 	stw	r2,-28(fp)
 1000f6c:	00000006 	br	1000f70 <getKeyboardInput+0x34>
	while (TRUE) {
//		printf("Current Player: %d\n", player->id);
//		printf("Current Velocity: %d\n", player->velocity);
//		printf("Current Angle: %d\n", player->angle);
		if (!NO_PS2) {
			status = decode_scancode(system->ps2, &code_type, &buf, &ascii);
 1000f70:	e0bfff17 	ldw	r2,-4(fp)
 1000f74:	11000317 	ldw	r4,12(r2)
 1000f78:	e17ffb04 	addi	r5,fp,-20
 1000f7c:	e1bffc44 	addi	r6,fp,-15
 1000f80:	e1fffc04 	addi	r7,fp,-16
 1000f84:	101bf5c0 	call	101bf5c <decode_scancode>
 1000f88:	e0bff915 	stw	r2,-28(fp)
				buf = ENTER;
			}
			status = 0;
			code_type = KB_BINARY_MAKE_CODE;
		}
		if (status == 0) {
 1000f8c:	e0bff917 	ldw	r2,-28(fp)
 1000f90:	1004c03a 	cmpne	r2,r2,zero
 1000f94:	103ff61e 	bne	r2,zero,1000f70 <getKeyboardInput+0x34>
//			if (code_type == KB_LONG_BINARY_MAKE_CODE
//					|| code_type == KB_BINARY_MAKE_CODE) { //key press

			while (decode_scancode(system->ps2, NULL, NULL, NULL) == -1)
 1000f98:	e0bfff17 	ldw	r2,-4(fp)
 1000f9c:	11000317 	ldw	r4,12(r2)
 1000fa0:	000b883a 	mov	r5,zero
 1000fa4:	000d883a 	mov	r6,zero
 1000fa8:	000f883a 	mov	r7,zero
 1000fac:	101bf5c0 	call	101bf5c <decode_scancode>
 1000fb0:	10bfffe0 	cmpeqi	r2,r2,-1
 1000fb4:	103ff81e 	bne	r2,zero,1000f98 <getKeyboardInput+0x5c>
				;
			if (buf == UP) {
 1000fb8:	e0bffc43 	ldbu	r2,-15(fp)
 1000fbc:	10803fcc 	andi	r2,r2,255
 1000fc0:	10801d58 	cmpnei	r2,r2,117
 1000fc4:	1000281e 	bne	r2,zero,1001068 <getKeyboardInput+0x12c>
				if (type == 1) {
 1000fc8:	e0bffd17 	ldw	r2,-12(fp)
 1000fcc:	10800058 	cmpnei	r2,r2,1
 1000fd0:	1000111e 	bne	r2,zero,1001018 <getKeyboardInput+0xdc>
					if (player->velocity < 100)
 1000fd4:	e0bffe17 	ldw	r2,-8(fp)
 1000fd8:	10800417 	ldw	r2,16(r2)
 1000fdc:	10801908 	cmpgei	r2,r2,100
 1000fe0:	1000051e 	bne	r2,zero,1000ff8 <getKeyboardInput+0xbc>
						player->velocity += 5;
 1000fe4:	e0bffe17 	ldw	r2,-8(fp)
 1000fe8:	10800417 	ldw	r2,16(r2)
 1000fec:	10c00144 	addi	r3,r2,5
 1000ff0:	e0bffe17 	ldw	r2,-8(fp)
 1000ff4:	10c00415 	stw	r3,16(r2)
					printf("Player %d's Current Velocity : %d\n", player->id, player->velocity);
 1000ff8:	e0bffe17 	ldw	r2,-8(fp)
 1000ffc:	11400017 	ldw	r5,0(r2)
 1001000:	e0bffe17 	ldw	r2,-8(fp)
 1001004:	11800417 	ldw	r6,16(r2)
 1001008:	010040b4 	movhi	r4,258
 100100c:	213b2804 	addi	r4,r4,-4960
 1001010:	10065140 	call	1006514 <printf>
 1001014:	003fd606 	br	1000f70 <getKeyboardInput+0x34>
				} else if (type == 2) {
 1001018:	e0bffd17 	ldw	r2,-12(fp)
 100101c:	10800098 	cmpnei	r2,r2,2
 1001020:	103fd31e 	bne	r2,zero,1000f70 <getKeyboardInput+0x34>
					if (player->angle < 90)
 1001024:	e0bffe17 	ldw	r2,-8(fp)
 1001028:	10800317 	ldw	r2,12(r2)
 100102c:	10801688 	cmpgei	r2,r2,90
 1001030:	1000051e 	bne	r2,zero,1001048 <getKeyboardInput+0x10c>
						player->angle += 5;
 1001034:	e0bffe17 	ldw	r2,-8(fp)
 1001038:	10800317 	ldw	r2,12(r2)
 100103c:	10c00144 	addi	r3,r2,5
 1001040:	e0bffe17 	ldw	r2,-8(fp)
 1001044:	10c00315 	stw	r3,12(r2)
					printf("Player %d's Current Angle : %d\n", player->id, player->angle);
 1001048:	e0bffe17 	ldw	r2,-8(fp)
 100104c:	11400017 	ldw	r5,0(r2)
 1001050:	e0bffe17 	ldw	r2,-8(fp)
 1001054:	11800317 	ldw	r6,12(r2)
 1001058:	010040b4 	movhi	r4,258
 100105c:	213b3104 	addi	r4,r4,-4924
 1001060:	10065140 	call	1006514 <printf>
 1001064:	003fc206 	br	1000f70 <getKeyboardInput+0x34>
				}
			} else if (buf == DOWN) {
 1001068:	e0bffc43 	ldbu	r2,-15(fp)
 100106c:	10803fcc 	andi	r2,r2,255
 1001070:	10801c98 	cmpnei	r2,r2,114
 1001074:	1000281e 	bne	r2,zero,1001118 <getKeyboardInput+0x1dc>
				if (type == 1) {
 1001078:	e0bffd17 	ldw	r2,-12(fp)
 100107c:	10800058 	cmpnei	r2,r2,1
 1001080:	1000111e 	bne	r2,zero,10010c8 <getKeyboardInput+0x18c>
					if (player->velocity > 0)
 1001084:	e0bffe17 	ldw	r2,-8(fp)
 1001088:	10800417 	ldw	r2,16(r2)
 100108c:	10800050 	cmplti	r2,r2,1
 1001090:	1000051e 	bne	r2,zero,10010a8 <getKeyboardInput+0x16c>
						player->velocity -= 5;
 1001094:	e0bffe17 	ldw	r2,-8(fp)
 1001098:	10800417 	ldw	r2,16(r2)
 100109c:	10fffec4 	addi	r3,r2,-5
 10010a0:	e0bffe17 	ldw	r2,-8(fp)
 10010a4:	10c00415 	stw	r3,16(r2)
					printf("Player %d's Current Velocity : %d\n", player->id, player->velocity);
 10010a8:	e0bffe17 	ldw	r2,-8(fp)
 10010ac:	11400017 	ldw	r5,0(r2)
 10010b0:	e0bffe17 	ldw	r2,-8(fp)
 10010b4:	11800417 	ldw	r6,16(r2)
 10010b8:	010040b4 	movhi	r4,258
 10010bc:	213b2804 	addi	r4,r4,-4960
 10010c0:	10065140 	call	1006514 <printf>
 10010c4:	003faa06 	br	1000f70 <getKeyboardInput+0x34>
				} else if (type == 2) {
 10010c8:	e0bffd17 	ldw	r2,-12(fp)
 10010cc:	10800098 	cmpnei	r2,r2,2
 10010d0:	103fa71e 	bne	r2,zero,1000f70 <getKeyboardInput+0x34>
					if (player->angle > 0)
 10010d4:	e0bffe17 	ldw	r2,-8(fp)
 10010d8:	10800317 	ldw	r2,12(r2)
 10010dc:	10800050 	cmplti	r2,r2,1
 10010e0:	1000051e 	bne	r2,zero,10010f8 <getKeyboardInput+0x1bc>
						player->angle -= 5;
 10010e4:	e0bffe17 	ldw	r2,-8(fp)
 10010e8:	10800317 	ldw	r2,12(r2)
 10010ec:	10fffec4 	addi	r3,r2,-5
 10010f0:	e0bffe17 	ldw	r2,-8(fp)
 10010f4:	10c00315 	stw	r3,12(r2)
					printf("Player %d's Current Angle : %d\n", player->id, player->angle);
 10010f8:	e0bffe17 	ldw	r2,-8(fp)
 10010fc:	11400017 	ldw	r5,0(r2)
 1001100:	e0bffe17 	ldw	r2,-8(fp)
 1001104:	11800317 	ldw	r6,12(r2)
 1001108:	010040b4 	movhi	r4,258
 100110c:	213b3104 	addi	r4,r4,-4924
 1001110:	10065140 	call	1006514 <printf>
 1001114:	003f9606 	br	1000f70 <getKeyboardInput+0x34>

				}
			} else if (buf == ENTER) { //Covers both Enter & KP_EN
 1001118:	e0bffc43 	ldbu	r2,-15(fp)
 100111c:	10803fcc 	andi	r2,r2,255
 1001120:	10801698 	cmpnei	r2,r2,90
 1001124:	103f921e 	bne	r2,zero,1000f70 <getKeyboardInput+0x34>
				if (type == 1) {
 1001128:	e0bffd17 	ldw	r2,-12(fp)
 100112c:	10800058 	cmpnei	r2,r2,1
 1001130:	1000061e 	bne	r2,zero,100114c <getKeyboardInput+0x210>
					printf("Final Velocity : %d\n", player->velocity);
 1001134:	e0bffe17 	ldw	r2,-8(fp)
 1001138:	11400417 	ldw	r5,16(r2)
 100113c:	010040b4 	movhi	r4,258
 1001140:	213b3904 	addi	r4,r4,-4892
 1001144:	10065140 	call	1006514 <printf>
 1001148:	00000806 	br	100116c <getKeyboardInput+0x230>
				} else if (type == 2) {
 100114c:	e0bffd17 	ldw	r2,-12(fp)
 1001150:	10800098 	cmpnei	r2,r2,2
 1001154:	1000051e 	bne	r2,zero,100116c <getKeyboardInput+0x230>
					printf("Final Angle : %d\n", player->angle);
 1001158:	e0bffe17 	ldw	r2,-8(fp)
 100115c:	11400317 	ldw	r5,12(r2)
 1001160:	010040b4 	movhi	r4,258
 1001164:	213b3f04 	addi	r4,r4,-4868
 1001168:	10065140 	call	1006514 <printf>
//			} else if (KB_BREAK_CODE || code_type == KB_LONG_BREAK_CODE) {
//				//Do nothing
//			}
		}
	}
}
 100116c:	e037883a 	mov	sp,fp
 1001170:	dfc00117 	ldw	ra,4(sp)
 1001174:	df000017 	ldw	fp,0(sp)
 1001178:	dec00204 	addi	sp,sp,8
 100117c:	f800283a 	ret

01001180 <main>:
#include "game.h"
#include "keyboard.h"
#include "graphics.h"
#include "global_include.h"

int main(void) {
 1001180:	defff804 	addi	sp,sp,-32
 1001184:	dfc00715 	stw	ra,28(sp)
 1001188:	df000615 	stw	fp,24(sp)
 100118c:	df000604 	addi	fp,sp,24
	system_t* system;
	player_t* player1;
	player_t* player2;
	int wind;
	/* initialize all hardware dev */
	system = system_init(VIDEO_PIXEL_BUFFER_DMA_NAME,
 1001190:	010040b4 	movhi	r4,258
 1001194:	213b4404 	addi	r4,r4,-4848
 1001198:	014040b4 	movhi	r5,258
 100119c:	297b4b04 	addi	r5,r5,-4820
 10011a0:	018040b4 	movhi	r6,258
 10011a4:	31bb5b04 	addi	r6,r6,-4756
 10011a8:	01c040b4 	movhi	r7,258
 10011ac:	39fb6604 	addi	r7,r7,-4712
 10011b0:	1000ea80 	call	1000ea8 <system_init>
 10011b4:	e0bffd15 	stw	r2,-12(fp)
			VIDEO_CHARACTER_BUFFER_WITH_DMA_0_AVALON_CHAR_BUFFER_SLAVE_NAME,
			ALTERA_UP_SD_CARD_AVALON_INTERFACE_0_NAME, PS2_0_NAME);

	/* initialize required objects */
	player1 = makePlayer(1, "TJ");
 10011b8:	01000044 	movi	r4,1
 10011bc:	014040b4 	movhi	r5,258
 10011c0:	297b6904 	addi	r5,r5,-4700
 10011c4:	10014b00 	call	10014b0 <makePlayer>
 10011c8:	e0bffc15 	stw	r2,-16(fp)
	player2 = makePlayer(2, "Lomash");
 10011cc:	01000084 	movi	r4,2
 10011d0:	014040b4 	movhi	r5,258
 10011d4:	297b6a04 	addi	r5,r5,-4696
 10011d8:	10014b00 	call	10014b0 <makePlayer>
 10011dc:	e0bffb15 	stw	r2,-20(fp)

	clearScreen(system);
 10011e0:	e13ffd17 	ldw	r4,-12(fp)
 10011e4:	10003040 	call	1000304 <clearScreen>
	drawPlayers(system, player1);
 10011e8:	e13ffd17 	ldw	r4,-12(fp)
 10011ec:	e17ffc17 	ldw	r5,-16(fp)
 10011f0:	10004300 	call	1000430 <drawPlayers>
	usleep(2000000); // sleep to wait for video buffer to load
 10011f4:	010007f4 	movhi	r4,31
 10011f8:	21212004 	addi	r4,r4,-31616
 10011fc:	10141440 	call	1014144 <usleep>

	printf("Entering Endless Loop.\n");
 1001200:	010040b4 	movhi	r4,258
 1001204:	213b6c04 	addi	r4,r4,-4688
 1001208:	100662c0 	call	100662c <puts>

	while (TRUE) {
		printf("\n\n\n\n===========================================================\n");
 100120c:	010040b4 	movhi	r4,258
 1001210:	213b7204 	addi	r4,r4,-4664
 1001214:	100662c0 	call	100662c <puts>
		printf("Player 1 Health = %d \t\t Player 2 Health = %d\n", player1->health, player2->health);
 1001218:	e0bffc17 	ldw	r2,-16(fp)
 100121c:	11400217 	ldw	r5,8(r2)
 1001220:	e0bffb17 	ldw	r2,-20(fp)
 1001224:	11800217 	ldw	r6,8(r2)
 1001228:	010040b4 	movhi	r4,258
 100122c:	213b8204 	addi	r4,r4,-4600
 1001230:	10065140 	call	1006514 <printf>
		wind = rand()%11-5;
 1001234:	100665c0 	call	100665c <rand>
 1001238:	1009883a 	mov	r4,r2
 100123c:	014002c4 	movi	r5,11
 1001240:	10057100 	call	1005710 <__modsi3>
 1001244:	10bffec4 	addi	r2,r2,-5
 1001248:	e0bffa15 	stw	r2,-24(fp)

		printf("Current Wind : %d\n", wind);
 100124c:	010040b4 	movhi	r4,258
 1001250:	213b8e04 	addi	r4,r4,-4552
 1001254:	e17ffa17 	ldw	r5,-24(fp)
 1001258:	10065140 	call	1006514 <printf>
		/* Player 1 Power-Selection */
		getKeyboardInput(1, player1, system);
 100125c:	01000044 	movi	r4,1
 1001260:	e17ffc17 	ldw	r5,-16(fp)
 1001264:	e1bffd17 	ldw	r6,-12(fp)
 1001268:	1000f3c0 	call	1000f3c <getKeyboardInput>

		/* Player 1 Angle-Selection */
		getKeyboardInput(2, player1, system);
 100126c:	01000084 	movi	r4,2
 1001270:	e17ffc17 	ldw	r5,-16(fp)
 1001274:	e1bffd17 	ldw	r6,-12(fp)
 1001278:	1000f3c0 	call	1000f3c <getKeyboardInput>

		/* Player 1 Animation */
		printf("Starting animation\n");
 100127c:	010040b4 	movhi	r4,258
 1001280:	213b9304 	addi	r4,r4,-4532
 1001284:	100662c0 	call	100662c <puts>
		switch (animateShooting(system, player1, wind)) { // different value for result
 1001288:	e13ffd17 	ldw	r4,-12(fp)
 100128c:	e17ffc17 	ldw	r5,-16(fp)
 1001290:	e1bffa17 	ldw	r6,-24(fp)
 1001294:	1000b1c0 	call	1000b1c <animateShooting>
 1001298:	e0bfff15 	stw	r2,-4(fp)
 100129c:	e0ffff17 	ldw	r3,-4(fp)
 10012a0:	18800060 	cmpeqi	r2,r3,1
 10012a4:	1000041e 	bne	r2,zero,10012b8 <main+0x138>
 10012a8:	e0ffff17 	ldw	r3,-4(fp)
 10012ac:	188000a0 	cmpeqi	r2,r3,2
 10012b0:	10000c1e 	bne	r2,zero,10012e4 <main+0x164>
 10012b4:	00001506 	br	100130c <main+0x18c>
		case 1: {
			player2->health -= DAMAGE;
 10012b8:	e0bffb17 	ldw	r2,-20(fp)
 10012bc:	10800217 	ldw	r2,8(r2)
 10012c0:	10fff384 	addi	r3,r2,-50
 10012c4:	e0bffb17 	ldw	r2,-20(fp)
 10012c8:	10c00215 	stw	r3,8(r2)
			printf(
 10012cc:	e0bffb17 	ldw	r2,-20(fp)
 10012d0:	11400217 	ldw	r5,8(r2)
 10012d4:	010040b4 	movhi	r4,258
 10012d8:	213b9804 	addi	r4,r4,-4512
 10012dc:	10065140 	call	1006514 <printf>
					"Player 1 hit player 2.\n Remaining Health for Player 2: %d\n",
					player2->health);
			break;
 10012e0:	00000a06 	br	100130c <main+0x18c>
		}
		case 2: {
			player1->health -= DAMAGE;
 10012e4:	e0bffc17 	ldw	r2,-16(fp)
 10012e8:	10800217 	ldw	r2,8(r2)
 10012ec:	10fff384 	addi	r3,r2,-50
 10012f0:	e0bffc17 	ldw	r2,-16(fp)
 10012f4:	10c00215 	stw	r3,8(r2)
			printf(
 10012f8:	e0bffc17 	ldw	r2,-16(fp)
 10012fc:	11400217 	ldw	r5,8(r2)
 1001300:	010040b4 	movhi	r4,258
 1001304:	213ba704 	addi	r4,r4,-4452
 1001308:	10065140 	call	1006514 <printf>
		}
		default: {
			break;
		}
		}
		printf("Ended animation\n");
 100130c:	010040b4 	movhi	r4,258
 1001310:	213bb604 	addi	r4,r4,-4392
 1001314:	100662c0 	call	100662c <puts>
		/* Post-animation Calculation */
		if (player1->health <= 0 || player2->health <= 0) {
 1001318:	e0bffc17 	ldw	r2,-16(fp)
 100131c:	10800217 	ldw	r2,8(r2)
 1001320:	10800050 	cmplti	r2,r2,1
 1001324:	1000491e 	bne	r2,zero,100144c <main+0x2cc>
 1001328:	e0bffb17 	ldw	r2,-20(fp)
 100132c:	10800217 	ldw	r2,8(r2)
 1001330:	10800050 	cmplti	r2,r2,1
 1001334:	1000451e 	bne	r2,zero,100144c <main+0x2cc>
			break;
		}

		/* Player 2 Power-Selection */
		wind = rand()%11-5;
 1001338:	100665c0 	call	100665c <rand>
 100133c:	1009883a 	mov	r4,r2
 1001340:	014002c4 	movi	r5,11
 1001344:	10057100 	call	1005710 <__modsi3>
 1001348:	10bffec4 	addi	r2,r2,-5
 100134c:	e0bffa15 	stw	r2,-24(fp)
		printf("Current Wind : %d\n", wind);
 1001350:	010040b4 	movhi	r4,258
 1001354:	213b8e04 	addi	r4,r4,-4552
 1001358:	e17ffa17 	ldw	r5,-24(fp)
 100135c:	10065140 	call	1006514 <printf>
		printf("Getting Player 2 Velocity.\n");
 1001360:	010040b4 	movhi	r4,258
 1001364:	213bba04 	addi	r4,r4,-4376
 1001368:	100662c0 	call	100662c <puts>
		getKeyboardInput(1, player2, system);
 100136c:	01000044 	movi	r4,1
 1001370:	e17ffb17 	ldw	r5,-20(fp)
 1001374:	e1bffd17 	ldw	r6,-12(fp)
 1001378:	1000f3c0 	call	1000f3c <getKeyboardInput>
		/* Player 2 Angle-Selection */
		printf("Getting Player 2 Angle.\n");
 100137c:	010040b4 	movhi	r4,258
 1001380:	213bc104 	addi	r4,r4,-4348
 1001384:	100662c0 	call	100662c <puts>
		getKeyboardInput(2, player2, system);
 1001388:	01000084 	movi	r4,2
 100138c:	e17ffb17 	ldw	r5,-20(fp)
 1001390:	e1bffd17 	ldw	r6,-12(fp)
 1001394:	1000f3c0 	call	1000f3c <getKeyboardInput>
		/* Player 2 Animation */
		printf("Starting animation\n");
 1001398:	010040b4 	movhi	r4,258
 100139c:	213b9304 	addi	r4,r4,-4532
 10013a0:	100662c0 	call	100662c <puts>

		/* Post-animation Calculation */
		switch (animateShooting(system, player2, wind)) { // different value for result
 10013a4:	e13ffd17 	ldw	r4,-12(fp)
 10013a8:	e17ffb17 	ldw	r5,-20(fp)
 10013ac:	e1bffa17 	ldw	r6,-24(fp)
 10013b0:	1000b1c0 	call	1000b1c <animateShooting>
 10013b4:	e0bffe15 	stw	r2,-8(fp)
 10013b8:	e0fffe17 	ldw	r3,-8(fp)
 10013bc:	18800060 	cmpeqi	r2,r3,1
 10013c0:	1000041e 	bne	r2,zero,10013d4 <main+0x254>
 10013c4:	e0fffe17 	ldw	r3,-8(fp)
 10013c8:	188000a0 	cmpeqi	r2,r3,2
 10013cc:	10000c1e 	bne	r2,zero,1001400 <main+0x280>
 10013d0:	00001506 	br	1001428 <main+0x2a8>
		case 1: {
			player1->health -= DAMAGE;
 10013d4:	e0bffc17 	ldw	r2,-16(fp)
 10013d8:	10800217 	ldw	r2,8(r2)
 10013dc:	10fff384 	addi	r3,r2,-50
 10013e0:	e0bffc17 	ldw	r2,-16(fp)
 10013e4:	10c00215 	stw	r3,8(r2)
			printf(
 10013e8:	e0bffc17 	ldw	r2,-16(fp)
 10013ec:	11400217 	ldw	r5,8(r2)
 10013f0:	010040b4 	movhi	r4,258
 10013f4:	213bc704 	addi	r4,r4,-4324
 10013f8:	10065140 	call	1006514 <printf>
					"Player 2 hit player 1.\n Remaining Health for Player 1: %d\n",
					player1->health);
			break;
 10013fc:	00000a06 	br	1001428 <main+0x2a8>
		}
		case 2: {
			player2->health -= DAMAGE;
 1001400:	e0bffb17 	ldw	r2,-20(fp)
 1001404:	10800217 	ldw	r2,8(r2)
 1001408:	10fff384 	addi	r3,r2,-50
 100140c:	e0bffb17 	ldw	r2,-20(fp)
 1001410:	10c00215 	stw	r3,8(r2)
			printf(
 1001414:	e0bffb17 	ldw	r2,-20(fp)
 1001418:	11400217 	ldw	r5,8(r2)
 100141c:	010040b4 	movhi	r4,258
 1001420:	213bd604 	addi	r4,r4,-4264
 1001424:	10065140 	call	1006514 <printf>
		}
		default: {
			break;
		}
		}
		if (player1->health <= 0 || player2->health <= 0) {
 1001428:	e0bffc17 	ldw	r2,-16(fp)
 100142c:	10800217 	ldw	r2,8(r2)
 1001430:	10800050 	cmplti	r2,r2,1
 1001434:	1000051e 	bne	r2,zero,100144c <main+0x2cc>
 1001438:	e0bffb17 	ldw	r2,-20(fp)
 100143c:	10800217 	ldw	r2,8(r2)
 1001440:	10800050 	cmplti	r2,r2,1
 1001444:	1000011e 	bne	r2,zero,100144c <main+0x2cc>
			break;
		}

	}
 1001448:	003f7006 	br	100120c <main+0x8c>

	if (player1->health <= 0) {
 100144c:	e0bffc17 	ldw	r2,-16(fp)
 1001450:	10800217 	ldw	r2,8(r2)
 1001454:	10800048 	cmpgei	r2,r2,1
 1001458:	1000041e 	bne	r2,zero,100146c <main+0x2ec>
		printf("player 2 win\n");
 100145c:	010040b4 	movhi	r4,258
 1001460:	213be504 	addi	r4,r4,-4204
 1001464:	100662c0 	call	100662c <puts>
 1001468:	00000b06 	br	1001498 <main+0x318>
	} else if (player2->health <= 0) {
 100146c:	e0bffb17 	ldw	r2,-20(fp)
 1001470:	10800217 	ldw	r2,8(r2)
 1001474:	10800048 	cmpgei	r2,r2,1
 1001478:	1000041e 	bne	r2,zero,100148c <main+0x30c>
		printf("player 1 win\n");
 100147c:	010040b4 	movhi	r4,258
 1001480:	213be904 	addi	r4,r4,-4188
 1001484:	100662c0 	call	100662c <puts>
 1001488:	00000306 	br	1001498 <main+0x318>
	} else {
		printf("we shouldn't be here.\n");
 100148c:	010040b4 	movhi	r4,258
 1001490:	213bed04 	addi	r4,r4,-4172
 1001494:	100662c0 	call	100662c <puts>
	}

	return 0; // FIN
 1001498:	0005883a 	mov	r2,zero
}
 100149c:	e037883a 	mov	sp,fp
 10014a0:	dfc00117 	ldw	ra,4(sp)
 10014a4:	df000017 	ldw	fp,0(sp)
 10014a8:	dec00204 	addi	sp,sp,8
 10014ac:	f800283a 	ret

010014b0 <makePlayer>:
 * Makes a new player object with name input.
 * @id - id of the player (1 or 2)
 * @param name - name to set the player to
 * @returns player object
 */
player_t* makePlayer(int id, char* name) {
 10014b0:	defffb04 	addi	sp,sp,-20
 10014b4:	dfc00415 	stw	ra,16(sp)
 10014b8:	df000315 	stw	fp,12(sp)
 10014bc:	df000304 	addi	fp,sp,12
 10014c0:	e13ffe15 	stw	r4,-8(fp)
 10014c4:	e17fff15 	stw	r5,-4(fp)
	player_t* player = (player_t*) malloc(sizeof(player_t));
 10014c8:	01000704 	movi	r4,28
 10014cc:	1005dc00 	call	1005dc0 <malloc>
 10014d0:	e0bffd15 	stw	r2,-12(fp)

	player->id = id;
 10014d4:	e0fffd17 	ldw	r3,-12(fp)
 10014d8:	e0bffe17 	ldw	r2,-8(fp)
 10014dc:	18800015 	stw	r2,0(r3)
	sprintf(player->name, name);
 10014e0:	e0bffd17 	ldw	r2,-12(fp)
 10014e4:	11000117 	ldw	r4,4(r2)
 10014e8:	e17fff17 	ldw	r5,-4(fp)
 10014ec:	10067c00 	call	10067c0 <sprintf>
	player->health = 100;
 10014f0:	e0fffd17 	ldw	r3,-12(fp)
 10014f4:	00801904 	movi	r2,100
 10014f8:	18800215 	stw	r2,8(r3)
	player->angle = INIT_ANGLE;
 10014fc:	e0bffd17 	ldw	r2,-12(fp)
 1001500:	10000315 	stw	zero,12(r2)
	player->velocity = INIT_VELOCITY;
 1001504:	e0bffd17 	ldw	r2,-12(fp)
 1001508:	10000415 	stw	zero,16(r2)
	player->previousAngle = 45;
 100150c:	e0fffd17 	ldw	r3,-12(fp)
 1001510:	00800b44 	movi	r2,45
 1001514:	18800515 	stw	r2,20(r3)
	player->previousVelocity = 50;
 1001518:	e0fffd17 	ldw	r3,-12(fp)
 100151c:	00800c84 	movi	r2,50
 1001520:	18800615 	stw	r2,24(r3)

	return player;
 1001524:	e0bffd17 	ldw	r2,-12(fp)
}
 1001528:	e037883a 	mov	sp,fp
 100152c:	dfc00117 	ldw	ra,4(sp)
 1001530:	df000017 	ldw	fp,0(sp)
 1001534:	dec00204 	addi	sp,sp,8
 1001538:	f800283a 	ret

0100153c <damagePlayerHealth>:
/*
 * Puts damage or heal to player. (positive = damage; negative = heal)
 * @param player - player object
 * @param damage - quantity to lower player's health by
 */
void damagePlayerHealth(player_t* player, int damage) {
 100153c:	defffd04 	addi	sp,sp,-12
 1001540:	df000215 	stw	fp,8(sp)
 1001544:	df000204 	addi	fp,sp,8
 1001548:	e13ffe15 	stw	r4,-8(fp)
 100154c:	e17fff15 	stw	r5,-4(fp)
	player->health -= damage;
 1001550:	e0bffe17 	ldw	r2,-8(fp)
 1001554:	10c00217 	ldw	r3,8(r2)
 1001558:	e0bfff17 	ldw	r2,-4(fp)
 100155c:	1887c83a 	sub	r3,r3,r2
 1001560:	e0bffe17 	ldw	r2,-8(fp)
 1001564:	10c00215 	stw	r3,8(r2)
}
 1001568:	e037883a 	mov	sp,fp
 100156c:	df000017 	ldw	fp,0(sp)
 1001570:	dec00104 	addi	sp,sp,4
 1001574:	f800283a 	ret

01001578 <setPlayerAngle>:
/*
 * Sets player's angle to new input angle
 * @param player - player object
 * @param angle  - new angle to set
 */
void setPlayerAngle(player_t* player, int angle) {
 1001578:	defffd04 	addi	sp,sp,-12
 100157c:	df000215 	stw	fp,8(sp)
 1001580:	df000204 	addi	fp,sp,8
 1001584:	e13ffe15 	stw	r4,-8(fp)
 1001588:	e17fff15 	stw	r5,-4(fp)
	player->angle = angle;
 100158c:	e0fffe17 	ldw	r3,-8(fp)
 1001590:	e0bfff17 	ldw	r2,-4(fp)
 1001594:	18800315 	stw	r2,12(r3)
}
 1001598:	e037883a 	mov	sp,fp
 100159c:	df000017 	ldw	fp,0(sp)
 10015a0:	dec00104 	addi	sp,sp,4
 10015a4:	f800283a 	ret

010015a8 <setPlayerVelocity>:
/*
 * Sets player's velocity to new input velocity
 * @param player - player object
 * @param velocity - new velocity to set
 */
void setPlayerVelocity(player_t* player, int velocity) {
 10015a8:	defffd04 	addi	sp,sp,-12
 10015ac:	df000215 	stw	fp,8(sp)
 10015b0:	df000204 	addi	fp,sp,8
 10015b4:	e13ffe15 	stw	r4,-8(fp)
 10015b8:	e17fff15 	stw	r5,-4(fp)
	player->velocity = velocity;
 10015bc:	e0fffe17 	ldw	r3,-8(fp)
 10015c0:	e0bfff17 	ldw	r2,-4(fp)
 10015c4:	18800415 	stw	r2,16(r3)
}
 10015c8:	e037883a 	mov	sp,fp
 10015cc:	df000017 	ldw	fp,0(sp)
 10015d0:	dec00104 	addi	sp,sp,4
 10015d4:	f800283a 	ret

010015d8 <main_show>:
//draws a box of input colour between x_1, y_2 and x_2, y_2 using the pixel_drawer
void draw_box(int x_1, int y_1, int x_2, int y_2, unsigned int colour);
//draws a ball [diamond] of input colour with radius 2px about centre point (x,y)
void draw_ball(int x, int y, unsigned int colour);
int main_show(void);
int main_show(void){
 10015d8:	deffea04 	addi	sp,sp,-88
 10015dc:	dfc01515 	stw	ra,84(sp)
 10015e0:	df001415 	stw	fp,80(sp)
 10015e4:	df001404 	addi	fp,sp,80
	//setup pixel buffer
	alt_up_pixel_buffer_dma_dev* pixel_buffer;
	pixel_buffer = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");
 10015e8:	010040b4 	movhi	r4,258
 10015ec:	213bf304 	addi	r4,r4,-4148
 10015f0:	101a6a40 	call	101a6a4 <alt_up_pixel_buffer_dma_open_dev>
 10015f4:	e0bff115 	stw	r2,-60(fp)
	if (pixel_buffer == 0) {
 10015f8:	e0bff117 	ldw	r2,-60(fp)
 10015fc:	1004c03a 	cmpne	r2,r2,zero
 1001600:	1000031e 	bne	r2,zero,1001610 <main_show+0x38>
		printf("error initializing pixel buffer (check name in alt_up_pixel_buffer_dma_open_dev)\n");
 1001604:	010040b4 	movhi	r4,258
 1001608:	213bfb04 	addi	r4,r4,-4116
 100160c:	100662c0 	call	100662c <puts>
	}
	alt_up_pixel_buffer_dma_change_back_buffer_address(pixel_buffer, SRAM_0_BASE);
 1001610:	e13ff117 	ldw	r4,-60(fp)
 1001614:	01400234 	movhi	r5,8
 1001618:	101a8840 	call	101a884 <alt_up_pixel_buffer_dma_change_back_buffer_address>
	alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer);
 100161c:	e13ff117 	ldw	r4,-60(fp)
 1001620:	101a8dc0 	call	101a8dc <alt_up_pixel_buffer_dma_swap_buffers>
	while (alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buffer));
 1001624:	e13ff117 	ldw	r4,-60(fp)
 1001628:	101a9340 	call	101a934 <alt_up_pixel_buffer_dma_check_swap_buffers_status>
 100162c:	1004c03a 	cmpne	r2,r2,zero
 1001630:	103ffc1e 	bne	r2,zero,1001624 <main_show+0x4c>
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 0);
 1001634:	e13ff117 	ldw	r4,-60(fp)
 1001638:	000b883a 	mov	r5,zero
 100163c:	101a9680 	call	101a968 <alt_up_pixel_buffer_dma_clear_screen>
	srand(time(NULL));
 1001640:	0009883a 	mov	r4,zero
 1001644:	10069080 	call	1006908 <time>
 1001648:	1009883a 	mov	r4,r2
 100164c:	10066400 	call	1006640 <srand>

	//setup char buffer
	alt_up_char_buffer_dev * char_buffer;
	char_buffer = alt_up_char_buffer_open_dev("/dev/video_character_buffer_with_dma_0");
 1001650:	010040b4 	movhi	r4,258
 1001654:	213c1004 	addi	r4,r4,-4032
 1001658:	101a4240 	call	101a424 <alt_up_char_buffer_open_dev>
 100165c:	e0bff015 	stw	r2,-64(fp)
	alt_up_char_buffer_init(char_buffer); //initialize char buffer
 1001660:	e13ff017 	ldw	r4,-64(fp)
 1001664:	101a3a00 	call	101a3a0 <alt_up_char_buffer_init>
	alt_up_char_buffer_clear(char_buffer); //clear char buffer to erase previous angle text
 1001668:	e13ff017 	ldw	r4,-64(fp)
 100166c:	101a6480 	call	101a648 <alt_up_char_buffer_clear>

	//boundaries
	alt_up_pixel_buffer_dma_draw_box(pixel_buffer, 0, 0, 320, 1,rand() % 0x10000, 0); //x1, y1, x2, y2
 1001670:	100665c0 	call	100665c <rand>
 1001674:	1007883a 	mov	r3,r2
 1001678:	00a00074 	movhi	r2,32769
 100167c:	10bfffc4 	addi	r2,r2,-1
 1001680:	1886703a 	and	r3,r3,r2
 1001684:	e0fffa15 	stw	r3,-24(fp)
 1001688:	e0fffa17 	ldw	r3,-24(fp)
 100168c:	1804403a 	cmpge	r2,r3,zero
 1001690:	1000091e 	bne	r2,zero,10016b8 <main_show+0xe0>
 1001694:	e0bffa17 	ldw	r2,-24(fp)
 1001698:	10bfffc4 	addi	r2,r2,-1
 100169c:	e0bffa15 	stw	r2,-24(fp)
 10016a0:	e0fffa17 	ldw	r3,-24(fp)
 10016a4:	18fffff4 	orhi	r3,r3,65535
 10016a8:	e0fffa15 	stw	r3,-24(fp)
 10016ac:	e0bffa17 	ldw	r2,-24(fp)
 10016b0:	10800044 	addi	r2,r2,1
 10016b4:	e0bffa15 	stw	r2,-24(fp)
 10016b8:	e0fffa17 	ldw	r3,-24(fp)
 10016bc:	00800044 	movi	r2,1
 10016c0:	d8800015 	stw	r2,0(sp)
 10016c4:	d8c00115 	stw	r3,4(sp)
 10016c8:	d8000215 	stw	zero,8(sp)
 10016cc:	e13ff117 	ldw	r4,-60(fp)
 10016d0:	000b883a 	mov	r5,zero
 10016d4:	000d883a 	mov	r6,zero
 10016d8:	01c05004 	movi	r7,320
 10016dc:	101aacc0 	call	101aacc <alt_up_pixel_buffer_dma_draw_box>
	alt_up_pixel_buffer_dma_draw_box(pixel_buffer, 0, 0, 1, 240,rand() % 0x10000, 0); //x1, y1, x2, y2
 10016e0:	100665c0 	call	100665c <rand>
 10016e4:	1007883a 	mov	r3,r2
 10016e8:	00a00074 	movhi	r2,32769
 10016ec:	10bfffc4 	addi	r2,r2,-1
 10016f0:	1886703a 	and	r3,r3,r2
 10016f4:	e0fffb15 	stw	r3,-20(fp)
 10016f8:	e0fffb17 	ldw	r3,-20(fp)
 10016fc:	1804403a 	cmpge	r2,r3,zero
 1001700:	1000091e 	bne	r2,zero,1001728 <main_show+0x150>
 1001704:	e0bffb17 	ldw	r2,-20(fp)
 1001708:	10bfffc4 	addi	r2,r2,-1
 100170c:	e0bffb15 	stw	r2,-20(fp)
 1001710:	e0fffb17 	ldw	r3,-20(fp)
 1001714:	18fffff4 	orhi	r3,r3,65535
 1001718:	e0fffb15 	stw	r3,-20(fp)
 100171c:	e0bffb17 	ldw	r2,-20(fp)
 1001720:	10800044 	addi	r2,r2,1
 1001724:	e0bffb15 	stw	r2,-20(fp)
 1001728:	e0fffb17 	ldw	r3,-20(fp)
 100172c:	00803c04 	movi	r2,240
 1001730:	d8800015 	stw	r2,0(sp)
 1001734:	d8c00115 	stw	r3,4(sp)
 1001738:	d8000215 	stw	zero,8(sp)
 100173c:	e13ff117 	ldw	r4,-60(fp)
 1001740:	000b883a 	mov	r5,zero
 1001744:	000d883a 	mov	r6,zero
 1001748:	01c00044 	movi	r7,1
 100174c:	101aacc0 	call	101aacc <alt_up_pixel_buffer_dma_draw_box>
	alt_up_pixel_buffer_dma_draw_box(pixel_buffer, 0, 240, 320, 239,rand() % 0x10000, 0); //x1, y1, x2, y2
 1001750:	100665c0 	call	100665c <rand>
 1001754:	1007883a 	mov	r3,r2
 1001758:	00a00074 	movhi	r2,32769
 100175c:	10bfffc4 	addi	r2,r2,-1
 1001760:	1886703a 	and	r3,r3,r2
 1001764:	e0fffc15 	stw	r3,-16(fp)
 1001768:	e0fffc17 	ldw	r3,-16(fp)
 100176c:	1804403a 	cmpge	r2,r3,zero
 1001770:	1000091e 	bne	r2,zero,1001798 <main_show+0x1c0>
 1001774:	e0bffc17 	ldw	r2,-16(fp)
 1001778:	10bfffc4 	addi	r2,r2,-1
 100177c:	e0bffc15 	stw	r2,-16(fp)
 1001780:	e0fffc17 	ldw	r3,-16(fp)
 1001784:	18fffff4 	orhi	r3,r3,65535
 1001788:	e0fffc15 	stw	r3,-16(fp)
 100178c:	e0bffc17 	ldw	r2,-16(fp)
 1001790:	10800044 	addi	r2,r2,1
 1001794:	e0bffc15 	stw	r2,-16(fp)
 1001798:	e0fffc17 	ldw	r3,-16(fp)
 100179c:	00803bc4 	movi	r2,239
 10017a0:	d8800015 	stw	r2,0(sp)
 10017a4:	d8c00115 	stw	r3,4(sp)
 10017a8:	d8000215 	stw	zero,8(sp)
 10017ac:	e13ff117 	ldw	r4,-60(fp)
 10017b0:	000b883a 	mov	r5,zero
 10017b4:	01803c04 	movi	r6,240
 10017b8:	01c05004 	movi	r7,320
 10017bc:	101aacc0 	call	101aacc <alt_up_pixel_buffer_dma_draw_box>
	alt_up_pixel_buffer_dma_draw_box(pixel_buffer, 320, 240, 319, 0,rand() % 0x10000, 0); //x1, y1, x2, y2
 10017c0:	100665c0 	call	100665c <rand>
 10017c4:	1007883a 	mov	r3,r2
 10017c8:	00a00074 	movhi	r2,32769
 10017cc:	10bfffc4 	addi	r2,r2,-1
 10017d0:	1886703a 	and	r3,r3,r2
 10017d4:	e0fffd15 	stw	r3,-12(fp)
 10017d8:	e0fffd17 	ldw	r3,-12(fp)
 10017dc:	1804403a 	cmpge	r2,r3,zero
 10017e0:	1000091e 	bne	r2,zero,1001808 <main_show+0x230>
 10017e4:	e0bffd17 	ldw	r2,-12(fp)
 10017e8:	10bfffc4 	addi	r2,r2,-1
 10017ec:	e0bffd15 	stw	r2,-12(fp)
 10017f0:	e0fffd17 	ldw	r3,-12(fp)
 10017f4:	18fffff4 	orhi	r3,r3,65535
 10017f8:	e0fffd15 	stw	r3,-12(fp)
 10017fc:	e0bffd17 	ldw	r2,-12(fp)
 1001800:	10800044 	addi	r2,r2,1
 1001804:	e0bffd15 	stw	r2,-12(fp)
 1001808:	e0bffd17 	ldw	r2,-12(fp)
 100180c:	d8000015 	stw	zero,0(sp)
 1001810:	d8800115 	stw	r2,4(sp)
 1001814:	d8000215 	stw	zero,8(sp)
 1001818:	e13ff117 	ldw	r4,-60(fp)
 100181c:	01405004 	movi	r5,320
 1001820:	01803c04 	movi	r6,240
 1001824:	01c04fc4 	movi	r7,319
 1001828:	101aacc0 	call	101aacc <alt_up_pixel_buffer_dma_draw_box>

	//player1 rectangle
	alt_up_pixel_buffer_dma_draw_box(pixel_buffer, 2, 238, 20, 210,rand() % 0x10000, 0); //25x50 rectangle
 100182c:	100665c0 	call	100665c <rand>
 1001830:	1007883a 	mov	r3,r2
 1001834:	00a00074 	movhi	r2,32769
 1001838:	10bfffc4 	addi	r2,r2,-1
 100183c:	1886703a 	and	r3,r3,r2
 1001840:	e0fffe15 	stw	r3,-8(fp)
 1001844:	e0fffe17 	ldw	r3,-8(fp)
 1001848:	1804403a 	cmpge	r2,r3,zero
 100184c:	1000091e 	bne	r2,zero,1001874 <main_show+0x29c>
 1001850:	e0bffe17 	ldw	r2,-8(fp)
 1001854:	10bfffc4 	addi	r2,r2,-1
 1001858:	e0bffe15 	stw	r2,-8(fp)
 100185c:	e0fffe17 	ldw	r3,-8(fp)
 1001860:	18fffff4 	orhi	r3,r3,65535
 1001864:	e0fffe15 	stw	r3,-8(fp)
 1001868:	e0bffe17 	ldw	r2,-8(fp)
 100186c:	10800044 	addi	r2,r2,1
 1001870:	e0bffe15 	stw	r2,-8(fp)
 1001874:	e0fffe17 	ldw	r3,-8(fp)
 1001878:	00803484 	movi	r2,210
 100187c:	d8800015 	stw	r2,0(sp)
 1001880:	d8c00115 	stw	r3,4(sp)
 1001884:	d8000215 	stw	zero,8(sp)
 1001888:	e13ff117 	ldw	r4,-60(fp)
 100188c:	01400084 	movi	r5,2
 1001890:	01803b84 	movi	r6,238
 1001894:	01c00504 	movi	r7,20
 1001898:	101aacc0 	call	101aacc <alt_up_pixel_buffer_dma_draw_box>
	//player2 rectangle
	alt_up_pixel_buffer_dma_draw_box(pixel_buffer, 318, 238, 300, 210,rand() % 0x10000, 0); //25x50 rectangle
 100189c:	100665c0 	call	100665c <rand>
 10018a0:	1007883a 	mov	r3,r2
 10018a4:	00a00074 	movhi	r2,32769
 10018a8:	10bfffc4 	addi	r2,r2,-1
 10018ac:	1886703a 	and	r3,r3,r2
 10018b0:	e0ffff15 	stw	r3,-4(fp)
 10018b4:	e0ffff17 	ldw	r3,-4(fp)
 10018b8:	1804403a 	cmpge	r2,r3,zero
 10018bc:	1000091e 	bne	r2,zero,10018e4 <main_show+0x30c>
 10018c0:	e0bfff17 	ldw	r2,-4(fp)
 10018c4:	10bfffc4 	addi	r2,r2,-1
 10018c8:	e0bfff15 	stw	r2,-4(fp)
 10018cc:	e0ffff17 	ldw	r3,-4(fp)
 10018d0:	18fffff4 	orhi	r3,r3,65535
 10018d4:	e0ffff15 	stw	r3,-4(fp)
 10018d8:	e0bfff17 	ldw	r2,-4(fp)
 10018dc:	10800044 	addi	r2,r2,1
 10018e0:	e0bfff15 	stw	r2,-4(fp)
 10018e4:	e0ffff17 	ldw	r3,-4(fp)
 10018e8:	00803484 	movi	r2,210
 10018ec:	d8800015 	stw	r2,0(sp)
 10018f0:	d8c00115 	stw	r3,4(sp)
 10018f4:	d8000215 	stw	zero,8(sp)
 10018f8:	e13ff117 	ldw	r4,-60(fp)
 10018fc:	01404f84 	movi	r5,318
 1001900:	01803b84 	movi	r6,238
 1001904:	01c04b04 	movi	r7,300
 1001908:	101aacc0 	call	101aacc <alt_up_pixel_buffer_dma_draw_box>

	Shape_coord last_line;
	last_line.x_1 = 0;
 100190c:	e03ff215 	stw	zero,-56(fp)
	last_line.x_2 = 0;
 1001910:	e03ff315 	stw	zero,-52(fp)
	last_line.y_1 = 0;
 1001914:	e03ff415 	stw	zero,-48(fp)
	last_line.y_2 = 0;
 1001918:	e03ff515 	stw	zero,-44(fp)

	//draw empty power bars
	draw_power_bar(1);
 100191c:	01000044 	movi	r4,1
 1001920:	1001d6c0 	call	1001d6c <draw_power_bar>
	draw_power_bar(2);
 1001924:	01000084 	movi	r4,2
 1001928:	1001d6c0 	call	1001d6c <draw_power_bar>

	draw_ball(100, 100, 0xFF000);
 100192c:	01001904 	movi	r4,100
 1001930:	01401904 	movi	r5,100
 1001934:	01800434 	movhi	r6,16
 1001938:	31bc0004 	addi	r6,r6,-4096
 100193c:	10020840 	call	1002084 <draw_ball>

	//some code to test functionality
	while(1){
		int player = 1;
 1001940:	00800044 	movi	r2,1
 1001944:	e0bfef15 	stw	r2,-68(fp)
		double angle;
		printf("Enter an angle:");
 1001948:	010040b4 	movhi	r4,258
 100194c:	213c1a04 	addi	r4,r4,-3992
 1001950:	10065140 	call	1006514 <printf>
		scanf("%lf", &angle);
 1001954:	e17ff604 	addi	r5,fp,-40
 1001958:	010040b4 	movhi	r4,258
 100195c:	213c1e04 	addi	r4,r4,-3976
 1001960:	10067780 	call	1006778 <scanf>
		printf("Angle is %lf \n", angle);
 1001964:	e0bff617 	ldw	r2,-40(fp)
 1001968:	e0fff717 	ldw	r3,-36(fp)
 100196c:	010040b4 	movhi	r4,258
 1001970:	213c1f04 	addi	r4,r4,-3972
 1001974:	100b883a 	mov	r5,r2
 1001978:	180d883a 	mov	r6,r3
 100197c:	10065140 	call	1006514 <printf>
		clear_last_line(&last_line, pixel_buffer);
 1001980:	e13ff204 	addi	r4,fp,-56
 1001984:	e17ff117 	ldw	r5,-60(fp)
 1001988:	1001d080 	call	1001d08 <clear_last_line>
		alt_up_char_buffer_clear(char_buffer); //clear char buffer to erase previous angle text
 100198c:	e13ff017 	ldw	r4,-64(fp)
 1001990:	101a6480 	call	101a648 <alt_up_char_buffer_clear>
		alt_up_char_buffer_init(char_buffer); //initialize again
 1001994:	e13ff017 	ldw	r4,-64(fp)
 1001998:	101a3a00 	call	101a3a0 <alt_up_char_buffer_init>
		show_angle(player, angle, pixel_buffer, &last_line, char_buffer);
 100199c:	e0bff617 	ldw	r2,-40(fp)
 10019a0:	e0fff717 	ldw	r3,-36(fp)
 10019a4:	e13ff204 	addi	r4,fp,-56
 10019a8:	d9000015 	stw	r4,0(sp)
 10019ac:	e13ff017 	ldw	r4,-64(fp)
 10019b0:	d9000115 	stw	r4,4(sp)
 10019b4:	e13fef17 	ldw	r4,-68(fp)
 10019b8:	100b883a 	mov	r5,r2
 10019bc:	180d883a 	mov	r6,r3
 10019c0:	e1fff117 	ldw	r7,-60(fp)
 10019c4:	1001a400 	call	1001a40 <show_angle>
		double velocity;
		while(1){
			printf("Enter an velocity 0-100:");
 10019c8:	010040b4 	movhi	r4,258
 10019cc:	213c2304 	addi	r4,r4,-3956
 10019d0:	10065140 	call	1006514 <printf>
			scanf("%lf", &velocity);
 10019d4:	e17ff804 	addi	r5,fp,-32
 10019d8:	010040b4 	movhi	r4,258
 10019dc:	213c1e04 	addi	r4,r4,-3976
 10019e0:	10067780 	call	1006778 <scanf>
			if(velocity == -1) break;
 10019e4:	e0bff817 	ldw	r2,-32(fp)
 10019e8:	e0fff917 	ldw	r3,-28(fp)
 10019ec:	1009883a 	mov	r4,r2
 10019f0:	180b883a 	mov	r5,r3
 10019f4:	000d883a 	mov	r6,zero
 10019f8:	01effc34 	movhi	r7,49136
 10019fc:	10052440 	call	1005244 <__eqdf2>
 1001a00:	1005003a 	cmpeq	r2,r2,zero
 1001a04:	103fce1e 	bne	r2,zero,1001940 <main_show+0x368>
			printf("Velocity is %lf \n", velocity);
 1001a08:	e0bff817 	ldw	r2,-32(fp)
 1001a0c:	e0fff917 	ldw	r3,-28(fp)
 1001a10:	010040b4 	movhi	r4,258
 1001a14:	213c2a04 	addi	r4,r4,-3928
 1001a18:	100b883a 	mov	r5,r2
 1001a1c:	180d883a 	mov	r6,r3
 1001a20:	10065140 	call	1006514 <printf>
			update_power(player, velocity);
 1001a24:	e0bff817 	ldw	r2,-32(fp)
 1001a28:	e0fff917 	ldw	r3,-28(fp)
 1001a2c:	e13fef17 	ldw	r4,-68(fp)
 1001a30:	100b883a 	mov	r5,r2
 1001a34:	180d883a 	mov	r6,r3
 1001a38:	1001eac0 	call	1001eac <update_power>
		}
 1001a3c:	003fe206 	br	10019c8 <main_show+0x3f0>

01001a40 <show_angle>:
	}

	return 0;
}

void show_angle(int player, double angle, alt_up_pixel_buffer_dma_dev* pixel_buffer, Shape_coord *last_line, alt_up_char_buffer_dev * char_buffer){
 1001a40:	deffec04 	addi	sp,sp,-80
 1001a44:	dfc01315 	stw	ra,76(sp)
 1001a48:	df001215 	stw	fp,72(sp)
 1001a4c:	dcc01115 	stw	r19,68(sp)
 1001a50:	dc801015 	stw	r18,64(sp)
 1001a54:	dc400f15 	stw	r17,60(sp)
 1001a58:	dc000e15 	stw	r16,56(sp)
 1001a5c:	df000e04 	addi	fp,sp,56
 1001a60:	e13ffc15 	stw	r4,-16(fp)
 1001a64:	e17ffd15 	stw	r5,-12(fp)
 1001a68:	e1bffe15 	stw	r6,-8(fp)
 1001a6c:	e1ffff15 	stw	r7,-4(fp)
	double theta = angle*M_PI/180;
 1001a70:	e13ffd17 	ldw	r4,-12(fp)
 1001a74:	e17ffe17 	ldw	r5,-8(fp)
 1001a78:	01951134 	movhi	r6,21572
 1001a7c:	318b4604 	addi	r6,r6,11544
 1001a80:	01d00274 	movhi	r7,16393
 1001a84:	39c87ec4 	addi	r7,r7,8699
 1001a88:	1004c280 	call	1004c28 <__muldf3>
 1001a8c:	1009883a 	mov	r4,r2
 1001a90:	180b883a 	mov	r5,r3
 1001a94:	2005883a 	mov	r2,r4
 1001a98:	2807883a 	mov	r3,r5
 1001a9c:	1009883a 	mov	r4,r2
 1001aa0:	180b883a 	mov	r5,r3
 1001aa4:	000d883a 	mov	r6,zero
 1001aa8:	01d019f4 	movhi	r7,16487
 1001aac:	39e00004 	addi	r7,r7,-32768
 1001ab0:	1004fec0 	call	1004fec <__divdf3>
 1001ab4:	1009883a 	mov	r4,r2
 1001ab8:	180b883a 	mov	r5,r3
 1001abc:	e13ffa15 	stw	r4,-24(fp)
 1001ac0:	e17ffb15 	stw	r5,-20(fp)
	//TODO: convert input angle number into string...
	int x_1, x_2;
	int y_1 = 195;
 1001ac4:	008030c4 	movi	r2,195
 1001ac8:	e0bff715 	stw	r2,-36(fp)
	int y_2 = y_1-15*sin(theta);
 1001acc:	e13ff717 	ldw	r4,-36(fp)
 1001ad0:	10054640 	call	1005464 <__floatsidf>
 1001ad4:	1021883a 	mov	r16,r2
 1001ad8:	1823883a 	mov	r17,r3
 1001adc:	e13ffa17 	ldw	r4,-24(fp)
 1001ae0:	e17ffb17 	ldw	r5,-20(fp)
 1001ae4:	10022900 	call	1002290 <sin>
 1001ae8:	100b883a 	mov	r5,r2
 1001aec:	180d883a 	mov	r6,r3
 1001af0:	2809883a 	mov	r4,r5
 1001af4:	300b883a 	mov	r5,r6
 1001af8:	000d883a 	mov	r6,zero
 1001afc:	01f00bb4 	movhi	r7,49198
 1001b00:	1004c280 	call	1004c28 <__muldf3>
 1001b04:	1009883a 	mov	r4,r2
 1001b08:	180b883a 	mov	r5,r3
 1001b0c:	2005883a 	mov	r2,r4
 1001b10:	2807883a 	mov	r3,r5
 1001b14:	8009883a 	mov	r4,r16
 1001b18:	880b883a 	mov	r5,r17
 1001b1c:	100d883a 	mov	r6,r2
 1001b20:	180f883a 	mov	r7,r3
 1001b24:	1004bb40 	call	1004bb4 <__adddf3>
 1001b28:	1009883a 	mov	r4,r2
 1001b2c:	180b883a 	mov	r5,r3
 1001b30:	2005883a 	mov	r2,r4
 1001b34:	2807883a 	mov	r3,r5
 1001b38:	1009883a 	mov	r4,r2
 1001b3c:	180b883a 	mov	r5,r3
 1001b40:	100555c0 	call	100555c <__fixdfsi>
 1001b44:	e0bff615 	stw	r2,-40(fp)
	int line_length = 50;
 1001b48:	00800c84 	movi	r2,50
 1001b4c:	e0bff515 	stw	r2,-44(fp)

	if(player == 1){
 1001b50:	e0bffc17 	ldw	r2,-16(fp)
 1001b54:	10800058 	cmpnei	r2,r2,1
 1001b58:	1000261e 	bne	r2,zero,1001bf4 <show_angle+0x1b4>
		x_1 = 40;
 1001b5c:	00800a04 	movi	r2,40
 1001b60:	e0bff915 	stw	r2,-28(fp)
		x_2 = x_1 + line_length*cos(theta);
 1001b64:	e13ff917 	ldw	r4,-28(fp)
 1001b68:	10054640 	call	1005464 <__floatsidf>
 1001b6c:	1025883a 	mov	r18,r2
 1001b70:	1827883a 	mov	r19,r3
 1001b74:	e13ff517 	ldw	r4,-44(fp)
 1001b78:	10054640 	call	1005464 <__floatsidf>
 1001b7c:	1021883a 	mov	r16,r2
 1001b80:	1823883a 	mov	r17,r3
 1001b84:	e13ffa17 	ldw	r4,-24(fp)
 1001b88:	e17ffb17 	ldw	r5,-20(fp)
 1001b8c:	10021280 	call	1002128 <cos>
 1001b90:	100f883a 	mov	r7,r2
 1001b94:	1811883a 	mov	r8,r3
 1001b98:	8009883a 	mov	r4,r16
 1001b9c:	880b883a 	mov	r5,r17
 1001ba0:	380d883a 	mov	r6,r7
 1001ba4:	400f883a 	mov	r7,r8
 1001ba8:	1004c280 	call	1004c28 <__muldf3>
 1001bac:	1009883a 	mov	r4,r2
 1001bb0:	180b883a 	mov	r5,r3
 1001bb4:	2005883a 	mov	r2,r4
 1001bb8:	2807883a 	mov	r3,r5
 1001bbc:	9009883a 	mov	r4,r18
 1001bc0:	980b883a 	mov	r5,r19
 1001bc4:	100d883a 	mov	r6,r2
 1001bc8:	180f883a 	mov	r7,r3
 1001bcc:	1004bb40 	call	1004bb4 <__adddf3>
 1001bd0:	1009883a 	mov	r4,r2
 1001bd4:	180b883a 	mov	r5,r3
 1001bd8:	2005883a 	mov	r2,r4
 1001bdc:	2807883a 	mov	r3,r5
 1001be0:	1009883a 	mov	r4,r2
 1001be4:	180b883a 	mov	r5,r3
 1001be8:	100555c0 	call	100555c <__fixdfsi>
 1001bec:	e0bff815 	stw	r2,-32(fp)
 1001bf0:	00002506 	br	1001c88 <show_angle+0x248>
		//alt_up_char_buffer_string(char_buffer, "ANGLE 1", 10, 53);	// Show degrees
	}
	else{
		x_1 = 320 - 40;
 1001bf4:	00804604 	movi	r2,280
 1001bf8:	e0bff915 	stw	r2,-28(fp)
		x_2 = x_1 - line_length*cos(theta);
 1001bfc:	e13ff917 	ldw	r4,-28(fp)
 1001c00:	10054640 	call	1005464 <__floatsidf>
 1001c04:	1025883a 	mov	r18,r2
 1001c08:	1827883a 	mov	r19,r3
 1001c0c:	e13ff517 	ldw	r4,-44(fp)
 1001c10:	10054640 	call	1005464 <__floatsidf>
 1001c14:	1021883a 	mov	r16,r2
 1001c18:	1823883a 	mov	r17,r3
 1001c1c:	e13ffa17 	ldw	r4,-24(fp)
 1001c20:	e17ffb17 	ldw	r5,-20(fp)
 1001c24:	10021280 	call	1002128 <cos>
 1001c28:	100f883a 	mov	r7,r2
 1001c2c:	1811883a 	mov	r8,r3
 1001c30:	8009883a 	mov	r4,r16
 1001c34:	880b883a 	mov	r5,r17
 1001c38:	380d883a 	mov	r6,r7
 1001c3c:	400f883a 	mov	r7,r8
 1001c40:	1004c280 	call	1004c28 <__muldf3>
 1001c44:	1009883a 	mov	r4,r2
 1001c48:	180b883a 	mov	r5,r3
 1001c4c:	2005883a 	mov	r2,r4
 1001c50:	2807883a 	mov	r3,r5
 1001c54:	9009883a 	mov	r4,r18
 1001c58:	980b883a 	mov	r5,r19
 1001c5c:	100d883a 	mov	r6,r2
 1001c60:	180f883a 	mov	r7,r3
 1001c64:	1004b340 	call	1004b34 <__subdf3>
 1001c68:	1009883a 	mov	r4,r2
 1001c6c:	180b883a 	mov	r5,r3
 1001c70:	2005883a 	mov	r2,r4
 1001c74:	2807883a 	mov	r3,r5
 1001c78:	1009883a 	mov	r4,r2
 1001c7c:	180b883a 	mov	r5,r3
 1001c80:	100555c0 	call	100555c <__fixdfsi>
 1001c84:	e0bff815 	stw	r2,-32(fp)
		//alt_up_char_buffer_string(char_buffer, "ANGLE 2", 60, 53);	// Show degrees
	}

	alt_up_pixel_buffer_dma_draw_line(pixel_buffer, x_1, y_1, x_2, y_2, 0xFFFFF, 0); //draw line
 1001c88:	e0bff617 	ldw	r2,-40(fp)
 1001c8c:	d8800015 	stw	r2,0(sp)
 1001c90:	00800434 	movhi	r2,16
 1001c94:	10bfffc4 	addi	r2,r2,-1
 1001c98:	d8800115 	stw	r2,4(sp)
 1001c9c:	d8000215 	stw	zero,8(sp)
 1001ca0:	e13fff17 	ldw	r4,-4(fp)
 1001ca4:	e17ff917 	ldw	r5,-28(fp)
 1001ca8:	e1bff717 	ldw	r6,-36(fp)
 1001cac:	e1fff817 	ldw	r7,-32(fp)
 1001cb0:	101b8740 	call	101b874 <alt_up_pixel_buffer_dma_draw_line>
	//store endpoints of line for later
	last_line->x_1 = x_1;
 1001cb4:	e0c00617 	ldw	r3,24(fp)
 1001cb8:	e0bff917 	ldw	r2,-28(fp)
 1001cbc:	18800015 	stw	r2,0(r3)
	last_line->x_2 = x_2;
 1001cc0:	e0c00617 	ldw	r3,24(fp)
 1001cc4:	e0bff817 	ldw	r2,-32(fp)
 1001cc8:	18800115 	stw	r2,4(r3)
	last_line->y_1 = y_1;
 1001ccc:	e0c00617 	ldw	r3,24(fp)
 1001cd0:	e0bff717 	ldw	r2,-36(fp)
 1001cd4:	18800215 	stw	r2,8(r3)
	last_line->y_2 = y_2;
 1001cd8:	e0c00617 	ldw	r3,24(fp)
 1001cdc:	e0bff617 	ldw	r2,-40(fp)
 1001ce0:	18800315 	stw	r2,12(r3)

	return;
}
 1001ce4:	e037883a 	mov	sp,fp
 1001ce8:	dfc00517 	ldw	ra,20(sp)
 1001cec:	df000417 	ldw	fp,16(sp)
 1001cf0:	dcc00317 	ldw	r19,12(sp)
 1001cf4:	dc800217 	ldw	r18,8(sp)
 1001cf8:	dc400117 	ldw	r17,4(sp)
 1001cfc:	dc000017 	ldw	r16,0(sp)
 1001d00:	dec00604 	addi	sp,sp,24
 1001d04:	f800283a 	ret

01001d08 <clear_last_line>:

void clear_last_line(Shape_coord *last_line, alt_up_pixel_buffer_dma_dev* pixel_buffer){
 1001d08:	defff904 	addi	sp,sp,-28
 1001d0c:	dfc00615 	stw	ra,24(sp)
 1001d10:	df000515 	stw	fp,20(sp)
 1001d14:	df000504 	addi	fp,sp,20
 1001d18:	e13ffe15 	stw	r4,-8(fp)
 1001d1c:	e17fff15 	stw	r5,-4(fp)
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer, last_line->x_1, last_line->y_1, last_line->x_2, last_line->y_2, background_colour, 0);
 1001d20:	e0bffe17 	ldw	r2,-8(fp)
 1001d24:	11400017 	ldw	r5,0(r2)
 1001d28:	e0bffe17 	ldw	r2,-8(fp)
 1001d2c:	11800217 	ldw	r6,8(r2)
 1001d30:	e0bffe17 	ldw	r2,-8(fp)
 1001d34:	11c00117 	ldw	r7,4(r2)
 1001d38:	e0bffe17 	ldw	r2,-8(fp)
 1001d3c:	10c00317 	ldw	r3,12(r2)
 1001d40:	d0a7bd17 	ldw	r2,-24844(gp)
 1001d44:	d8c00015 	stw	r3,0(sp)
 1001d48:	d8800115 	stw	r2,4(sp)
 1001d4c:	d8000215 	stw	zero,8(sp)
 1001d50:	e13fff17 	ldw	r4,-4(fp)
 1001d54:	101b8740 	call	101b874 <alt_up_pixel_buffer_dma_draw_line>
}
 1001d58:	e037883a 	mov	sp,fp
 1001d5c:	dfc00117 	ldw	ra,4(sp)
 1001d60:	df000017 	ldw	fp,0(sp)
 1001d64:	dec00204 	addi	sp,sp,8
 1001d68:	f800283a 	ret

01001d6c <draw_power_bar>:

void draw_power_bar(int player){
 1001d6c:	defff804 	addi	sp,sp,-32
 1001d70:	dfc00715 	stw	ra,28(sp)
 1001d74:	df000615 	stw	fp,24(sp)
 1001d78:	df000604 	addi	fp,sp,24
 1001d7c:	e13fff15 	stw	r4,-4(fp)
	int x_1, y_1, bar_width, bar_height;
	x_1 = 30; y_1 = 230; bar_width = 52; bar_height=5;
 1001d80:	00800784 	movi	r2,30
 1001d84:	e0bffe15 	stw	r2,-8(fp)
 1001d88:	00803984 	movi	r2,230
 1001d8c:	e0bffd15 	stw	r2,-12(fp)
 1001d90:	00800d04 	movi	r2,52
 1001d94:	e0bffc15 	stw	r2,-16(fp)
 1001d98:	00800144 	movi	r2,5
 1001d9c:	e0bffb15 	stw	r2,-20(fp)
	if(player == 1){
 1001da0:	e0bfff17 	ldw	r2,-4(fp)
 1001da4:	10800058 	cmpnei	r2,r2,1
 1001da8:	10001b1e 	bne	r2,zero,1001e18 <draw_power_bar+0xac>
		draw_box(x_1, y_1, x_1+bar_width, y_1+bar_height, 0xFFFFF);
 1001dac:	e0fffe17 	ldw	r3,-8(fp)
 1001db0:	e0bffc17 	ldw	r2,-16(fp)
 1001db4:	188d883a 	add	r6,r3,r2
 1001db8:	e0fffd17 	ldw	r3,-12(fp)
 1001dbc:	e0bffb17 	ldw	r2,-20(fp)
 1001dc0:	188f883a 	add	r7,r3,r2
 1001dc4:	00800434 	movhi	r2,16
 1001dc8:	10bfffc4 	addi	r2,r2,-1
 1001dcc:	d8800015 	stw	r2,0(sp)
 1001dd0:	e13ffe17 	ldw	r4,-8(fp)
 1001dd4:	e17ffd17 	ldw	r5,-12(fp)
 1001dd8:	10020000 	call	1002000 <draw_box>
		draw_box(x_1+1, y_1+1, x_1+bar_width-1, y_1+bar_height-1, 0x00000);
 1001ddc:	e0bffe17 	ldw	r2,-8(fp)
 1001de0:	11000044 	addi	r4,r2,1
 1001de4:	e0bffd17 	ldw	r2,-12(fp)
 1001de8:	11400044 	addi	r5,r2,1
 1001dec:	e0fffe17 	ldw	r3,-8(fp)
 1001df0:	e0bffc17 	ldw	r2,-16(fp)
 1001df4:	1885883a 	add	r2,r3,r2
 1001df8:	11bfffc4 	addi	r6,r2,-1
 1001dfc:	e0fffd17 	ldw	r3,-12(fp)
 1001e00:	e0bffb17 	ldw	r2,-20(fp)
 1001e04:	1885883a 	add	r2,r3,r2
 1001e08:	11ffffc4 	addi	r7,r2,-1
 1001e0c:	d8000015 	stw	zero,0(sp)
 1001e10:	10020000 	call	1002000 <draw_box>
 1001e14:	00002006 	br	1001e98 <draw_power_bar+0x12c>
	}
	else{//player2 power bar
		draw_box(320-x_1, y_1, 320-(x_1+bar_width), y_1+bar_height, 0xFFFFF);
 1001e18:	00c05004 	movi	r3,320
 1001e1c:	e0bffe17 	ldw	r2,-8(fp)
 1001e20:	1889c83a 	sub	r4,r3,r2
 1001e24:	e0fffe17 	ldw	r3,-8(fp)
 1001e28:	e0bffc17 	ldw	r2,-16(fp)
 1001e2c:	1887883a 	add	r3,r3,r2
 1001e30:	00805004 	movi	r2,320
 1001e34:	10cdc83a 	sub	r6,r2,r3
 1001e38:	e0fffd17 	ldw	r3,-12(fp)
 1001e3c:	e0bffb17 	ldw	r2,-20(fp)
 1001e40:	188f883a 	add	r7,r3,r2
 1001e44:	00800434 	movhi	r2,16
 1001e48:	10bfffc4 	addi	r2,r2,-1
 1001e4c:	d8800015 	stw	r2,0(sp)
 1001e50:	e17ffd17 	ldw	r5,-12(fp)
 1001e54:	10020000 	call	1002000 <draw_box>
		draw_box(320-(x_1+1), y_1+1, 320-(x_1+bar_width-1), y_1+bar_height-1, 0x00000);
 1001e58:	00c04fc4 	movi	r3,319
 1001e5c:	e0bffe17 	ldw	r2,-8(fp)
 1001e60:	1889c83a 	sub	r4,r3,r2
 1001e64:	e0bffd17 	ldw	r2,-12(fp)
 1001e68:	11400044 	addi	r5,r2,1
 1001e6c:	e0fffe17 	ldw	r3,-8(fp)
 1001e70:	e0bffc17 	ldw	r2,-16(fp)
 1001e74:	1887883a 	add	r3,r3,r2
 1001e78:	00805044 	movi	r2,321
 1001e7c:	10cdc83a 	sub	r6,r2,r3
 1001e80:	e0fffd17 	ldw	r3,-12(fp)
 1001e84:	e0bffb17 	ldw	r2,-20(fp)
 1001e88:	1885883a 	add	r2,r3,r2
 1001e8c:	11ffffc4 	addi	r7,r2,-1
 1001e90:	d8000015 	stw	zero,0(sp)
 1001e94:	10020000 	call	1002000 <draw_box>
	}

}
 1001e98:	e037883a 	mov	sp,fp
 1001e9c:	dfc00117 	ldw	ra,4(sp)
 1001ea0:	df000017 	ldw	fp,0(sp)
 1001ea4:	dec00204 	addi	sp,sp,8
 1001ea8:	f800283a 	ret

01001eac <update_power>:

//assumes velocity range is from 0-100
void update_power(int player, double velocity){
 1001eac:	defffa04 	addi	sp,sp,-24
 1001eb0:	dfc00515 	stw	ra,20(sp)
 1001eb4:	df000415 	stw	fp,16(sp)
 1001eb8:	df000404 	addi	fp,sp,16
 1001ebc:	e13ffd15 	stw	r4,-12(fp)
 1001ec0:	e17ffe15 	stw	r5,-8(fp)
 1001ec4:	e1bfff15 	stw	r6,-4(fp)
	draw_power_bar(player); //clear previous level
 1001ec8:	e13ffd17 	ldw	r4,-12(fp)
 1001ecc:	1001d6c0 	call	1001d6c <draw_power_bar>
	if(player==1){
 1001ed0:	e0bffd17 	ldw	r2,-12(fp)
 1001ed4:	10800058 	cmpnei	r2,r2,1
 1001ed8:	10001e1e 	bne	r2,zero,1001f54 <update_power+0xa8>
		draw_box(31, 231, 31+(velocity/2), 234, 0xFF000);
 1001edc:	e13ffe17 	ldw	r4,-8(fp)
 1001ee0:	e17fff17 	ldw	r5,-4(fp)
 1001ee4:	000d883a 	mov	r6,zero
 1001ee8:	01d00034 	movhi	r7,16384
 1001eec:	1004fec0 	call	1004fec <__divdf3>
 1001ef0:	1009883a 	mov	r4,r2
 1001ef4:	180b883a 	mov	r5,r3
 1001ef8:	2005883a 	mov	r2,r4
 1001efc:	2807883a 	mov	r3,r5
 1001f00:	1009883a 	mov	r4,r2
 1001f04:	180b883a 	mov	r5,r3
 1001f08:	000d883a 	mov	r6,zero
 1001f0c:	01d00ff4 	movhi	r7,16447
 1001f10:	1004bb40 	call	1004bb4 <__adddf3>
 1001f14:	1009883a 	mov	r4,r2
 1001f18:	180b883a 	mov	r5,r3
 1001f1c:	2005883a 	mov	r2,r4
 1001f20:	2807883a 	mov	r3,r5
 1001f24:	1009883a 	mov	r4,r2
 1001f28:	180b883a 	mov	r5,r3
 1001f2c:	100555c0 	call	100555c <__fixdfsi>
 1001f30:	100d883a 	mov	r6,r2
 1001f34:	00800434 	movhi	r2,16
 1001f38:	10bc0004 	addi	r2,r2,-4096
 1001f3c:	d8800015 	stw	r2,0(sp)
 1001f40:	010007c4 	movi	r4,31
 1001f44:	014039c4 	movi	r5,231
 1001f48:	01c03a84 	movi	r7,234
 1001f4c:	10020000 	call	1002000 <draw_box>
 1001f50:	00002606 	br	1001fec <update_power+0x140>
	}
	else{
		draw_box(320-31, 231, 320-(31+(velocity/2)), 234, 0xFF000);
 1001f54:	e13ffe17 	ldw	r4,-8(fp)
 1001f58:	e17fff17 	ldw	r5,-4(fp)
 1001f5c:	000d883a 	mov	r6,zero
 1001f60:	01d00034 	movhi	r7,16384
 1001f64:	1004fec0 	call	1004fec <__divdf3>
 1001f68:	1009883a 	mov	r4,r2
 1001f6c:	180b883a 	mov	r5,r3
 1001f70:	2005883a 	mov	r2,r4
 1001f74:	2807883a 	mov	r3,r5
 1001f78:	1009883a 	mov	r4,r2
 1001f7c:	180b883a 	mov	r5,r3
 1001f80:	000d883a 	mov	r6,zero
 1001f84:	01d00ff4 	movhi	r7,16447
 1001f88:	1004bb40 	call	1004bb4 <__adddf3>
 1001f8c:	1009883a 	mov	r4,r2
 1001f90:	180b883a 	mov	r5,r3
 1001f94:	2005883a 	mov	r2,r4
 1001f98:	2807883a 	mov	r3,r5
 1001f9c:	0009883a 	mov	r4,zero
 1001fa0:	01501d34 	movhi	r5,16500
 1001fa4:	100d883a 	mov	r6,r2
 1001fa8:	180f883a 	mov	r7,r3
 1001fac:	1004b340 	call	1004b34 <__subdf3>
 1001fb0:	1009883a 	mov	r4,r2
 1001fb4:	180b883a 	mov	r5,r3
 1001fb8:	2005883a 	mov	r2,r4
 1001fbc:	2807883a 	mov	r3,r5
 1001fc0:	1009883a 	mov	r4,r2
 1001fc4:	180b883a 	mov	r5,r3
 1001fc8:	100555c0 	call	100555c <__fixdfsi>
 1001fcc:	100d883a 	mov	r6,r2
 1001fd0:	00800434 	movhi	r2,16
 1001fd4:	10bc0004 	addi	r2,r2,-4096
 1001fd8:	d8800015 	stw	r2,0(sp)
 1001fdc:	01004844 	movi	r4,289
 1001fe0:	014039c4 	movi	r5,231
 1001fe4:	01c03a84 	movi	r7,234
 1001fe8:	10020000 	call	1002000 <draw_box>
	}
	return;
}
 1001fec:	e037883a 	mov	sp,fp
 1001ff0:	dfc00117 	ldw	ra,4(sp)
 1001ff4:	df000017 	ldw	fp,0(sp)
 1001ff8:	dec00204 	addi	sp,sp,8
 1001ffc:	f800283a 	ret

01002000 <draw_box>:

void draw_box(int x_1, int y_1, int x_2, int y_2, unsigned int colour){
 1002000:	defffb04 	addi	sp,sp,-20
 1002004:	df000415 	stw	fp,16(sp)
 1002008:	df000404 	addi	fp,sp,16
 100200c:	e13ffc15 	stw	r4,-16(fp)
 1002010:	e17ffd15 	stw	r5,-12(fp)
 1002014:	e1bffe15 	stw	r6,-8(fp)
 1002018:	e1ffff15 	stw	r7,-4(fp)
	IOWR_32DIRECT(drawer_base,0,x_1);
 100201c:	00d80004 	movi	r3,24576
 1002020:	e0bffc17 	ldw	r2,-16(fp)
 1002024:	18800035 	stwio	r2,0(r3)
	IOWR_32DIRECT(drawer_base,4,y_1);
 1002028:	00d80104 	movi	r3,24580
 100202c:	e0bffd17 	ldw	r2,-12(fp)
 1002030:	18800035 	stwio	r2,0(r3)
	IOWR_32DIRECT(drawer_base,8,x_2);
 1002034:	00d80204 	movi	r3,24584
 1002038:	e0bffe17 	ldw	r2,-8(fp)
 100203c:	18800035 	stwio	r2,0(r3)
	IOWR_32DIRECT(drawer_base,12,y_2);
 1002040:	00d80304 	movi	r3,24588
 1002044:	e0bfff17 	ldw	r2,-4(fp)
 1002048:	18800035 	stwio	r2,0(r3)
	IOWR_32DIRECT(drawer_base,16,colour);
 100204c:	e0c00117 	ldw	r3,4(fp)
 1002050:	00980404 	movi	r2,24592
 1002054:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(drawer_base,20,1);
 1002058:	00d80504 	movi	r3,24596
 100205c:	00800044 	movi	r2,1
 1002060:	18800035 	stwio	r2,0(r3)
	while(IORD_32DIRECT(drawer_base,20)==0);
 1002064:	00980504 	movi	r2,24596
 1002068:	10800037 	ldwio	r2,0(r2)
 100206c:	1005003a 	cmpeq	r2,r2,zero
 1002070:	103ffc1e 	bne	r2,zero,1002064 <draw_box+0x64>
}
 1002074:	e037883a 	mov	sp,fp
 1002078:	df000017 	ldw	fp,0(sp)
 100207c:	dec00104 	addi	sp,sp,4
 1002080:	f800283a 	ret

01002084 <draw_ball>:

void draw_ball(int x, int y, unsigned int colour){
 1002084:	defffa04 	addi	sp,sp,-24
 1002088:	dfc00515 	stw	ra,20(sp)
 100208c:	df000415 	stw	fp,16(sp)
 1002090:	df000404 	addi	fp,sp,16
 1002094:	e13ffd15 	stw	r4,-12(fp)
 1002098:	e17ffe15 	stw	r5,-8(fp)
 100209c:	e1bfff15 	stw	r6,-4(fp)
	draw_box(x-2, y, x+2, y, colour);
 10020a0:	e0bffd17 	ldw	r2,-12(fp)
 10020a4:	113fff84 	addi	r4,r2,-2
 10020a8:	e0bffd17 	ldw	r2,-12(fp)
 10020ac:	11800084 	addi	r6,r2,2
 10020b0:	e0bfff17 	ldw	r2,-4(fp)
 10020b4:	d8800015 	stw	r2,0(sp)
 10020b8:	e17ffe17 	ldw	r5,-8(fp)
 10020bc:	e1fffe17 	ldw	r7,-8(fp)
 10020c0:	10020000 	call	1002000 <draw_box>
	draw_box(x, y-2, x, y+2, colour);
 10020c4:	e0bffe17 	ldw	r2,-8(fp)
 10020c8:	117fff84 	addi	r5,r2,-2
 10020cc:	e0bffe17 	ldw	r2,-8(fp)
 10020d0:	11c00084 	addi	r7,r2,2
 10020d4:	e0bfff17 	ldw	r2,-4(fp)
 10020d8:	d8800015 	stw	r2,0(sp)
 10020dc:	e13ffd17 	ldw	r4,-12(fp)
 10020e0:	e1bffd17 	ldw	r6,-12(fp)
 10020e4:	10020000 	call	1002000 <draw_box>
	draw_box(x-1, y-1, x+1, y+1, colour);
 10020e8:	e0bffd17 	ldw	r2,-12(fp)
 10020ec:	113fffc4 	addi	r4,r2,-1
 10020f0:	e0bffe17 	ldw	r2,-8(fp)
 10020f4:	117fffc4 	addi	r5,r2,-1
 10020f8:	e0bffd17 	ldw	r2,-12(fp)
 10020fc:	11800044 	addi	r6,r2,1
 1002100:	e0bffe17 	ldw	r2,-8(fp)
 1002104:	11c00044 	addi	r7,r2,1
 1002108:	e0bfff17 	ldw	r2,-4(fp)
 100210c:	d8800015 	stw	r2,0(sp)
 1002110:	10020000 	call	1002000 <draw_box>
}
 1002114:	e037883a 	mov	sp,fp
 1002118:	dfc00117 	ldw	ra,4(sp)
 100211c:	df000017 	ldw	fp,0(sp)
 1002120:	dec00204 	addi	sp,sp,8
 1002124:	f800283a 	ret

01002128 <cos>:
 1002128:	00a00034 	movhi	r2,32768
 100212c:	10bfffc4 	addi	r2,r2,-1
 1002130:	defffa04 	addi	sp,sp,-24
 1002134:	114c703a 	and	r6,r2,r5
 1002138:	008ffa74 	movhi	r2,16361
 100213c:	10887ec4 	addi	r2,r2,8699
 1002140:	dfc00515 	stw	ra,20(sp)
 1002144:	2011883a 	mov	r8,r4
 1002148:	1180210e 	bge	r2,r6,10021d0 <cos+0xa8>
 100214c:	009ffc34 	movhi	r2,32752
 1002150:	10bfffc4 	addi	r2,r2,-1
 1002154:	11800a0e 	bge	r2,r6,1002180 <cos+0x58>
 1002158:	280f883a 	mov	r7,r5
 100215c:	400d883a 	mov	r6,r8
 1002160:	1004b340 	call	1004b34 <__subdf3>
 1002164:	100d883a 	mov	r6,r2
 1002168:	180f883a 	mov	r7,r3
 100216c:	3005883a 	mov	r2,r6
 1002170:	3807883a 	mov	r3,r7
 1002174:	dfc00517 	ldw	ra,20(sp)
 1002178:	dec00604 	addi	sp,sp,24
 100217c:	f800283a 	ret
 1002180:	d9800104 	addi	r6,sp,4
 1002184:	10023fc0 	call	10023fc <__ieee754_rem_pio2>
 1002188:	10c000cc 	andi	r3,r2,3
 100218c:	01000044 	movi	r4,1
 1002190:	19001926 	beq	r3,r4,10021f8 <cos+0xd0>
 1002194:	00800084 	movi	r2,2
 1002198:	18803126 	beq	r3,r2,1002260 <cos+0x138>
 100219c:	1800231e 	bne	r3,zero,100222c <cos+0x104>
 10021a0:	d8800117 	ldw	r2,4(sp)
 10021a4:	da000317 	ldw	r8,12(sp)
 10021a8:	d8c00217 	ldw	r3,8(sp)
 10021ac:	da400417 	ldw	r9,16(sp)
 10021b0:	400d883a 	mov	r6,r8
 10021b4:	180b883a 	mov	r5,r3
 10021b8:	480f883a 	mov	r7,r9
 10021bc:	1009883a 	mov	r4,r2
 10021c0:	1002c240 	call	1002c24 <__kernel_cos>
 10021c4:	100d883a 	mov	r6,r2
 10021c8:	180f883a 	mov	r7,r3
 10021cc:	003fe706 	br	100216c <cos+0x44>
 10021d0:	000d883a 	mov	r6,zero
 10021d4:	000f883a 	mov	r7,zero
 10021d8:	1002c240 	call	1002c24 <__kernel_cos>
 10021dc:	100d883a 	mov	r6,r2
 10021e0:	180f883a 	mov	r7,r3
 10021e4:	3005883a 	mov	r2,r6
 10021e8:	3807883a 	mov	r3,r7
 10021ec:	dfc00517 	ldw	ra,20(sp)
 10021f0:	dec00604 	addi	sp,sp,24
 10021f4:	f800283a 	ret
 10021f8:	d8800117 	ldw	r2,4(sp)
 10021fc:	da000317 	ldw	r8,12(sp)
 1002200:	d8c00217 	ldw	r3,8(sp)
 1002204:	da400417 	ldw	r9,16(sp)
 1002208:	d9000015 	stw	r4,0(sp)
 100220c:	400d883a 	mov	r6,r8
 1002210:	480f883a 	mov	r7,r9
 1002214:	180b883a 	mov	r5,r3
 1002218:	1009883a 	mov	r4,r2
 100221c:	1003fcc0 	call	1003fcc <__kernel_sin>
 1002220:	100d883a 	mov	r6,r2
 1002224:	19e0003c 	xorhi	r7,r3,32768
 1002228:	003fd006 	br	100216c <cos+0x44>
 100222c:	d8800117 	ldw	r2,4(sp)
 1002230:	da000317 	ldw	r8,12(sp)
 1002234:	d8c00217 	ldw	r3,8(sp)
 1002238:	da400417 	ldw	r9,16(sp)
 100223c:	d9000015 	stw	r4,0(sp)
 1002240:	400d883a 	mov	r6,r8
 1002244:	480f883a 	mov	r7,r9
 1002248:	180b883a 	mov	r5,r3
 100224c:	1009883a 	mov	r4,r2
 1002250:	1003fcc0 	call	1003fcc <__kernel_sin>
 1002254:	100d883a 	mov	r6,r2
 1002258:	180f883a 	mov	r7,r3
 100225c:	003fc306 	br	100216c <cos+0x44>
 1002260:	d8800117 	ldw	r2,4(sp)
 1002264:	da000317 	ldw	r8,12(sp)
 1002268:	d8c00217 	ldw	r3,8(sp)
 100226c:	da400417 	ldw	r9,16(sp)
 1002270:	400d883a 	mov	r6,r8
 1002274:	180b883a 	mov	r5,r3
 1002278:	480f883a 	mov	r7,r9
 100227c:	1009883a 	mov	r4,r2
 1002280:	1002c240 	call	1002c24 <__kernel_cos>
 1002284:	100d883a 	mov	r6,r2
 1002288:	19e0003c 	xorhi	r7,r3,32768
 100228c:	003fb706 	br	100216c <cos+0x44>

01002290 <sin>:
 1002290:	00a00034 	movhi	r2,32768
 1002294:	10bfffc4 	addi	r2,r2,-1
 1002298:	defffa04 	addi	sp,sp,-24
 100229c:	114c703a 	and	r6,r2,r5
 10022a0:	008ffa74 	movhi	r2,16361
 10022a4:	10887ec4 	addi	r2,r2,8699
 10022a8:	dfc00515 	stw	ra,20(sp)
 10022ac:	2011883a 	mov	r8,r4
 10022b0:	1180220e 	bge	r2,r6,100233c <sin+0xac>
 10022b4:	009ffc34 	movhi	r2,32752
 10022b8:	10bfffc4 	addi	r2,r2,-1
 10022bc:	11800a0e 	bge	r2,r6,10022e8 <sin+0x58>
 10022c0:	280f883a 	mov	r7,r5
 10022c4:	400d883a 	mov	r6,r8
 10022c8:	1004b340 	call	1004b34 <__subdf3>
 10022cc:	100d883a 	mov	r6,r2
 10022d0:	180f883a 	mov	r7,r3
 10022d4:	3005883a 	mov	r2,r6
 10022d8:	3807883a 	mov	r3,r7
 10022dc:	dfc00517 	ldw	ra,20(sp)
 10022e0:	dec00604 	addi	sp,sp,24
 10022e4:	f800283a 	ret
 10022e8:	d9800104 	addi	r6,sp,4
 10022ec:	10023fc0 	call	10023fc <__ieee754_rem_pio2>
 10022f0:	10c000cc 	andi	r3,r2,3
 10022f4:	01000044 	movi	r4,1
 10022f8:	19001b26 	beq	r3,r4,1002368 <sin+0xd8>
 10022fc:	00800084 	movi	r2,2
 1002300:	18803126 	beq	r3,r2,10023c8 <sin+0x138>
 1002304:	1800241e 	bne	r3,zero,1002398 <sin+0x108>
 1002308:	d8800117 	ldw	r2,4(sp)
 100230c:	da000317 	ldw	r8,12(sp)
 1002310:	d8c00217 	ldw	r3,8(sp)
 1002314:	da400417 	ldw	r9,16(sp)
 1002318:	d9000015 	stw	r4,0(sp)
 100231c:	400d883a 	mov	r6,r8
 1002320:	480f883a 	mov	r7,r9
 1002324:	180b883a 	mov	r5,r3
 1002328:	1009883a 	mov	r4,r2
 100232c:	1003fcc0 	call	1003fcc <__kernel_sin>
 1002330:	100d883a 	mov	r6,r2
 1002334:	180f883a 	mov	r7,r3
 1002338:	003fe606 	br	10022d4 <sin+0x44>
 100233c:	000d883a 	mov	r6,zero
 1002340:	000f883a 	mov	r7,zero
 1002344:	d8000015 	stw	zero,0(sp)
 1002348:	1003fcc0 	call	1003fcc <__kernel_sin>
 100234c:	100d883a 	mov	r6,r2
 1002350:	180f883a 	mov	r7,r3
 1002354:	3005883a 	mov	r2,r6
 1002358:	3807883a 	mov	r3,r7
 100235c:	dfc00517 	ldw	ra,20(sp)
 1002360:	dec00604 	addi	sp,sp,24
 1002364:	f800283a 	ret
 1002368:	d8800117 	ldw	r2,4(sp)
 100236c:	da000317 	ldw	r8,12(sp)
 1002370:	d8c00217 	ldw	r3,8(sp)
 1002374:	da400417 	ldw	r9,16(sp)
 1002378:	400d883a 	mov	r6,r8
 100237c:	180b883a 	mov	r5,r3
 1002380:	480f883a 	mov	r7,r9
 1002384:	1009883a 	mov	r4,r2
 1002388:	1002c240 	call	1002c24 <__kernel_cos>
 100238c:	100d883a 	mov	r6,r2
 1002390:	180f883a 	mov	r7,r3
 1002394:	003fcf06 	br	10022d4 <sin+0x44>
 1002398:	d8800117 	ldw	r2,4(sp)
 100239c:	da000317 	ldw	r8,12(sp)
 10023a0:	d8c00217 	ldw	r3,8(sp)
 10023a4:	da400417 	ldw	r9,16(sp)
 10023a8:	400d883a 	mov	r6,r8
 10023ac:	180b883a 	mov	r5,r3
 10023b0:	480f883a 	mov	r7,r9
 10023b4:	1009883a 	mov	r4,r2
 10023b8:	1002c240 	call	1002c24 <__kernel_cos>
 10023bc:	100d883a 	mov	r6,r2
 10023c0:	19e0003c 	xorhi	r7,r3,32768
 10023c4:	003fc306 	br	10022d4 <sin+0x44>
 10023c8:	d8800117 	ldw	r2,4(sp)
 10023cc:	da000317 	ldw	r8,12(sp)
 10023d0:	d8c00217 	ldw	r3,8(sp)
 10023d4:	da400417 	ldw	r9,16(sp)
 10023d8:	d9000015 	stw	r4,0(sp)
 10023dc:	400d883a 	mov	r6,r8
 10023e0:	480f883a 	mov	r7,r9
 10023e4:	180b883a 	mov	r5,r3
 10023e8:	1009883a 	mov	r4,r2
 10023ec:	1003fcc0 	call	1003fcc <__kernel_sin>
 10023f0:	100d883a 	mov	r6,r2
 10023f4:	19e0003c 	xorhi	r7,r3,32768
 10023f8:	003fb606 	br	10022d4 <sin+0x44>

010023fc <__ieee754_rem_pio2>:
 10023fc:	deffe304 	addi	sp,sp,-116
 1002400:	00a00034 	movhi	r2,32768
 1002404:	10bfffc4 	addi	r2,r2,-1
 1002408:	dd801915 	stw	r22,100(sp)
 100240c:	28ac703a 	and	r22,r5,r2
 1002410:	008ffa74 	movhi	r2,16361
 1002414:	10887ec4 	addi	r2,r2,8699
 1002418:	df001b15 	stw	fp,108(sp)
 100241c:	dfc01c15 	stw	ra,112(sp)
 1002420:	ddc01a15 	stw	r23,104(sp)
 1002424:	dd401815 	stw	r21,96(sp)
 1002428:	dd001715 	stw	r20,92(sp)
 100242c:	dcc01615 	stw	r19,88(sp)
 1002430:	dc801515 	stw	r18,84(sp)
 1002434:	dc401415 	stw	r17,80(sp)
 1002438:	dc001315 	stw	r16,76(sp)
 100243c:	2013883a 	mov	r9,r4
 1002440:	d9400a15 	stw	r5,40(sp)
 1002444:	3039883a 	mov	fp,r6
 1002448:	15801216 	blt	r2,r22,1002494 <__ieee754_rem_pio2+0x98>
 100244c:	e1400115 	stw	r5,4(fp)
 1002450:	30000315 	stw	zero,12(r6)
 1002454:	e1000015 	stw	r4,0(fp)
 1002458:	d8000b15 	stw	zero,44(sp)
 100245c:	30000215 	stw	zero,8(r6)
 1002460:	d8800b17 	ldw	r2,44(sp)
 1002464:	dfc01c17 	ldw	ra,112(sp)
 1002468:	df001b17 	ldw	fp,108(sp)
 100246c:	ddc01a17 	ldw	r23,104(sp)
 1002470:	dd801917 	ldw	r22,100(sp)
 1002474:	dd401817 	ldw	r21,96(sp)
 1002478:	dd001717 	ldw	r20,92(sp)
 100247c:	dcc01617 	ldw	r19,88(sp)
 1002480:	dc801517 	ldw	r18,84(sp)
 1002484:	dc401417 	ldw	r17,80(sp)
 1002488:	dc001317 	ldw	r16,76(sp)
 100248c:	dec01d04 	addi	sp,sp,116
 1002490:	f800283a 	ret
 1002494:	009000f4 	movhi	r2,16387
 1002498:	10b65ec4 	addi	r2,r2,-9861
 100249c:	15800f0e 	bge	r2,r22,10024dc <__ieee754_rem_pio2+0xe0>
 10024a0:	00904e74 	movhi	r2,16697
 10024a4:	10887ec4 	addi	r2,r2,8699
 10024a8:	1580330e 	bge	r2,r22,1002578 <__ieee754_rem_pio2+0x17c>
 10024ac:	009ffc34 	movhi	r2,32752
 10024b0:	10bfffc4 	addi	r2,r2,-1
 10024b4:	1580fe0e 	bge	r2,r22,10028b0 <__ieee754_rem_pio2+0x4b4>
 10024b8:	280f883a 	mov	r7,r5
 10024bc:	480d883a 	mov	r6,r9
 10024c0:	1004b340 	call	1004b34 <__subdf3>
 10024c4:	e0c00115 	stw	r3,4(fp)
 10024c8:	d8000b15 	stw	zero,44(sp)
 10024cc:	e0800015 	stw	r2,0(fp)
 10024d0:	e0800215 	stw	r2,8(fp)
 10024d4:	e0c00315 	stw	r3,12(fp)
 10024d8:	003fe106 	br	1002460 <__ieee754_rem_pio2+0x64>
 10024dc:	d9000a17 	ldw	r4,40(sp)
 10024e0:	0100ce0e 	bge	zero,r4,100281c <__ieee754_rem_pio2+0x420>
 10024e4:	04151034 	movhi	r16,21568
 10024e8:	044ffe74 	movhi	r17,16377
 10024ec:	8c487ec4 	addi	r17,r17,8699
 10024f0:	4809883a 	mov	r4,r9
 10024f4:	800d883a 	mov	r6,r16
 10024f8:	880f883a 	mov	r7,r17
 10024fc:	1004b340 	call	1004b34 <__subdf3>
 1002500:	1025883a 	mov	r18,r2
 1002504:	1827883a 	mov	r19,r3
 1002508:	b4413c26 	beq	r22,r17,10029fc <__ieee754_rem_pio2+0x600>
 100250c:	040698b4 	movhi	r16,6754
 1002510:	8418cc44 	addi	r16,r16,25393
 1002514:	044f7474 	movhi	r17,15825
 1002518:	8c6d1844 	addi	r17,r17,-19359
 100251c:	1009883a 	mov	r4,r2
 1002520:	180b883a 	mov	r5,r3
 1002524:	800d883a 	mov	r6,r16
 1002528:	880f883a 	mov	r7,r17
 100252c:	1004b340 	call	1004b34 <__subdf3>
 1002530:	100d883a 	mov	r6,r2
 1002534:	9009883a 	mov	r4,r18
 1002538:	980b883a 	mov	r5,r19
 100253c:	180f883a 	mov	r7,r3
 1002540:	e0800015 	stw	r2,0(fp)
 1002544:	e0c00115 	stw	r3,4(fp)
 1002548:	1004b340 	call	1004b34 <__subdf3>
 100254c:	1009883a 	mov	r4,r2
 1002550:	800d883a 	mov	r6,r16
 1002554:	880f883a 	mov	r7,r17
 1002558:	180b883a 	mov	r5,r3
 100255c:	1004b340 	call	1004b34 <__subdf3>
 1002560:	1009883a 	mov	r4,r2
 1002564:	00800044 	movi	r2,1
 1002568:	d8800b15 	stw	r2,44(sp)
 100256c:	e0c00315 	stw	r3,12(fp)
 1002570:	e1000215 	stw	r4,8(fp)
 1002574:	003fba06 	br	1002460 <__ieee754_rem_pio2+0x64>
 1002578:	10042e40 	call	10042e4 <fabs>
 100257c:	021b72b4 	movhi	r8,28106
 1002580:	423220c4 	addi	r8,r8,-14205
 1002584:	024ff934 	movhi	r9,16356
 1002588:	4a57cc04 	addi	r9,r9,24368
 100258c:	480f883a 	mov	r7,r9
 1002590:	400d883a 	mov	r6,r8
 1002594:	1009883a 	mov	r4,r2
 1002598:	180b883a 	mov	r5,r3
 100259c:	1025883a 	mov	r18,r2
 10025a0:	1827883a 	mov	r19,r3
 10025a4:	1004c280 	call	1004c28 <__muldf3>
 10025a8:	0011883a 	mov	r8,zero
 10025ac:	024ff834 	movhi	r9,16352
 10025b0:	480f883a 	mov	r7,r9
 10025b4:	400d883a 	mov	r6,r8
 10025b8:	180b883a 	mov	r5,r3
 10025bc:	1009883a 	mov	r4,r2
 10025c0:	1004bb40 	call	1004bb4 <__adddf3>
 10025c4:	180b883a 	mov	r5,r3
 10025c8:	1009883a 	mov	r4,r2
 10025cc:	100555c0 	call	100555c <__fixdfsi>
 10025d0:	1009883a 	mov	r4,r2
 10025d4:	d8800b15 	stw	r2,44(sp)
 10025d8:	10054640 	call	1005464 <__floatsidf>
 10025dc:	1823883a 	mov	r17,r3
 10025e0:	1009883a 	mov	r4,r2
 10025e4:	d8800c15 	stw	r2,48(sp)
 10025e8:	00effe74 	movhi	r3,49145
 10025ec:	18c87ec4 	addi	r3,r3,8699
 10025f0:	00951034 	movhi	r2,21568
 10025f4:	880b883a 	mov	r5,r17
 10025f8:	180f883a 	mov	r7,r3
 10025fc:	100d883a 	mov	r6,r2
 1002600:	dc400d15 	stw	r17,52(sp)
 1002604:	1004c280 	call	1004c28 <__muldf3>
 1002608:	180f883a 	mov	r7,r3
 100260c:	980b883a 	mov	r5,r19
 1002610:	9009883a 	mov	r4,r18
 1002614:	100d883a 	mov	r6,r2
 1002618:	1004bb40 	call	1004bb4 <__adddf3>
 100261c:	d9000c17 	ldw	r4,48(sp)
 1002620:	020698b4 	movhi	r8,6754
 1002624:	4218cc44 	addi	r8,r8,25393
 1002628:	024f7474 	movhi	r9,15825
 100262c:	4a6d1844 	addi	r9,r9,-19359
 1002630:	880b883a 	mov	r5,r17
 1002634:	480f883a 	mov	r7,r9
 1002638:	400d883a 	mov	r6,r8
 100263c:	1025883a 	mov	r18,r2
 1002640:	1827883a 	mov	r19,r3
 1002644:	1004c280 	call	1004c28 <__muldf3>
 1002648:	d9000b17 	ldw	r4,44(sp)
 100264c:	100f883a 	mov	r7,r2
 1002650:	1811883a 	mov	r8,r3
 1002654:	008007c4 	movi	r2,31
 1002658:	dc800e15 	stw	r18,56(sp)
 100265c:	3821883a 	mov	r16,r7
 1002660:	dcc00f15 	stw	r19,60(sp)
 1002664:	4023883a 	mov	r17,r8
 1002668:	11010a0e 	bge	r2,r4,1002a94 <__ieee754_rem_pio2+0x698>
 100266c:	d9000e17 	ldw	r4,56(sp)
 1002670:	d9400f17 	ldw	r5,60(sp)
 1002674:	800d883a 	mov	r6,r16
 1002678:	880f883a 	mov	r7,r17
 100267c:	1004b340 	call	1004b34 <__subdf3>
 1002680:	1810d53a 	srli	r8,r3,20
 1002684:	b02dd53a 	srai	r22,r22,20
 1002688:	1009883a 	mov	r4,r2
 100268c:	4201ffcc 	andi	r8,r8,2047
 1002690:	180b883a 	mov	r5,r3
 1002694:	b211c83a 	sub	r8,r22,r8
 1002698:	00800404 	movi	r2,16
 100269c:	dd801015 	stw	r22,64(sp)
 10026a0:	e1000015 	stw	r4,0(fp)
 10026a4:	e1400115 	stw	r5,4(fp)
 10026a8:	1200430e 	bge	r2,r8,10027b8 <__ieee754_rem_pio2+0x3bc>
 10026ac:	d9000c17 	ldw	r4,48(sp)
 10026b0:	d9400d17 	ldw	r5,52(sp)
 10026b4:	00869834 	movhi	r2,6752
 10026b8:	00cf7474 	movhi	r3,15825
 10026bc:	18ed1844 	addi	r3,r3,-19359
 10026c0:	180f883a 	mov	r7,r3
 10026c4:	100d883a 	mov	r6,r2
 10026c8:	1004c280 	call	1004c28 <__muldf3>
 10026cc:	d9000e17 	ldw	r4,56(sp)
 10026d0:	d9400f17 	ldw	r5,60(sp)
 10026d4:	100d883a 	mov	r6,r2
 10026d8:	180f883a 	mov	r7,r3
 10026dc:	1025883a 	mov	r18,r2
 10026e0:	1827883a 	mov	r19,r3
 10026e4:	1004b340 	call	1004b34 <__subdf3>
 10026e8:	d9000c17 	ldw	r4,48(sp)
 10026ec:	d9400d17 	ldw	r5,52(sp)
 10026f0:	058b80f4 	movhi	r22,11779
 10026f4:	b59c1cc4 	addi	r22,r22,28787
 10026f8:	05cee8f4 	movhi	r23,15267
 10026fc:	bdc66284 	addi	r23,r23,6538
 1002700:	b00d883a 	mov	r6,r22
 1002704:	b80f883a 	mov	r7,r23
 1002708:	d8801115 	stw	r2,68(sp)
 100270c:	d8c01215 	stw	r3,72(sp)
 1002710:	d8800815 	stw	r2,32(sp)
 1002714:	1004c280 	call	1004c28 <__muldf3>
 1002718:	d9001217 	ldw	r4,72(sp)
 100271c:	d9400f17 	ldw	r5,60(sp)
 1002720:	d9800817 	ldw	r6,32(sp)
 1002724:	d9000915 	stw	r4,36(sp)
 1002728:	d9c01217 	ldw	r7,72(sp)
 100272c:	d9000e17 	ldw	r4,56(sp)
 1002730:	1021883a 	mov	r16,r2
 1002734:	1823883a 	mov	r17,r3
 1002738:	1004b340 	call	1004b34 <__subdf3>
 100273c:	180b883a 	mov	r5,r3
 1002740:	900d883a 	mov	r6,r18
 1002744:	980f883a 	mov	r7,r19
 1002748:	1009883a 	mov	r4,r2
 100274c:	1004b340 	call	1004b34 <__subdf3>
 1002750:	180f883a 	mov	r7,r3
 1002754:	880b883a 	mov	r5,r17
 1002758:	8009883a 	mov	r4,r16
 100275c:	100d883a 	mov	r6,r2
 1002760:	1004b340 	call	1004b34 <__subdf3>
 1002764:	d9000817 	ldw	r4,32(sp)
 1002768:	d9401217 	ldw	r5,72(sp)
 100276c:	180f883a 	mov	r7,r3
 1002770:	100d883a 	mov	r6,r2
 1002774:	1021883a 	mov	r16,r2
 1002778:	1823883a 	mov	r17,r3
 100277c:	1004b340 	call	1004b34 <__subdf3>
 1002780:	1810d53a 	srli	r8,r3,20
 1002784:	1009883a 	mov	r4,r2
 1002788:	d8801017 	ldw	r2,64(sp)
 100278c:	4201ffcc 	andi	r8,r8,2047
 1002790:	180b883a 	mov	r5,r3
 1002794:	1211c83a 	sub	r8,r2,r8
 1002798:	00800c44 	movi	r2,49
 100279c:	e1000015 	stw	r4,0(fp)
 10027a0:	e1400115 	stw	r5,4(fp)
 10027a4:	1200f016 	blt	r2,r8,1002b68 <__ieee754_rem_pio2+0x76c>
 10027a8:	d8c00817 	ldw	r3,32(sp)
 10027ac:	d9001217 	ldw	r4,72(sp)
 10027b0:	d8c00e15 	stw	r3,56(sp)
 10027b4:	d9000f15 	stw	r4,60(sp)
 10027b8:	e1800017 	ldw	r6,0(fp)
 10027bc:	e1c00117 	ldw	r7,4(fp)
 10027c0:	d9400f17 	ldw	r5,60(sp)
 10027c4:	d9000e17 	ldw	r4,56(sp)
 10027c8:	1004b340 	call	1004b34 <__subdf3>
 10027cc:	180b883a 	mov	r5,r3
 10027d0:	800d883a 	mov	r6,r16
 10027d4:	880f883a 	mov	r7,r17
 10027d8:	1009883a 	mov	r4,r2
 10027dc:	1004b340 	call	1004b34 <__subdf3>
 10027e0:	d9400a17 	ldw	r5,40(sp)
 10027e4:	e0800215 	stw	r2,8(fp)
 10027e8:	e1800204 	addi	r6,fp,8
 10027ec:	30c00115 	stw	r3,4(r6)
 10027f0:	283f1b0e 	bge	r5,zero,1002460 <__ieee754_rem_pio2+0x64>
 10027f4:	e0c00117 	ldw	r3,4(fp)
 10027f8:	d8800b17 	ldw	r2,44(sp)
 10027fc:	18e0003c 	xorhi	r3,r3,32768
 1002800:	0085c83a 	sub	r2,zero,r2
 1002804:	e0c00115 	stw	r3,4(fp)
 1002808:	d8800b15 	stw	r2,44(sp)
 100280c:	30800117 	ldw	r2,4(r6)
 1002810:	10a0003c 	xorhi	r2,r2,32768
 1002814:	30800115 	stw	r2,4(r6)
 1002818:	003f1106 	br	1002460 <__ieee754_rem_pio2+0x64>
 100281c:	04151034 	movhi	r16,21568
 1002820:	044ffe74 	movhi	r17,16377
 1002824:	8c487ec4 	addi	r17,r17,8699
 1002828:	4809883a 	mov	r4,r9
 100282c:	800d883a 	mov	r6,r16
 1002830:	880f883a 	mov	r7,r17
 1002834:	1004bb40 	call	1004bb4 <__adddf3>
 1002838:	1025883a 	mov	r18,r2
 100283c:	1827883a 	mov	r19,r3
 1002840:	b440a326 	beq	r22,r17,1002ad0 <__ieee754_rem_pio2+0x6d4>
 1002844:	040698b4 	movhi	r16,6754
 1002848:	8418cc44 	addi	r16,r16,25393
 100284c:	044f7474 	movhi	r17,15825
 1002850:	8c6d1844 	addi	r17,r17,-19359
 1002854:	1009883a 	mov	r4,r2
 1002858:	180b883a 	mov	r5,r3
 100285c:	800d883a 	mov	r6,r16
 1002860:	880f883a 	mov	r7,r17
 1002864:	1004bb40 	call	1004bb4 <__adddf3>
 1002868:	100d883a 	mov	r6,r2
 100286c:	9009883a 	mov	r4,r18
 1002870:	980b883a 	mov	r5,r19
 1002874:	180f883a 	mov	r7,r3
 1002878:	e0800015 	stw	r2,0(fp)
 100287c:	e0c00115 	stw	r3,4(fp)
 1002880:	1004b340 	call	1004b34 <__subdf3>
 1002884:	1009883a 	mov	r4,r2
 1002888:	800d883a 	mov	r6,r16
 100288c:	880f883a 	mov	r7,r17
 1002890:	180b883a 	mov	r5,r3
 1002894:	1004bb40 	call	1004bb4 <__adddf3>
 1002898:	1009883a 	mov	r4,r2
 100289c:	00bfffc4 	movi	r2,-1
 10028a0:	d8800b15 	stw	r2,44(sp)
 10028a4:	e0c00315 	stw	r3,12(fp)
 10028a8:	e1000215 	stw	r4,8(fp)
 10028ac:	003eec06 	br	1002460 <__ieee754_rem_pio2+0x64>
 10028b0:	b005d53a 	srai	r2,r22,20
 10028b4:	4821883a 	mov	r16,r9
 10028b8:	05505c34 	movhi	r21,16752
 10028bc:	15fefa84 	addi	r23,r2,-1046
 10028c0:	b826953a 	slli	r19,r23,20
 10028c4:	0029883a 	mov	r20,zero
 10028c8:	048000c4 	movi	r18,3
 10028cc:	b4e7c83a 	sub	r19,r22,r19
 10028d0:	980b883a 	mov	r5,r19
 10028d4:	100555c0 	call	100555c <__fixdfsi>
 10028d8:	1009883a 	mov	r4,r2
 10028dc:	10054640 	call	1005464 <__floatsidf>
 10028e0:	980b883a 	mov	r5,r19
 10028e4:	8009883a 	mov	r4,r16
 10028e8:	180f883a 	mov	r7,r3
 10028ec:	100d883a 	mov	r6,r2
 10028f0:	d8800215 	stw	r2,8(sp)
 10028f4:	d8c00315 	stw	r3,12(sp)
 10028f8:	1004b340 	call	1004b34 <__subdf3>
 10028fc:	180b883a 	mov	r5,r3
 1002900:	a00d883a 	mov	r6,r20
 1002904:	a80f883a 	mov	r7,r21
 1002908:	1009883a 	mov	r4,r2
 100290c:	1004c280 	call	1004c28 <__muldf3>
 1002910:	180b883a 	mov	r5,r3
 1002914:	1009883a 	mov	r4,r2
 1002918:	1823883a 	mov	r17,r3
 100291c:	1021883a 	mov	r16,r2
 1002920:	100555c0 	call	100555c <__fixdfsi>
 1002924:	1009883a 	mov	r4,r2
 1002928:	10054640 	call	1005464 <__floatsidf>
 100292c:	880b883a 	mov	r5,r17
 1002930:	8009883a 	mov	r4,r16
 1002934:	180f883a 	mov	r7,r3
 1002938:	100d883a 	mov	r6,r2
 100293c:	d8800415 	stw	r2,16(sp)
 1002940:	d8c00515 	stw	r3,20(sp)
 1002944:	1004b340 	call	1004b34 <__subdf3>
 1002948:	180b883a 	mov	r5,r3
 100294c:	000d883a 	mov	r6,zero
 1002950:	a80f883a 	mov	r7,r21
 1002954:	1009883a 	mov	r4,r2
 1002958:	1004c280 	call	1004c28 <__muldf3>
 100295c:	d8c00715 	stw	r3,28(sp)
 1002960:	d8800615 	stw	r2,24(sp)
 1002964:	00000106 	br	100296c <__ieee754_rem_pio2+0x570>
 1002968:	8025883a 	mov	r18,r16
 100296c:	943fffc4 	addi	r16,r18,-1
 1002970:	800890fa 	slli	r4,r16,3
 1002974:	d9400204 	addi	r5,sp,8
 1002978:	000d883a 	mov	r6,zero
 100297c:	2149883a 	add	r4,r4,r5
 1002980:	20c00117 	ldw	r3,4(r4)
 1002984:	20800017 	ldw	r2,0(r4)
 1002988:	000f883a 	mov	r7,zero
 100298c:	180b883a 	mov	r5,r3
 1002990:	1009883a 	mov	r4,r2
 1002994:	10052440 	call	1005244 <__eqdf2>
 1002998:	103ff326 	beq	r2,zero,1002968 <__ieee754_rem_pio2+0x56c>
 100299c:	00800084 	movi	r2,2
 10029a0:	00c040b4 	movhi	r3,258
 10029a4:	18fc4f04 	addi	r3,r3,-3780
 10029a8:	b80d883a 	mov	r6,r23
 10029ac:	900f883a 	mov	r7,r18
 10029b0:	d9000204 	addi	r4,sp,8
 10029b4:	e00b883a 	mov	r5,fp
 10029b8:	d8800015 	stw	r2,0(sp)
 10029bc:	d8c00115 	stw	r3,4(sp)
 10029c0:	10031500 	call	1003150 <__kernel_rem_pio2>
 10029c4:	d8800b15 	stw	r2,44(sp)
 10029c8:	d8800a17 	ldw	r2,40(sp)
 10029cc:	103ea40e 	bge	r2,zero,1002460 <__ieee754_rem_pio2+0x64>
 10029d0:	e0800117 	ldw	r2,4(fp)
 10029d4:	d8c00b17 	ldw	r3,44(sp)
 10029d8:	e1000204 	addi	r4,fp,8
 10029dc:	10a0003c 	xorhi	r2,r2,32768
 10029e0:	00c7c83a 	sub	r3,zero,r3
 10029e4:	e0800115 	stw	r2,4(fp)
 10029e8:	d8c00b15 	stw	r3,44(sp)
 10029ec:	20c00117 	ldw	r3,4(r4)
 10029f0:	18e0003c 	xorhi	r3,r3,32768
 10029f4:	20c00115 	stw	r3,4(r4)
 10029f8:	003e9906 	br	1002460 <__ieee754_rem_pio2+0x64>
 10029fc:	00869834 	movhi	r2,6752
 1002a00:	00cf7474 	movhi	r3,15825
 1002a04:	18ed1844 	addi	r3,r3,-19359
 1002a08:	9009883a 	mov	r4,r18
 1002a0c:	980b883a 	mov	r5,r19
 1002a10:	180f883a 	mov	r7,r3
 1002a14:	100d883a 	mov	r6,r2
 1002a18:	1004b340 	call	1004b34 <__subdf3>
 1002a1c:	048b80f4 	movhi	r18,11779
 1002a20:	949c1cc4 	addi	r18,r18,28787
 1002a24:	04cee8f4 	movhi	r19,15267
 1002a28:	9cc66284 	addi	r19,r19,6538
 1002a2c:	1009883a 	mov	r4,r2
 1002a30:	180b883a 	mov	r5,r3
 1002a34:	900d883a 	mov	r6,r18
 1002a38:	980f883a 	mov	r7,r19
 1002a3c:	1021883a 	mov	r16,r2
 1002a40:	1823883a 	mov	r17,r3
 1002a44:	1004b340 	call	1004b34 <__subdf3>
 1002a48:	100d883a 	mov	r6,r2
 1002a4c:	8009883a 	mov	r4,r16
 1002a50:	880b883a 	mov	r5,r17
 1002a54:	180f883a 	mov	r7,r3
 1002a58:	e0800015 	stw	r2,0(fp)
 1002a5c:	e0c00115 	stw	r3,4(fp)
 1002a60:	1004b340 	call	1004b34 <__subdf3>
 1002a64:	180b883a 	mov	r5,r3
 1002a68:	1009883a 	mov	r4,r2
 1002a6c:	900d883a 	mov	r6,r18
 1002a70:	980f883a 	mov	r7,r19
 1002a74:	1004b340 	call	1004b34 <__subdf3>
 1002a78:	180b883a 	mov	r5,r3
 1002a7c:	1009883a 	mov	r4,r2
 1002a80:	00c00044 	movi	r3,1
 1002a84:	d8c00b15 	stw	r3,44(sp)
 1002a88:	e1400315 	stw	r5,12(fp)
 1002a8c:	e1000215 	stw	r4,8(fp)
 1002a90:	003e7306 	br	1002460 <__ieee754_rem_pio2+0x64>
 1002a94:	2105883a 	add	r2,r4,r4
 1002a98:	1085883a 	add	r2,r2,r2
 1002a9c:	00c040b4 	movhi	r3,258
 1002aa0:	18fc2f04 	addi	r3,r3,-3908
 1002aa4:	10c5883a 	add	r2,r2,r3
 1002aa8:	113fff17 	ldw	r4,-4(r2)
 1002aac:	b13eef26 	beq	r22,r4,100266c <__ieee754_rem_pio2+0x270>
 1002ab0:	980b883a 	mov	r5,r19
 1002ab4:	400f883a 	mov	r7,r8
 1002ab8:	9009883a 	mov	r4,r18
 1002abc:	800d883a 	mov	r6,r16
 1002ac0:	1004b340 	call	1004b34 <__subdf3>
 1002ac4:	e0c00115 	stw	r3,4(fp)
 1002ac8:	e0800015 	stw	r2,0(fp)
 1002acc:	003f3a06 	br	10027b8 <__ieee754_rem_pio2+0x3bc>
 1002ad0:	00869834 	movhi	r2,6752
 1002ad4:	00cf7474 	movhi	r3,15825
 1002ad8:	18ed1844 	addi	r3,r3,-19359
 1002adc:	9009883a 	mov	r4,r18
 1002ae0:	980b883a 	mov	r5,r19
 1002ae4:	180f883a 	mov	r7,r3
 1002ae8:	100d883a 	mov	r6,r2
 1002aec:	1004bb40 	call	1004bb4 <__adddf3>
 1002af0:	048b80f4 	movhi	r18,11779
 1002af4:	949c1cc4 	addi	r18,r18,28787
 1002af8:	04cee8f4 	movhi	r19,15267
 1002afc:	9cc66284 	addi	r19,r19,6538
 1002b00:	1009883a 	mov	r4,r2
 1002b04:	180b883a 	mov	r5,r3
 1002b08:	900d883a 	mov	r6,r18
 1002b0c:	980f883a 	mov	r7,r19
 1002b10:	1021883a 	mov	r16,r2
 1002b14:	1823883a 	mov	r17,r3
 1002b18:	1004bb40 	call	1004bb4 <__adddf3>
 1002b1c:	100d883a 	mov	r6,r2
 1002b20:	8009883a 	mov	r4,r16
 1002b24:	880b883a 	mov	r5,r17
 1002b28:	180f883a 	mov	r7,r3
 1002b2c:	e0800015 	stw	r2,0(fp)
 1002b30:	e0c00115 	stw	r3,4(fp)
 1002b34:	1004b340 	call	1004b34 <__subdf3>
 1002b38:	180b883a 	mov	r5,r3
 1002b3c:	1009883a 	mov	r4,r2
 1002b40:	900d883a 	mov	r6,r18
 1002b44:	980f883a 	mov	r7,r19
 1002b48:	1004bb40 	call	1004bb4 <__adddf3>
 1002b4c:	180b883a 	mov	r5,r3
 1002b50:	1009883a 	mov	r4,r2
 1002b54:	00ffffc4 	movi	r3,-1
 1002b58:	d8c00b15 	stw	r3,44(sp)
 1002b5c:	e1400315 	stw	r5,12(fp)
 1002b60:	e1000215 	stw	r4,8(fp)
 1002b64:	003e3e06 	br	1002460 <__ieee754_rem_pio2+0x64>
 1002b68:	d9000c17 	ldw	r4,48(sp)
 1002b6c:	d9400d17 	ldw	r5,52(sp)
 1002b70:	018b8034 	movhi	r6,11776
 1002b74:	b80f883a 	mov	r7,r23
 1002b78:	1004c280 	call	1004c28 <__muldf3>
 1002b7c:	d9000817 	ldw	r4,32(sp)
 1002b80:	d9401217 	ldw	r5,72(sp)
 1002b84:	100d883a 	mov	r6,r2
 1002b88:	180f883a 	mov	r7,r3
 1002b8c:	1025883a 	mov	r18,r2
 1002b90:	1827883a 	mov	r19,r3
 1002b94:	1004b340 	call	1004b34 <__subdf3>
 1002b98:	d9400d17 	ldw	r5,52(sp)
 1002b9c:	d9000c17 	ldw	r4,48(sp)
 1002ba0:	02094834 	movhi	r8,9504
 1002ba4:	42127044 	addi	r8,r8,18881
 1002ba8:	024e5f34 	movhi	r9,14716
 1002bac:	4a60e684 	addi	r9,r9,-31846
 1002bb0:	480f883a 	mov	r7,r9
 1002bb4:	400d883a 	mov	r6,r8
 1002bb8:	182b883a 	mov	r21,r3
 1002bbc:	d8800e15 	stw	r2,56(sp)
 1002bc0:	1004c280 	call	1004c28 <__muldf3>
 1002bc4:	d9000817 	ldw	r4,32(sp)
 1002bc8:	d9401217 	ldw	r5,72(sp)
 1002bcc:	d9800e17 	ldw	r6,56(sp)
 1002bd0:	a80f883a 	mov	r7,r21
 1002bd4:	1021883a 	mov	r16,r2
 1002bd8:	1823883a 	mov	r17,r3
 1002bdc:	dd400f15 	stw	r21,60(sp)
 1002be0:	1004b340 	call	1004b34 <__subdf3>
 1002be4:	180b883a 	mov	r5,r3
 1002be8:	900d883a 	mov	r6,r18
 1002bec:	980f883a 	mov	r7,r19
 1002bf0:	1009883a 	mov	r4,r2
 1002bf4:	1004b340 	call	1004b34 <__subdf3>
 1002bf8:	180f883a 	mov	r7,r3
 1002bfc:	880b883a 	mov	r5,r17
 1002c00:	8009883a 	mov	r4,r16
 1002c04:	100d883a 	mov	r6,r2
 1002c08:	1004b340 	call	1004b34 <__subdf3>
 1002c0c:	d9000e17 	ldw	r4,56(sp)
 1002c10:	1021883a 	mov	r16,r2
 1002c14:	1823883a 	mov	r17,r3
 1002c18:	a80b883a 	mov	r5,r21
 1002c1c:	180f883a 	mov	r7,r3
 1002c20:	003fa606 	br	1002abc <__ieee754_rem_pio2+0x6c0>

01002c24 <__kernel_cos>:
 1002c24:	defff104 	addi	sp,sp,-60
 1002c28:	00a00034 	movhi	r2,32768
 1002c2c:	10bfffc4 	addi	r2,r2,-1
 1002c30:	dd800c15 	stw	r22,48(sp)
 1002c34:	116c703a 	and	r22,r2,r5
 1002c38:	0005883a 	mov	r2,zero
 1002c3c:	dd000a15 	stw	r20,40(sp)
 1002c40:	d8800215 	stw	r2,8(sp)
 1002c44:	2029883a 	mov	r20,r4
 1002c48:	008f9034 	movhi	r2,15936
 1002c4c:	10bfffc4 	addi	r2,r2,-1
 1002c50:	0009883a 	mov	r4,zero
 1002c54:	dd400b15 	stw	r21,44(sp)
 1002c58:	dfc00e15 	stw	ra,56(sp)
 1002c5c:	ddc00d15 	stw	r23,52(sp)
 1002c60:	dcc00915 	stw	r19,36(sp)
 1002c64:	dc800815 	stw	r18,32(sp)
 1002c68:	dc400715 	stw	r17,28(sp)
 1002c6c:	dc000615 	stw	r16,24(sp)
 1002c70:	282b883a 	mov	r21,r5
 1002c74:	d9800415 	stw	r6,16(sp)
 1002c78:	d9c00515 	stw	r7,20(sp)
 1002c7c:	d9000315 	stw	r4,12(sp)
 1002c80:	15809216 	blt	r2,r22,1002ecc <__kernel_cos+0x2a8>
 1002c84:	a009883a 	mov	r4,r20
 1002c88:	100555c0 	call	100555c <__fixdfsi>
 1002c8c:	10011c26 	beq	r2,zero,1003100 <__kernel_cos+0x4dc>
 1002c90:	a009883a 	mov	r4,r20
 1002c94:	a80b883a 	mov	r5,r21
 1002c98:	a00d883a 	mov	r6,r20
 1002c9c:	a80f883a 	mov	r7,r21
 1002ca0:	1004c280 	call	1004c28 <__muldf3>
 1002ca4:	1021883a 	mov	r16,r2
 1002ca8:	1823883a 	mov	r17,r3
 1002cac:	1025883a 	mov	r18,r2
 1002cb0:	1827883a 	mov	r19,r3
 1002cb4:	00afa234 	movhi	r2,48776
 1002cb8:	108e3504 	addi	r2,r2,14548
 1002cbc:	00ef6a74 	movhi	r3,48553
 1002cc0:	18feba44 	addi	r3,r3,-1303
 1002cc4:	8009883a 	mov	r4,r16
 1002cc8:	880b883a 	mov	r5,r17
 1002ccc:	180f883a 	mov	r7,r3
 1002cd0:	100d883a 	mov	r6,r2
 1002cd4:	1004c280 	call	1004c28 <__muldf3>
 1002cd8:	022f6d74 	movhi	r8,48565
 1002cdc:	422c7104 	addi	r8,r8,-20028
 1002ce0:	024f88b4 	movhi	r9,15906
 1002ce4:	4a7ba784 	addi	r9,r9,-4450
 1002ce8:	480f883a 	mov	r7,r9
 1002cec:	400d883a 	mov	r6,r8
 1002cf0:	180b883a 	mov	r5,r3
 1002cf4:	1009883a 	mov	r4,r2
 1002cf8:	1004bb40 	call	1004bb4 <__adddf3>
 1002cfc:	180f883a 	mov	r7,r3
 1002d00:	8009883a 	mov	r4,r16
 1002d04:	880b883a 	mov	r5,r17
 1002d08:	100d883a 	mov	r6,r2
 1002d0c:	1004c280 	call	1004c28 <__muldf3>
 1002d10:	02202734 	movhi	r8,32924
 1002d14:	4214ab44 	addi	r8,r8,21165
 1002d18:	024fa4b4 	movhi	r9,16018
 1002d1c:	4a5f93c4 	addi	r9,r9,32335
 1002d20:	480f883a 	mov	r7,r9
 1002d24:	400d883a 	mov	r6,r8
 1002d28:	180b883a 	mov	r5,r3
 1002d2c:	1009883a 	mov	r4,r2
 1002d30:	1004b340 	call	1004b34 <__subdf3>
 1002d34:	180f883a 	mov	r7,r3
 1002d38:	8009883a 	mov	r4,r16
 1002d3c:	880b883a 	mov	r5,r17
 1002d40:	100d883a 	mov	r6,r2
 1002d44:	1004c280 	call	1004c28 <__muldf3>
 1002d48:	020672f4 	movhi	r8,6603
 1002d4c:	42056404 	addi	r8,r8,5520
 1002d50:	024fbeb4 	movhi	r9,16122
 1002d54:	4a406804 	addi	r9,r9,416
 1002d58:	480f883a 	mov	r7,r9
 1002d5c:	400d883a 	mov	r6,r8
 1002d60:	180b883a 	mov	r5,r3
 1002d64:	1009883a 	mov	r4,r2
 1002d68:	1004bb40 	call	1004bb4 <__adddf3>
 1002d6c:	180f883a 	mov	r7,r3
 1002d70:	8009883a 	mov	r4,r16
 1002d74:	880b883a 	mov	r5,r17
 1002d78:	100d883a 	mov	r6,r2
 1002d7c:	1004c280 	call	1004c28 <__muldf3>
 1002d80:	0205b074 	movhi	r8,5825
 1002d84:	42145dc4 	addi	r8,r8,20855
 1002d88:	024fd5f4 	movhi	r9,16215
 1002d8c:	4a705b04 	addi	r9,r9,-16020
 1002d90:	480f883a 	mov	r7,r9
 1002d94:	400d883a 	mov	r6,r8
 1002d98:	180b883a 	mov	r5,r3
 1002d9c:	1009883a 	mov	r4,r2
 1002da0:	1004b340 	call	1004b34 <__subdf3>
 1002da4:	180f883a 	mov	r7,r3
 1002da8:	8009883a 	mov	r4,r16
 1002dac:	880b883a 	mov	r5,r17
 1002db0:	100d883a 	mov	r6,r2
 1002db4:	1004c280 	call	1004c28 <__muldf3>
 1002db8:	02155574 	movhi	r8,21845
 1002dbc:	42155304 	addi	r8,r8,21836
 1002dc0:	024fe974 	movhi	r9,16293
 1002dc4:	4a555544 	addi	r9,r9,21845
 1002dc8:	480f883a 	mov	r7,r9
 1002dcc:	400d883a 	mov	r6,r8
 1002dd0:	180b883a 	mov	r5,r3
 1002dd4:	1009883a 	mov	r4,r2
 1002dd8:	1004bb40 	call	1004bb4 <__adddf3>
 1002ddc:	180f883a 	mov	r7,r3
 1002de0:	880b883a 	mov	r5,r17
 1002de4:	8009883a 	mov	r4,r16
 1002de8:	100d883a 	mov	r6,r2
 1002dec:	1004c280 	call	1004c28 <__muldf3>
 1002df0:	1021883a 	mov	r16,r2
 1002df4:	1823883a 	mov	r17,r3
 1002df8:	0005883a 	mov	r2,zero
 1002dfc:	00cff834 	movhi	r3,16352
 1002e00:	9009883a 	mov	r4,r18
 1002e04:	980b883a 	mov	r5,r19
 1002e08:	180f883a 	mov	r7,r3
 1002e0c:	100d883a 	mov	r6,r2
 1002e10:	1004c280 	call	1004c28 <__muldf3>
 1002e14:	980b883a 	mov	r5,r19
 1002e18:	880f883a 	mov	r7,r17
 1002e1c:	9009883a 	mov	r4,r18
 1002e20:	800d883a 	mov	r6,r16
 1002e24:	1025883a 	mov	r18,r2
 1002e28:	1827883a 	mov	r19,r3
 1002e2c:	1004c280 	call	1004c28 <__muldf3>
 1002e30:	d9c00517 	ldw	r7,20(sp)
 1002e34:	d9800417 	ldw	r6,16(sp)
 1002e38:	a80b883a 	mov	r5,r21
 1002e3c:	a009883a 	mov	r4,r20
 1002e40:	1021883a 	mov	r16,r2
 1002e44:	1823883a 	mov	r17,r3
 1002e48:	1004c280 	call	1004c28 <__muldf3>
 1002e4c:	180f883a 	mov	r7,r3
 1002e50:	880b883a 	mov	r5,r17
 1002e54:	8009883a 	mov	r4,r16
 1002e58:	100d883a 	mov	r6,r2
 1002e5c:	1004b340 	call	1004b34 <__subdf3>
 1002e60:	180f883a 	mov	r7,r3
 1002e64:	980b883a 	mov	r5,r19
 1002e68:	9009883a 	mov	r4,r18
 1002e6c:	100d883a 	mov	r6,r2
 1002e70:	1004b340 	call	1004b34 <__subdf3>
 1002e74:	0011883a 	mov	r8,zero
 1002e78:	024ffc34 	movhi	r9,16368
 1002e7c:	480b883a 	mov	r5,r9
 1002e80:	180f883a 	mov	r7,r3
 1002e84:	4009883a 	mov	r4,r8
 1002e88:	100d883a 	mov	r6,r2
 1002e8c:	1004b340 	call	1004b34 <__subdf3>
 1002e90:	100d883a 	mov	r6,r2
 1002e94:	180f883a 	mov	r7,r3
 1002e98:	3005883a 	mov	r2,r6
 1002e9c:	3807883a 	mov	r3,r7
 1002ea0:	dfc00e17 	ldw	ra,56(sp)
 1002ea4:	ddc00d17 	ldw	r23,52(sp)
 1002ea8:	dd800c17 	ldw	r22,48(sp)
 1002eac:	dd400b17 	ldw	r21,44(sp)
 1002eb0:	dd000a17 	ldw	r20,40(sp)
 1002eb4:	dcc00917 	ldw	r19,36(sp)
 1002eb8:	dc800817 	ldw	r18,32(sp)
 1002ebc:	dc400717 	ldw	r17,28(sp)
 1002ec0:	dc000617 	ldw	r16,24(sp)
 1002ec4:	dec00f04 	addi	sp,sp,60
 1002ec8:	f800283a 	ret
 1002ecc:	280f883a 	mov	r7,r5
 1002ed0:	a009883a 	mov	r4,r20
 1002ed4:	a00d883a 	mov	r6,r20
 1002ed8:	1004c280 	call	1004c28 <__muldf3>
 1002edc:	1021883a 	mov	r16,r2
 1002ee0:	1823883a 	mov	r17,r3
 1002ee4:	1025883a 	mov	r18,r2
 1002ee8:	1827883a 	mov	r19,r3
 1002eec:	00afa234 	movhi	r2,48776
 1002ef0:	108e3504 	addi	r2,r2,14548
 1002ef4:	00ef6a74 	movhi	r3,48553
 1002ef8:	18feba44 	addi	r3,r3,-1303
 1002efc:	8009883a 	mov	r4,r16
 1002f00:	880b883a 	mov	r5,r17
 1002f04:	180f883a 	mov	r7,r3
 1002f08:	100d883a 	mov	r6,r2
 1002f0c:	1004c280 	call	1004c28 <__muldf3>
 1002f10:	022f6d74 	movhi	r8,48565
 1002f14:	422c7104 	addi	r8,r8,-20028
 1002f18:	024f88b4 	movhi	r9,15906
 1002f1c:	4a7ba784 	addi	r9,r9,-4450
 1002f20:	480f883a 	mov	r7,r9
 1002f24:	400d883a 	mov	r6,r8
 1002f28:	180b883a 	mov	r5,r3
 1002f2c:	1009883a 	mov	r4,r2
 1002f30:	1004bb40 	call	1004bb4 <__adddf3>
 1002f34:	180f883a 	mov	r7,r3
 1002f38:	8009883a 	mov	r4,r16
 1002f3c:	880b883a 	mov	r5,r17
 1002f40:	100d883a 	mov	r6,r2
 1002f44:	1004c280 	call	1004c28 <__muldf3>
 1002f48:	02202734 	movhi	r8,32924
 1002f4c:	4214ab44 	addi	r8,r8,21165
 1002f50:	024fa4b4 	movhi	r9,16018
 1002f54:	4a5f93c4 	addi	r9,r9,32335
 1002f58:	480f883a 	mov	r7,r9
 1002f5c:	400d883a 	mov	r6,r8
 1002f60:	180b883a 	mov	r5,r3
 1002f64:	1009883a 	mov	r4,r2
 1002f68:	1004b340 	call	1004b34 <__subdf3>
 1002f6c:	180f883a 	mov	r7,r3
 1002f70:	8009883a 	mov	r4,r16
 1002f74:	880b883a 	mov	r5,r17
 1002f78:	100d883a 	mov	r6,r2
 1002f7c:	1004c280 	call	1004c28 <__muldf3>
 1002f80:	020672f4 	movhi	r8,6603
 1002f84:	42056404 	addi	r8,r8,5520
 1002f88:	024fbeb4 	movhi	r9,16122
 1002f8c:	4a406804 	addi	r9,r9,416
 1002f90:	480f883a 	mov	r7,r9
 1002f94:	400d883a 	mov	r6,r8
 1002f98:	180b883a 	mov	r5,r3
 1002f9c:	1009883a 	mov	r4,r2
 1002fa0:	1004bb40 	call	1004bb4 <__adddf3>
 1002fa4:	180f883a 	mov	r7,r3
 1002fa8:	8009883a 	mov	r4,r16
 1002fac:	880b883a 	mov	r5,r17
 1002fb0:	100d883a 	mov	r6,r2
 1002fb4:	1004c280 	call	1004c28 <__muldf3>
 1002fb8:	0205b074 	movhi	r8,5825
 1002fbc:	42145dc4 	addi	r8,r8,20855
 1002fc0:	024fd5f4 	movhi	r9,16215
 1002fc4:	4a705b04 	addi	r9,r9,-16020
 1002fc8:	480f883a 	mov	r7,r9
 1002fcc:	400d883a 	mov	r6,r8
 1002fd0:	180b883a 	mov	r5,r3
 1002fd4:	1009883a 	mov	r4,r2
 1002fd8:	1004b340 	call	1004b34 <__subdf3>
 1002fdc:	180f883a 	mov	r7,r3
 1002fe0:	8009883a 	mov	r4,r16
 1002fe4:	880b883a 	mov	r5,r17
 1002fe8:	100d883a 	mov	r6,r2
 1002fec:	1004c280 	call	1004c28 <__muldf3>
 1002ff0:	02155574 	movhi	r8,21845
 1002ff4:	42155304 	addi	r8,r8,21836
 1002ff8:	024fe974 	movhi	r9,16293
 1002ffc:	4a555544 	addi	r9,r9,21845
 1003000:	480f883a 	mov	r7,r9
 1003004:	400d883a 	mov	r6,r8
 1003008:	180b883a 	mov	r5,r3
 100300c:	1009883a 	mov	r4,r2
 1003010:	1004bb40 	call	1004bb4 <__adddf3>
 1003014:	180f883a 	mov	r7,r3
 1003018:	880b883a 	mov	r5,r17
 100301c:	8009883a 	mov	r4,r16
 1003020:	100d883a 	mov	r6,r2
 1003024:	1004c280 	call	1004c28 <__muldf3>
 1003028:	1021883a 	mov	r16,r2
 100302c:	008ff4f4 	movhi	r2,16339
 1003030:	108ccc84 	addi	r2,r2,13106
 1003034:	1823883a 	mov	r17,r3
 1003038:	15bf6f0e 	bge	r2,r22,1002df8 <__kernel_cos+0x1d4>
 100303c:	008ffa74 	movhi	r2,16361
 1003040:	1580320e 	bge	r2,r22,100310c <__kernel_cos+0x4e8>
 1003044:	0005883a 	mov	r2,zero
 1003048:	010ff9f4 	movhi	r4,16359
 100304c:	002d883a 	mov	r22,zero
 1003050:	d8800015 	stw	r2,0(sp)
 1003054:	05cff4b4 	movhi	r23,16338
 1003058:	d9000115 	stw	r4,4(sp)
 100305c:	0005883a 	mov	r2,zero
 1003060:	00cff834 	movhi	r3,16352
 1003064:	9009883a 	mov	r4,r18
 1003068:	980b883a 	mov	r5,r19
 100306c:	180f883a 	mov	r7,r3
 1003070:	100d883a 	mov	r6,r2
 1003074:	1004c280 	call	1004c28 <__muldf3>
 1003078:	180b883a 	mov	r5,r3
 100307c:	b80f883a 	mov	r7,r23
 1003080:	1009883a 	mov	r4,r2
 1003084:	b00d883a 	mov	r6,r22
 1003088:	1004b340 	call	1004b34 <__subdf3>
 100308c:	980b883a 	mov	r5,r19
 1003090:	880f883a 	mov	r7,r17
 1003094:	9009883a 	mov	r4,r18
 1003098:	800d883a 	mov	r6,r16
 100309c:	1025883a 	mov	r18,r2
 10030a0:	1827883a 	mov	r19,r3
 10030a4:	1004c280 	call	1004c28 <__muldf3>
 10030a8:	d9c00517 	ldw	r7,20(sp)
 10030ac:	d9800417 	ldw	r6,16(sp)
 10030b0:	a80b883a 	mov	r5,r21
 10030b4:	a009883a 	mov	r4,r20
 10030b8:	1021883a 	mov	r16,r2
 10030bc:	1823883a 	mov	r17,r3
 10030c0:	1004c280 	call	1004c28 <__muldf3>
 10030c4:	180f883a 	mov	r7,r3
 10030c8:	880b883a 	mov	r5,r17
 10030cc:	8009883a 	mov	r4,r16
 10030d0:	100d883a 	mov	r6,r2
 10030d4:	1004b340 	call	1004b34 <__subdf3>
 10030d8:	180f883a 	mov	r7,r3
 10030dc:	980b883a 	mov	r5,r19
 10030e0:	9009883a 	mov	r4,r18
 10030e4:	100d883a 	mov	r6,r2
 10030e8:	1004b340 	call	1004b34 <__subdf3>
 10030ec:	d9400117 	ldw	r5,4(sp)
 10030f0:	d9000017 	ldw	r4,0(sp)
 10030f4:	180f883a 	mov	r7,r3
 10030f8:	100d883a 	mov	r6,r2
 10030fc:	003f6306 	br	1002e8c <__kernel_cos+0x268>
 1003100:	000d883a 	mov	r6,zero
 1003104:	01cffc34 	movhi	r7,16368
 1003108:	003f6306 	br	1002e98 <__kernel_cos+0x274>
 100310c:	00bff834 	movhi	r2,65504
 1003110:	b0ad883a 	add	r22,r22,r2
 1003114:	dd800315 	stw	r22,12(sp)
 1003118:	d9000317 	ldw	r4,12(sp)
 100311c:	0005883a 	mov	r2,zero
 1003120:	00cffc34 	movhi	r3,16368
 1003124:	002d883a 	mov	r22,zero
 1003128:	200f883a 	mov	r7,r4
 100312c:	202f883a 	mov	r23,r4
 1003130:	180b883a 	mov	r5,r3
 1003134:	1009883a 	mov	r4,r2
 1003138:	b00d883a 	mov	r6,r22
 100313c:	d8800215 	stw	r2,8(sp)
 1003140:	1004b340 	call	1004b34 <__subdf3>
 1003144:	d8800015 	stw	r2,0(sp)
 1003148:	d8c00115 	stw	r3,4(sp)
 100314c:	003fc306 	br	100305c <__kernel_cos+0x438>

01003150 <__kernel_rem_pio2>:
 1003150:	deff5304 	addi	sp,sp,-692
 1003154:	d880ad17 	ldw	r2,692(sp)
 1003158:	d9009615 	stw	r4,600(sp)
 100315c:	d9409715 	stw	r5,604(sp)
 1003160:	1087883a 	add	r3,r2,r2
 1003164:	18c7883a 	add	r3,r3,r3
 1003168:	008040b4 	movhi	r2,258
 100316c:	10bc9104 	addi	r2,r2,-3516
 1003170:	1887883a 	add	r3,r3,r2
 1003174:	18c00017 	ldw	r3,0(r3)
 1003178:	313fff44 	addi	r4,r6,-3
 100317c:	01400604 	movi	r5,24
 1003180:	df00ab15 	stw	fp,684(sp)
 1003184:	dc00a315 	stw	r16,652(sp)
 1003188:	d8c09515 	stw	r3,596(sp)
 100318c:	dfc0ac15 	stw	ra,688(sp)
 1003190:	ddc0aa15 	stw	r23,680(sp)
 1003194:	dd80a915 	stw	r22,676(sp)
 1003198:	dd40a815 	stw	r21,672(sp)
 100319c:	dd00a715 	stw	r20,668(sp)
 10031a0:	dcc0a615 	stw	r19,664(sp)
 10031a4:	dc80a515 	stw	r18,660(sp)
 10031a8:	dc40a415 	stw	r17,656(sp)
 10031ac:	3021883a 	mov	r16,r6
 10031b0:	d9c09815 	stw	r7,608(sp)
 10031b4:	10056b00 	call	10056b0 <__divsi3>
 10031b8:	d8c09817 	ldw	r3,608(sp)
 10031bc:	d8808c15 	stw	r2,560(sp)
 10031c0:	1f3fffc4 	addi	fp,r3,-1
 10031c4:	10031816 	blt	r2,zero,1003e28 <__kernel_rem_pio2+0xcd8>
 10031c8:	d9008c17 	ldw	r4,560(sp)
 10031cc:	d9409517 	ldw	r5,596(sp)
 10031d0:	20bffa24 	muli	r2,r4,-24
 10031d4:	2f07883a 	add	r3,r5,fp
 10031d8:	8085883a 	add	r2,r16,r2
 10031dc:	10bffa04 	addi	r2,r2,-24
 10031e0:	d8809315 	stw	r2,588(sp)
 10031e4:	18001516 	blt	r3,zero,100323c <__kernel_rem_pio2+0xec>
 10031e8:	2721c83a 	sub	r16,r4,fp
 10031ec:	d980ae17 	ldw	r6,696(sp)
 10031f0:	8405883a 	add	r2,r16,r16
 10031f4:	1085883a 	add	r2,r2,r2
 10031f8:	30a3883a 	add	r17,r6,r2
 10031fc:	80e7883a 	add	r19,r16,r3
 1003200:	dc801404 	addi	r18,sp,80
 1003204:	00000106 	br	100320c <__kernel_rem_pio2+0xbc>
 1003208:	84000044 	addi	r16,r16,1
 100320c:	0009883a 	mov	r4,zero
 1003210:	000b883a 	mov	r5,zero
 1003214:	80000416 	blt	r16,zero,1003228 <__kernel_rem_pio2+0xd8>
 1003218:	89000017 	ldw	r4,0(r17)
 100321c:	10054640 	call	1005464 <__floatsidf>
 1003220:	1009883a 	mov	r4,r2
 1003224:	180b883a 	mov	r5,r3
 1003228:	91400115 	stw	r5,4(r18)
 100322c:	91000015 	stw	r4,0(r18)
 1003230:	8c400104 	addi	r17,r17,4
 1003234:	94800204 	addi	r18,r18,8
 1003238:	84fff31e 	bne	r16,r19,1003208 <__kernel_rem_pio2+0xb8>
 100323c:	d9c09517 	ldw	r7,596(sp)
 1003240:	38002416 	blt	r7,zero,10032d4 <__kernel_rem_pio2+0x184>
 1003244:	da809817 	ldw	r10,608(sp)
 1003248:	e029883a 	mov	r20,fp
 100324c:	dd406404 	addi	r21,sp,400
 1003250:	3aaf883a 	add	r23,r7,r10
 1003254:	e02c403a 	cmpge	r22,fp,zero
 1003258:	b0023e26 	beq	r22,zero,1003b54 <__kernel_rem_pio2+0xa04>
 100325c:	dcc09617 	ldw	r19,600(sp)
 1003260:	0021883a 	mov	r16,zero
 1003264:	0025883a 	mov	r18,zero
 1003268:	0023883a 	mov	r17,zero
 100326c:	a489c83a 	sub	r4,r20,r18
 1003270:	200890fa 	slli	r4,r4,3
 1003274:	99800017 	ldw	r6,0(r19)
 1003278:	99c00117 	ldw	r7,4(r19)
 100327c:	26c9883a 	add	r4,r4,sp
 1003280:	20c01517 	ldw	r3,84(r4)
 1003284:	20801417 	ldw	r2,80(r4)
 1003288:	94800044 	addi	r18,r18,1
 100328c:	180b883a 	mov	r5,r3
 1003290:	1009883a 	mov	r4,r2
 1003294:	1004c280 	call	1004c28 <__muldf3>
 1003298:	180f883a 	mov	r7,r3
 100329c:	880b883a 	mov	r5,r17
 10032a0:	8009883a 	mov	r4,r16
 10032a4:	100d883a 	mov	r6,r2
 10032a8:	1004bb40 	call	1004bb4 <__adddf3>
 10032ac:	1021883a 	mov	r16,r2
 10032b0:	d8809817 	ldw	r2,608(sp)
 10032b4:	9cc00204 	addi	r19,r19,8
 10032b8:	1823883a 	mov	r17,r3
 10032bc:	14bfeb1e 	bne	r2,r18,100326c <__kernel_rem_pio2+0x11c>
 10032c0:	a5000044 	addi	r20,r20,1
 10032c4:	ac400115 	stw	r17,4(r21)
 10032c8:	ac000015 	stw	r16,0(r21)
 10032cc:	ad400204 	addi	r21,r21,8
 10032d0:	a5ffe11e 	bne	r20,r23,1003258 <__kernel_rem_pio2+0x108>
 10032d4:	d8c09517 	ldw	r3,596(sp)
 10032d8:	d9409317 	ldw	r5,588(sp)
 10032dc:	e038403a 	cmpge	fp,fp,zero
 10032e0:	d8c08d15 	stw	r3,564(sp)
 10032e4:	d9008d17 	ldw	r4,564(sp)
 10032e8:	18c5883a 	add	r2,r3,r3
 10032ec:	10c7883a 	add	r3,r2,r3
 10032f0:	1907883a 	add	r3,r3,r4
 10032f4:	1085883a 	add	r2,r2,r2
 10032f8:	16c5883a 	add	r2,r2,sp
 10032fc:	1ec7883a 	add	r3,r3,sp
 1003300:	29400050 	cmplti	r5,r5,1
 1003304:	df00a215 	stw	fp,648(sp)
 1003308:	d8809915 	stw	r2,612(sp)
 100330c:	d8c0a115 	stw	r3,644(sp)
 1003310:	d940a015 	stw	r5,640(sp)
 1003314:	d9808d17 	ldw	r6,564(sp)
 1003318:	300490fa 	slli	r2,r6,3
 100331c:	16c5883a 	add	r2,r2,sp
 1003320:	15006417 	ldw	r20,400(r2)
 1003324:	15406517 	ldw	r21,404(r2)
 1003328:	01802e0e 	bge	zero,r6,10033e4 <__kernel_rem_pio2+0x294>
 100332c:	102d883a 	mov	r22,r2
 1003330:	302f883a 	mov	r23,r6
 1003334:	d839883a 	mov	fp,sp
 1003338:	0005883a 	mov	r2,zero
 100333c:	00cf9c34 	movhi	r3,15984
 1003340:	180f883a 	mov	r7,r3
 1003344:	100d883a 	mov	r6,r2
 1003348:	a009883a 	mov	r4,r20
 100334c:	a80b883a 	mov	r5,r21
 1003350:	1004c280 	call	1004c28 <__muldf3>
 1003354:	180b883a 	mov	r5,r3
 1003358:	1009883a 	mov	r4,r2
 100335c:	100555c0 	call	100555c <__fixdfsi>
 1003360:	1009883a 	mov	r4,r2
 1003364:	10054640 	call	1005464 <__floatsidf>
 1003368:	1021883a 	mov	r16,r2
 100336c:	1823883a 	mov	r17,r3
 1003370:	0005883a 	mov	r2,zero
 1003374:	00f05c34 	movhi	r3,49520
 1003378:	180f883a 	mov	r7,r3
 100337c:	8009883a 	mov	r4,r16
 1003380:	880b883a 	mov	r5,r17
 1003384:	100d883a 	mov	r6,r2
 1003388:	1004c280 	call	1004c28 <__muldf3>
 100338c:	180b883a 	mov	r5,r3
 1003390:	a80f883a 	mov	r7,r21
 1003394:	a00d883a 	mov	r6,r20
 1003398:	1009883a 	mov	r4,r2
 100339c:	1004bb40 	call	1004bb4 <__adddf3>
 10033a0:	180b883a 	mov	r5,r3
 10033a4:	1009883a 	mov	r4,r2
 10033a8:	100555c0 	call	100555c <__fixdfsi>
 10033ac:	e0800015 	stw	r2,0(fp)
 10033b0:	b5bffe04 	addi	r22,r22,-8
 10033b4:	b0806417 	ldw	r2,400(r22)
 10033b8:	b0c06517 	ldw	r3,404(r22)
 10033bc:	8009883a 	mov	r4,r16
 10033c0:	880b883a 	mov	r5,r17
 10033c4:	180f883a 	mov	r7,r3
 10033c8:	100d883a 	mov	r6,r2
 10033cc:	1004bb40 	call	1004bb4 <__adddf3>
 10033d0:	bdffffc4 	addi	r23,r23,-1
 10033d4:	e7000104 	addi	fp,fp,4
 10033d8:	1029883a 	mov	r20,r2
 10033dc:	182b883a 	mov	r21,r3
 10033e0:	b83fd51e 	bne	r23,zero,1003338 <__kernel_rem_pio2+0x1e8>
 10033e4:	d9809317 	ldw	r6,588(sp)
 10033e8:	a80b883a 	mov	r5,r21
 10033ec:	a009883a 	mov	r4,r20
 10033f0:	10045200 	call	1004520 <scalbn>
 10033f4:	0009883a 	mov	r4,zero
 10033f8:	014ff034 	movhi	r5,16320
 10033fc:	280f883a 	mov	r7,r5
 1003400:	200d883a 	mov	r6,r4
 1003404:	180b883a 	mov	r5,r3
 1003408:	1009883a 	mov	r4,r2
 100340c:	1021883a 	mov	r16,r2
 1003410:	1823883a 	mov	r17,r3
 1003414:	1004c280 	call	1004c28 <__muldf3>
 1003418:	180b883a 	mov	r5,r3
 100341c:	1009883a 	mov	r4,r2
 1003420:	10042fc0 	call	10042fc <floor>
 1003424:	0011883a 	mov	r8,zero
 1003428:	02700834 	movhi	r9,49184
 100342c:	480f883a 	mov	r7,r9
 1003430:	400d883a 	mov	r6,r8
 1003434:	180b883a 	mov	r5,r3
 1003438:	1009883a 	mov	r4,r2
 100343c:	1004c280 	call	1004c28 <__muldf3>
 1003440:	180f883a 	mov	r7,r3
 1003444:	100d883a 	mov	r6,r2
 1003448:	880b883a 	mov	r5,r17
 100344c:	8009883a 	mov	r4,r16
 1003450:	1004bb40 	call	1004bb4 <__adddf3>
 1003454:	180b883a 	mov	r5,r3
 1003458:	1009883a 	mov	r4,r2
 100345c:	1823883a 	mov	r17,r3
 1003460:	1021883a 	mov	r16,r2
 1003464:	100555c0 	call	100555c <__fixdfsi>
 1003468:	1009883a 	mov	r4,r2
 100346c:	d8809415 	stw	r2,592(sp)
 1003470:	10054640 	call	1005464 <__floatsidf>
 1003474:	880b883a 	mov	r5,r17
 1003478:	8009883a 	mov	r4,r16
 100347c:	180f883a 	mov	r7,r3
 1003480:	100d883a 	mov	r6,r2
 1003484:	1004b340 	call	1004b34 <__subdf3>
 1003488:	d9c0a017 	ldw	r7,640(sp)
 100348c:	180d883a 	mov	r6,r3
 1003490:	1021883a 	mov	r16,r2
 1003494:	1823883a 	mov	r17,r3
 1003498:	38017d1e 	bne	r7,zero,1003a90 <__kernel_rem_pio2+0x940>
 100349c:	da808d17 	ldw	r10,564(sp)
 10034a0:	d9009317 	ldw	r4,588(sp)
 10034a4:	00c00604 	movi	r3,24
 10034a8:	50bfffc4 	addi	r2,r10,-1
 10034ac:	1085883a 	add	r2,r2,r2
 10034b0:	1085883a 	add	r2,r2,r2
 10034b4:	16c5883a 	add	r2,r2,sp
 10034b8:	11400017 	ldw	r5,0(r2)
 10034bc:	1907c83a 	sub	r3,r3,r4
 10034c0:	d9c09317 	ldw	r7,588(sp)
 10034c4:	28cdd83a 	sra	r6,r5,r3
 10034c8:	010005c4 	movi	r4,23
 10034cc:	da809417 	ldw	r10,592(sp)
 10034d0:	30c6983a 	sll	r3,r6,r3
 10034d4:	21c9c83a 	sub	r4,r4,r7
 10034d8:	5195883a 	add	r10,r10,r6
 10034dc:	28cbc83a 	sub	r5,r5,r3
 10034e0:	2909d83a 	sra	r4,r5,r4
 10034e4:	da809415 	stw	r10,592(sp)
 10034e8:	11400015 	stw	r5,0(r2)
 10034ec:	d9009215 	stw	r4,584(sp)
 10034f0:	d9409217 	ldw	r5,584(sp)
 10034f4:	0140270e 	bge	zero,r5,1003594 <__kernel_rem_pio2+0x444>
 10034f8:	d9809417 	ldw	r6,592(sp)
 10034fc:	d9c08d17 	ldw	r7,564(sp)
 1003500:	31800044 	addi	r6,r6,1
 1003504:	d9809415 	stw	r6,592(sp)
 1003508:	01c1a50e 	bge	zero,r7,1003ba0 <__kernel_rem_pio2+0xa50>
 100350c:	002d883a 	mov	r22,zero
 1003510:	000b883a 	mov	r5,zero
 1003514:	d809883a 	mov	r4,sp
 1003518:	01c04034 	movhi	r7,256
 100351c:	01804034 	movhi	r6,256
 1003520:	31bfffc4 	addi	r6,r6,-1
 1003524:	00000806 	br	1003548 <__kernel_rem_pio2+0x3f8>
 1003528:	38c5c83a 	sub	r2,r7,r3
 100352c:	18000226 	beq	r3,zero,1003538 <__kernel_rem_pio2+0x3e8>
 1003530:	05800044 	movi	r22,1
 1003534:	20800015 	stw	r2,0(r4)
 1003538:	da808d17 	ldw	r10,564(sp)
 100353c:	29400044 	addi	r5,r5,1
 1003540:	21000104 	addi	r4,r4,4
 1003544:	51400926 	beq	r10,r5,100356c <__kernel_rem_pio2+0x41c>
 1003548:	b004c03a 	cmpne	r2,r22,zero
 100354c:	20c00017 	ldw	r3,0(r4)
 1003550:	103ff526 	beq	r2,zero,1003528 <__kernel_rem_pio2+0x3d8>
 1003554:	da808d17 	ldw	r10,564(sp)
 1003558:	30c5c83a 	sub	r2,r6,r3
 100355c:	29400044 	addi	r5,r5,1
 1003560:	20800015 	stw	r2,0(r4)
 1003564:	21000104 	addi	r4,r4,4
 1003568:	517ff71e 	bne	r10,r5,1003548 <__kernel_rem_pio2+0x3f8>
 100356c:	d880a017 	ldw	r2,640(sp)
 1003570:	1000051e 	bne	r2,zero,1003588 <__kernel_rem_pio2+0x438>
 1003574:	d8c09317 	ldw	r3,588(sp)
 1003578:	00800044 	movi	r2,1
 100357c:	18814e26 	beq	r3,r2,1003ab8 <__kernel_rem_pio2+0x968>
 1003580:	00800084 	movi	r2,2
 1003584:	18815826 	beq	r3,r2,1003ae8 <__kernel_rem_pio2+0x998>
 1003588:	d9c09217 	ldw	r7,584(sp)
 100358c:	00800084 	movi	r2,2
 1003590:	38806926 	beq	r7,r2,1003738 <__kernel_rem_pio2+0x5e8>
 1003594:	000d883a 	mov	r6,zero
 1003598:	000f883a 	mov	r7,zero
 100359c:	8009883a 	mov	r4,r16
 10035a0:	880b883a 	mov	r5,r17
 10035a4:	10052440 	call	1005244 <__eqdf2>
 10035a8:	1000811e 	bne	r2,zero,10037b0 <__kernel_rem_pio2+0x660>
 10035ac:	da808d17 	ldw	r10,564(sp)
 10035b0:	d8809517 	ldw	r2,596(sp)
 10035b4:	51bfffc4 	addi	r6,r10,-1
 10035b8:	30800c16 	blt	r6,r2,10035ec <__kernel_rem_pio2+0x49c>
 10035bc:	3185883a 	add	r2,r6,r6
 10035c0:	1085883a 	add	r2,r2,r2
 10035c4:	16c9883a 	add	r4,r2,sp
 10035c8:	3007883a 	mov	r3,r6
 10035cc:	000b883a 	mov	r5,zero
 10035d0:	20800017 	ldw	r2,0(r4)
 10035d4:	d9c09517 	ldw	r7,596(sp)
 10035d8:	18ffffc4 	addi	r3,r3,-1
 10035dc:	213fff04 	addi	r4,r4,-4
 10035e0:	288ab03a 	or	r5,r5,r2
 10035e4:	19fffa0e 	bge	r3,r7,10035d0 <__kernel_rem_pio2+0x480>
 10035e8:	2800791e 	bne	r5,zero,10037d0 <__kernel_rem_pio2+0x680>
 10035ec:	da809917 	ldw	r10,612(sp)
 10035f0:	50bfff17 	ldw	r2,-4(r10)
 10035f4:	1001511e 	bne	r2,zero,1003b3c <__kernel_rem_pio2+0x9ec>
 10035f8:	d880a117 	ldw	r2,644(sp)
 10035fc:	01000044 	movi	r4,1
 1003600:	10ffff04 	addi	r3,r2,-4
 1003604:	18ffff04 	addi	r3,r3,-4
 1003608:	18800017 	ldw	r2,0(r3)
 100360c:	21000044 	addi	r4,r4,1
 1003610:	103ffc26 	beq	r2,zero,1003604 <__kernel_rem_pio2+0x4b4>
 1003614:	d8c08d17 	ldw	r3,564(sp)
 1003618:	192f883a 	add	r23,r3,r4
 100361c:	1f000044 	addi	fp,r3,1
 1003620:	bf00020e 	bge	r23,fp,100362c <__kernel_rem_pio2+0x4dc>
 1003624:	ddc08d15 	stw	r23,564(sp)
 1003628:	003f3a06 	br	1003314 <__kernel_rem_pio2+0x1c4>
 100362c:	d9408c17 	ldw	r5,560(sp)
 1003630:	d9009817 	ldw	r4,608(sp)
 1003634:	da80ae17 	ldw	r10,696(sp)
 1003638:	1945883a 	add	r2,r3,r5
 100363c:	190f883a 	add	r7,r3,r4
 1003640:	1085883a 	add	r2,r2,r2
 1003644:	380a90fa 	slli	r5,r7,3
 1003648:	e00c90fa 	slli	r6,fp,3
 100364c:	1085883a 	add	r2,r2,r2
 1003650:	5085883a 	add	r2,r10,r2
 1003654:	d8c01404 	addi	r3,sp,80
 1003658:	d9006404 	addi	r4,sp,400
 100365c:	10800104 	addi	r2,r2,4
 1003660:	196b883a 	add	r21,r3,r5
 1003664:	21a1883a 	add	r16,r4,r6
 1003668:	d8809115 	stw	r2,580(sp)
 100366c:	d9c09015 	stw	r7,576(sp)
 1003670:	d8809117 	ldw	r2,580(sp)
 1003674:	11000017 	ldw	r4,0(r2)
 1003678:	10054640 	call	1005464 <__floatsidf>
 100367c:	a8c00115 	stw	r3,4(r21)
 1003680:	d8c0a217 	ldw	r3,648(sp)
 1003684:	a8800015 	stw	r2,0(r21)
 1003688:	18002826 	beq	r3,zero,100372c <__kernel_rem_pio2+0x5dc>
 100368c:	d9009017 	ldw	r4,576(sp)
 1003690:	dd009617 	ldw	r20,600(sp)
 1003694:	0023883a 	mov	r17,zero
 1003698:	200490fa 	slli	r2,r4,3
 100369c:	002d883a 	mov	r22,zero
 10036a0:	0025883a 	mov	r18,zero
 10036a4:	16e7883a 	add	r19,r2,sp
 10036a8:	98801417 	ldw	r2,80(r19)
 10036ac:	98c01517 	ldw	r3,84(r19)
 10036b0:	a1800017 	ldw	r6,0(r20)
 10036b4:	a1c00117 	ldw	r7,4(r20)
 10036b8:	180b883a 	mov	r5,r3
 10036bc:	1009883a 	mov	r4,r2
 10036c0:	1004c280 	call	1004c28 <__muldf3>
 10036c4:	180f883a 	mov	r7,r3
 10036c8:	900b883a 	mov	r5,r18
 10036cc:	8809883a 	mov	r4,r17
 10036d0:	100d883a 	mov	r6,r2
 10036d4:	1004bb40 	call	1004bb4 <__adddf3>
 10036d8:	d9409817 	ldw	r5,608(sp)
 10036dc:	b5800044 	addi	r22,r22,1
 10036e0:	9cfffe04 	addi	r19,r19,-8
 10036e4:	1023883a 	mov	r17,r2
 10036e8:	1825883a 	mov	r18,r3
 10036ec:	a5000204 	addi	r20,r20,8
 10036f0:	2dbfed1e 	bne	r5,r22,10036a8 <__kernel_rem_pio2+0x558>
 10036f4:	d9809117 	ldw	r6,580(sp)
 10036f8:	d9c09017 	ldw	r7,576(sp)
 10036fc:	e7000044 	addi	fp,fp,1
 1003700:	31800104 	addi	r6,r6,4
 1003704:	39c00044 	addi	r7,r7,1
 1003708:	84800115 	stw	r18,4(r16)
 100370c:	84400015 	stw	r17,0(r16)
 1003710:	d9809115 	stw	r6,580(sp)
 1003714:	ad400204 	addi	r21,r21,8
 1003718:	84000204 	addi	r16,r16,8
 100371c:	d9c09015 	stw	r7,576(sp)
 1003720:	bf3fd30e 	bge	r23,fp,1003670 <__kernel_rem_pio2+0x520>
 1003724:	ddc08d15 	stw	r23,564(sp)
 1003728:	003efa06 	br	1003314 <__kernel_rem_pio2+0x1c4>
 100372c:	0023883a 	mov	r17,zero
 1003730:	0025883a 	mov	r18,zero
 1003734:	003fef06 	br	10036f4 <__kernel_rem_pio2+0x5a4>
 1003738:	0029883a 	mov	r20,zero
 100373c:	054ffc34 	movhi	r21,16368
 1003740:	880f883a 	mov	r7,r17
 1003744:	800d883a 	mov	r6,r16
 1003748:	a009883a 	mov	r4,r20
 100374c:	a80b883a 	mov	r5,r21
 1003750:	1004b340 	call	1004b34 <__subdf3>
 1003754:	1025883a 	mov	r18,r2
 1003758:	b005003a 	cmpeq	r2,r22,zero
 100375c:	1827883a 	mov	r19,r3
 1003760:	9021883a 	mov	r16,r18
 1003764:	1823883a 	mov	r17,r3
 1003768:	103f8a1e 	bne	r2,zero,1003594 <__kernel_rem_pio2+0x444>
 100376c:	d9809317 	ldw	r6,588(sp)
 1003770:	0009883a 	mov	r4,zero
 1003774:	a80b883a 	mov	r5,r21
 1003778:	10045200 	call	1004520 <scalbn>
 100377c:	180f883a 	mov	r7,r3
 1003780:	9009883a 	mov	r4,r18
 1003784:	980b883a 	mov	r5,r19
 1003788:	100d883a 	mov	r6,r2
 100378c:	1004b340 	call	1004b34 <__subdf3>
 1003790:	1021883a 	mov	r16,r2
 1003794:	1823883a 	mov	r17,r3
 1003798:	000d883a 	mov	r6,zero
 100379c:	000f883a 	mov	r7,zero
 10037a0:	8009883a 	mov	r4,r16
 10037a4:	880b883a 	mov	r5,r17
 10037a8:	10052440 	call	1005244 <__eqdf2>
 10037ac:	103f7f26 	beq	r2,zero,10035ac <__kernel_rem_pio2+0x45c>
 10037b0:	000d883a 	mov	r6,zero
 10037b4:	000f883a 	mov	r7,zero
 10037b8:	8009883a 	mov	r4,r16
 10037bc:	880b883a 	mov	r5,r17
 10037c0:	10052440 	call	1005244 <__eqdf2>
 10037c4:	10019a1e 	bne	r2,zero,1003e30 <__kernel_rem_pio2+0xce0>
 10037c8:	da808d17 	ldw	r10,564(sp)
 10037cc:	51bfffc4 	addi	r6,r10,-1
 10037d0:	3185883a 	add	r2,r6,r6
 10037d4:	1085883a 	add	r2,r2,r2
 10037d8:	d9009317 	ldw	r4,588(sp)
 10037dc:	16c5883a 	add	r2,r2,sp
 10037e0:	10c00017 	ldw	r3,0(r2)
 10037e4:	213ffa04 	addi	r4,r4,-24
 10037e8:	d9009315 	stw	r4,588(sp)
 10037ec:	1801d41e 	bne	r3,zero,1003f40 <__kernel_rem_pio2+0xdf0>
 10037f0:	d9808d15 	stw	r6,564(sp)
 10037f4:	1007883a 	mov	r3,r2
 10037f8:	d9408d17 	ldw	r5,564(sp)
 10037fc:	d9809317 	ldw	r6,588(sp)
 1003800:	18ffff04 	addi	r3,r3,-4
 1003804:	18800017 	ldw	r2,0(r3)
 1003808:	297fffc4 	addi	r5,r5,-1
 100380c:	31bffa04 	addi	r6,r6,-24
 1003810:	d9408d15 	stw	r5,564(sp)
 1003814:	d9809315 	stw	r6,588(sp)
 1003818:	103ff726 	beq	r2,zero,10037f8 <__kernel_rem_pio2+0x6a8>
 100381c:	d9809317 	ldw	r6,588(sp)
 1003820:	0005883a 	mov	r2,zero
 1003824:	00cffc34 	movhi	r3,16368
 1003828:	180b883a 	mov	r5,r3
 100382c:	1009883a 	mov	r4,r2
 1003830:	10045200 	call	1004520 <scalbn>
 1003834:	d9808d17 	ldw	r6,564(sp)
 1003838:	1021883a 	mov	r16,r2
 100383c:	1823883a 	mov	r17,r3
 1003840:	30004616 	blt	r6,zero,100395c <__kernel_rem_pio2+0x80c>
 1003844:	300690fa 	slli	r3,r6,3
 1003848:	3185883a 	add	r2,r6,r6
 100384c:	1085883a 	add	r2,r2,r2
 1003850:	16e9883a 	add	r20,r2,sp
 1003854:	1ee5883a 	add	r18,r3,sp
 1003858:	3027883a 	mov	r19,r6
 100385c:	057fffc4 	movi	r21,-1
 1003860:	a1000017 	ldw	r4,0(r20)
 1003864:	9cffffc4 	addi	r19,r19,-1
 1003868:	a53fff04 	addi	r20,r20,-4
 100386c:	10054640 	call	1005464 <__floatsidf>
 1003870:	800d883a 	mov	r6,r16
 1003874:	880f883a 	mov	r7,r17
 1003878:	180b883a 	mov	r5,r3
 100387c:	1009883a 	mov	r4,r2
 1003880:	1004c280 	call	1004c28 <__muldf3>
 1003884:	0015883a 	mov	r10,zero
 1003888:	02cf9c34 	movhi	r11,15984
 100388c:	880b883a 	mov	r5,r17
 1003890:	8009883a 	mov	r4,r16
 1003894:	90c06515 	stw	r3,404(r18)
 1003898:	90806415 	stw	r2,400(r18)
 100389c:	580f883a 	mov	r7,r11
 10038a0:	500d883a 	mov	r6,r10
 10038a4:	1004c280 	call	1004c28 <__muldf3>
 10038a8:	1021883a 	mov	r16,r2
 10038ac:	1823883a 	mov	r17,r3
 10038b0:	94bffe04 	addi	r18,r18,-8
 10038b4:	9d7fea1e 	bne	r19,r21,1003860 <__kernel_rem_pio2+0x710>
 10038b8:	d9c09517 	ldw	r7,596(sp)
 10038bc:	dd808d17 	ldw	r22,564(sp)
 10038c0:	002b883a 	mov	r21,zero
 10038c4:	382e403a 	cmpge	r23,r7,zero
 10038c8:	b800aa26 	beq	r23,zero,1003b74 <__kernel_rem_pio2+0xa24>
 10038cc:	a800a916 	blt	r21,zero,1003b74 <__kernel_rem_pio2+0xa24>
 10038d0:	b00690fa 	slli	r3,r22,3
 10038d4:	d8806404 	addi	r2,sp,400
 10038d8:	0021883a 	mov	r16,zero
 10038dc:	10e9883a 	add	r20,r2,r3
 10038e0:	0027883a 	mov	r19,zero
 10038e4:	0023883a 	mov	r17,zero
 10038e8:	048040b4 	movhi	r18,258
 10038ec:	94bc9504 	addi	r18,r18,-3500
 10038f0:	00000106 	br	10038f8 <__kernel_rem_pio2+0x7a8>
 10038f4:	acc01116 	blt	r21,r19,100393c <__kernel_rem_pio2+0x7ec>
 10038f8:	91000017 	ldw	r4,0(r18)
 10038fc:	91400117 	ldw	r5,4(r18)
 1003900:	a1800017 	ldw	r6,0(r20)
 1003904:	a1c00117 	ldw	r7,4(r20)
 1003908:	9cc00044 	addi	r19,r19,1
 100390c:	94800204 	addi	r18,r18,8
 1003910:	1004c280 	call	1004c28 <__muldf3>
 1003914:	180f883a 	mov	r7,r3
 1003918:	880b883a 	mov	r5,r17
 100391c:	8009883a 	mov	r4,r16
 1003920:	100d883a 	mov	r6,r2
 1003924:	1004bb40 	call	1004bb4 <__adddf3>
 1003928:	da809517 	ldw	r10,596(sp)
 100392c:	a5000204 	addi	r20,r20,8
 1003930:	1021883a 	mov	r16,r2
 1003934:	1823883a 	mov	r17,r3
 1003938:	54ffee0e 	bge	r10,r19,10038f4 <__kernel_rem_pio2+0x7a4>
 100393c:	a80490fa 	slli	r2,r21,3
 1003940:	b5bfffc4 	addi	r22,r22,-1
 1003944:	ad400044 	addi	r21,r21,1
 1003948:	16c5883a 	add	r2,r2,sp
 100394c:	14403d15 	stw	r17,244(r2)
 1003950:	14003c15 	stw	r16,240(r2)
 1003954:	00bfffc4 	movi	r2,-1
 1003958:	b0bfdb1e 	bne	r22,r2,10038c8 <__kernel_rem_pio2+0x778>
 100395c:	d8c0ad17 	ldw	r3,692(sp)
 1003960:	00800084 	movi	r2,2
 1003964:	10c09316 	blt	r2,r3,1003bb4 <__kernel_rem_pio2+0xa64>
 1003968:	00c1120e 	bge	zero,r3,1003db4 <__kernel_rem_pio2+0xc64>
 100396c:	d9808d17 	ldw	r6,564(sp)
 1003970:	30018d16 	blt	r6,zero,1003fa8 <__kernel_rem_pio2+0xe58>
 1003974:	d8c08d17 	ldw	r3,564(sp)
 1003978:	0011883a 	mov	r8,zero
 100397c:	0013883a 	mov	r9,zero
 1003980:	180490fa 	slli	r2,r3,3
 1003984:	1823883a 	mov	r17,r3
 1003988:	04bfffc4 	movi	r18,-1
 100398c:	16e1883a 	add	r16,r2,sp
 1003990:	80803c17 	ldw	r2,240(r16)
 1003994:	80c03d17 	ldw	r3,244(r16)
 1003998:	480b883a 	mov	r5,r9
 100399c:	4009883a 	mov	r4,r8
 10039a0:	180f883a 	mov	r7,r3
 10039a4:	100d883a 	mov	r6,r2
 10039a8:	1004bb40 	call	1004bb4 <__adddf3>
 10039ac:	8c7fffc4 	addi	r17,r17,-1
 10039b0:	843ffe04 	addi	r16,r16,-8
 10039b4:	1011883a 	mov	r8,r2
 10039b8:	1813883a 	mov	r9,r3
 10039bc:	8cbff41e 	bne	r17,r18,1003990 <__kernel_rem_pio2+0x840>
 10039c0:	d9009217 	ldw	r4,584(sp)
 10039c4:	20015b1e 	bne	r4,zero,1003f34 <__kernel_rem_pio2+0xde4>
 10039c8:	4009883a 	mov	r4,r8
 10039cc:	480b883a 	mov	r5,r9
 10039d0:	d9809717 	ldw	r6,604(sp)
 10039d4:	d8803c17 	ldw	r2,240(sp)
 10039d8:	480f883a 	mov	r7,r9
 10039dc:	31400115 	stw	r5,4(r6)
 10039e0:	31000015 	stw	r4,0(r6)
 10039e4:	d8c03d17 	ldw	r3,244(sp)
 10039e8:	400d883a 	mov	r6,r8
 10039ec:	1009883a 	mov	r4,r2
 10039f0:	180b883a 	mov	r5,r3
 10039f4:	1004b340 	call	1004b34 <__subdf3>
 10039f8:	d9c08d17 	ldw	r7,564(sp)
 10039fc:	1011883a 	mov	r8,r2
 1003a00:	1813883a 	mov	r9,r3
 1003a04:	01c00d0e 	bge	zero,r7,1003a3c <__kernel_rem_pio2+0x8ec>
 1003a08:	0023883a 	mov	r17,zero
 1003a0c:	dc003e04 	addi	r16,sp,248
 1003a10:	81800017 	ldw	r6,0(r16)
 1003a14:	81c00117 	ldw	r7,4(r16)
 1003a18:	480b883a 	mov	r5,r9
 1003a1c:	4009883a 	mov	r4,r8
 1003a20:	1004bb40 	call	1004bb4 <__adddf3>
 1003a24:	da808d17 	ldw	r10,564(sp)
 1003a28:	8c400044 	addi	r17,r17,1
 1003a2c:	1011883a 	mov	r8,r2
 1003a30:	1813883a 	mov	r9,r3
 1003a34:	84000204 	addi	r16,r16,8
 1003a38:	8abff51e 	bne	r17,r10,1003a10 <__kernel_rem_pio2+0x8c0>
 1003a3c:	d8809217 	ldw	r2,584(sp)
 1003a40:	10000226 	beq	r2,zero,1003a4c <__kernel_rem_pio2+0x8fc>
 1003a44:	48e0003c 	xorhi	r3,r9,32768
 1003a48:	1813883a 	mov	r9,r3
 1003a4c:	d8c09717 	ldw	r3,604(sp)
 1003a50:	1a400315 	stw	r9,12(r3)
 1003a54:	1a000215 	stw	r8,8(r3)
 1003a58:	d8c09417 	ldw	r3,592(sp)
 1003a5c:	188001cc 	andi	r2,r3,7
 1003a60:	dfc0ac17 	ldw	ra,688(sp)
 1003a64:	df00ab17 	ldw	fp,684(sp)
 1003a68:	ddc0aa17 	ldw	r23,680(sp)
 1003a6c:	dd80a917 	ldw	r22,676(sp)
 1003a70:	dd40a817 	ldw	r21,672(sp)
 1003a74:	dd00a717 	ldw	r20,668(sp)
 1003a78:	dcc0a617 	ldw	r19,664(sp)
 1003a7c:	dc80a517 	ldw	r18,660(sp)
 1003a80:	dc40a417 	ldw	r17,656(sp)
 1003a84:	dc00a317 	ldw	r16,652(sp)
 1003a88:	dec0ad04 	addi	sp,sp,692
 1003a8c:	f800283a 	ret
 1003a90:	d8809317 	ldw	r2,588(sp)
 1003a94:	10001f1e 	bne	r2,zero,1003b14 <__kernel_rem_pio2+0x9c4>
 1003a98:	d8c08d17 	ldw	r3,564(sp)
 1003a9c:	18c5883a 	add	r2,r3,r3
 1003aa0:	1085883a 	add	r2,r2,r2
 1003aa4:	16c5883a 	add	r2,r2,sp
 1003aa8:	10ffff17 	ldw	r3,-4(r2)
 1003aac:	1807d5fa 	srai	r3,r3,23
 1003ab0:	d8c09215 	stw	r3,584(sp)
 1003ab4:	003e8e06 	br	10034f0 <__kernel_rem_pio2+0x3a0>
 1003ab8:	d9008d17 	ldw	r4,564(sp)
 1003abc:	d9409317 	ldw	r5,588(sp)
 1003ac0:	2145c83a 	sub	r2,r4,r5
 1003ac4:	1085883a 	add	r2,r2,r2
 1003ac8:	1085883a 	add	r2,r2,r2
 1003acc:	16c5883a 	add	r2,r2,sp
 1003ad0:	10c00017 	ldw	r3,0(r2)
 1003ad4:	01002034 	movhi	r4,128
 1003ad8:	213fffc4 	addi	r4,r4,-1
 1003adc:	1906703a 	and	r3,r3,r4
 1003ae0:	10c00015 	stw	r3,0(r2)
 1003ae4:	003ea806 	br	1003588 <__kernel_rem_pio2+0x438>
 1003ae8:	d9808d17 	ldw	r6,564(sp)
 1003aec:	01001034 	movhi	r4,64
 1003af0:	213fffc4 	addi	r4,r4,-1
 1003af4:	30bfffc4 	addi	r2,r6,-1
 1003af8:	1085883a 	add	r2,r2,r2
 1003afc:	1085883a 	add	r2,r2,r2
 1003b00:	16c5883a 	add	r2,r2,sp
 1003b04:	10c00017 	ldw	r3,0(r2)
 1003b08:	1906703a 	and	r3,r3,r4
 1003b0c:	10c00015 	stw	r3,0(r2)
 1003b10:	003e9d06 	br	1003588 <__kernel_rem_pio2+0x438>
 1003b14:	0005883a 	mov	r2,zero
 1003b18:	00cff834 	movhi	r3,16352
 1003b1c:	300b883a 	mov	r5,r6
 1003b20:	180f883a 	mov	r7,r3
 1003b24:	8009883a 	mov	r4,r16
 1003b28:	100d883a 	mov	r6,r2
 1003b2c:	10053dc0 	call	10053dc <__gedf2>
 1003b30:	10001d0e 	bge	r2,zero,1003ba8 <__kernel_rem_pio2+0xa58>
 1003b34:	d8009215 	stw	zero,584(sp)
 1003b38:	003e9606 	br	1003594 <__kernel_rem_pio2+0x444>
 1003b3c:	d8c08d17 	ldw	r3,564(sp)
 1003b40:	01000044 	movi	r4,1
 1003b44:	192f883a 	add	r23,r3,r4
 1003b48:	1f000044 	addi	fp,r3,1
 1003b4c:	bf3eb516 	blt	r23,fp,1003624 <__kernel_rem_pio2+0x4d4>
 1003b50:	003eb606 	br	100362c <__kernel_rem_pio2+0x4dc>
 1003b54:	0021883a 	mov	r16,zero
 1003b58:	0023883a 	mov	r17,zero
 1003b5c:	a5000044 	addi	r20,r20,1
 1003b60:	ac400115 	stw	r17,4(r21)
 1003b64:	ac000015 	stw	r16,0(r21)
 1003b68:	ad400204 	addi	r21,r21,8
 1003b6c:	a5fdba1e 	bne	r20,r23,1003258 <__kernel_rem_pio2+0x108>
 1003b70:	003dd806 	br	10032d4 <__kernel_rem_pio2+0x184>
 1003b74:	a80490fa 	slli	r2,r21,3
 1003b78:	0021883a 	mov	r16,zero
 1003b7c:	0023883a 	mov	r17,zero
 1003b80:	16c5883a 	add	r2,r2,sp
 1003b84:	14403d15 	stw	r17,244(r2)
 1003b88:	14003c15 	stw	r16,240(r2)
 1003b8c:	b5bfffc4 	addi	r22,r22,-1
 1003b90:	00bfffc4 	movi	r2,-1
 1003b94:	ad400044 	addi	r21,r21,1
 1003b98:	b0bf4b1e 	bne	r22,r2,10038c8 <__kernel_rem_pio2+0x778>
 1003b9c:	003f6f06 	br	100395c <__kernel_rem_pio2+0x80c>
 1003ba0:	002d883a 	mov	r22,zero
 1003ba4:	003e7106 	br	100356c <__kernel_rem_pio2+0x41c>
 1003ba8:	01000084 	movi	r4,2
 1003bac:	d9009215 	stw	r4,584(sp)
 1003bb0:	003e5106 	br	10034f8 <__kernel_rem_pio2+0x3a8>
 1003bb4:	d900ad17 	ldw	r4,692(sp)
 1003bb8:	008000c4 	movi	r2,3
 1003bbc:	20bfa61e 	bne	r4,r2,1003a58 <__kernel_rem_pio2+0x908>
 1003bc0:	d9c08d17 	ldw	r7,564(sp)
 1003bc4:	01c02c0e 	bge	zero,r7,1003c78 <__kernel_rem_pio2+0xb28>
 1003bc8:	3805883a 	mov	r2,r7
 1003bcc:	00000106 	br	1003bd4 <__kernel_rem_pio2+0xa84>
 1003bd0:	d8808e17 	ldw	r2,568(sp)
 1003bd4:	113fffc4 	addi	r4,r2,-1
 1003bd8:	100690fa 	slli	r3,r2,3
 1003bdc:	200490fa 	slli	r2,r4,3
 1003be0:	d9008e15 	stw	r4,568(sp)
 1003be4:	1ef9883a 	add	fp,r3,sp
 1003be8:	16c5883a 	add	r2,r2,sp
 1003bec:	d8809a15 	stw	r2,616(sp)
 1003bf0:	11403c04 	addi	r5,r2,240
 1003bf4:	e1803c04 	addi	r6,fp,240
 1003bf8:	14003c17 	ldw	r16,240(r2)
 1003bfc:	e5003c17 	ldw	r20,240(fp)
 1003c00:	d9409b15 	stw	r5,620(sp)
 1003c04:	d9809c15 	stw	r6,624(sp)
 1003c08:	35400117 	ldw	r21,4(r6)
 1003c0c:	2c400117 	ldw	r17,4(r5)
 1003c10:	8009883a 	mov	r4,r16
 1003c14:	a00d883a 	mov	r6,r20
 1003c18:	880b883a 	mov	r5,r17
 1003c1c:	a80f883a 	mov	r7,r21
 1003c20:	1004bb40 	call	1004bb4 <__adddf3>
 1003c24:	100d883a 	mov	r6,r2
 1003c28:	880b883a 	mov	r5,r17
 1003c2c:	8009883a 	mov	r4,r16
 1003c30:	180f883a 	mov	r7,r3
 1003c34:	1025883a 	mov	r18,r2
 1003c38:	1827883a 	mov	r19,r3
 1003c3c:	1004b340 	call	1004b34 <__subdf3>
 1003c40:	180f883a 	mov	r7,r3
 1003c44:	a80b883a 	mov	r5,r21
 1003c48:	a009883a 	mov	r4,r20
 1003c4c:	100d883a 	mov	r6,r2
 1003c50:	1004bb40 	call	1004bb4 <__adddf3>
 1003c54:	e0803c15 	stw	r2,240(fp)
 1003c58:	d9c09c17 	ldw	r7,624(sp)
 1003c5c:	38c00115 	stw	r3,4(r7)
 1003c60:	da809a17 	ldw	r10,616(sp)
 1003c64:	54803c15 	stw	r18,240(r10)
 1003c68:	d8809b17 	ldw	r2,620(sp)
 1003c6c:	14c00115 	stw	r19,4(r2)
 1003c70:	d8c08e17 	ldw	r3,568(sp)
 1003c74:	183fd61e 	bne	r3,zero,1003bd0 <__kernel_rem_pio2+0xa80>
 1003c78:	d9008d17 	ldw	r4,564(sp)
 1003c7c:	00800044 	movi	r2,1
 1003c80:	1100cc0e 	bge	r2,r4,1003fb4 <__kernel_rem_pio2+0xe64>
 1003c84:	d8808d17 	ldw	r2,564(sp)
 1003c88:	117fffc4 	addi	r5,r2,-1
 1003c8c:	100690fa 	slli	r3,r2,3
 1003c90:	280490fa 	slli	r2,r5,3
 1003c94:	d9408f15 	stw	r5,572(sp)
 1003c98:	1ef9883a 	add	fp,r3,sp
 1003c9c:	16c5883a 	add	r2,r2,sp
 1003ca0:	d8809d15 	stw	r2,628(sp)
 1003ca4:	11803c04 	addi	r6,r2,240
 1003ca8:	e1c03c04 	addi	r7,fp,240
 1003cac:	14003c17 	ldw	r16,240(r2)
 1003cb0:	e5003c17 	ldw	r20,240(fp)
 1003cb4:	d9809e15 	stw	r6,632(sp)
 1003cb8:	d9c09f15 	stw	r7,636(sp)
 1003cbc:	34400117 	ldw	r17,4(r6)
 1003cc0:	3d400117 	ldw	r21,4(r7)
 1003cc4:	8009883a 	mov	r4,r16
 1003cc8:	880b883a 	mov	r5,r17
 1003ccc:	a00d883a 	mov	r6,r20
 1003cd0:	a80f883a 	mov	r7,r21
 1003cd4:	1004bb40 	call	1004bb4 <__adddf3>
 1003cd8:	100d883a 	mov	r6,r2
 1003cdc:	880b883a 	mov	r5,r17
 1003ce0:	8009883a 	mov	r4,r16
 1003ce4:	180f883a 	mov	r7,r3
 1003ce8:	1025883a 	mov	r18,r2
 1003cec:	1827883a 	mov	r19,r3
 1003cf0:	1004b340 	call	1004b34 <__subdf3>
 1003cf4:	180f883a 	mov	r7,r3
 1003cf8:	a80b883a 	mov	r5,r21
 1003cfc:	a009883a 	mov	r4,r20
 1003d00:	100d883a 	mov	r6,r2
 1003d04:	1004bb40 	call	1004bb4 <__adddf3>
 1003d08:	e0803c15 	stw	r2,240(fp)
 1003d0c:	da809f17 	ldw	r10,636(sp)
 1003d10:	50c00115 	stw	r3,4(r10)
 1003d14:	d8c09d17 	ldw	r3,628(sp)
 1003d18:	d8808f17 	ldw	r2,572(sp)
 1003d1c:	1c803c15 	stw	r18,240(r3)
 1003d20:	d9009e17 	ldw	r4,632(sp)
 1003d24:	00c00044 	movi	r3,1
 1003d28:	24c00115 	stw	r19,4(r4)
 1003d2c:	d9408f17 	ldw	r5,572(sp)
 1003d30:	28ffd51e 	bne	r5,r3,1003c88 <__kernel_rem_pio2+0xb38>
 1003d34:	dc008d17 	ldw	r16,564(sp)
 1003d38:	0011883a 	mov	r8,zero
 1003d3c:	1825883a 	mov	r18,r3
 1003d40:	800490fa 	slli	r2,r16,3
 1003d44:	0013883a 	mov	r9,zero
 1003d48:	16e3883a 	add	r17,r2,sp
 1003d4c:	88803c17 	ldw	r2,240(r17)
 1003d50:	88c03d17 	ldw	r3,244(r17)
 1003d54:	480b883a 	mov	r5,r9
 1003d58:	4009883a 	mov	r4,r8
 1003d5c:	180f883a 	mov	r7,r3
 1003d60:	100d883a 	mov	r6,r2
 1003d64:	1004bb40 	call	1004bb4 <__adddf3>
 1003d68:	843fffc4 	addi	r16,r16,-1
 1003d6c:	8c7ffe04 	addi	r17,r17,-8
 1003d70:	1011883a 	mov	r8,r2
 1003d74:	1813883a 	mov	r9,r3
 1003d78:	84bff41e 	bne	r16,r18,1003d4c <__kernel_rem_pio2+0xbfc>
 1003d7c:	d9809217 	ldw	r6,584(sp)
 1003d80:	30007a1e 	bne	r6,zero,1003f6c <__kernel_rem_pio2+0xe1c>
 1003d84:	d9c09717 	ldw	r7,604(sp)
 1003d88:	d8803c17 	ldw	r2,240(sp)
 1003d8c:	d9003e17 	ldw	r4,248(sp)
 1003d90:	3a400515 	stw	r9,20(r7)
 1003d94:	d8c03d17 	ldw	r3,244(sp)
 1003d98:	d9403f17 	ldw	r5,252(sp)
 1003d9c:	3a000415 	stw	r8,16(r7)
 1003da0:	38c00115 	stw	r3,4(r7)
 1003da4:	39400315 	stw	r5,12(r7)
 1003da8:	38800015 	stw	r2,0(r7)
 1003dac:	39000215 	stw	r4,8(r7)
 1003db0:	003f2906 	br	1003a58 <__kernel_rem_pio2+0x908>
 1003db4:	183f281e 	bne	r3,zero,1003a58 <__kernel_rem_pio2+0x908>
 1003db8:	d9408d17 	ldw	r5,564(sp)
 1003dbc:	28008016 	blt	r5,zero,1003fc0 <__kernel_rem_pio2+0xe70>
 1003dc0:	dc008d17 	ldw	r16,564(sp)
 1003dc4:	000d883a 	mov	r6,zero
 1003dc8:	000f883a 	mov	r7,zero
 1003dcc:	800490fa 	slli	r2,r16,3
 1003dd0:	04bfffc4 	movi	r18,-1
 1003dd4:	16e3883a 	add	r17,r2,sp
 1003dd8:	88803c17 	ldw	r2,240(r17)
 1003ddc:	88c03d17 	ldw	r3,244(r17)
 1003de0:	380b883a 	mov	r5,r7
 1003de4:	3009883a 	mov	r4,r6
 1003de8:	180f883a 	mov	r7,r3
 1003dec:	100d883a 	mov	r6,r2
 1003df0:	1004bb40 	call	1004bb4 <__adddf3>
 1003df4:	843fffc4 	addi	r16,r16,-1
 1003df8:	8c7ffe04 	addi	r17,r17,-8
 1003dfc:	100d883a 	mov	r6,r2
 1003e00:	180f883a 	mov	r7,r3
 1003e04:	84bff41e 	bne	r16,r18,1003dd8 <__kernel_rem_pio2+0xc88>
 1003e08:	da809217 	ldw	r10,584(sp)
 1003e0c:	50000226 	beq	r10,zero,1003e18 <__kernel_rem_pio2+0xcc8>
 1003e10:	38e0003c 	xorhi	r3,r7,32768
 1003e14:	180f883a 	mov	r7,r3
 1003e18:	d8809717 	ldw	r2,604(sp)
 1003e1c:	11c00115 	stw	r7,4(r2)
 1003e20:	11800015 	stw	r6,0(r2)
 1003e24:	003f0c06 	br	1003a58 <__kernel_rem_pio2+0x908>
 1003e28:	d8008c15 	stw	zero,560(sp)
 1003e2c:	003ce606 	br	10031c8 <__kernel_rem_pio2+0x78>
 1003e30:	d9c09317 	ldw	r7,588(sp)
 1003e34:	880b883a 	mov	r5,r17
 1003e38:	8009883a 	mov	r4,r16
 1003e3c:	01cdc83a 	sub	r6,zero,r7
 1003e40:	10045200 	call	1004520 <scalbn>
 1003e44:	0011883a 	mov	r8,zero
 1003e48:	02505c34 	movhi	r9,16752
 1003e4c:	480f883a 	mov	r7,r9
 1003e50:	1009883a 	mov	r4,r2
 1003e54:	180b883a 	mov	r5,r3
 1003e58:	400d883a 	mov	r6,r8
 1003e5c:	102d883a 	mov	r22,r2
 1003e60:	182f883a 	mov	r23,r3
 1003e64:	10053dc0 	call	10053dc <__gedf2>
 1003e68:	10003716 	blt	r2,zero,1003f48 <__kernel_rem_pio2+0xdf8>
 1003e6c:	0005883a 	mov	r2,zero
 1003e70:	00cf9c34 	movhi	r3,15984
 1003e74:	180f883a 	mov	r7,r3
 1003e78:	100d883a 	mov	r6,r2
 1003e7c:	b009883a 	mov	r4,r22
 1003e80:	b80b883a 	mov	r5,r23
 1003e84:	1004c280 	call	1004c28 <__muldf3>
 1003e88:	180b883a 	mov	r5,r3
 1003e8c:	1009883a 	mov	r4,r2
 1003e90:	100555c0 	call	100555c <__fixdfsi>
 1003e94:	1009883a 	mov	r4,r2
 1003e98:	10054640 	call	1005464 <__floatsidf>
 1003e9c:	da808d17 	ldw	r10,564(sp)
 1003ea0:	1023883a 	mov	r17,r2
 1003ea4:	1825883a 	mov	r18,r3
 1003ea8:	0005883a 	mov	r2,zero
 1003eac:	00f05c34 	movhi	r3,49520
 1003eb0:	180f883a 	mov	r7,r3
 1003eb4:	8809883a 	mov	r4,r17
 1003eb8:	900b883a 	mov	r5,r18
 1003ebc:	100d883a 	mov	r6,r2
 1003ec0:	52ab883a 	add	r21,r10,r10
 1003ec4:	1004c280 	call	1004c28 <__muldf3>
 1003ec8:	180f883a 	mov	r7,r3
 1003ecc:	b80b883a 	mov	r5,r23
 1003ed0:	100d883a 	mov	r6,r2
 1003ed4:	b009883a 	mov	r4,r22
 1003ed8:	1004bb40 	call	1004bb4 <__adddf3>
 1003edc:	100d883a 	mov	r6,r2
 1003ee0:	d8808d17 	ldw	r2,564(sp)
 1003ee4:	180b883a 	mov	r5,r3
 1003ee8:	3009883a 	mov	r4,r6
 1003eec:	10800044 	addi	r2,r2,1
 1003ef0:	ad6b883a 	add	r21,r21,r21
 1003ef4:	d8808d15 	stw	r2,564(sp)
 1003ef8:	100555c0 	call	100555c <__fixdfsi>
 1003efc:	d8c08d17 	ldw	r3,564(sp)
 1003f00:	aeeb883a 	add	r21,r21,sp
 1003f04:	8809883a 	mov	r4,r17
 1003f08:	900b883a 	mov	r5,r18
 1003f0c:	a8800015 	stw	r2,0(r21)
 1003f10:	18e1883a 	add	r16,r3,r3
 1003f14:	100555c0 	call	100555c <__fixdfsi>
 1003f18:	d9009317 	ldw	r4,588(sp)
 1003f1c:	8421883a 	add	r16,r16,r16
 1003f20:	86e1883a 	add	r16,r16,sp
 1003f24:	21000604 	addi	r4,r4,24
 1003f28:	d9009315 	stw	r4,588(sp)
 1003f2c:	80800015 	stw	r2,0(r16)
 1003f30:	003e3a06 	br	100381c <__kernel_rem_pio2+0x6cc>
 1003f34:	4009883a 	mov	r4,r8
 1003f38:	4960003c 	xorhi	r5,r9,32768
 1003f3c:	003ea406 	br	10039d0 <__kernel_rem_pio2+0x880>
 1003f40:	d9808d15 	stw	r6,564(sp)
 1003f44:	003e3506 	br	100381c <__kernel_rem_pio2+0x6cc>
 1003f48:	d9408d17 	ldw	r5,564(sp)
 1003f4c:	b009883a 	mov	r4,r22
 1003f50:	2961883a 	add	r16,r5,r5
 1003f54:	8421883a 	add	r16,r16,r16
 1003f58:	b80b883a 	mov	r5,r23
 1003f5c:	86e1883a 	add	r16,r16,sp
 1003f60:	100555c0 	call	100555c <__fixdfsi>
 1003f64:	80800015 	stw	r2,0(r16)
 1003f68:	003e2c06 	br	100381c <__kernel_rem_pio2+0x6cc>
 1003f6c:	d8c03d17 	ldw	r3,244(sp)
 1003f70:	d9403f17 	ldw	r5,252(sp)
 1003f74:	da809717 	ldw	r10,604(sp)
 1003f78:	d8803c17 	ldw	r2,240(sp)
 1003f7c:	d9003e17 	ldw	r4,248(sp)
 1003f80:	49e0003c 	xorhi	r7,r9,32768
 1003f84:	51c00515 	stw	r7,20(r10)
 1003f88:	19a0003c 	xorhi	r6,r3,32768
 1003f8c:	29e0003c 	xorhi	r7,r5,32768
 1003f90:	51800115 	stw	r6,4(r10)
 1003f94:	51c00315 	stw	r7,12(r10)
 1003f98:	50800015 	stw	r2,0(r10)
 1003f9c:	51000215 	stw	r4,8(r10)
 1003fa0:	52000415 	stw	r8,16(r10)
 1003fa4:	003eac06 	br	1003a58 <__kernel_rem_pio2+0x908>
 1003fa8:	0011883a 	mov	r8,zero
 1003fac:	0013883a 	mov	r9,zero
 1003fb0:	003e8306 	br	10039c0 <__kernel_rem_pio2+0x870>
 1003fb4:	0011883a 	mov	r8,zero
 1003fb8:	0013883a 	mov	r9,zero
 1003fbc:	003f6f06 	br	1003d7c <__kernel_rem_pio2+0xc2c>
 1003fc0:	000d883a 	mov	r6,zero
 1003fc4:	000f883a 	mov	r7,zero
 1003fc8:	003f8f06 	br	1003e08 <__kernel_rem_pio2+0xcb8>

01003fcc <__kernel_sin>:
 1003fcc:	00a00034 	movhi	r2,32768
 1003fd0:	10bfffc4 	addi	r2,r2,-1
 1003fd4:	deffef04 	addi	sp,sp,-68
 1003fd8:	1144703a 	and	r2,r2,r5
 1003fdc:	00cf9034 	movhi	r3,15936
 1003fe0:	18ffffc4 	addi	r3,r3,-1
 1003fe4:	dd400d15 	stw	r21,52(sp)
 1003fe8:	dd000c15 	stw	r20,48(sp)
 1003fec:	dfc01015 	stw	ra,64(sp)
 1003ff0:	ddc00f15 	stw	r23,60(sp)
 1003ff4:	dd800e15 	stw	r22,56(sp)
 1003ff8:	dcc00b15 	stw	r19,44(sp)
 1003ffc:	dc800a15 	stw	r18,40(sp)
 1004000:	dc400915 	stw	r17,36(sp)
 1004004:	dc000815 	stw	r16,32(sp)
 1004008:	2029883a 	mov	r20,r4
 100400c:	282b883a 	mov	r21,r5
 1004010:	d9800415 	stw	r6,16(sp)
 1004014:	d9c00515 	stw	r7,20(sp)
 1004018:	18800216 	blt	r3,r2,1004024 <__kernel_sin+0x58>
 100401c:	100555c0 	call	100555c <__fixdfsi>
 1004020:	10008826 	beq	r2,zero,1004244 <__kernel_sin+0x278>
 1004024:	a009883a 	mov	r4,r20
 1004028:	a80b883a 	mov	r5,r21
 100402c:	a00d883a 	mov	r6,r20
 1004030:	a80f883a 	mov	r7,r21
 1004034:	1004c280 	call	1004c28 <__muldf3>
 1004038:	102d883a 	mov	r22,r2
 100403c:	a009883a 	mov	r4,r20
 1004040:	a80b883a 	mov	r5,r21
 1004044:	b00d883a 	mov	r6,r22
 1004048:	180f883a 	mov	r7,r3
 100404c:	182f883a 	mov	r23,r3
 1004050:	d8800215 	stw	r2,8(sp)
 1004054:	d8c00315 	stw	r3,12(sp)
 1004058:	1004c280 	call	1004c28 <__muldf3>
 100405c:	d9000217 	ldw	r4,8(sp)
 1004060:	0216b434 	movhi	r8,23248
 1004064:	42355f04 	addi	r8,r8,-10884
 1004068:	024f79b4 	movhi	r9,15846
 100406c:	4a764e84 	addi	r9,r9,-9926
 1004070:	480f883a 	mov	r7,r9
 1004074:	400d883a 	mov	r6,r8
 1004078:	b80b883a 	mov	r5,r23
 100407c:	d8800615 	stw	r2,24(sp)
 1004080:	d8c00715 	stw	r3,28(sp)
 1004084:	1004c280 	call	1004c28 <__muldf3>
 1004088:	02228b34 	movhi	r8,35372
 100408c:	42273ac4 	addi	r8,r8,-25365
 1004090:	024f96f4 	movhi	r9,15963
 1004094:	4a797984 	addi	r9,r9,-6682
 1004098:	480f883a 	mov	r7,r9
 100409c:	400d883a 	mov	r6,r8
 10040a0:	180b883a 	mov	r5,r3
 10040a4:	1009883a 	mov	r4,r2
 10040a8:	1004b340 	call	1004b34 <__subdf3>
 10040ac:	d9000217 	ldw	r4,8(sp)
 10040b0:	180f883a 	mov	r7,r3
 10040b4:	b80b883a 	mov	r5,r23
 10040b8:	100d883a 	mov	r6,r2
 10040bc:	1004c280 	call	1004c28 <__muldf3>
 10040c0:	0215ecb4 	movhi	r8,22450
 10040c4:	423f9f44 	addi	r8,r8,-387
 10040c8:	024fb1f4 	movhi	r9,16071
 10040cc:	4a4778c4 	addi	r9,r9,7651
 10040d0:	480f883a 	mov	r7,r9
 10040d4:	400d883a 	mov	r6,r8
 10040d8:	180b883a 	mov	r5,r3
 10040dc:	1009883a 	mov	r4,r2
 10040e0:	1004bb40 	call	1004bb4 <__adddf3>
 10040e4:	d9000217 	ldw	r4,8(sp)
 10040e8:	180f883a 	mov	r7,r3
 10040ec:	b80b883a 	mov	r5,r23
 10040f0:	100d883a 	mov	r6,r2
 10040f4:	1004c280 	call	1004c28 <__muldf3>
 10040f8:	02067074 	movhi	r8,6593
 10040fc:	42187544 	addi	r8,r8,25045
 1004100:	024fcab4 	movhi	r9,16170
 1004104:	4a406804 	addi	r9,r9,416
 1004108:	480f883a 	mov	r7,r9
 100410c:	400d883a 	mov	r6,r8
 1004110:	180b883a 	mov	r5,r3
 1004114:	1009883a 	mov	r4,r2
 1004118:	1004b340 	call	1004b34 <__subdf3>
 100411c:	d9000217 	ldw	r4,8(sp)
 1004120:	180f883a 	mov	r7,r3
 1004124:	b80b883a 	mov	r5,r23
 1004128:	100d883a 	mov	r6,r2
 100412c:	1004c280 	call	1004c28 <__muldf3>
 1004130:	02044474 	movhi	r8,4369
 1004134:	423e2984 	addi	r8,r8,-1882
 1004138:	024fe074 	movhi	r9,16257
 100413c:	4a444444 	addi	r9,r9,4369
 1004140:	180b883a 	mov	r5,r3
 1004144:	480f883a 	mov	r7,r9
 1004148:	1009883a 	mov	r4,r2
 100414c:	400d883a 	mov	r6,r8
 1004150:	1004bb40 	call	1004bb4 <__adddf3>
 1004154:	1021883a 	mov	r16,r2
 1004158:	d8800617 	ldw	r2,24(sp)
 100415c:	1823883a 	mov	r17,r3
 1004160:	d8800015 	stw	r2,0(sp)
 1004164:	d8800717 	ldw	r2,28(sp)
 1004168:	d8800115 	stw	r2,4(sp)
 100416c:	d8801117 	ldw	r2,68(sp)
 1004170:	10004126 	beq	r2,zero,1004278 <__kernel_sin+0x2ac>
 1004174:	d9000417 	ldw	r4,16(sp)
 1004178:	d9400517 	ldw	r5,20(sp)
 100417c:	0005883a 	mov	r2,zero
 1004180:	00cff834 	movhi	r3,16352
 1004184:	180f883a 	mov	r7,r3
 1004188:	100d883a 	mov	r6,r2
 100418c:	1004c280 	call	1004c28 <__muldf3>
 1004190:	d9000017 	ldw	r4,0(sp)
 1004194:	d9400717 	ldw	r5,28(sp)
 1004198:	800d883a 	mov	r6,r16
 100419c:	880f883a 	mov	r7,r17
 10041a0:	1021883a 	mov	r16,r2
 10041a4:	1823883a 	mov	r17,r3
 10041a8:	1004c280 	call	1004c28 <__muldf3>
 10041ac:	180f883a 	mov	r7,r3
 10041b0:	880b883a 	mov	r5,r17
 10041b4:	8009883a 	mov	r4,r16
 10041b8:	100d883a 	mov	r6,r2
 10041bc:	1004b340 	call	1004b34 <__subdf3>
 10041c0:	d9000217 	ldw	r4,8(sp)
 10041c4:	b80b883a 	mov	r5,r23
 10041c8:	180f883a 	mov	r7,r3
 10041cc:	100d883a 	mov	r6,r2
 10041d0:	1004c280 	call	1004c28 <__muldf3>
 10041d4:	d9c00517 	ldw	r7,20(sp)
 10041d8:	d9800417 	ldw	r6,16(sp)
 10041dc:	180b883a 	mov	r5,r3
 10041e0:	1009883a 	mov	r4,r2
 10041e4:	1004b340 	call	1004b34 <__subdf3>
 10041e8:	d9000017 	ldw	r4,0(sp)
 10041ec:	d9400717 	ldw	r5,28(sp)
 10041f0:	02155574 	movhi	r8,21845
 10041f4:	42155244 	addi	r8,r8,21833
 10041f8:	024ff174 	movhi	r9,16325
 10041fc:	4a555544 	addi	r9,r9,21845
 1004200:	480f883a 	mov	r7,r9
 1004204:	400d883a 	mov	r6,r8
 1004208:	1021883a 	mov	r16,r2
 100420c:	1823883a 	mov	r17,r3
 1004210:	1004c280 	call	1004c28 <__muldf3>
 1004214:	180f883a 	mov	r7,r3
 1004218:	880b883a 	mov	r5,r17
 100421c:	8009883a 	mov	r4,r16
 1004220:	100d883a 	mov	r6,r2
 1004224:	1004bb40 	call	1004bb4 <__adddf3>
 1004228:	180f883a 	mov	r7,r3
 100422c:	a80b883a 	mov	r5,r21
 1004230:	a009883a 	mov	r4,r20
 1004234:	100d883a 	mov	r6,r2
 1004238:	1004b340 	call	1004b34 <__subdf3>
 100423c:	1029883a 	mov	r20,r2
 1004240:	182b883a 	mov	r21,r3
 1004244:	a005883a 	mov	r2,r20
 1004248:	a807883a 	mov	r3,r21
 100424c:	dfc01017 	ldw	ra,64(sp)
 1004250:	ddc00f17 	ldw	r23,60(sp)
 1004254:	dd800e17 	ldw	r22,56(sp)
 1004258:	dd400d17 	ldw	r21,52(sp)
 100425c:	dd000c17 	ldw	r20,48(sp)
 1004260:	dcc00b17 	ldw	r19,44(sp)
 1004264:	dc800a17 	ldw	r18,40(sp)
 1004268:	dc400917 	ldw	r17,36(sp)
 100426c:	dc000817 	ldw	r16,32(sp)
 1004270:	dec01104 	addi	sp,sp,68
 1004274:	f800283a 	ret
 1004278:	d9000217 	ldw	r4,8(sp)
 100427c:	b80b883a 	mov	r5,r23
 1004280:	800d883a 	mov	r6,r16
 1004284:	180f883a 	mov	r7,r3
 1004288:	1004c280 	call	1004c28 <__muldf3>
 100428c:	02155574 	movhi	r8,21845
 1004290:	42155244 	addi	r8,r8,21833
 1004294:	024ff174 	movhi	r9,16325
 1004298:	4a555544 	addi	r9,r9,21845
 100429c:	480f883a 	mov	r7,r9
 10042a0:	400d883a 	mov	r6,r8
 10042a4:	180b883a 	mov	r5,r3
 10042a8:	1009883a 	mov	r4,r2
 10042ac:	1004b340 	call	1004b34 <__subdf3>
 10042b0:	d9000017 	ldw	r4,0(sp)
 10042b4:	d9400717 	ldw	r5,28(sp)
 10042b8:	180f883a 	mov	r7,r3
 10042bc:	100d883a 	mov	r6,r2
 10042c0:	1004c280 	call	1004c28 <__muldf3>
 10042c4:	180f883a 	mov	r7,r3
 10042c8:	a80b883a 	mov	r5,r21
 10042cc:	a009883a 	mov	r4,r20
 10042d0:	100d883a 	mov	r6,r2
 10042d4:	1004bb40 	call	1004bb4 <__adddf3>
 10042d8:	1029883a 	mov	r20,r2
 10042dc:	182b883a 	mov	r21,r3
 10042e0:	003fd806 	br	1004244 <__kernel_sin+0x278>

010042e4 <fabs>:
 10042e4:	01e00034 	movhi	r7,32768
 10042e8:	39ffffc4 	addi	r7,r7,-1
 10042ec:	394e703a 	and	r7,r7,r5
 10042f0:	2005883a 	mov	r2,r4
 10042f4:	3807883a 	mov	r3,r7
 10042f8:	f800283a 	ret

010042fc <floor>:
 10042fc:	2805d53a 	srai	r2,r5,20
 1004300:	defff604 	addi	sp,sp,-40
 1004304:	dd800615 	stw	r22,24(sp)
 1004308:	10c1ffcc 	andi	r3,r2,2047
 100430c:	1dbf0044 	addi	r22,r3,-1023
 1004310:	008004c4 	movi	r2,19
 1004314:	ddc00715 	stw	r23,28(sp)
 1004318:	dc800215 	stw	r18,8(sp)
 100431c:	dc400115 	stw	r17,4(sp)
 1004320:	dc000015 	stw	r16,0(sp)
 1004324:	dfc00915 	stw	ra,36(sp)
 1004328:	df000815 	stw	fp,32(sp)
 100432c:	dd400515 	stw	r21,20(sp)
 1004330:	dd000415 	stw	r20,16(sp)
 1004334:	dcc00315 	stw	r19,12(sp)
 1004338:	2021883a 	mov	r16,r4
 100433c:	2823883a 	mov	r17,r5
 1004340:	282f883a 	mov	r23,r5
 1004344:	2025883a 	mov	r18,r4
 1004348:	15802916 	blt	r2,r22,10043f0 <floor+0xf4>
 100434c:	b0004816 	blt	r22,zero,1004470 <floor+0x174>
 1004350:	00800434 	movhi	r2,16
 1004354:	10bfffc4 	addi	r2,r2,-1
 1004358:	15b9d83a 	sra	fp,r2,r22
 100435c:	282f883a 	mov	r23,r5
 1004360:	e144703a 	and	r2,fp,r5
 1004364:	1104b03a 	or	r2,r2,r4
 1004368:	10001326 	beq	r2,zero,10043b8 <floor+0xbc>
 100436c:	00a20034 	movhi	r2,34816
 1004370:	109d6704 	addi	r2,r2,30108
 1004374:	00df8e34 	movhi	r3,32312
 1004378:	18f90f04 	addi	r3,r3,-7108
 100437c:	180f883a 	mov	r7,r3
 1004380:	100d883a 	mov	r6,r2
 1004384:	1004bb40 	call	1004bb4 <__adddf3>
 1004388:	180b883a 	mov	r5,r3
 100438c:	000d883a 	mov	r6,zero
 1004390:	000f883a 	mov	r7,zero
 1004394:	1009883a 	mov	r4,r2
 1004398:	10053540 	call	1005354 <__gtdf2>
 100439c:	0080040e 	bge	zero,r2,10043b0 <floor+0xb4>
 10043a0:	88004416 	blt	r17,zero,10044b4 <floor+0x1b8>
 10043a4:	0704303a 	nor	r2,zero,fp
 10043a8:	b8ae703a 	and	r23,r23,r2
 10043ac:	0025883a 	mov	r18,zero
 10043b0:	9021883a 	mov	r16,r18
 10043b4:	b823883a 	mov	r17,r23
 10043b8:	8005883a 	mov	r2,r16
 10043bc:	8807883a 	mov	r3,r17
 10043c0:	dfc00917 	ldw	ra,36(sp)
 10043c4:	df000817 	ldw	fp,32(sp)
 10043c8:	ddc00717 	ldw	r23,28(sp)
 10043cc:	dd800617 	ldw	r22,24(sp)
 10043d0:	dd400517 	ldw	r21,20(sp)
 10043d4:	dd000417 	ldw	r20,16(sp)
 10043d8:	dcc00317 	ldw	r19,12(sp)
 10043dc:	dc800217 	ldw	r18,8(sp)
 10043e0:	dc400117 	ldw	r17,4(sp)
 10043e4:	dc000017 	ldw	r16,0(sp)
 10043e8:	dec00a04 	addi	sp,sp,40
 10043ec:	f800283a 	ret
 10043f0:	00800cc4 	movi	r2,51
 10043f4:	15801616 	blt	r2,r22,1004450 <floor+0x154>
 10043f8:	18befb44 	addi	r2,r3,-1043
 10043fc:	00ffffc4 	movi	r3,-1
 1004400:	18b8d83a 	srl	fp,r3,r2
 1004404:	e104703a 	and	r2,fp,r4
 1004408:	103feb26 	beq	r2,zero,10043b8 <floor+0xbc>
 100440c:	00a20034 	movhi	r2,34816
 1004410:	109d6704 	addi	r2,r2,30108
 1004414:	00df8e34 	movhi	r3,32312
 1004418:	18f90f04 	addi	r3,r3,-7108
 100441c:	180f883a 	mov	r7,r3
 1004420:	100d883a 	mov	r6,r2
 1004424:	1004bb40 	call	1004bb4 <__adddf3>
 1004428:	180b883a 	mov	r5,r3
 100442c:	000d883a 	mov	r6,zero
 1004430:	000f883a 	mov	r7,zero
 1004434:	1009883a 	mov	r4,r2
 1004438:	10053540 	call	1005354 <__gtdf2>
 100443c:	0080210e 	bge	zero,r2,10044c4 <floor+0x1c8>
 1004440:	88002216 	blt	r17,zero,10044cc <floor+0x1d0>
 1004444:	0704303a 	nor	r2,zero,fp
 1004448:	90a4703a 	and	r18,r18,r2
 100444c:	003fd806 	br	10043b0 <floor+0xb4>
 1004450:	00810004 	movi	r2,1024
 1004454:	b0bfd81e 	bne	r22,r2,10043b8 <floor+0xbc>
 1004458:	800d883a 	mov	r6,r16
 100445c:	280f883a 	mov	r7,r5
 1004460:	1004bb40 	call	1004bb4 <__adddf3>
 1004464:	1021883a 	mov	r16,r2
 1004468:	1823883a 	mov	r17,r3
 100446c:	003fd206 	br	10043b8 <floor+0xbc>
 1004470:	00a20034 	movhi	r2,34816
 1004474:	109d6704 	addi	r2,r2,30108
 1004478:	00df8e34 	movhi	r3,32312
 100447c:	18f90f04 	addi	r3,r3,-7108
 1004480:	180f883a 	mov	r7,r3
 1004484:	100d883a 	mov	r6,r2
 1004488:	1004bb40 	call	1004bb4 <__adddf3>
 100448c:	180b883a 	mov	r5,r3
 1004490:	000d883a 	mov	r6,zero
 1004494:	000f883a 	mov	r7,zero
 1004498:	1009883a 	mov	r4,r2
 100449c:	10053540 	call	1005354 <__gtdf2>
 10044a0:	00bfc30e 	bge	zero,r2,10043b0 <floor+0xb4>
 10044a4:	88001416 	blt	r17,zero,10044f8 <floor+0x1fc>
 10044a8:	002f883a 	mov	r23,zero
 10044ac:	0025883a 	mov	r18,zero
 10044b0:	003fbf06 	br	10043b0 <floor+0xb4>
 10044b4:	00800434 	movhi	r2,16
 10044b8:	1585d83a 	sra	r2,r2,r22
 10044bc:	88af883a 	add	r23,r17,r2
 10044c0:	003fb806 	br	10043a4 <floor+0xa8>
 10044c4:	882f883a 	mov	r23,r17
 10044c8:	003fb906 	br	10043b0 <floor+0xb4>
 10044cc:	00800504 	movi	r2,20
 10044d0:	b0801126 	beq	r22,r2,1004518 <floor+0x21c>
 10044d4:	00c00d04 	movi	r3,52
 10044d8:	1d87c83a 	sub	r3,r3,r22
 10044dc:	00800044 	movi	r2,1
 10044e0:	10c4983a 	sll	r2,r2,r3
 10044e4:	8085883a 	add	r2,r16,r2
 10044e8:	1400012e 	bgeu	r2,r16,10044f0 <floor+0x1f4>
 10044ec:	8dc00044 	addi	r23,r17,1
 10044f0:	1025883a 	mov	r18,r2
 10044f4:	003fd306 	br	1004444 <floor+0x148>
 10044f8:	00a00034 	movhi	r2,32768
 10044fc:	10bfffc4 	addi	r2,r2,-1
 1004500:	8884703a 	and	r2,r17,r2
 1004504:	8084b03a 	or	r2,r16,r2
 1004508:	103fee26 	beq	r2,zero,10044c4 <floor+0x1c8>
 100450c:	05effc34 	movhi	r23,49136
 1004510:	0025883a 	mov	r18,zero
 1004514:	003fa606 	br	10043b0 <floor+0xb4>
 1004518:	8dc00044 	addi	r23,r17,1
 100451c:	003fc906 	br	1004444 <floor+0x148>

01004520 <scalbn>:
 1004520:	2011883a 	mov	r8,r4
 1004524:	291ffc2c 	andhi	r4,r5,32752
 1004528:	2009d53a 	srai	r4,r4,20
 100452c:	defffd04 	addi	sp,sp,-12
 1004530:	dc000015 	stw	r16,0(sp)
 1004534:	dfc00215 	stw	ra,8(sp)
 1004538:	dc400115 	stw	r17,4(sp)
 100453c:	2813883a 	mov	r9,r5
 1004540:	2815883a 	mov	r10,r5
 1004544:	3021883a 	mov	r16,r6
 1004548:	2000281e 	bne	r4,zero,10045ec <scalbn+0xcc>
 100454c:	00a00034 	movhi	r2,32768
 1004550:	10bfffc4 	addi	r2,r2,-1
 1004554:	2884703a 	and	r2,r5,r2
 1004558:	4084b03a 	or	r2,r8,r2
 100455c:	10001826 	beq	r2,zero,10045c0 <scalbn+0xa0>
 1004560:	0005883a 	mov	r2,zero
 1004564:	00d0d434 	movhi	r3,17232
 1004568:	4009883a 	mov	r4,r8
 100456c:	100d883a 	mov	r6,r2
 1004570:	180f883a 	mov	r7,r3
 1004574:	1004c280 	call	1004c28 <__muldf3>
 1004578:	100b883a 	mov	r5,r2
 100457c:	1011883a 	mov	r8,r2
 1004580:	00bffff4 	movhi	r2,65535
 1004584:	108f2c04 	addi	r2,r2,15536
 1004588:	180d883a 	mov	r6,r3
 100458c:	1813883a 	mov	r9,r3
 1004590:	8080120e 	bge	r16,r2,10045dc <scalbn+0xbc>
 1004594:	00b0be74 	movhi	r2,49913
 1004598:	10bcd644 	addi	r2,r2,-3239
 100459c:	00c06974 	movhi	r3,421
 10045a0:	18db87c4 	addi	r3,r3,28191
 10045a4:	2809883a 	mov	r4,r5
 10045a8:	180f883a 	mov	r7,r3
 10045ac:	300b883a 	mov	r5,r6
 10045b0:	100d883a 	mov	r6,r2
 10045b4:	1004c280 	call	1004c28 <__muldf3>
 10045b8:	1011883a 	mov	r8,r2
 10045bc:	1813883a 	mov	r9,r3
 10045c0:	4005883a 	mov	r2,r8
 10045c4:	4807883a 	mov	r3,r9
 10045c8:	dfc00217 	ldw	ra,8(sp)
 10045cc:	dc400117 	ldw	r17,4(sp)
 10045d0:	dc000017 	ldw	r16,0(sp)
 10045d4:	dec00304 	addi	sp,sp,12
 10045d8:	f800283a 	ret
 10045dc:	189ffc2c 	andhi	r2,r3,32752
 10045e0:	1005d53a 	srai	r2,r2,20
 10045e4:	1815883a 	mov	r10,r3
 10045e8:	113ff284 	addi	r4,r2,-54
 10045ec:	0081ffc4 	movi	r2,2047
 10045f0:	20801126 	beq	r4,r2,1004638 <scalbn+0x118>
 10045f4:	2409883a 	add	r4,r4,r16
 10045f8:	0081ff84 	movi	r2,2046
 10045fc:	11001c16 	blt	r2,r4,1004670 <scalbn+0x150>
 1004600:	0100290e 	bge	zero,r4,10046a8 <scalbn+0x188>
 1004604:	200a953a 	slli	r5,r4,20
 1004608:	01200434 	movhi	r4,32784
 100460c:	213fffc4 	addi	r4,r4,-1
 1004610:	5108703a 	and	r4,r10,r4
 1004614:	2148b03a 	or	r4,r4,r5
 1004618:	2013883a 	mov	r9,r4
 100461c:	4005883a 	mov	r2,r8
 1004620:	4807883a 	mov	r3,r9
 1004624:	dfc00217 	ldw	ra,8(sp)
 1004628:	dc400117 	ldw	r17,4(sp)
 100462c:	dc000017 	ldw	r16,0(sp)
 1004630:	dec00304 	addi	sp,sp,12
 1004634:	f800283a 	ret
 1004638:	480f883a 	mov	r7,r9
 100463c:	4009883a 	mov	r4,r8
 1004640:	480b883a 	mov	r5,r9
 1004644:	400d883a 	mov	r6,r8
 1004648:	1004bb40 	call	1004bb4 <__adddf3>
 100464c:	1011883a 	mov	r8,r2
 1004650:	1813883a 	mov	r9,r3
 1004654:	4005883a 	mov	r2,r8
 1004658:	4807883a 	mov	r3,r9
 100465c:	dfc00217 	ldw	ra,8(sp)
 1004660:	dc400117 	ldw	r17,4(sp)
 1004664:	dc000017 	ldw	r16,0(sp)
 1004668:	dec00304 	addi	sp,sp,12
 100466c:	f800283a 	ret
 1004670:	04220034 	movhi	r16,34816
 1004674:	841d6704 	addi	r16,r16,30108
 1004678:	045f8e34 	movhi	r17,32312
 100467c:	8c790f04 	addi	r17,r17,-7108
 1004680:	480f883a 	mov	r7,r9
 1004684:	400d883a 	mov	r6,r8
 1004688:	8009883a 	mov	r4,r16
 100468c:	880b883a 	mov	r5,r17
 1004690:	10047000 	call	1004700 <copysign>
 1004694:	180b883a 	mov	r5,r3
 1004698:	800d883a 	mov	r6,r16
 100469c:	880f883a 	mov	r7,r17
 10046a0:	1009883a 	mov	r4,r2
 10046a4:	003fc306 	br	10045b4 <scalbn+0x94>
 10046a8:	00bff284 	movi	r2,-54
 10046ac:	11000716 	blt	r2,r4,10046cc <scalbn+0x1ac>
 10046b0:	00b0d414 	movui	r2,50000
 10046b4:	143fee16 	blt	r2,r16,1004670 <scalbn+0x150>
 10046b8:	0430be74 	movhi	r16,49913
 10046bc:	843cd644 	addi	r16,r16,-3239
 10046c0:	04406974 	movhi	r17,421
 10046c4:	8c5b87c4 	addi	r17,r17,28191
 10046c8:	003fed06 	br	1004680 <scalbn+0x160>
 10046cc:	21000d84 	addi	r4,r4,54
 10046d0:	2008953a 	slli	r4,r4,20
 10046d4:	01e00434 	movhi	r7,32784
 10046d8:	39ffffc4 	addi	r7,r7,-1
 10046dc:	51ce703a 	and	r7,r10,r7
 10046e0:	390eb03a 	or	r7,r7,r4
 10046e4:	024f2434 	movhi	r9,15504
 10046e8:	4009883a 	mov	r4,r8
 10046ec:	0011883a 	mov	r8,zero
 10046f0:	380b883a 	mov	r5,r7
 10046f4:	400d883a 	mov	r6,r8
 10046f8:	480f883a 	mov	r7,r9
 10046fc:	003fad06 	br	10045b4 <scalbn+0x94>

01004700 <copysign>:
 1004700:	3813883a 	mov	r9,r7
 1004704:	01e00034 	movhi	r7,32768
 1004708:	39ffffc4 	addi	r7,r7,-1
 100470c:	394e703a 	and	r7,r7,r5
 1004710:	4aa0002c 	andhi	r10,r9,32768
 1004714:	3a8eb03a 	or	r7,r7,r10
 1004718:	2005883a 	mov	r2,r4
 100471c:	3807883a 	mov	r3,r7
 1004720:	f800283a 	ret

01004724 <_fpadd_parts>:
 1004724:	defff804 	addi	sp,sp,-32
 1004728:	dcc00315 	stw	r19,12(sp)
 100472c:	2027883a 	mov	r19,r4
 1004730:	21000017 	ldw	r4,0(r4)
 1004734:	00c00044 	movi	r3,1
 1004738:	dd400515 	stw	r21,20(sp)
 100473c:	dd000415 	stw	r20,16(sp)
 1004740:	ddc00715 	stw	r23,28(sp)
 1004744:	dd800615 	stw	r22,24(sp)
 1004748:	dc800215 	stw	r18,8(sp)
 100474c:	dc400115 	stw	r17,4(sp)
 1004750:	dc000015 	stw	r16,0(sp)
 1004754:	282b883a 	mov	r21,r5
 1004758:	3029883a 	mov	r20,r6
 100475c:	1900632e 	bgeu	r3,r4,10048ec <_fpadd_parts+0x1c8>
 1004760:	28800017 	ldw	r2,0(r5)
 1004764:	1880812e 	bgeu	r3,r2,100496c <_fpadd_parts+0x248>
 1004768:	00c00104 	movi	r3,4
 100476c:	20c0dc26 	beq	r4,r3,1004ae0 <_fpadd_parts+0x3bc>
 1004770:	10c07e26 	beq	r2,r3,100496c <_fpadd_parts+0x248>
 1004774:	00c00084 	movi	r3,2
 1004778:	10c06726 	beq	r2,r3,1004918 <_fpadd_parts+0x1f4>
 100477c:	20c07b26 	beq	r4,r3,100496c <_fpadd_parts+0x248>
 1004780:	9dc00217 	ldw	r23,8(r19)
 1004784:	28c00217 	ldw	r3,8(r5)
 1004788:	9c400317 	ldw	r17,12(r19)
 100478c:	2bc00317 	ldw	r15,12(r5)
 1004790:	b8cdc83a 	sub	r6,r23,r3
 1004794:	9c800417 	ldw	r18,16(r19)
 1004798:	2c000417 	ldw	r16,16(r5)
 100479c:	3009883a 	mov	r4,r6
 10047a0:	30009716 	blt	r6,zero,1004a00 <_fpadd_parts+0x2dc>
 10047a4:	00800fc4 	movi	r2,63
 10047a8:	11806b16 	blt	r2,r6,1004958 <_fpadd_parts+0x234>
 10047ac:	0100a40e 	bge	zero,r4,1004a40 <_fpadd_parts+0x31c>
 10047b0:	35bff804 	addi	r22,r6,-32
 10047b4:	b000bc16 	blt	r22,zero,1004aa8 <_fpadd_parts+0x384>
 10047b8:	8596d83a 	srl	r11,r16,r22
 10047bc:	0019883a 	mov	r12,zero
 10047c0:	0013883a 	mov	r9,zero
 10047c4:	01000044 	movi	r4,1
 10047c8:	0015883a 	mov	r10,zero
 10047cc:	b000be16 	blt	r22,zero,1004ac8 <_fpadd_parts+0x3a4>
 10047d0:	2590983a 	sll	r8,r4,r22
 10047d4:	000f883a 	mov	r7,zero
 10047d8:	00bfffc4 	movi	r2,-1
 10047dc:	3889883a 	add	r4,r7,r2
 10047e0:	408b883a 	add	r5,r8,r2
 10047e4:	21cd803a 	cmpltu	r6,r4,r7
 10047e8:	314b883a 	add	r5,r6,r5
 10047ec:	7904703a 	and	r2,r15,r4
 10047f0:	8146703a 	and	r3,r16,r5
 10047f4:	10c4b03a 	or	r2,r2,r3
 10047f8:	10000226 	beq	r2,zero,1004804 <_fpadd_parts+0xe0>
 10047fc:	02400044 	movi	r9,1
 1004800:	0015883a 	mov	r10,zero
 1004804:	5a5eb03a 	or	r15,r11,r9
 1004808:	62a0b03a 	or	r16,r12,r10
 100480c:	99400117 	ldw	r5,4(r19)
 1004810:	a8800117 	ldw	r2,4(r21)
 1004814:	28806e26 	beq	r5,r2,10049d0 <_fpadd_parts+0x2ac>
 1004818:	28006626 	beq	r5,zero,10049b4 <_fpadd_parts+0x290>
 100481c:	7c45c83a 	sub	r2,r15,r17
 1004820:	7889803a 	cmpltu	r4,r15,r2
 1004824:	8487c83a 	sub	r3,r16,r18
 1004828:	1909c83a 	sub	r4,r3,r4
 100482c:	100d883a 	mov	r6,r2
 1004830:	200f883a 	mov	r7,r4
 1004834:	38007716 	blt	r7,zero,1004a14 <_fpadd_parts+0x2f0>
 1004838:	a5c00215 	stw	r23,8(r20)
 100483c:	a1c00415 	stw	r7,16(r20)
 1004840:	a0000115 	stw	zero,4(r20)
 1004844:	a1800315 	stw	r6,12(r20)
 1004848:	a2000317 	ldw	r8,12(r20)
 100484c:	a2400417 	ldw	r9,16(r20)
 1004850:	00bfffc4 	movi	r2,-1
 1004854:	408b883a 	add	r5,r8,r2
 1004858:	2a09803a 	cmpltu	r4,r5,r8
 100485c:	488d883a 	add	r6,r9,r2
 1004860:	01c40034 	movhi	r7,4096
 1004864:	39ffffc4 	addi	r7,r7,-1
 1004868:	218d883a 	add	r6,r4,r6
 100486c:	39801736 	bltu	r7,r6,10048cc <_fpadd_parts+0x1a8>
 1004870:	31c06526 	beq	r6,r7,1004a08 <_fpadd_parts+0x2e4>
 1004874:	a3000217 	ldw	r12,8(r20)
 1004878:	4209883a 	add	r4,r8,r8
 100487c:	00bfffc4 	movi	r2,-1
 1004880:	220f803a 	cmpltu	r7,r4,r8
 1004884:	4a4b883a 	add	r5,r9,r9
 1004888:	394f883a 	add	r7,r7,r5
 100488c:	2095883a 	add	r10,r4,r2
 1004890:	3897883a 	add	r11,r7,r2
 1004894:	510d803a 	cmpltu	r6,r10,r4
 1004898:	6099883a 	add	r12,r12,r2
 100489c:	32d7883a 	add	r11,r6,r11
 10048a0:	00840034 	movhi	r2,4096
 10048a4:	10bfffc4 	addi	r2,r2,-1
 10048a8:	2011883a 	mov	r8,r4
 10048ac:	3813883a 	mov	r9,r7
 10048b0:	a1000315 	stw	r4,12(r20)
 10048b4:	a1c00415 	stw	r7,16(r20)
 10048b8:	a3000215 	stw	r12,8(r20)
 10048bc:	12c00336 	bltu	r2,r11,10048cc <_fpadd_parts+0x1a8>
 10048c0:	58bfed1e 	bne	r11,r2,1004878 <_fpadd_parts+0x154>
 10048c4:	00bfff84 	movi	r2,-2
 10048c8:	12bfeb2e 	bgeu	r2,r10,1004878 <_fpadd_parts+0x154>
 10048cc:	a2800417 	ldw	r10,16(r20)
 10048d0:	008000c4 	movi	r2,3
 10048d4:	00c80034 	movhi	r3,8192
 10048d8:	18ffffc4 	addi	r3,r3,-1
 10048dc:	a2400317 	ldw	r9,12(r20)
 10048e0:	a0800015 	stw	r2,0(r20)
 10048e4:	1a802336 	bltu	r3,r10,1004974 <_fpadd_parts+0x250>
 10048e8:	a027883a 	mov	r19,r20
 10048ec:	9805883a 	mov	r2,r19
 10048f0:	ddc00717 	ldw	r23,28(sp)
 10048f4:	dd800617 	ldw	r22,24(sp)
 10048f8:	dd400517 	ldw	r21,20(sp)
 10048fc:	dd000417 	ldw	r20,16(sp)
 1004900:	dcc00317 	ldw	r19,12(sp)
 1004904:	dc800217 	ldw	r18,8(sp)
 1004908:	dc400117 	ldw	r17,4(sp)
 100490c:	dc000017 	ldw	r16,0(sp)
 1004910:	dec00804 	addi	sp,sp,32
 1004914:	f800283a 	ret
 1004918:	20fff41e 	bne	r4,r3,10048ec <_fpadd_parts+0x1c8>
 100491c:	31000015 	stw	r4,0(r6)
 1004920:	98800117 	ldw	r2,4(r19)
 1004924:	30800115 	stw	r2,4(r6)
 1004928:	98c00217 	ldw	r3,8(r19)
 100492c:	30c00215 	stw	r3,8(r6)
 1004930:	98800317 	ldw	r2,12(r19)
 1004934:	30800315 	stw	r2,12(r6)
 1004938:	98c00417 	ldw	r3,16(r19)
 100493c:	30c00415 	stw	r3,16(r6)
 1004940:	98800117 	ldw	r2,4(r19)
 1004944:	28c00117 	ldw	r3,4(r5)
 1004948:	3027883a 	mov	r19,r6
 100494c:	10c4703a 	and	r2,r2,r3
 1004950:	30800115 	stw	r2,4(r6)
 1004954:	003fe506 	br	10048ec <_fpadd_parts+0x1c8>
 1004958:	1dc02616 	blt	r3,r23,10049f4 <_fpadd_parts+0x2d0>
 100495c:	0023883a 	mov	r17,zero
 1004960:	182f883a 	mov	r23,r3
 1004964:	0025883a 	mov	r18,zero
 1004968:	003fa806 	br	100480c <_fpadd_parts+0xe8>
 100496c:	a827883a 	mov	r19,r21
 1004970:	003fde06 	br	10048ec <_fpadd_parts+0x1c8>
 1004974:	01800044 	movi	r6,1
 1004978:	500497fa 	slli	r2,r10,31
 100497c:	4808d07a 	srli	r4,r9,1
 1004980:	518ad83a 	srl	r5,r10,r6
 1004984:	a2000217 	ldw	r8,8(r20)
 1004988:	1108b03a 	or	r4,r2,r4
 100498c:	0007883a 	mov	r3,zero
 1004990:	4984703a 	and	r2,r9,r6
 1004994:	208cb03a 	or	r6,r4,r2
 1004998:	28ceb03a 	or	r7,r5,r3
 100499c:	42000044 	addi	r8,r8,1
 10049a0:	a027883a 	mov	r19,r20
 10049a4:	a1c00415 	stw	r7,16(r20)
 10049a8:	a2000215 	stw	r8,8(r20)
 10049ac:	a1800315 	stw	r6,12(r20)
 10049b0:	003fce06 	br	10048ec <_fpadd_parts+0x1c8>
 10049b4:	8bc5c83a 	sub	r2,r17,r15
 10049b8:	8889803a 	cmpltu	r4,r17,r2
 10049bc:	9407c83a 	sub	r3,r18,r16
 10049c0:	1909c83a 	sub	r4,r3,r4
 10049c4:	100d883a 	mov	r6,r2
 10049c8:	200f883a 	mov	r7,r4
 10049cc:	003f9906 	br	1004834 <_fpadd_parts+0x110>
 10049d0:	7c45883a 	add	r2,r15,r17
 10049d4:	13c9803a 	cmpltu	r4,r2,r15
 10049d8:	8487883a 	add	r3,r16,r18
 10049dc:	20c9883a 	add	r4,r4,r3
 10049e0:	a1400115 	stw	r5,4(r20)
 10049e4:	a5c00215 	stw	r23,8(r20)
 10049e8:	a0800315 	stw	r2,12(r20)
 10049ec:	a1000415 	stw	r4,16(r20)
 10049f0:	003fb606 	br	10048cc <_fpadd_parts+0x1a8>
 10049f4:	001f883a 	mov	r15,zero
 10049f8:	0021883a 	mov	r16,zero
 10049fc:	003f8306 	br	100480c <_fpadd_parts+0xe8>
 1004a00:	018dc83a 	sub	r6,zero,r6
 1004a04:	003f6706 	br	10047a4 <_fpadd_parts+0x80>
 1004a08:	00bfff84 	movi	r2,-2
 1004a0c:	117faf36 	bltu	r2,r5,10048cc <_fpadd_parts+0x1a8>
 1004a10:	003f9806 	br	1004874 <_fpadd_parts+0x150>
 1004a14:	0005883a 	mov	r2,zero
 1004a18:	1189c83a 	sub	r4,r2,r6
 1004a1c:	1105803a 	cmpltu	r2,r2,r4
 1004a20:	01cbc83a 	sub	r5,zero,r7
 1004a24:	2885c83a 	sub	r2,r5,r2
 1004a28:	01800044 	movi	r6,1
 1004a2c:	a1800115 	stw	r6,4(r20)
 1004a30:	a5c00215 	stw	r23,8(r20)
 1004a34:	a1000315 	stw	r4,12(r20)
 1004a38:	a0800415 	stw	r2,16(r20)
 1004a3c:	003f8206 	br	1004848 <_fpadd_parts+0x124>
 1004a40:	203f7226 	beq	r4,zero,100480c <_fpadd_parts+0xe8>
 1004a44:	35bff804 	addi	r22,r6,-32
 1004a48:	b9af883a 	add	r23,r23,r6
 1004a4c:	b0003116 	blt	r22,zero,1004b14 <_fpadd_parts+0x3f0>
 1004a50:	959ad83a 	srl	r13,r18,r22
 1004a54:	001d883a 	mov	r14,zero
 1004a58:	000f883a 	mov	r7,zero
 1004a5c:	01000044 	movi	r4,1
 1004a60:	0011883a 	mov	r8,zero
 1004a64:	b0002516 	blt	r22,zero,1004afc <_fpadd_parts+0x3d8>
 1004a68:	2594983a 	sll	r10,r4,r22
 1004a6c:	0013883a 	mov	r9,zero
 1004a70:	00bfffc4 	movi	r2,-1
 1004a74:	4889883a 	add	r4,r9,r2
 1004a78:	508b883a 	add	r5,r10,r2
 1004a7c:	224d803a 	cmpltu	r6,r4,r9
 1004a80:	314b883a 	add	r5,r6,r5
 1004a84:	8904703a 	and	r2,r17,r4
 1004a88:	9146703a 	and	r3,r18,r5
 1004a8c:	10c4b03a 	or	r2,r2,r3
 1004a90:	10000226 	beq	r2,zero,1004a9c <_fpadd_parts+0x378>
 1004a94:	01c00044 	movi	r7,1
 1004a98:	0011883a 	mov	r8,zero
 1004a9c:	69e2b03a 	or	r17,r13,r7
 1004aa0:	7224b03a 	or	r18,r14,r8
 1004aa4:	003f5906 	br	100480c <_fpadd_parts+0xe8>
 1004aa8:	8407883a 	add	r3,r16,r16
 1004aac:	008007c4 	movi	r2,31
 1004ab0:	1185c83a 	sub	r2,r2,r6
 1004ab4:	1886983a 	sll	r3,r3,r2
 1004ab8:	7996d83a 	srl	r11,r15,r6
 1004abc:	8198d83a 	srl	r12,r16,r6
 1004ac0:	1ad6b03a 	or	r11,r3,r11
 1004ac4:	003f3e06 	br	10047c0 <_fpadd_parts+0x9c>
 1004ac8:	2006d07a 	srli	r3,r4,1
 1004acc:	008007c4 	movi	r2,31
 1004ad0:	1185c83a 	sub	r2,r2,r6
 1004ad4:	1890d83a 	srl	r8,r3,r2
 1004ad8:	218e983a 	sll	r7,r4,r6
 1004adc:	003f3e06 	br	10047d8 <_fpadd_parts+0xb4>
 1004ae0:	113f821e 	bne	r2,r4,10048ec <_fpadd_parts+0x1c8>
 1004ae4:	28c00117 	ldw	r3,4(r5)
 1004ae8:	98800117 	ldw	r2,4(r19)
 1004aec:	10ff7f26 	beq	r2,r3,10048ec <_fpadd_parts+0x1c8>
 1004af0:	04c040b4 	movhi	r19,258
 1004af4:	9cfca504 	addi	r19,r19,-3436
 1004af8:	003f7c06 	br	10048ec <_fpadd_parts+0x1c8>
 1004afc:	2006d07a 	srli	r3,r4,1
 1004b00:	008007c4 	movi	r2,31
 1004b04:	1185c83a 	sub	r2,r2,r6
 1004b08:	1894d83a 	srl	r10,r3,r2
 1004b0c:	2192983a 	sll	r9,r4,r6
 1004b10:	003fd706 	br	1004a70 <_fpadd_parts+0x34c>
 1004b14:	9487883a 	add	r3,r18,r18
 1004b18:	008007c4 	movi	r2,31
 1004b1c:	1185c83a 	sub	r2,r2,r6
 1004b20:	1886983a 	sll	r3,r3,r2
 1004b24:	899ad83a 	srl	r13,r17,r6
 1004b28:	919cd83a 	srl	r14,r18,r6
 1004b2c:	1b5ab03a 	or	r13,r3,r13
 1004b30:	003fc906 	br	1004a58 <_fpadd_parts+0x334>

01004b34 <__subdf3>:
 1004b34:	deffea04 	addi	sp,sp,-88
 1004b38:	dcc01415 	stw	r19,80(sp)
 1004b3c:	dcc00404 	addi	r19,sp,16
 1004b40:	2011883a 	mov	r8,r4
 1004b44:	2813883a 	mov	r9,r5
 1004b48:	dc401315 	stw	r17,76(sp)
 1004b4c:	d809883a 	mov	r4,sp
 1004b50:	980b883a 	mov	r5,r19
 1004b54:	dc400904 	addi	r17,sp,36
 1004b58:	dfc01515 	stw	ra,84(sp)
 1004b5c:	da400115 	stw	r9,4(sp)
 1004b60:	d9c00315 	stw	r7,12(sp)
 1004b64:	da000015 	stw	r8,0(sp)
 1004b68:	d9800215 	stw	r6,8(sp)
 1004b6c:	1005bac0 	call	1005bac <__unpack_d>
 1004b70:	d9000204 	addi	r4,sp,8
 1004b74:	880b883a 	mov	r5,r17
 1004b78:	1005bac0 	call	1005bac <__unpack_d>
 1004b7c:	d8800a17 	ldw	r2,40(sp)
 1004b80:	880b883a 	mov	r5,r17
 1004b84:	9809883a 	mov	r4,r19
 1004b88:	d9800e04 	addi	r6,sp,56
 1004b8c:	1080005c 	xori	r2,r2,1
 1004b90:	d8800a15 	stw	r2,40(sp)
 1004b94:	10047240 	call	1004724 <_fpadd_parts>
 1004b98:	1009883a 	mov	r4,r2
 1004b9c:	10058980 	call	1005898 <__pack_d>
 1004ba0:	dfc01517 	ldw	ra,84(sp)
 1004ba4:	dcc01417 	ldw	r19,80(sp)
 1004ba8:	dc401317 	ldw	r17,76(sp)
 1004bac:	dec01604 	addi	sp,sp,88
 1004bb0:	f800283a 	ret

01004bb4 <__adddf3>:
 1004bb4:	deffea04 	addi	sp,sp,-88
 1004bb8:	dcc01415 	stw	r19,80(sp)
 1004bbc:	dcc00404 	addi	r19,sp,16
 1004bc0:	2011883a 	mov	r8,r4
 1004bc4:	2813883a 	mov	r9,r5
 1004bc8:	dc401315 	stw	r17,76(sp)
 1004bcc:	d809883a 	mov	r4,sp
 1004bd0:	980b883a 	mov	r5,r19
 1004bd4:	dc400904 	addi	r17,sp,36
 1004bd8:	dfc01515 	stw	ra,84(sp)
 1004bdc:	da400115 	stw	r9,4(sp)
 1004be0:	d9c00315 	stw	r7,12(sp)
 1004be4:	da000015 	stw	r8,0(sp)
 1004be8:	d9800215 	stw	r6,8(sp)
 1004bec:	1005bac0 	call	1005bac <__unpack_d>
 1004bf0:	d9000204 	addi	r4,sp,8
 1004bf4:	880b883a 	mov	r5,r17
 1004bf8:	1005bac0 	call	1005bac <__unpack_d>
 1004bfc:	d9800e04 	addi	r6,sp,56
 1004c00:	9809883a 	mov	r4,r19
 1004c04:	880b883a 	mov	r5,r17
 1004c08:	10047240 	call	1004724 <_fpadd_parts>
 1004c0c:	1009883a 	mov	r4,r2
 1004c10:	10058980 	call	1005898 <__pack_d>
 1004c14:	dfc01517 	ldw	ra,84(sp)
 1004c18:	dcc01417 	ldw	r19,80(sp)
 1004c1c:	dc401317 	ldw	r17,76(sp)
 1004c20:	dec01604 	addi	sp,sp,88
 1004c24:	f800283a 	ret

01004c28 <__muldf3>:
 1004c28:	deffe004 	addi	sp,sp,-128
 1004c2c:	dc401815 	stw	r17,96(sp)
 1004c30:	dc400404 	addi	r17,sp,16
 1004c34:	2011883a 	mov	r8,r4
 1004c38:	2813883a 	mov	r9,r5
 1004c3c:	dc001715 	stw	r16,92(sp)
 1004c40:	d809883a 	mov	r4,sp
 1004c44:	880b883a 	mov	r5,r17
 1004c48:	dc000904 	addi	r16,sp,36
 1004c4c:	dfc01f15 	stw	ra,124(sp)
 1004c50:	da400115 	stw	r9,4(sp)
 1004c54:	d9c00315 	stw	r7,12(sp)
 1004c58:	da000015 	stw	r8,0(sp)
 1004c5c:	d9800215 	stw	r6,8(sp)
 1004c60:	ddc01e15 	stw	r23,120(sp)
 1004c64:	dd801d15 	stw	r22,116(sp)
 1004c68:	dd401c15 	stw	r21,112(sp)
 1004c6c:	dd001b15 	stw	r20,108(sp)
 1004c70:	dcc01a15 	stw	r19,104(sp)
 1004c74:	dc801915 	stw	r18,100(sp)
 1004c78:	1005bac0 	call	1005bac <__unpack_d>
 1004c7c:	d9000204 	addi	r4,sp,8
 1004c80:	800b883a 	mov	r5,r16
 1004c84:	1005bac0 	call	1005bac <__unpack_d>
 1004c88:	d9000417 	ldw	r4,16(sp)
 1004c8c:	00800044 	movi	r2,1
 1004c90:	1100102e 	bgeu	r2,r4,1004cd4 <__muldf3+0xac>
 1004c94:	d8c00917 	ldw	r3,36(sp)
 1004c98:	10c0062e 	bgeu	r2,r3,1004cb4 <__muldf3+0x8c>
 1004c9c:	00800104 	movi	r2,4
 1004ca0:	20800a26 	beq	r4,r2,1004ccc <__muldf3+0xa4>
 1004ca4:	1880cc26 	beq	r3,r2,1004fd8 <__muldf3+0x3b0>
 1004ca8:	00800084 	movi	r2,2
 1004cac:	20800926 	beq	r4,r2,1004cd4 <__muldf3+0xac>
 1004cb0:	1880191e 	bne	r3,r2,1004d18 <__muldf3+0xf0>
 1004cb4:	d8c00a17 	ldw	r3,40(sp)
 1004cb8:	d8800517 	ldw	r2,20(sp)
 1004cbc:	8009883a 	mov	r4,r16
 1004cc0:	10c4c03a 	cmpne	r2,r2,r3
 1004cc4:	d8800a15 	stw	r2,40(sp)
 1004cc8:	00000706 	br	1004ce8 <__muldf3+0xc0>
 1004ccc:	00800084 	movi	r2,2
 1004cd0:	1880c326 	beq	r3,r2,1004fe0 <__muldf3+0x3b8>
 1004cd4:	d8800517 	ldw	r2,20(sp)
 1004cd8:	d8c00a17 	ldw	r3,40(sp)
 1004cdc:	8809883a 	mov	r4,r17
 1004ce0:	10c4c03a 	cmpne	r2,r2,r3
 1004ce4:	d8800515 	stw	r2,20(sp)
 1004ce8:	10058980 	call	1005898 <__pack_d>
 1004cec:	dfc01f17 	ldw	ra,124(sp)
 1004cf0:	ddc01e17 	ldw	r23,120(sp)
 1004cf4:	dd801d17 	ldw	r22,116(sp)
 1004cf8:	dd401c17 	ldw	r21,112(sp)
 1004cfc:	dd001b17 	ldw	r20,108(sp)
 1004d00:	dcc01a17 	ldw	r19,104(sp)
 1004d04:	dc801917 	ldw	r18,100(sp)
 1004d08:	dc401817 	ldw	r17,96(sp)
 1004d0c:	dc001717 	ldw	r16,92(sp)
 1004d10:	dec02004 	addi	sp,sp,128
 1004d14:	f800283a 	ret
 1004d18:	dd800717 	ldw	r22,28(sp)
 1004d1c:	dc800c17 	ldw	r18,48(sp)
 1004d20:	002b883a 	mov	r21,zero
 1004d24:	0023883a 	mov	r17,zero
 1004d28:	a80b883a 	mov	r5,r21
 1004d2c:	b00d883a 	mov	r6,r22
 1004d30:	880f883a 	mov	r7,r17
 1004d34:	ddc00817 	ldw	r23,32(sp)
 1004d38:	dcc00d17 	ldw	r19,52(sp)
 1004d3c:	9009883a 	mov	r4,r18
 1004d40:	10057800 	call	1005780 <__muldi3>
 1004d44:	001b883a 	mov	r13,zero
 1004d48:	680f883a 	mov	r7,r13
 1004d4c:	b009883a 	mov	r4,r22
 1004d50:	000b883a 	mov	r5,zero
 1004d54:	980d883a 	mov	r6,r19
 1004d58:	b82d883a 	mov	r22,r23
 1004d5c:	002f883a 	mov	r23,zero
 1004d60:	db401615 	stw	r13,88(sp)
 1004d64:	d8801315 	stw	r2,76(sp)
 1004d68:	d8c01415 	stw	r3,80(sp)
 1004d6c:	dcc01515 	stw	r19,84(sp)
 1004d70:	10057800 	call	1005780 <__muldi3>
 1004d74:	b00d883a 	mov	r6,r22
 1004d78:	000b883a 	mov	r5,zero
 1004d7c:	9009883a 	mov	r4,r18
 1004d80:	b80f883a 	mov	r7,r23
 1004d84:	1021883a 	mov	r16,r2
 1004d88:	1823883a 	mov	r17,r3
 1004d8c:	10057800 	call	1005780 <__muldi3>
 1004d90:	8085883a 	add	r2,r16,r2
 1004d94:	140d803a 	cmpltu	r6,r2,r16
 1004d98:	88c7883a 	add	r3,r17,r3
 1004d9c:	30cd883a 	add	r6,r6,r3
 1004da0:	1029883a 	mov	r20,r2
 1004da4:	302b883a 	mov	r21,r6
 1004da8:	da801317 	ldw	r10,76(sp)
 1004dac:	dac01417 	ldw	r11,80(sp)
 1004db0:	db001517 	ldw	r12,84(sp)
 1004db4:	db401617 	ldw	r13,88(sp)
 1004db8:	3440612e 	bgeu	r6,r17,1004f40 <__muldf3+0x318>
 1004dbc:	0009883a 	mov	r4,zero
 1004dc0:	5105883a 	add	r2,r10,r4
 1004dc4:	128d803a 	cmpltu	r6,r2,r10
 1004dc8:	5d07883a 	add	r3,r11,r20
 1004dcc:	30cd883a 	add	r6,r6,r3
 1004dd0:	0021883a 	mov	r16,zero
 1004dd4:	04400044 	movi	r17,1
 1004dd8:	1025883a 	mov	r18,r2
 1004ddc:	3027883a 	mov	r19,r6
 1004de0:	32c06236 	bltu	r6,r11,1004f6c <__muldf3+0x344>
 1004de4:	59807a26 	beq	r11,r6,1004fd0 <__muldf3+0x3a8>
 1004de8:	680b883a 	mov	r5,r13
 1004dec:	b80f883a 	mov	r7,r23
 1004df0:	6009883a 	mov	r4,r12
 1004df4:	b00d883a 	mov	r6,r22
 1004df8:	10057800 	call	1005780 <__muldi3>
 1004dfc:	1009883a 	mov	r4,r2
 1004e00:	000f883a 	mov	r7,zero
 1004e04:	1545883a 	add	r2,r2,r21
 1004e08:	1111803a 	cmpltu	r8,r2,r4
 1004e0c:	19c7883a 	add	r3,r3,r7
 1004e10:	40c7883a 	add	r3,r8,r3
 1004e14:	88cb883a 	add	r5,r17,r3
 1004e18:	d8c00617 	ldw	r3,24(sp)
 1004e1c:	8089883a 	add	r4,r16,r2
 1004e20:	d8800b17 	ldw	r2,44(sp)
 1004e24:	18c00104 	addi	r3,r3,4
 1004e28:	240d803a 	cmpltu	r6,r4,r16
 1004e2c:	10c7883a 	add	r3,r2,r3
 1004e30:	2013883a 	mov	r9,r4
 1004e34:	d8800a17 	ldw	r2,40(sp)
 1004e38:	d9000517 	ldw	r4,20(sp)
 1004e3c:	314d883a 	add	r6,r6,r5
 1004e40:	3015883a 	mov	r10,r6
 1004e44:	2088c03a 	cmpne	r4,r4,r2
 1004e48:	00880034 	movhi	r2,8192
 1004e4c:	10bfffc4 	addi	r2,r2,-1
 1004e50:	d9000f15 	stw	r4,60(sp)
 1004e54:	d8c01015 	stw	r3,64(sp)
 1004e58:	1180162e 	bgeu	r2,r6,1004eb4 <__muldf3+0x28c>
 1004e5c:	1811883a 	mov	r8,r3
 1004e60:	101f883a 	mov	r15,r2
 1004e64:	980497fa 	slli	r2,r19,31
 1004e68:	9016d07a 	srli	r11,r18,1
 1004e6c:	500697fa 	slli	r3,r10,31
 1004e70:	480cd07a 	srli	r6,r9,1
 1004e74:	500ed07a 	srli	r7,r10,1
 1004e78:	12d6b03a 	or	r11,r2,r11
 1004e7c:	00800044 	movi	r2,1
 1004e80:	198cb03a 	or	r6,r3,r6
 1004e84:	4888703a 	and	r4,r9,r2
 1004e88:	9818d07a 	srli	r12,r19,1
 1004e8c:	001b883a 	mov	r13,zero
 1004e90:	03a00034 	movhi	r14,32768
 1004e94:	3013883a 	mov	r9,r6
 1004e98:	3815883a 	mov	r10,r7
 1004e9c:	4091883a 	add	r8,r8,r2
 1004ea0:	20000226 	beq	r4,zero,1004eac <__muldf3+0x284>
 1004ea4:	5b64b03a 	or	r18,r11,r13
 1004ea8:	63a6b03a 	or	r19,r12,r14
 1004eac:	7abfed36 	bltu	r15,r10,1004e64 <__muldf3+0x23c>
 1004eb0:	da001015 	stw	r8,64(sp)
 1004eb4:	00840034 	movhi	r2,4096
 1004eb8:	10bfffc4 	addi	r2,r2,-1
 1004ebc:	12801436 	bltu	r2,r10,1004f10 <__muldf3+0x2e8>
 1004ec0:	da001017 	ldw	r8,64(sp)
 1004ec4:	101f883a 	mov	r15,r2
 1004ec8:	4a45883a 	add	r2,r9,r9
 1004ecc:	124d803a 	cmpltu	r6,r2,r9
 1004ed0:	5287883a 	add	r3,r10,r10
 1004ed4:	9497883a 	add	r11,r18,r18
 1004ed8:	5c8f803a 	cmpltu	r7,r11,r18
 1004edc:	9cd9883a 	add	r12,r19,r19
 1004ee0:	01000044 	movi	r4,1
 1004ee4:	30cd883a 	add	r6,r6,r3
 1004ee8:	3b0f883a 	add	r7,r7,r12
 1004eec:	423fffc4 	addi	r8,r8,-1
 1004ef0:	1013883a 	mov	r9,r2
 1004ef4:	3015883a 	mov	r10,r6
 1004ef8:	111ab03a 	or	r13,r2,r4
 1004efc:	98003016 	blt	r19,zero,1004fc0 <__muldf3+0x398>
 1004f00:	5825883a 	mov	r18,r11
 1004f04:	3827883a 	mov	r19,r7
 1004f08:	7abfef2e 	bgeu	r15,r10,1004ec8 <__muldf3+0x2a0>
 1004f0c:	da001015 	stw	r8,64(sp)
 1004f10:	00803fc4 	movi	r2,255
 1004f14:	488e703a 	and	r7,r9,r2
 1004f18:	00802004 	movi	r2,128
 1004f1c:	0007883a 	mov	r3,zero
 1004f20:	0011883a 	mov	r8,zero
 1004f24:	38801826 	beq	r7,r2,1004f88 <__muldf3+0x360>
 1004f28:	008000c4 	movi	r2,3
 1004f2c:	d9000e04 	addi	r4,sp,56
 1004f30:	da801215 	stw	r10,72(sp)
 1004f34:	d8800e15 	stw	r2,56(sp)
 1004f38:	da401115 	stw	r9,68(sp)
 1004f3c:	003f6a06 	br	1004ce8 <__muldf3+0xc0>
 1004f40:	89802126 	beq	r17,r6,1004fc8 <__muldf3+0x3a0>
 1004f44:	0009883a 	mov	r4,zero
 1004f48:	5105883a 	add	r2,r10,r4
 1004f4c:	128d803a 	cmpltu	r6,r2,r10
 1004f50:	5d07883a 	add	r3,r11,r20
 1004f54:	30cd883a 	add	r6,r6,r3
 1004f58:	0021883a 	mov	r16,zero
 1004f5c:	0023883a 	mov	r17,zero
 1004f60:	1025883a 	mov	r18,r2
 1004f64:	3027883a 	mov	r19,r6
 1004f68:	32ff9e2e 	bgeu	r6,r11,1004de4 <__muldf3+0x1bc>
 1004f6c:	00800044 	movi	r2,1
 1004f70:	8089883a 	add	r4,r16,r2
 1004f74:	240d803a 	cmpltu	r6,r4,r16
 1004f78:	344d883a 	add	r6,r6,r17
 1004f7c:	2021883a 	mov	r16,r4
 1004f80:	3023883a 	mov	r17,r6
 1004f84:	003f9806 	br	1004de8 <__muldf3+0x1c0>
 1004f88:	403fe71e 	bne	r8,zero,1004f28 <__muldf3+0x300>
 1004f8c:	01004004 	movi	r4,256
 1004f90:	4904703a 	and	r2,r9,r4
 1004f94:	10c4b03a 	or	r2,r2,r3
 1004f98:	103fe31e 	bne	r2,zero,1004f28 <__muldf3+0x300>
 1004f9c:	94c4b03a 	or	r2,r18,r19
 1004fa0:	103fe126 	beq	r2,zero,1004f28 <__muldf3+0x300>
 1004fa4:	49c5883a 	add	r2,r9,r7
 1004fa8:	1251803a 	cmpltu	r8,r2,r9
 1004fac:	4291883a 	add	r8,r8,r10
 1004fb0:	013fc004 	movi	r4,-256
 1004fb4:	1112703a 	and	r9,r2,r4
 1004fb8:	4015883a 	mov	r10,r8
 1004fbc:	003fda06 	br	1004f28 <__muldf3+0x300>
 1004fc0:	6813883a 	mov	r9,r13
 1004fc4:	003fce06 	br	1004f00 <__muldf3+0x2d8>
 1004fc8:	143f7c36 	bltu	r2,r16,1004dbc <__muldf3+0x194>
 1004fcc:	003fdd06 	br	1004f44 <__muldf3+0x31c>
 1004fd0:	12bf852e 	bgeu	r2,r10,1004de8 <__muldf3+0x1c0>
 1004fd4:	003fe506 	br	1004f6c <__muldf3+0x344>
 1004fd8:	00800084 	movi	r2,2
 1004fdc:	20bf351e 	bne	r4,r2,1004cb4 <__muldf3+0x8c>
 1004fe0:	010040b4 	movhi	r4,258
 1004fe4:	213ca504 	addi	r4,r4,-3436
 1004fe8:	003f3f06 	br	1004ce8 <__muldf3+0xc0>

01004fec <__divdf3>:
 1004fec:	deffed04 	addi	sp,sp,-76
 1004ff0:	dcc01115 	stw	r19,68(sp)
 1004ff4:	dcc00404 	addi	r19,sp,16
 1004ff8:	2011883a 	mov	r8,r4
 1004ffc:	2813883a 	mov	r9,r5
 1005000:	dc000e15 	stw	r16,56(sp)
 1005004:	d809883a 	mov	r4,sp
 1005008:	980b883a 	mov	r5,r19
 100500c:	dc000904 	addi	r16,sp,36
 1005010:	dfc01215 	stw	ra,72(sp)
 1005014:	da400115 	stw	r9,4(sp)
 1005018:	d9c00315 	stw	r7,12(sp)
 100501c:	da000015 	stw	r8,0(sp)
 1005020:	d9800215 	stw	r6,8(sp)
 1005024:	dc801015 	stw	r18,64(sp)
 1005028:	dc400f15 	stw	r17,60(sp)
 100502c:	1005bac0 	call	1005bac <__unpack_d>
 1005030:	d9000204 	addi	r4,sp,8
 1005034:	800b883a 	mov	r5,r16
 1005038:	1005bac0 	call	1005bac <__unpack_d>
 100503c:	d9000417 	ldw	r4,16(sp)
 1005040:	00800044 	movi	r2,1
 1005044:	11000b2e 	bgeu	r2,r4,1005074 <__divdf3+0x88>
 1005048:	d9400917 	ldw	r5,36(sp)
 100504c:	1140762e 	bgeu	r2,r5,1005228 <__divdf3+0x23c>
 1005050:	d8800517 	ldw	r2,20(sp)
 1005054:	d8c00a17 	ldw	r3,40(sp)
 1005058:	01800104 	movi	r6,4
 100505c:	10c4f03a 	xor	r2,r2,r3
 1005060:	d8800515 	stw	r2,20(sp)
 1005064:	21800226 	beq	r4,r6,1005070 <__divdf3+0x84>
 1005068:	00800084 	movi	r2,2
 100506c:	2080141e 	bne	r4,r2,10050c0 <__divdf3+0xd4>
 1005070:	29000926 	beq	r5,r4,1005098 <__divdf3+0xac>
 1005074:	9809883a 	mov	r4,r19
 1005078:	10058980 	call	1005898 <__pack_d>
 100507c:	dfc01217 	ldw	ra,72(sp)
 1005080:	dcc01117 	ldw	r19,68(sp)
 1005084:	dc801017 	ldw	r18,64(sp)
 1005088:	dc400f17 	ldw	r17,60(sp)
 100508c:	dc000e17 	ldw	r16,56(sp)
 1005090:	dec01304 	addi	sp,sp,76
 1005094:	f800283a 	ret
 1005098:	010040b4 	movhi	r4,258
 100509c:	213ca504 	addi	r4,r4,-3436
 10050a0:	10058980 	call	1005898 <__pack_d>
 10050a4:	dfc01217 	ldw	ra,72(sp)
 10050a8:	dcc01117 	ldw	r19,68(sp)
 10050ac:	dc801017 	ldw	r18,64(sp)
 10050b0:	dc400f17 	ldw	r17,60(sp)
 10050b4:	dc000e17 	ldw	r16,56(sp)
 10050b8:	dec01304 	addi	sp,sp,76
 10050bc:	f800283a 	ret
 10050c0:	29805b26 	beq	r5,r6,1005230 <__divdf3+0x244>
 10050c4:	28802d26 	beq	r5,r2,100517c <__divdf3+0x190>
 10050c8:	d8c00617 	ldw	r3,24(sp)
 10050cc:	d8800b17 	ldw	r2,44(sp)
 10050d0:	d9c00817 	ldw	r7,32(sp)
 10050d4:	dc400d17 	ldw	r17,52(sp)
 10050d8:	188bc83a 	sub	r5,r3,r2
 10050dc:	d9800717 	ldw	r6,28(sp)
 10050e0:	dc000c17 	ldw	r16,48(sp)
 10050e4:	d9400615 	stw	r5,24(sp)
 10050e8:	3c403836 	bltu	r7,r17,10051cc <__divdf3+0x1e0>
 10050ec:	89c03626 	beq	r17,r7,10051c8 <__divdf3+0x1dc>
 10050f0:	0015883a 	mov	r10,zero
 10050f4:	001d883a 	mov	r14,zero
 10050f8:	02c40034 	movhi	r11,4096
 10050fc:	001f883a 	mov	r15,zero
 1005100:	003f883a 	mov	ra,zero
 1005104:	04800f44 	movi	r18,61
 1005108:	00000f06 	br	1005148 <__divdf3+0x15c>
 100510c:	601d883a 	mov	r14,r12
 1005110:	681f883a 	mov	r15,r13
 1005114:	400d883a 	mov	r6,r8
 1005118:	100f883a 	mov	r7,r2
 100511c:	3191883a 	add	r8,r6,r6
 1005120:	5808d07a 	srli	r4,r11,1
 1005124:	4185803a 	cmpltu	r2,r8,r6
 1005128:	39d3883a 	add	r9,r7,r7
 100512c:	28c6b03a 	or	r3,r5,r3
 1005130:	1245883a 	add	r2,r2,r9
 1005134:	1815883a 	mov	r10,r3
 1005138:	2017883a 	mov	r11,r4
 100513c:	400d883a 	mov	r6,r8
 1005140:	100f883a 	mov	r7,r2
 1005144:	fc801726 	beq	ra,r18,10051a4 <__divdf3+0x1b8>
 1005148:	580a97fa 	slli	r5,r11,31
 100514c:	5006d07a 	srli	r3,r10,1
 1005150:	ffc00044 	addi	ra,ra,1
 1005154:	3c7ff136 	bltu	r7,r17,100511c <__divdf3+0x130>
 1005158:	3411c83a 	sub	r8,r6,r16
 100515c:	3205803a 	cmpltu	r2,r6,r8
 1005160:	3c53c83a 	sub	r9,r7,r17
 1005164:	7298b03a 	or	r12,r14,r10
 1005168:	7adab03a 	or	r13,r15,r11
 100516c:	4885c83a 	sub	r2,r9,r2
 1005170:	89ffe61e 	bne	r17,r7,100510c <__divdf3+0x120>
 1005174:	343fe936 	bltu	r6,r16,100511c <__divdf3+0x130>
 1005178:	003fe406 	br	100510c <__divdf3+0x120>
 100517c:	9809883a 	mov	r4,r19
 1005180:	d9800415 	stw	r6,16(sp)
 1005184:	10058980 	call	1005898 <__pack_d>
 1005188:	dfc01217 	ldw	ra,72(sp)
 100518c:	dcc01117 	ldw	r19,68(sp)
 1005190:	dc801017 	ldw	r18,64(sp)
 1005194:	dc400f17 	ldw	r17,60(sp)
 1005198:	dc000e17 	ldw	r16,56(sp)
 100519c:	dec01304 	addi	sp,sp,76
 10051a0:	f800283a 	ret
 10051a4:	00803fc4 	movi	r2,255
 10051a8:	7090703a 	and	r8,r14,r2
 10051ac:	00802004 	movi	r2,128
 10051b0:	0007883a 	mov	r3,zero
 10051b4:	0013883a 	mov	r9,zero
 10051b8:	40800d26 	beq	r8,r2,10051f0 <__divdf3+0x204>
 10051bc:	dbc00815 	stw	r15,32(sp)
 10051c0:	db800715 	stw	r14,28(sp)
 10051c4:	003fab06 	br	1005074 <__divdf3+0x88>
 10051c8:	343fc92e 	bgeu	r6,r16,10050f0 <__divdf3+0x104>
 10051cc:	3185883a 	add	r2,r6,r6
 10051d0:	1189803a 	cmpltu	r4,r2,r6
 10051d4:	39c7883a 	add	r3,r7,r7
 10051d8:	20c9883a 	add	r4,r4,r3
 10051dc:	297fffc4 	addi	r5,r5,-1
 10051e0:	100d883a 	mov	r6,r2
 10051e4:	200f883a 	mov	r7,r4
 10051e8:	d9400615 	stw	r5,24(sp)
 10051ec:	003fc006 	br	10050f0 <__divdf3+0x104>
 10051f0:	483ff21e 	bne	r9,zero,10051bc <__divdf3+0x1d0>
 10051f4:	01004004 	movi	r4,256
 10051f8:	7104703a 	and	r2,r14,r4
 10051fc:	10c4b03a 	or	r2,r2,r3
 1005200:	103fee1e 	bne	r2,zero,10051bc <__divdf3+0x1d0>
 1005204:	31c4b03a 	or	r2,r6,r7
 1005208:	103fec26 	beq	r2,zero,10051bc <__divdf3+0x1d0>
 100520c:	7205883a 	add	r2,r14,r8
 1005210:	1391803a 	cmpltu	r8,r2,r14
 1005214:	43d1883a 	add	r8,r8,r15
 1005218:	013fc004 	movi	r4,-256
 100521c:	111c703a 	and	r14,r2,r4
 1005220:	401f883a 	mov	r15,r8
 1005224:	003fe506 	br	10051bc <__divdf3+0x1d0>
 1005228:	8009883a 	mov	r4,r16
 100522c:	003f9206 	br	1005078 <__divdf3+0x8c>
 1005230:	9809883a 	mov	r4,r19
 1005234:	d8000715 	stw	zero,28(sp)
 1005238:	d8000815 	stw	zero,32(sp)
 100523c:	d8000615 	stw	zero,24(sp)
 1005240:	003f8d06 	br	1005078 <__divdf3+0x8c>

01005244 <__eqdf2>:
 1005244:	deffef04 	addi	sp,sp,-68
 1005248:	dc400f15 	stw	r17,60(sp)
 100524c:	dc400404 	addi	r17,sp,16
 1005250:	2005883a 	mov	r2,r4
 1005254:	2807883a 	mov	r3,r5
 1005258:	dc000e15 	stw	r16,56(sp)
 100525c:	d809883a 	mov	r4,sp
 1005260:	880b883a 	mov	r5,r17
 1005264:	dc000904 	addi	r16,sp,36
 1005268:	d8c00115 	stw	r3,4(sp)
 100526c:	d8800015 	stw	r2,0(sp)
 1005270:	d9800215 	stw	r6,8(sp)
 1005274:	dfc01015 	stw	ra,64(sp)
 1005278:	d9c00315 	stw	r7,12(sp)
 100527c:	1005bac0 	call	1005bac <__unpack_d>
 1005280:	d9000204 	addi	r4,sp,8
 1005284:	800b883a 	mov	r5,r16
 1005288:	1005bac0 	call	1005bac <__unpack_d>
 100528c:	d8800417 	ldw	r2,16(sp)
 1005290:	00c00044 	movi	r3,1
 1005294:	180d883a 	mov	r6,r3
 1005298:	1880062e 	bgeu	r3,r2,10052b4 <__eqdf2+0x70>
 100529c:	d8800917 	ldw	r2,36(sp)
 10052a0:	8809883a 	mov	r4,r17
 10052a4:	800b883a 	mov	r5,r16
 10052a8:	1880022e 	bgeu	r3,r2,10052b4 <__eqdf2+0x70>
 10052ac:	1005ce40 	call	1005ce4 <__fpcmp_parts_d>
 10052b0:	100d883a 	mov	r6,r2
 10052b4:	3005883a 	mov	r2,r6
 10052b8:	dfc01017 	ldw	ra,64(sp)
 10052bc:	dc400f17 	ldw	r17,60(sp)
 10052c0:	dc000e17 	ldw	r16,56(sp)
 10052c4:	dec01104 	addi	sp,sp,68
 10052c8:	f800283a 	ret

010052cc <__nedf2>:
 10052cc:	deffef04 	addi	sp,sp,-68
 10052d0:	dc400f15 	stw	r17,60(sp)
 10052d4:	dc400404 	addi	r17,sp,16
 10052d8:	2005883a 	mov	r2,r4
 10052dc:	2807883a 	mov	r3,r5
 10052e0:	dc000e15 	stw	r16,56(sp)
 10052e4:	d809883a 	mov	r4,sp
 10052e8:	880b883a 	mov	r5,r17
 10052ec:	dc000904 	addi	r16,sp,36
 10052f0:	d8c00115 	stw	r3,4(sp)
 10052f4:	d8800015 	stw	r2,0(sp)
 10052f8:	d9800215 	stw	r6,8(sp)
 10052fc:	dfc01015 	stw	ra,64(sp)
 1005300:	d9c00315 	stw	r7,12(sp)
 1005304:	1005bac0 	call	1005bac <__unpack_d>
 1005308:	d9000204 	addi	r4,sp,8
 100530c:	800b883a 	mov	r5,r16
 1005310:	1005bac0 	call	1005bac <__unpack_d>
 1005314:	d8800417 	ldw	r2,16(sp)
 1005318:	00c00044 	movi	r3,1
 100531c:	180d883a 	mov	r6,r3
 1005320:	1880062e 	bgeu	r3,r2,100533c <__nedf2+0x70>
 1005324:	d8800917 	ldw	r2,36(sp)
 1005328:	8809883a 	mov	r4,r17
 100532c:	800b883a 	mov	r5,r16
 1005330:	1880022e 	bgeu	r3,r2,100533c <__nedf2+0x70>
 1005334:	1005ce40 	call	1005ce4 <__fpcmp_parts_d>
 1005338:	100d883a 	mov	r6,r2
 100533c:	3005883a 	mov	r2,r6
 1005340:	dfc01017 	ldw	ra,64(sp)
 1005344:	dc400f17 	ldw	r17,60(sp)
 1005348:	dc000e17 	ldw	r16,56(sp)
 100534c:	dec01104 	addi	sp,sp,68
 1005350:	f800283a 	ret

01005354 <__gtdf2>:
 1005354:	deffef04 	addi	sp,sp,-68
 1005358:	dc400f15 	stw	r17,60(sp)
 100535c:	dc400404 	addi	r17,sp,16
 1005360:	2005883a 	mov	r2,r4
 1005364:	2807883a 	mov	r3,r5
 1005368:	dc000e15 	stw	r16,56(sp)
 100536c:	d809883a 	mov	r4,sp
 1005370:	880b883a 	mov	r5,r17
 1005374:	dc000904 	addi	r16,sp,36
 1005378:	d8c00115 	stw	r3,4(sp)
 100537c:	d8800015 	stw	r2,0(sp)
 1005380:	d9800215 	stw	r6,8(sp)
 1005384:	dfc01015 	stw	ra,64(sp)
 1005388:	d9c00315 	stw	r7,12(sp)
 100538c:	1005bac0 	call	1005bac <__unpack_d>
 1005390:	d9000204 	addi	r4,sp,8
 1005394:	800b883a 	mov	r5,r16
 1005398:	1005bac0 	call	1005bac <__unpack_d>
 100539c:	d8800417 	ldw	r2,16(sp)
 10053a0:	00c00044 	movi	r3,1
 10053a4:	01bfffc4 	movi	r6,-1
 10053a8:	1880062e 	bgeu	r3,r2,10053c4 <__gtdf2+0x70>
 10053ac:	d8800917 	ldw	r2,36(sp)
 10053b0:	8809883a 	mov	r4,r17
 10053b4:	800b883a 	mov	r5,r16
 10053b8:	1880022e 	bgeu	r3,r2,10053c4 <__gtdf2+0x70>
 10053bc:	1005ce40 	call	1005ce4 <__fpcmp_parts_d>
 10053c0:	100d883a 	mov	r6,r2
 10053c4:	3005883a 	mov	r2,r6
 10053c8:	dfc01017 	ldw	ra,64(sp)
 10053cc:	dc400f17 	ldw	r17,60(sp)
 10053d0:	dc000e17 	ldw	r16,56(sp)
 10053d4:	dec01104 	addi	sp,sp,68
 10053d8:	f800283a 	ret

010053dc <__gedf2>:
 10053dc:	deffef04 	addi	sp,sp,-68
 10053e0:	dc400f15 	stw	r17,60(sp)
 10053e4:	dc400404 	addi	r17,sp,16
 10053e8:	2005883a 	mov	r2,r4
 10053ec:	2807883a 	mov	r3,r5
 10053f0:	dc000e15 	stw	r16,56(sp)
 10053f4:	d809883a 	mov	r4,sp
 10053f8:	880b883a 	mov	r5,r17
 10053fc:	dc000904 	addi	r16,sp,36
 1005400:	d8c00115 	stw	r3,4(sp)
 1005404:	d8800015 	stw	r2,0(sp)
 1005408:	d9800215 	stw	r6,8(sp)
 100540c:	dfc01015 	stw	ra,64(sp)
 1005410:	d9c00315 	stw	r7,12(sp)
 1005414:	1005bac0 	call	1005bac <__unpack_d>
 1005418:	d9000204 	addi	r4,sp,8
 100541c:	800b883a 	mov	r5,r16
 1005420:	1005bac0 	call	1005bac <__unpack_d>
 1005424:	d8800417 	ldw	r2,16(sp)
 1005428:	00c00044 	movi	r3,1
 100542c:	01bfffc4 	movi	r6,-1
 1005430:	1880062e 	bgeu	r3,r2,100544c <__gedf2+0x70>
 1005434:	d8800917 	ldw	r2,36(sp)
 1005438:	8809883a 	mov	r4,r17
 100543c:	800b883a 	mov	r5,r16
 1005440:	1880022e 	bgeu	r3,r2,100544c <__gedf2+0x70>
 1005444:	1005ce40 	call	1005ce4 <__fpcmp_parts_d>
 1005448:	100d883a 	mov	r6,r2
 100544c:	3005883a 	mov	r2,r6
 1005450:	dfc01017 	ldw	ra,64(sp)
 1005454:	dc400f17 	ldw	r17,60(sp)
 1005458:	dc000e17 	ldw	r16,56(sp)
 100545c:	dec01104 	addi	sp,sp,68
 1005460:	f800283a 	ret

01005464 <__floatsidf>:
 1005464:	2006d7fa 	srli	r3,r4,31
 1005468:	defff604 	addi	sp,sp,-40
 100546c:	008000c4 	movi	r2,3
 1005470:	dfc00915 	stw	ra,36(sp)
 1005474:	dcc00815 	stw	r19,32(sp)
 1005478:	dc800715 	stw	r18,28(sp)
 100547c:	dc400615 	stw	r17,24(sp)
 1005480:	dc000515 	stw	r16,20(sp)
 1005484:	d8800015 	stw	r2,0(sp)
 1005488:	d8c00115 	stw	r3,4(sp)
 100548c:	20000f1e 	bne	r4,zero,10054cc <__floatsidf+0x68>
 1005490:	00800084 	movi	r2,2
 1005494:	d8800015 	stw	r2,0(sp)
 1005498:	d809883a 	mov	r4,sp
 100549c:	10058980 	call	1005898 <__pack_d>
 10054a0:	1009883a 	mov	r4,r2
 10054a4:	180b883a 	mov	r5,r3
 10054a8:	2005883a 	mov	r2,r4
 10054ac:	2807883a 	mov	r3,r5
 10054b0:	dfc00917 	ldw	ra,36(sp)
 10054b4:	dcc00817 	ldw	r19,32(sp)
 10054b8:	dc800717 	ldw	r18,28(sp)
 10054bc:	dc400617 	ldw	r17,24(sp)
 10054c0:	dc000517 	ldw	r16,20(sp)
 10054c4:	dec00a04 	addi	sp,sp,40
 10054c8:	f800283a 	ret
 10054cc:	00800f04 	movi	r2,60
 10054d0:	1807003a 	cmpeq	r3,r3,zero
 10054d4:	d8800215 	stw	r2,8(sp)
 10054d8:	18001126 	beq	r3,zero,1005520 <__floatsidf+0xbc>
 10054dc:	0027883a 	mov	r19,zero
 10054e0:	2025883a 	mov	r18,r4
 10054e4:	d9000315 	stw	r4,12(sp)
 10054e8:	dcc00415 	stw	r19,16(sp)
 10054ec:	10058180 	call	1005818 <__clzsi2>
 10054f0:	11000744 	addi	r4,r2,29
 10054f4:	013fe80e 	bge	zero,r4,1005498 <__floatsidf+0x34>
 10054f8:	10bfff44 	addi	r2,r2,-3
 10054fc:	10000c16 	blt	r2,zero,1005530 <__floatsidf+0xcc>
 1005500:	90a2983a 	sll	r17,r18,r2
 1005504:	0021883a 	mov	r16,zero
 1005508:	d8800217 	ldw	r2,8(sp)
 100550c:	dc400415 	stw	r17,16(sp)
 1005510:	dc000315 	stw	r16,12(sp)
 1005514:	1105c83a 	sub	r2,r2,r4
 1005518:	d8800215 	stw	r2,8(sp)
 100551c:	003fde06 	br	1005498 <__floatsidf+0x34>
 1005520:	00a00034 	movhi	r2,32768
 1005524:	20800a26 	beq	r4,r2,1005550 <__floatsidf+0xec>
 1005528:	0109c83a 	sub	r4,zero,r4
 100552c:	003feb06 	br	10054dc <__floatsidf+0x78>
 1005530:	9006d07a 	srli	r3,r18,1
 1005534:	008007c4 	movi	r2,31
 1005538:	1105c83a 	sub	r2,r2,r4
 100553c:	1886d83a 	srl	r3,r3,r2
 1005540:	9922983a 	sll	r17,r19,r4
 1005544:	9120983a 	sll	r16,r18,r4
 1005548:	1c62b03a 	or	r17,r3,r17
 100554c:	003fee06 	br	1005508 <__floatsidf+0xa4>
 1005550:	0009883a 	mov	r4,zero
 1005554:	01707834 	movhi	r5,49632
 1005558:	003fd306 	br	10054a8 <__floatsidf+0x44>

0100555c <__fixdfsi>:
 100555c:	defff804 	addi	sp,sp,-32
 1005560:	2005883a 	mov	r2,r4
 1005564:	2807883a 	mov	r3,r5
 1005568:	d809883a 	mov	r4,sp
 100556c:	d9400204 	addi	r5,sp,8
 1005570:	d8c00115 	stw	r3,4(sp)
 1005574:	d8800015 	stw	r2,0(sp)
 1005578:	dfc00715 	stw	ra,28(sp)
 100557c:	1005bac0 	call	1005bac <__unpack_d>
 1005580:	d8c00217 	ldw	r3,8(sp)
 1005584:	00800084 	movi	r2,2
 1005588:	1880051e 	bne	r3,r2,10055a0 <__fixdfsi+0x44>
 100558c:	0007883a 	mov	r3,zero
 1005590:	1805883a 	mov	r2,r3
 1005594:	dfc00717 	ldw	ra,28(sp)
 1005598:	dec00804 	addi	sp,sp,32
 100559c:	f800283a 	ret
 10055a0:	00800044 	movi	r2,1
 10055a4:	10fff92e 	bgeu	r2,r3,100558c <__fixdfsi+0x30>
 10055a8:	00800104 	movi	r2,4
 10055ac:	18800426 	beq	r3,r2,10055c0 <__fixdfsi+0x64>
 10055b0:	d8c00417 	ldw	r3,16(sp)
 10055b4:	183ff516 	blt	r3,zero,100558c <__fixdfsi+0x30>
 10055b8:	00800784 	movi	r2,30
 10055bc:	10c0080e 	bge	r2,r3,10055e0 <__fixdfsi+0x84>
 10055c0:	d8800317 	ldw	r2,12(sp)
 10055c4:	1000121e 	bne	r2,zero,1005610 <__fixdfsi+0xb4>
 10055c8:	00e00034 	movhi	r3,32768
 10055cc:	18ffffc4 	addi	r3,r3,-1
 10055d0:	1805883a 	mov	r2,r3
 10055d4:	dfc00717 	ldw	ra,28(sp)
 10055d8:	dec00804 	addi	sp,sp,32
 10055dc:	f800283a 	ret
 10055e0:	00800f04 	movi	r2,60
 10055e4:	10d1c83a 	sub	r8,r2,r3
 10055e8:	40bff804 	addi	r2,r8,-32
 10055ec:	d9800517 	ldw	r6,20(sp)
 10055f0:	d9c00617 	ldw	r7,24(sp)
 10055f4:	10000816 	blt	r2,zero,1005618 <__fixdfsi+0xbc>
 10055f8:	3888d83a 	srl	r4,r7,r2
 10055fc:	d8800317 	ldw	r2,12(sp)
 1005600:	2007883a 	mov	r3,r4
 1005604:	103fe226 	beq	r2,zero,1005590 <__fixdfsi+0x34>
 1005608:	0107c83a 	sub	r3,zero,r4
 100560c:	003fe006 	br	1005590 <__fixdfsi+0x34>
 1005610:	00e00034 	movhi	r3,32768
 1005614:	003fde06 	br	1005590 <__fixdfsi+0x34>
 1005618:	39c7883a 	add	r3,r7,r7
 100561c:	008007c4 	movi	r2,31
 1005620:	1205c83a 	sub	r2,r2,r8
 1005624:	1886983a 	sll	r3,r3,r2
 1005628:	3208d83a 	srl	r4,r6,r8
 100562c:	1908b03a 	or	r4,r3,r4
 1005630:	003ff206 	br	10055fc <__fixdfsi+0xa0>

01005634 <udivmodsi4>:
 1005634:	29001b2e 	bgeu	r5,r4,10056a4 <udivmodsi4+0x70>
 1005638:	28001a16 	blt	r5,zero,10056a4 <udivmodsi4+0x70>
 100563c:	00800044 	movi	r2,1
 1005640:	0007883a 	mov	r3,zero
 1005644:	01c007c4 	movi	r7,31
 1005648:	00000306 	br	1005658 <udivmodsi4+0x24>
 100564c:	19c01326 	beq	r3,r7,100569c <udivmodsi4+0x68>
 1005650:	18c00044 	addi	r3,r3,1
 1005654:	28000416 	blt	r5,zero,1005668 <udivmodsi4+0x34>
 1005658:	294b883a 	add	r5,r5,r5
 100565c:	1085883a 	add	r2,r2,r2
 1005660:	293ffa36 	bltu	r5,r4,100564c <udivmodsi4+0x18>
 1005664:	10000d26 	beq	r2,zero,100569c <udivmodsi4+0x68>
 1005668:	0007883a 	mov	r3,zero
 100566c:	21400236 	bltu	r4,r5,1005678 <udivmodsi4+0x44>
 1005670:	2149c83a 	sub	r4,r4,r5
 1005674:	1886b03a 	or	r3,r3,r2
 1005678:	1004d07a 	srli	r2,r2,1
 100567c:	280ad07a 	srli	r5,r5,1
 1005680:	103ffa1e 	bne	r2,zero,100566c <udivmodsi4+0x38>
 1005684:	30000226 	beq	r6,zero,1005690 <udivmodsi4+0x5c>
 1005688:	2005883a 	mov	r2,r4
 100568c:	f800283a 	ret
 1005690:	1809883a 	mov	r4,r3
 1005694:	2005883a 	mov	r2,r4
 1005698:	f800283a 	ret
 100569c:	0007883a 	mov	r3,zero
 10056a0:	003ff806 	br	1005684 <udivmodsi4+0x50>
 10056a4:	00800044 	movi	r2,1
 10056a8:	0007883a 	mov	r3,zero
 10056ac:	003fef06 	br	100566c <udivmodsi4+0x38>

010056b0 <__divsi3>:
 10056b0:	defffe04 	addi	sp,sp,-8
 10056b4:	dc000015 	stw	r16,0(sp)
 10056b8:	dfc00115 	stw	ra,4(sp)
 10056bc:	0021883a 	mov	r16,zero
 10056c0:	20000c16 	blt	r4,zero,10056f4 <__divsi3+0x44>
 10056c4:	000d883a 	mov	r6,zero
 10056c8:	28000e16 	blt	r5,zero,1005704 <__divsi3+0x54>
 10056cc:	10056340 	call	1005634 <udivmodsi4>
 10056d0:	1007883a 	mov	r3,r2
 10056d4:	8005003a 	cmpeq	r2,r16,zero
 10056d8:	1000011e 	bne	r2,zero,10056e0 <__divsi3+0x30>
 10056dc:	00c7c83a 	sub	r3,zero,r3
 10056e0:	1805883a 	mov	r2,r3
 10056e4:	dfc00117 	ldw	ra,4(sp)
 10056e8:	dc000017 	ldw	r16,0(sp)
 10056ec:	dec00204 	addi	sp,sp,8
 10056f0:	f800283a 	ret
 10056f4:	0109c83a 	sub	r4,zero,r4
 10056f8:	04000044 	movi	r16,1
 10056fc:	000d883a 	mov	r6,zero
 1005700:	283ff20e 	bge	r5,zero,10056cc <__divsi3+0x1c>
 1005704:	014bc83a 	sub	r5,zero,r5
 1005708:	8021003a 	cmpeq	r16,r16,zero
 100570c:	003fef06 	br	10056cc <__divsi3+0x1c>

01005710 <__modsi3>:
 1005710:	deffff04 	addi	sp,sp,-4
 1005714:	dfc00015 	stw	ra,0(sp)
 1005718:	01800044 	movi	r6,1
 100571c:	2807883a 	mov	r3,r5
 1005720:	20000416 	blt	r4,zero,1005734 <__modsi3+0x24>
 1005724:	28000c16 	blt	r5,zero,1005758 <__modsi3+0x48>
 1005728:	dfc00017 	ldw	ra,0(sp)
 100572c:	dec00104 	addi	sp,sp,4
 1005730:	10056341 	jmpi	1005634 <udivmodsi4>
 1005734:	0109c83a 	sub	r4,zero,r4
 1005738:	28000b16 	blt	r5,zero,1005768 <__modsi3+0x58>
 100573c:	180b883a 	mov	r5,r3
 1005740:	01800044 	movi	r6,1
 1005744:	10056340 	call	1005634 <udivmodsi4>
 1005748:	0085c83a 	sub	r2,zero,r2
 100574c:	dfc00017 	ldw	ra,0(sp)
 1005750:	dec00104 	addi	sp,sp,4
 1005754:	f800283a 	ret
 1005758:	014bc83a 	sub	r5,zero,r5
 100575c:	dfc00017 	ldw	ra,0(sp)
 1005760:	dec00104 	addi	sp,sp,4
 1005764:	10056341 	jmpi	1005634 <udivmodsi4>
 1005768:	0147c83a 	sub	r3,zero,r5
 100576c:	003ff306 	br	100573c <__modsi3+0x2c>

01005770 <__udivsi3>:
 1005770:	000d883a 	mov	r6,zero
 1005774:	10056341 	jmpi	1005634 <udivmodsi4>

01005778 <__umodsi3>:
 1005778:	01800044 	movi	r6,1
 100577c:	10056341 	jmpi	1005634 <udivmodsi4>

01005780 <__muldi3>:
 1005780:	2011883a 	mov	r8,r4
 1005784:	427fffcc 	andi	r9,r8,65535
 1005788:	4018d43a 	srli	r12,r8,16
 100578c:	32bfffcc 	andi	r10,r6,65535
 1005790:	3016d43a 	srli	r11,r6,16
 1005794:	4a85383a 	mul	r2,r9,r10
 1005798:	6295383a 	mul	r10,r12,r10
 100579c:	4ad3383a 	mul	r9,r9,r11
 10057a0:	113fffcc 	andi	r4,r2,65535
 10057a4:	1004d43a 	srli	r2,r2,16
 10057a8:	4a93883a 	add	r9,r9,r10
 10057ac:	3807883a 	mov	r3,r7
 10057b0:	1245883a 	add	r2,r2,r9
 10057b4:	280f883a 	mov	r7,r5
 10057b8:	180b883a 	mov	r5,r3
 10057bc:	1006943a 	slli	r3,r2,16
 10057c0:	defffd04 	addi	sp,sp,-12
 10057c4:	dc800215 	stw	r18,8(sp)
 10057c8:	1907883a 	add	r3,r3,r4
 10057cc:	dc400115 	stw	r17,4(sp)
 10057d0:	dc000015 	stw	r16,0(sp)
 10057d4:	4165383a 	mul	r18,r8,r5
 10057d8:	31e3383a 	mul	r17,r6,r7
 10057dc:	1012d43a 	srli	r9,r2,16
 10057e0:	62d9383a 	mul	r12,r12,r11
 10057e4:	181f883a 	mov	r15,r3
 10057e8:	1280022e 	bgeu	r2,r10,10057f4 <__muldi3+0x74>
 10057ec:	00800074 	movhi	r2,1
 10057f0:	6099883a 	add	r12,r12,r2
 10057f4:	624d883a 	add	r6,r12,r9
 10057f8:	9187883a 	add	r3,r18,r6
 10057fc:	88c7883a 	add	r3,r17,r3
 1005800:	7805883a 	mov	r2,r15
 1005804:	dc800217 	ldw	r18,8(sp)
 1005808:	dc400117 	ldw	r17,4(sp)
 100580c:	dc000017 	ldw	r16,0(sp)
 1005810:	dec00304 	addi	sp,sp,12
 1005814:	f800283a 	ret

01005818 <__clzsi2>:
 1005818:	00bfffd4 	movui	r2,65535
 100581c:	11000e36 	bltu	r2,r4,1005858 <__clzsi2+0x40>
 1005820:	00803fc4 	movi	r2,255
 1005824:	01400204 	movi	r5,8
 1005828:	0007883a 	mov	r3,zero
 100582c:	11001036 	bltu	r2,r4,1005870 <__clzsi2+0x58>
 1005830:	000b883a 	mov	r5,zero
 1005834:	20c6d83a 	srl	r3,r4,r3
 1005838:	008040b4 	movhi	r2,258
 100583c:	10bcaa04 	addi	r2,r2,-3416
 1005840:	1887883a 	add	r3,r3,r2
 1005844:	18800003 	ldbu	r2,0(r3)
 1005848:	00c00804 	movi	r3,32
 100584c:	2885883a 	add	r2,r5,r2
 1005850:	1885c83a 	sub	r2,r3,r2
 1005854:	f800283a 	ret
 1005858:	01400404 	movi	r5,16
 100585c:	00804034 	movhi	r2,256
 1005860:	10bfffc4 	addi	r2,r2,-1
 1005864:	2807883a 	mov	r3,r5
 1005868:	113ff22e 	bgeu	r2,r4,1005834 <__clzsi2+0x1c>
 100586c:	01400604 	movi	r5,24
 1005870:	2807883a 	mov	r3,r5
 1005874:	20c6d83a 	srl	r3,r4,r3
 1005878:	008040b4 	movhi	r2,258
 100587c:	10bcaa04 	addi	r2,r2,-3416
 1005880:	1887883a 	add	r3,r3,r2
 1005884:	18800003 	ldbu	r2,0(r3)
 1005888:	00c00804 	movi	r3,32
 100588c:	2885883a 	add	r2,r5,r2
 1005890:	1885c83a 	sub	r2,r3,r2
 1005894:	f800283a 	ret

01005898 <__pack_d>:
 1005898:	20c00017 	ldw	r3,0(r4)
 100589c:	defffd04 	addi	sp,sp,-12
 10058a0:	dc000015 	stw	r16,0(sp)
 10058a4:	dc800215 	stw	r18,8(sp)
 10058a8:	dc400115 	stw	r17,4(sp)
 10058ac:	00800044 	movi	r2,1
 10058b0:	22000317 	ldw	r8,12(r4)
 10058b4:	001f883a 	mov	r15,zero
 10058b8:	22400417 	ldw	r9,16(r4)
 10058bc:	24000117 	ldw	r16,4(r4)
 10058c0:	10c0552e 	bgeu	r2,r3,1005a18 <__pack_d+0x180>
 10058c4:	00800104 	movi	r2,4
 10058c8:	18804f26 	beq	r3,r2,1005a08 <__pack_d+0x170>
 10058cc:	00800084 	movi	r2,2
 10058d0:	18800226 	beq	r3,r2,10058dc <__pack_d+0x44>
 10058d4:	4244b03a 	or	r2,r8,r9
 10058d8:	10001a1e 	bne	r2,zero,1005944 <__pack_d+0xac>
 10058dc:	000d883a 	mov	r6,zero
 10058e0:	000f883a 	mov	r7,zero
 10058e4:	0011883a 	mov	r8,zero
 10058e8:	00800434 	movhi	r2,16
 10058ec:	10bfffc4 	addi	r2,r2,-1
 10058f0:	301d883a 	mov	r14,r6
 10058f4:	3884703a 	and	r2,r7,r2
 10058f8:	400a953a 	slli	r5,r8,20
 10058fc:	79bffc2c 	andhi	r6,r15,65520
 1005900:	308cb03a 	or	r6,r6,r2
 1005904:	00e00434 	movhi	r3,32784
 1005908:	18ffffc4 	addi	r3,r3,-1
 100590c:	800497fa 	slli	r2,r16,31
 1005910:	30c6703a 	and	r3,r6,r3
 1005914:	1946b03a 	or	r3,r3,r5
 1005918:	01600034 	movhi	r5,32768
 100591c:	297fffc4 	addi	r5,r5,-1
 1005920:	194a703a 	and	r5,r3,r5
 1005924:	288ab03a 	or	r5,r5,r2
 1005928:	2807883a 	mov	r3,r5
 100592c:	7005883a 	mov	r2,r14
 1005930:	dc800217 	ldw	r18,8(sp)
 1005934:	dc400117 	ldw	r17,4(sp)
 1005938:	dc000017 	ldw	r16,0(sp)
 100593c:	dec00304 	addi	sp,sp,12
 1005940:	f800283a 	ret
 1005944:	21000217 	ldw	r4,8(r4)
 1005948:	00bf0084 	movi	r2,-1022
 100594c:	20803f16 	blt	r4,r2,1005a4c <__pack_d+0x1b4>
 1005950:	0080ffc4 	movi	r2,1023
 1005954:	11002c16 	blt	r2,r4,1005a08 <__pack_d+0x170>
 1005958:	00803fc4 	movi	r2,255
 100595c:	408c703a 	and	r6,r8,r2
 1005960:	00802004 	movi	r2,128
 1005964:	0007883a 	mov	r3,zero
 1005968:	000f883a 	mov	r7,zero
 100596c:	2280ffc4 	addi	r10,r4,1023
 1005970:	30801e26 	beq	r6,r2,10059ec <__pack_d+0x154>
 1005974:	00801fc4 	movi	r2,127
 1005978:	4089883a 	add	r4,r8,r2
 100597c:	220d803a 	cmpltu	r6,r4,r8
 1005980:	324d883a 	add	r6,r6,r9
 1005984:	2011883a 	mov	r8,r4
 1005988:	3013883a 	mov	r9,r6
 100598c:	00880034 	movhi	r2,8192
 1005990:	10bfffc4 	addi	r2,r2,-1
 1005994:	12400d36 	bltu	r2,r9,10059cc <__pack_d+0x134>
 1005998:	4804963a 	slli	r2,r9,24
 100599c:	400cd23a 	srli	r6,r8,8
 10059a0:	480ed23a 	srli	r7,r9,8
 10059a4:	013fffc4 	movi	r4,-1
 10059a8:	118cb03a 	or	r6,r2,r6
 10059ac:	01400434 	movhi	r5,16
 10059b0:	297fffc4 	addi	r5,r5,-1
 10059b4:	3104703a 	and	r2,r6,r4
 10059b8:	3946703a 	and	r3,r7,r5
 10059bc:	5201ffcc 	andi	r8,r10,2047
 10059c0:	100d883a 	mov	r6,r2
 10059c4:	180f883a 	mov	r7,r3
 10059c8:	003fc706 	br	10058e8 <__pack_d+0x50>
 10059cc:	480897fa 	slli	r4,r9,31
 10059d0:	4004d07a 	srli	r2,r8,1
 10059d4:	4806d07a 	srli	r3,r9,1
 10059d8:	52800044 	addi	r10,r10,1
 10059dc:	2084b03a 	or	r2,r4,r2
 10059e0:	1011883a 	mov	r8,r2
 10059e4:	1813883a 	mov	r9,r3
 10059e8:	003feb06 	br	1005998 <__pack_d+0x100>
 10059ec:	383fe11e 	bne	r7,zero,1005974 <__pack_d+0xdc>
 10059f0:	01004004 	movi	r4,256
 10059f4:	4104703a 	and	r2,r8,r4
 10059f8:	10c4b03a 	or	r2,r2,r3
 10059fc:	103fe326 	beq	r2,zero,100598c <__pack_d+0xf4>
 1005a00:	3005883a 	mov	r2,r6
 1005a04:	003fdc06 	br	1005978 <__pack_d+0xe0>
 1005a08:	000d883a 	mov	r6,zero
 1005a0c:	000f883a 	mov	r7,zero
 1005a10:	0201ffc4 	movi	r8,2047
 1005a14:	003fb406 	br	10058e8 <__pack_d+0x50>
 1005a18:	0005883a 	mov	r2,zero
 1005a1c:	00c00234 	movhi	r3,8
 1005a20:	408cb03a 	or	r6,r8,r2
 1005a24:	48ceb03a 	or	r7,r9,r3
 1005a28:	013fffc4 	movi	r4,-1
 1005a2c:	01400434 	movhi	r5,16
 1005a30:	297fffc4 	addi	r5,r5,-1
 1005a34:	3104703a 	and	r2,r6,r4
 1005a38:	3946703a 	and	r3,r7,r5
 1005a3c:	100d883a 	mov	r6,r2
 1005a40:	180f883a 	mov	r7,r3
 1005a44:	0201ffc4 	movi	r8,2047
 1005a48:	003fa706 	br	10058e8 <__pack_d+0x50>
 1005a4c:	1109c83a 	sub	r4,r2,r4
 1005a50:	00800e04 	movi	r2,56
 1005a54:	11004316 	blt	r2,r4,1005b64 <__pack_d+0x2cc>
 1005a58:	21fff804 	addi	r7,r4,-32
 1005a5c:	38004516 	blt	r7,zero,1005b74 <__pack_d+0x2dc>
 1005a60:	49d8d83a 	srl	r12,r9,r7
 1005a64:	001b883a 	mov	r13,zero
 1005a68:	0023883a 	mov	r17,zero
 1005a6c:	01400044 	movi	r5,1
 1005a70:	0025883a 	mov	r18,zero
 1005a74:	38004716 	blt	r7,zero,1005b94 <__pack_d+0x2fc>
 1005a78:	29d6983a 	sll	r11,r5,r7
 1005a7c:	0015883a 	mov	r10,zero
 1005a80:	00bfffc4 	movi	r2,-1
 1005a84:	5089883a 	add	r4,r10,r2
 1005a88:	588b883a 	add	r5,r11,r2
 1005a8c:	228d803a 	cmpltu	r6,r4,r10
 1005a90:	314b883a 	add	r5,r6,r5
 1005a94:	4104703a 	and	r2,r8,r4
 1005a98:	4946703a 	and	r3,r9,r5
 1005a9c:	10c4b03a 	or	r2,r2,r3
 1005aa0:	10000226 	beq	r2,zero,1005aac <__pack_d+0x214>
 1005aa4:	04400044 	movi	r17,1
 1005aa8:	0025883a 	mov	r18,zero
 1005aac:	00803fc4 	movi	r2,255
 1005ab0:	644eb03a 	or	r7,r12,r17
 1005ab4:	3892703a 	and	r9,r7,r2
 1005ab8:	00802004 	movi	r2,128
 1005abc:	6c90b03a 	or	r8,r13,r18
 1005ac0:	0015883a 	mov	r10,zero
 1005ac4:	48801626 	beq	r9,r2,1005b20 <__pack_d+0x288>
 1005ac8:	01001fc4 	movi	r4,127
 1005acc:	3905883a 	add	r2,r7,r4
 1005ad0:	11cd803a 	cmpltu	r6,r2,r7
 1005ad4:	320d883a 	add	r6,r6,r8
 1005ad8:	100f883a 	mov	r7,r2
 1005adc:	00840034 	movhi	r2,4096
 1005ae0:	10bfffc4 	addi	r2,r2,-1
 1005ae4:	3011883a 	mov	r8,r6
 1005ae8:	0007883a 	mov	r3,zero
 1005aec:	11801b36 	bltu	r2,r6,1005b5c <__pack_d+0x2c4>
 1005af0:	4004963a 	slli	r2,r8,24
 1005af4:	3808d23a 	srli	r4,r7,8
 1005af8:	400ad23a 	srli	r5,r8,8
 1005afc:	1813883a 	mov	r9,r3
 1005b00:	1108b03a 	or	r4,r2,r4
 1005b04:	00bfffc4 	movi	r2,-1
 1005b08:	00c00434 	movhi	r3,16
 1005b0c:	18ffffc4 	addi	r3,r3,-1
 1005b10:	208c703a 	and	r6,r4,r2
 1005b14:	28ce703a 	and	r7,r5,r3
 1005b18:	4a01ffcc 	andi	r8,r9,2047
 1005b1c:	003f7206 	br	10058e8 <__pack_d+0x50>
 1005b20:	503fe91e 	bne	r10,zero,1005ac8 <__pack_d+0x230>
 1005b24:	01004004 	movi	r4,256
 1005b28:	3904703a 	and	r2,r7,r4
 1005b2c:	0007883a 	mov	r3,zero
 1005b30:	10c4b03a 	or	r2,r2,r3
 1005b34:	10000626 	beq	r2,zero,1005b50 <__pack_d+0x2b8>
 1005b38:	3a45883a 	add	r2,r7,r9
 1005b3c:	11cd803a 	cmpltu	r6,r2,r7
 1005b40:	320d883a 	add	r6,r6,r8
 1005b44:	100f883a 	mov	r7,r2
 1005b48:	3011883a 	mov	r8,r6
 1005b4c:	0007883a 	mov	r3,zero
 1005b50:	00840034 	movhi	r2,4096
 1005b54:	10bfffc4 	addi	r2,r2,-1
 1005b58:	123fe52e 	bgeu	r2,r8,1005af0 <__pack_d+0x258>
 1005b5c:	00c00044 	movi	r3,1
 1005b60:	003fe306 	br	1005af0 <__pack_d+0x258>
 1005b64:	0009883a 	mov	r4,zero
 1005b68:	0013883a 	mov	r9,zero
 1005b6c:	000b883a 	mov	r5,zero
 1005b70:	003fe406 	br	1005b04 <__pack_d+0x26c>
 1005b74:	4a47883a 	add	r3,r9,r9
 1005b78:	008007c4 	movi	r2,31
 1005b7c:	1105c83a 	sub	r2,r2,r4
 1005b80:	1886983a 	sll	r3,r3,r2
 1005b84:	4118d83a 	srl	r12,r8,r4
 1005b88:	491ad83a 	srl	r13,r9,r4
 1005b8c:	1b18b03a 	or	r12,r3,r12
 1005b90:	003fb506 	br	1005a68 <__pack_d+0x1d0>
 1005b94:	2806d07a 	srli	r3,r5,1
 1005b98:	008007c4 	movi	r2,31
 1005b9c:	1105c83a 	sub	r2,r2,r4
 1005ba0:	1896d83a 	srl	r11,r3,r2
 1005ba4:	2914983a 	sll	r10,r5,r4
 1005ba8:	003fb506 	br	1005a80 <__pack_d+0x1e8>

01005bac <__unpack_d>:
 1005bac:	20c00117 	ldw	r3,4(r4)
 1005bb0:	22400017 	ldw	r9,0(r4)
 1005bb4:	00800434 	movhi	r2,16
 1005bb8:	10bfffc4 	addi	r2,r2,-1
 1005bbc:	1808d53a 	srli	r4,r3,20
 1005bc0:	180cd7fa 	srli	r6,r3,31
 1005bc4:	1894703a 	and	r10,r3,r2
 1005bc8:	2201ffcc 	andi	r8,r4,2047
 1005bcc:	281b883a 	mov	r13,r5
 1005bd0:	4817883a 	mov	r11,r9
 1005bd4:	29800115 	stw	r6,4(r5)
 1005bd8:	5019883a 	mov	r12,r10
 1005bdc:	40001e1e 	bne	r8,zero,1005c58 <__unpack_d+0xac>
 1005be0:	4a84b03a 	or	r2,r9,r10
 1005be4:	10001926 	beq	r2,zero,1005c4c <__unpack_d+0xa0>
 1005be8:	4804d63a 	srli	r2,r9,24
 1005bec:	500c923a 	slli	r6,r10,8
 1005bf0:	013f0084 	movi	r4,-1022
 1005bf4:	00c40034 	movhi	r3,4096
 1005bf8:	18ffffc4 	addi	r3,r3,-1
 1005bfc:	118cb03a 	or	r6,r2,r6
 1005c00:	008000c4 	movi	r2,3
 1005c04:	480a923a 	slli	r5,r9,8
 1005c08:	68800015 	stw	r2,0(r13)
 1005c0c:	69000215 	stw	r4,8(r13)
 1005c10:	19800b36 	bltu	r3,r6,1005c40 <__unpack_d+0x94>
 1005c14:	200f883a 	mov	r7,r4
 1005c18:	1811883a 	mov	r8,r3
 1005c1c:	2945883a 	add	r2,r5,r5
 1005c20:	1149803a 	cmpltu	r4,r2,r5
 1005c24:	3187883a 	add	r3,r6,r6
 1005c28:	20c9883a 	add	r4,r4,r3
 1005c2c:	100b883a 	mov	r5,r2
 1005c30:	200d883a 	mov	r6,r4
 1005c34:	39ffffc4 	addi	r7,r7,-1
 1005c38:	413ff82e 	bgeu	r8,r4,1005c1c <__unpack_d+0x70>
 1005c3c:	69c00215 	stw	r7,8(r13)
 1005c40:	69800415 	stw	r6,16(r13)
 1005c44:	69400315 	stw	r5,12(r13)
 1005c48:	f800283a 	ret
 1005c4c:	00800084 	movi	r2,2
 1005c50:	28800015 	stw	r2,0(r5)
 1005c54:	f800283a 	ret
 1005c58:	0081ffc4 	movi	r2,2047
 1005c5c:	40800f26 	beq	r8,r2,1005c9c <__unpack_d+0xf0>
 1005c60:	480cd63a 	srli	r6,r9,24
 1005c64:	5006923a 	slli	r3,r10,8
 1005c68:	4804923a 	slli	r2,r9,8
 1005c6c:	0009883a 	mov	r4,zero
 1005c70:	30c6b03a 	or	r3,r6,r3
 1005c74:	01440034 	movhi	r5,4096
 1005c78:	110cb03a 	or	r6,r2,r4
 1005c7c:	423f0044 	addi	r8,r8,-1023
 1005c80:	194eb03a 	or	r7,r3,r5
 1005c84:	008000c4 	movi	r2,3
 1005c88:	69c00415 	stw	r7,16(r13)
 1005c8c:	6a000215 	stw	r8,8(r13)
 1005c90:	68800015 	stw	r2,0(r13)
 1005c94:	69800315 	stw	r6,12(r13)
 1005c98:	f800283a 	ret
 1005c9c:	4a84b03a 	or	r2,r9,r10
 1005ca0:	1000031e 	bne	r2,zero,1005cb0 <__unpack_d+0x104>
 1005ca4:	00800104 	movi	r2,4
 1005ca8:	28800015 	stw	r2,0(r5)
 1005cac:	f800283a 	ret
 1005cb0:	0009883a 	mov	r4,zero
 1005cb4:	01400234 	movhi	r5,8
 1005cb8:	4904703a 	and	r2,r9,r4
 1005cbc:	5146703a 	and	r3,r10,r5
 1005cc0:	10c4b03a 	or	r2,r2,r3
 1005cc4:	10000526 	beq	r2,zero,1005cdc <__unpack_d+0x130>
 1005cc8:	00800044 	movi	r2,1
 1005ccc:	68800015 	stw	r2,0(r13)
 1005cd0:	6b000415 	stw	r12,16(r13)
 1005cd4:	6ac00315 	stw	r11,12(r13)
 1005cd8:	f800283a 	ret
 1005cdc:	68000015 	stw	zero,0(r13)
 1005ce0:	003ffb06 	br	1005cd0 <__unpack_d+0x124>

01005ce4 <__fpcmp_parts_d>:
 1005ce4:	21800017 	ldw	r6,0(r4)
 1005ce8:	00c00044 	movi	r3,1
 1005cec:	19800a2e 	bgeu	r3,r6,1005d18 <__fpcmp_parts_d+0x34>
 1005cf0:	28800017 	ldw	r2,0(r5)
 1005cf4:	1880082e 	bgeu	r3,r2,1005d18 <__fpcmp_parts_d+0x34>
 1005cf8:	00c00104 	movi	r3,4
 1005cfc:	30c02626 	beq	r6,r3,1005d98 <__fpcmp_parts_d+0xb4>
 1005d00:	10c02226 	beq	r2,r3,1005d8c <__fpcmp_parts_d+0xa8>
 1005d04:	00c00084 	movi	r3,2
 1005d08:	30c00526 	beq	r6,r3,1005d20 <__fpcmp_parts_d+0x3c>
 1005d0c:	10c0071e 	bne	r2,r3,1005d2c <__fpcmp_parts_d+0x48>
 1005d10:	20800117 	ldw	r2,4(r4)
 1005d14:	1000091e 	bne	r2,zero,1005d3c <__fpcmp_parts_d+0x58>
 1005d18:	00800044 	movi	r2,1
 1005d1c:	f800283a 	ret
 1005d20:	10c01a1e 	bne	r2,r3,1005d8c <__fpcmp_parts_d+0xa8>
 1005d24:	0005883a 	mov	r2,zero
 1005d28:	f800283a 	ret
 1005d2c:	22000117 	ldw	r8,4(r4)
 1005d30:	28800117 	ldw	r2,4(r5)
 1005d34:	40800326 	beq	r8,r2,1005d44 <__fpcmp_parts_d+0x60>
 1005d38:	403ff726 	beq	r8,zero,1005d18 <__fpcmp_parts_d+0x34>
 1005d3c:	00bfffc4 	movi	r2,-1
 1005d40:	f800283a 	ret
 1005d44:	20c00217 	ldw	r3,8(r4)
 1005d48:	28800217 	ldw	r2,8(r5)
 1005d4c:	10fffa16 	blt	r2,r3,1005d38 <__fpcmp_parts_d+0x54>
 1005d50:	18800916 	blt	r3,r2,1005d78 <__fpcmp_parts_d+0x94>
 1005d54:	21c00417 	ldw	r7,16(r4)
 1005d58:	28c00417 	ldw	r3,16(r5)
 1005d5c:	21800317 	ldw	r6,12(r4)
 1005d60:	28800317 	ldw	r2,12(r5)
 1005d64:	19fff436 	bltu	r3,r7,1005d38 <__fpcmp_parts_d+0x54>
 1005d68:	38c00526 	beq	r7,r3,1005d80 <__fpcmp_parts_d+0x9c>
 1005d6c:	38c00236 	bltu	r7,r3,1005d78 <__fpcmp_parts_d+0x94>
 1005d70:	19ffec1e 	bne	r3,r7,1005d24 <__fpcmp_parts_d+0x40>
 1005d74:	30bfeb2e 	bgeu	r6,r2,1005d24 <__fpcmp_parts_d+0x40>
 1005d78:	403fe71e 	bne	r8,zero,1005d18 <__fpcmp_parts_d+0x34>
 1005d7c:	003fef06 	br	1005d3c <__fpcmp_parts_d+0x58>
 1005d80:	11bffa2e 	bgeu	r2,r6,1005d6c <__fpcmp_parts_d+0x88>
 1005d84:	403fe426 	beq	r8,zero,1005d18 <__fpcmp_parts_d+0x34>
 1005d88:	003fec06 	br	1005d3c <__fpcmp_parts_d+0x58>
 1005d8c:	28800117 	ldw	r2,4(r5)
 1005d90:	103fe11e 	bne	r2,zero,1005d18 <__fpcmp_parts_d+0x34>
 1005d94:	003fe906 	br	1005d3c <__fpcmp_parts_d+0x58>
 1005d98:	11bfdd1e 	bne	r2,r6,1005d10 <__fpcmp_parts_d+0x2c>
 1005d9c:	28c00117 	ldw	r3,4(r5)
 1005da0:	20800117 	ldw	r2,4(r4)
 1005da4:	1885c83a 	sub	r2,r3,r2
 1005da8:	f800283a 	ret

01005dac <free>:
 1005dac:	008040b4 	movhi	r2,258
 1005db0:	1086c504 	addi	r2,r2,6932
 1005db4:	200b883a 	mov	r5,r4
 1005db8:	11000017 	ldw	r4,0(r2)
 1005dbc:	100c16c1 	jmpi	100c16c <_free_r>

01005dc0 <malloc>:
 1005dc0:	008040b4 	movhi	r2,258
 1005dc4:	1086c504 	addi	r2,r2,6932
 1005dc8:	200b883a 	mov	r5,r4
 1005dcc:	11000017 	ldw	r4,0(r2)
 1005dd0:	1005dd41 	jmpi	1005dd4 <_malloc_r>

01005dd4 <_malloc_r>:
 1005dd4:	defff604 	addi	sp,sp,-40
 1005dd8:	28c002c4 	addi	r3,r5,11
 1005ddc:	00800584 	movi	r2,22
 1005de0:	dc800215 	stw	r18,8(sp)
 1005de4:	dfc00915 	stw	ra,36(sp)
 1005de8:	df000815 	stw	fp,32(sp)
 1005dec:	ddc00715 	stw	r23,28(sp)
 1005df0:	dd800615 	stw	r22,24(sp)
 1005df4:	dd400515 	stw	r21,20(sp)
 1005df8:	dd000415 	stw	r20,16(sp)
 1005dfc:	dcc00315 	stw	r19,12(sp)
 1005e00:	dc400115 	stw	r17,4(sp)
 1005e04:	dc000015 	stw	r16,0(sp)
 1005e08:	2025883a 	mov	r18,r4
 1005e0c:	10c01236 	bltu	r2,r3,1005e58 <_malloc_r+0x84>
 1005e10:	04400404 	movi	r17,16
 1005e14:	8940142e 	bgeu	r17,r5,1005e68 <_malloc_r+0x94>
 1005e18:	00800304 	movi	r2,12
 1005e1c:	0007883a 	mov	r3,zero
 1005e20:	90800015 	stw	r2,0(r18)
 1005e24:	1805883a 	mov	r2,r3
 1005e28:	dfc00917 	ldw	ra,36(sp)
 1005e2c:	df000817 	ldw	fp,32(sp)
 1005e30:	ddc00717 	ldw	r23,28(sp)
 1005e34:	dd800617 	ldw	r22,24(sp)
 1005e38:	dd400517 	ldw	r21,20(sp)
 1005e3c:	dd000417 	ldw	r20,16(sp)
 1005e40:	dcc00317 	ldw	r19,12(sp)
 1005e44:	dc800217 	ldw	r18,8(sp)
 1005e48:	dc400117 	ldw	r17,4(sp)
 1005e4c:	dc000017 	ldw	r16,0(sp)
 1005e50:	dec00a04 	addi	sp,sp,40
 1005e54:	f800283a 	ret
 1005e58:	00bffe04 	movi	r2,-8
 1005e5c:	18a2703a 	and	r17,r3,r2
 1005e60:	883fed16 	blt	r17,zero,1005e18 <_malloc_r+0x44>
 1005e64:	897fec36 	bltu	r17,r5,1005e18 <_malloc_r+0x44>
 1005e68:	9009883a 	mov	r4,r18
 1005e6c:	1013cc40 	call	1013cc4 <__malloc_lock>
 1005e70:	00807dc4 	movi	r2,503
 1005e74:	14402b2e 	bgeu	r2,r17,1005f24 <_malloc_r+0x150>
 1005e78:	8806d27a 	srli	r3,r17,9
 1005e7c:	18003f1e 	bne	r3,zero,1005f7c <_malloc_r+0x1a8>
 1005e80:	880cd0fa 	srli	r6,r17,3
 1005e84:	300490fa 	slli	r2,r6,3
 1005e88:	02c040b4 	movhi	r11,258
 1005e8c:	5aff2704 	addi	r11,r11,-868
 1005e90:	12cb883a 	add	r5,r2,r11
 1005e94:	2c000317 	ldw	r16,12(r5)
 1005e98:	580f883a 	mov	r7,r11
 1005e9c:	2c00041e 	bne	r5,r16,1005eb0 <_malloc_r+0xdc>
 1005ea0:	00000a06 	br	1005ecc <_malloc_r+0xf8>
 1005ea4:	1800860e 	bge	r3,zero,10060c0 <_malloc_r+0x2ec>
 1005ea8:	84000317 	ldw	r16,12(r16)
 1005eac:	2c000726 	beq	r5,r16,1005ecc <_malloc_r+0xf8>
 1005eb0:	80800117 	ldw	r2,4(r16)
 1005eb4:	00ffff04 	movi	r3,-4
 1005eb8:	10c8703a 	and	r4,r2,r3
 1005ebc:	2447c83a 	sub	r3,r4,r17
 1005ec0:	008003c4 	movi	r2,15
 1005ec4:	10fff70e 	bge	r2,r3,1005ea4 <_malloc_r+0xd0>
 1005ec8:	31bfffc4 	addi	r6,r6,-1
 1005ecc:	32400044 	addi	r9,r6,1
 1005ed0:	028040b4 	movhi	r10,258
 1005ed4:	52bf2904 	addi	r10,r10,-860
 1005ed8:	54000217 	ldw	r16,8(r10)
 1005edc:	8280a026 	beq	r16,r10,1006160 <_malloc_r+0x38c>
 1005ee0:	80800117 	ldw	r2,4(r16)
 1005ee4:	00ffff04 	movi	r3,-4
 1005ee8:	10ca703a 	and	r5,r2,r3
 1005eec:	2c4dc83a 	sub	r6,r5,r17
 1005ef0:	008003c4 	movi	r2,15
 1005ef4:	11808316 	blt	r2,r6,1006104 <_malloc_r+0x330>
 1005ef8:	52800315 	stw	r10,12(r10)
 1005efc:	52800215 	stw	r10,8(r10)
 1005f00:	30002916 	blt	r6,zero,1005fa8 <_malloc_r+0x1d4>
 1005f04:	8147883a 	add	r3,r16,r5
 1005f08:	18800117 	ldw	r2,4(r3)
 1005f0c:	9009883a 	mov	r4,r18
 1005f10:	10800054 	ori	r2,r2,1
 1005f14:	18800115 	stw	r2,4(r3)
 1005f18:	1013ce40 	call	1013ce4 <__malloc_unlock>
 1005f1c:	80c00204 	addi	r3,r16,8
 1005f20:	003fc006 	br	1005e24 <_malloc_r+0x50>
 1005f24:	02c040b4 	movhi	r11,258
 1005f28:	5aff2704 	addi	r11,r11,-868
 1005f2c:	8ac5883a 	add	r2,r17,r11
 1005f30:	14000317 	ldw	r16,12(r2)
 1005f34:	580f883a 	mov	r7,r11
 1005f38:	8806d0fa 	srli	r3,r17,3
 1005f3c:	14006c26 	beq	r2,r16,10060f0 <_malloc_r+0x31c>
 1005f40:	80c00117 	ldw	r3,4(r16)
 1005f44:	00bfff04 	movi	r2,-4
 1005f48:	81800317 	ldw	r6,12(r16)
 1005f4c:	1886703a 	and	r3,r3,r2
 1005f50:	80c7883a 	add	r3,r16,r3
 1005f54:	18800117 	ldw	r2,4(r3)
 1005f58:	81400217 	ldw	r5,8(r16)
 1005f5c:	9009883a 	mov	r4,r18
 1005f60:	10800054 	ori	r2,r2,1
 1005f64:	18800115 	stw	r2,4(r3)
 1005f68:	31400215 	stw	r5,8(r6)
 1005f6c:	29800315 	stw	r6,12(r5)
 1005f70:	1013ce40 	call	1013ce4 <__malloc_unlock>
 1005f74:	80c00204 	addi	r3,r16,8
 1005f78:	003faa06 	br	1005e24 <_malloc_r+0x50>
 1005f7c:	00800104 	movi	r2,4
 1005f80:	10c0052e 	bgeu	r2,r3,1005f98 <_malloc_r+0x1c4>
 1005f84:	00800504 	movi	r2,20
 1005f88:	10c07836 	bltu	r2,r3,100616c <_malloc_r+0x398>
 1005f8c:	198016c4 	addi	r6,r3,91
 1005f90:	300490fa 	slli	r2,r6,3
 1005f94:	003fbc06 	br	1005e88 <_malloc_r+0xb4>
 1005f98:	8804d1ba 	srli	r2,r17,6
 1005f9c:	11800e04 	addi	r6,r2,56
 1005fa0:	300490fa 	slli	r2,r6,3
 1005fa4:	003fb806 	br	1005e88 <_malloc_r+0xb4>
 1005fa8:	00807fc4 	movi	r2,511
 1005fac:	1140bb36 	bltu	r2,r5,100629c <_malloc_r+0x4c8>
 1005fb0:	2806d0fa 	srli	r3,r5,3
 1005fb4:	573ffe04 	addi	fp,r10,-8
 1005fb8:	00800044 	movi	r2,1
 1005fbc:	180890fa 	slli	r4,r3,3
 1005fc0:	1807d0ba 	srai	r3,r3,2
 1005fc4:	e1c00117 	ldw	r7,4(fp)
 1005fc8:	5909883a 	add	r4,r11,r4
 1005fcc:	21400217 	ldw	r5,8(r4)
 1005fd0:	10c4983a 	sll	r2,r2,r3
 1005fd4:	81000315 	stw	r4,12(r16)
 1005fd8:	81400215 	stw	r5,8(r16)
 1005fdc:	388eb03a 	or	r7,r7,r2
 1005fe0:	2c000315 	stw	r16,12(r5)
 1005fe4:	24000215 	stw	r16,8(r4)
 1005fe8:	e1c00115 	stw	r7,4(fp)
 1005fec:	4807883a 	mov	r3,r9
 1005ff0:	4800cd16 	blt	r9,zero,1006328 <_malloc_r+0x554>
 1005ff4:	1807d0ba 	srai	r3,r3,2
 1005ff8:	00800044 	movi	r2,1
 1005ffc:	10c8983a 	sll	r4,r2,r3
 1006000:	39004436 	bltu	r7,r4,1006114 <_malloc_r+0x340>
 1006004:	21c4703a 	and	r2,r4,r7
 1006008:	10000a1e 	bne	r2,zero,1006034 <_malloc_r+0x260>
 100600c:	2109883a 	add	r4,r4,r4
 1006010:	00bfff04 	movi	r2,-4
 1006014:	4884703a 	and	r2,r9,r2
 1006018:	3906703a 	and	r3,r7,r4
 100601c:	12400104 	addi	r9,r2,4
 1006020:	1800041e 	bne	r3,zero,1006034 <_malloc_r+0x260>
 1006024:	2109883a 	add	r4,r4,r4
 1006028:	3904703a 	and	r2,r7,r4
 100602c:	4a400104 	addi	r9,r9,4
 1006030:	103ffc26 	beq	r2,zero,1006024 <_malloc_r+0x250>
 1006034:	480490fa 	slli	r2,r9,3
 1006038:	4819883a 	mov	r12,r9
 100603c:	023fff04 	movi	r8,-4
 1006040:	589b883a 	add	r13,r11,r2
 1006044:	6807883a 	mov	r3,r13
 1006048:	014003c4 	movi	r5,15
 100604c:	1c000317 	ldw	r16,12(r3)
 1006050:	1c00041e 	bne	r3,r16,1006064 <_malloc_r+0x290>
 1006054:	0000a706 	br	10062f4 <_malloc_r+0x520>
 1006058:	3000ab0e 	bge	r6,zero,1006308 <_malloc_r+0x534>
 100605c:	84000317 	ldw	r16,12(r16)
 1006060:	1c00a426 	beq	r3,r16,10062f4 <_malloc_r+0x520>
 1006064:	80800117 	ldw	r2,4(r16)
 1006068:	1204703a 	and	r2,r2,r8
 100606c:	144dc83a 	sub	r6,r2,r17
 1006070:	29bff90e 	bge	r5,r6,1006058 <_malloc_r+0x284>
 1006074:	81000317 	ldw	r4,12(r16)
 1006078:	80c00217 	ldw	r3,8(r16)
 100607c:	89400054 	ori	r5,r17,1
 1006080:	8445883a 	add	r2,r16,r17
 1006084:	20c00215 	stw	r3,8(r4)
 1006088:	19000315 	stw	r4,12(r3)
 100608c:	81400115 	stw	r5,4(r16)
 1006090:	1187883a 	add	r3,r2,r6
 1006094:	31000054 	ori	r4,r6,1
 1006098:	50800315 	stw	r2,12(r10)
 100609c:	50800215 	stw	r2,8(r10)
 10060a0:	19800015 	stw	r6,0(r3)
 10060a4:	11000115 	stw	r4,4(r2)
 10060a8:	12800215 	stw	r10,8(r2)
 10060ac:	12800315 	stw	r10,12(r2)
 10060b0:	9009883a 	mov	r4,r18
 10060b4:	1013ce40 	call	1013ce4 <__malloc_unlock>
 10060b8:	80c00204 	addi	r3,r16,8
 10060bc:	003f5906 	br	1005e24 <_malloc_r+0x50>
 10060c0:	8109883a 	add	r4,r16,r4
 10060c4:	20800117 	ldw	r2,4(r4)
 10060c8:	80c00217 	ldw	r3,8(r16)
 10060cc:	81400317 	ldw	r5,12(r16)
 10060d0:	10800054 	ori	r2,r2,1
 10060d4:	20800115 	stw	r2,4(r4)
 10060d8:	28c00215 	stw	r3,8(r5)
 10060dc:	19400315 	stw	r5,12(r3)
 10060e0:	9009883a 	mov	r4,r18
 10060e4:	1013ce40 	call	1013ce4 <__malloc_unlock>
 10060e8:	80c00204 	addi	r3,r16,8
 10060ec:	003f4d06 	br	1005e24 <_malloc_r+0x50>
 10060f0:	80800204 	addi	r2,r16,8
 10060f4:	14000317 	ldw	r16,12(r2)
 10060f8:	143f911e 	bne	r2,r16,1005f40 <_malloc_r+0x16c>
 10060fc:	1a400084 	addi	r9,r3,2
 1006100:	003f7306 	br	1005ed0 <_malloc_r+0xfc>
 1006104:	88c00054 	ori	r3,r17,1
 1006108:	8445883a 	add	r2,r16,r17
 100610c:	80c00115 	stw	r3,4(r16)
 1006110:	003fdf06 	br	1006090 <_malloc_r+0x2bc>
 1006114:	e4000217 	ldw	r16,8(fp)
 1006118:	00bfff04 	movi	r2,-4
 100611c:	80c00117 	ldw	r3,4(r16)
 1006120:	802d883a 	mov	r22,r16
 1006124:	18aa703a 	and	r21,r3,r2
 1006128:	ac401636 	bltu	r21,r17,1006184 <_malloc_r+0x3b0>
 100612c:	ac49c83a 	sub	r4,r21,r17
 1006130:	008003c4 	movi	r2,15
 1006134:	1100130e 	bge	r2,r4,1006184 <_malloc_r+0x3b0>
 1006138:	88800054 	ori	r2,r17,1
 100613c:	8447883a 	add	r3,r16,r17
 1006140:	80800115 	stw	r2,4(r16)
 1006144:	20800054 	ori	r2,r4,1
 1006148:	18800115 	stw	r2,4(r3)
 100614c:	e0c00215 	stw	r3,8(fp)
 1006150:	9009883a 	mov	r4,r18
 1006154:	1013ce40 	call	1013ce4 <__malloc_unlock>
 1006158:	80c00204 	addi	r3,r16,8
 100615c:	003f3106 	br	1005e24 <_malloc_r+0x50>
 1006160:	39c00117 	ldw	r7,4(r7)
 1006164:	573ffe04 	addi	fp,r10,-8
 1006168:	003fa006 	br	1005fec <_malloc_r+0x218>
 100616c:	00801504 	movi	r2,84
 1006170:	10c06736 	bltu	r2,r3,1006310 <_malloc_r+0x53c>
 1006174:	8804d33a 	srli	r2,r17,12
 1006178:	11801b84 	addi	r6,r2,110
 100617c:	300490fa 	slli	r2,r6,3
 1006180:	003f4106 	br	1005e88 <_malloc_r+0xb4>
 1006184:	d0a7be17 	ldw	r2,-24840(gp)
 1006188:	d0e00117 	ldw	r3,-32764(gp)
 100618c:	053fffc4 	movi	r20,-1
 1006190:	10800404 	addi	r2,r2,16
 1006194:	88a7883a 	add	r19,r17,r2
 1006198:	1d000326 	beq	r3,r20,10061a8 <_malloc_r+0x3d4>
 100619c:	98c3ffc4 	addi	r3,r19,4095
 10061a0:	00bc0004 	movi	r2,-4096
 10061a4:	18a6703a 	and	r19,r3,r2
 10061a8:	9009883a 	mov	r4,r18
 10061ac:	980b883a 	mov	r5,r19
 10061b0:	10066d40 	call	10066d4 <_sbrk_r>
 10061b4:	1009883a 	mov	r4,r2
 10061b8:	15000426 	beq	r2,r20,10061cc <_malloc_r+0x3f8>
 10061bc:	854b883a 	add	r5,r16,r21
 10061c0:	1029883a 	mov	r20,r2
 10061c4:	11405a2e 	bgeu	r2,r5,1006330 <_malloc_r+0x55c>
 10061c8:	87000c26 	beq	r16,fp,10061fc <_malloc_r+0x428>
 10061cc:	e4000217 	ldw	r16,8(fp)
 10061d0:	80c00117 	ldw	r3,4(r16)
 10061d4:	00bfff04 	movi	r2,-4
 10061d8:	1884703a 	and	r2,r3,r2
 10061dc:	14400336 	bltu	r2,r17,10061ec <_malloc_r+0x418>
 10061e0:	1449c83a 	sub	r4,r2,r17
 10061e4:	008003c4 	movi	r2,15
 10061e8:	113fd316 	blt	r2,r4,1006138 <_malloc_r+0x364>
 10061ec:	9009883a 	mov	r4,r18
 10061f0:	1013ce40 	call	1013ce4 <__malloc_unlock>
 10061f4:	0007883a 	mov	r3,zero
 10061f8:	003f0a06 	br	1005e24 <_malloc_r+0x50>
 10061fc:	05c040b4 	movhi	r23,258
 1006200:	bdcea004 	addi	r23,r23,14976
 1006204:	b8800017 	ldw	r2,0(r23)
 1006208:	988d883a 	add	r6,r19,r2
 100620c:	b9800015 	stw	r6,0(r23)
 1006210:	d0e00117 	ldw	r3,-32764(gp)
 1006214:	00bfffc4 	movi	r2,-1
 1006218:	18808e26 	beq	r3,r2,1006454 <_malloc_r+0x680>
 100621c:	2145c83a 	sub	r2,r4,r5
 1006220:	3085883a 	add	r2,r6,r2
 1006224:	b8800015 	stw	r2,0(r23)
 1006228:	20c001cc 	andi	r3,r4,7
 100622c:	18005f1e 	bne	r3,zero,10063ac <_malloc_r+0x5d8>
 1006230:	000b883a 	mov	r5,zero
 1006234:	a4c5883a 	add	r2,r20,r19
 1006238:	1083ffcc 	andi	r2,r2,4095
 100623c:	00c40004 	movi	r3,4096
 1006240:	1887c83a 	sub	r3,r3,r2
 1006244:	28e7883a 	add	r19,r5,r3
 1006248:	9009883a 	mov	r4,r18
 100624c:	980b883a 	mov	r5,r19
 1006250:	10066d40 	call	10066d4 <_sbrk_r>
 1006254:	1007883a 	mov	r3,r2
 1006258:	00bfffc4 	movi	r2,-1
 100625c:	18807a26 	beq	r3,r2,1006448 <_malloc_r+0x674>
 1006260:	1d05c83a 	sub	r2,r3,r20
 1006264:	9885883a 	add	r2,r19,r2
 1006268:	10c00054 	ori	r3,r2,1
 100626c:	b8800017 	ldw	r2,0(r23)
 1006270:	a021883a 	mov	r16,r20
 1006274:	a0c00115 	stw	r3,4(r20)
 1006278:	9885883a 	add	r2,r19,r2
 100627c:	b8800015 	stw	r2,0(r23)
 1006280:	e5000215 	stw	r20,8(fp)
 1006284:	b7003626 	beq	r22,fp,1006360 <_malloc_r+0x58c>
 1006288:	018003c4 	movi	r6,15
 100628c:	35404b36 	bltu	r6,r21,10063bc <_malloc_r+0x5e8>
 1006290:	00800044 	movi	r2,1
 1006294:	a0800115 	stw	r2,4(r20)
 1006298:	003fcd06 	br	10061d0 <_malloc_r+0x3fc>
 100629c:	2808d27a 	srli	r4,r5,9
 10062a0:	2000371e 	bne	r4,zero,1006380 <_malloc_r+0x5ac>
 10062a4:	2808d0fa 	srli	r4,r5,3
 10062a8:	200690fa 	slli	r3,r4,3
 10062ac:	1ad1883a 	add	r8,r3,r11
 10062b0:	41800217 	ldw	r6,8(r8)
 10062b4:	41805b26 	beq	r8,r6,1006424 <_malloc_r+0x650>
 10062b8:	30800117 	ldw	r2,4(r6)
 10062bc:	00ffff04 	movi	r3,-4
 10062c0:	10c4703a 	and	r2,r2,r3
 10062c4:	2880022e 	bgeu	r5,r2,10062d0 <_malloc_r+0x4fc>
 10062c8:	31800217 	ldw	r6,8(r6)
 10062cc:	41bffa1e 	bne	r8,r6,10062b8 <_malloc_r+0x4e4>
 10062d0:	32000317 	ldw	r8,12(r6)
 10062d4:	39c00117 	ldw	r7,4(r7)
 10062d8:	82000315 	stw	r8,12(r16)
 10062dc:	81800215 	stw	r6,8(r16)
 10062e0:	070040b4 	movhi	fp,258
 10062e4:	e73f2704 	addi	fp,fp,-868
 10062e8:	34000315 	stw	r16,12(r6)
 10062ec:	44000215 	stw	r16,8(r8)
 10062f0:	003f3e06 	br	1005fec <_malloc_r+0x218>
 10062f4:	63000044 	addi	r12,r12,1
 10062f8:	608000cc 	andi	r2,r12,3
 10062fc:	10005d26 	beq	r2,zero,1006474 <_malloc_r+0x6a0>
 1006300:	18c00204 	addi	r3,r3,8
 1006304:	003f5106 	br	100604c <_malloc_r+0x278>
 1006308:	8089883a 	add	r4,r16,r2
 100630c:	003f6d06 	br	10060c4 <_malloc_r+0x2f0>
 1006310:	00805504 	movi	r2,340
 1006314:	10c02036 	bltu	r2,r3,1006398 <_malloc_r+0x5c4>
 1006318:	8804d3fa 	srli	r2,r17,15
 100631c:	11801dc4 	addi	r6,r2,119
 1006320:	300490fa 	slli	r2,r6,3
 1006324:	003ed806 	br	1005e88 <_malloc_r+0xb4>
 1006328:	48c000c4 	addi	r3,r9,3
 100632c:	003f3106 	br	1005ff4 <_malloc_r+0x220>
 1006330:	05c040b4 	movhi	r23,258
 1006334:	bdcea004 	addi	r23,r23,14976
 1006338:	b8800017 	ldw	r2,0(r23)
 100633c:	988d883a 	add	r6,r19,r2
 1006340:	b9800015 	stw	r6,0(r23)
 1006344:	293fb21e 	bne	r5,r4,1006210 <_malloc_r+0x43c>
 1006348:	2083ffcc 	andi	r2,r4,4095
 100634c:	103fb01e 	bne	r2,zero,1006210 <_malloc_r+0x43c>
 1006350:	e4000217 	ldw	r16,8(fp)
 1006354:	9d45883a 	add	r2,r19,r21
 1006358:	10800054 	ori	r2,r2,1
 100635c:	80800115 	stw	r2,4(r16)
 1006360:	b8c00017 	ldw	r3,0(r23)
 1006364:	d0a7bf17 	ldw	r2,-24836(gp)
 1006368:	10c0012e 	bgeu	r2,r3,1006370 <_malloc_r+0x59c>
 100636c:	d0e7bf15 	stw	r3,-24836(gp)
 1006370:	d0a7c017 	ldw	r2,-24832(gp)
 1006374:	10ff962e 	bgeu	r2,r3,10061d0 <_malloc_r+0x3fc>
 1006378:	d0e7c015 	stw	r3,-24832(gp)
 100637c:	003f9406 	br	10061d0 <_malloc_r+0x3fc>
 1006380:	00800104 	movi	r2,4
 1006384:	11001e36 	bltu	r2,r4,1006400 <_malloc_r+0x62c>
 1006388:	2804d1ba 	srli	r2,r5,6
 100638c:	11000e04 	addi	r4,r2,56
 1006390:	200690fa 	slli	r3,r4,3
 1006394:	003fc506 	br	10062ac <_malloc_r+0x4d8>
 1006398:	00815504 	movi	r2,1364
 100639c:	10c01d2e 	bgeu	r2,r3,1006414 <_malloc_r+0x640>
 10063a0:	01801f84 	movi	r6,126
 10063a4:	0080fc04 	movi	r2,1008
 10063a8:	003eb706 	br	1005e88 <_malloc_r+0xb4>
 10063ac:	00800204 	movi	r2,8
 10063b0:	10cbc83a 	sub	r5,r2,r3
 10063b4:	2169883a 	add	r20,r4,r5
 10063b8:	003f9e06 	br	1006234 <_malloc_r+0x460>
 10063bc:	00bffe04 	movi	r2,-8
 10063c0:	a93ffd04 	addi	r4,r21,-12
 10063c4:	2088703a 	and	r4,r4,r2
 10063c8:	b10b883a 	add	r5,r22,r4
 10063cc:	00c00144 	movi	r3,5
 10063d0:	28c00215 	stw	r3,8(r5)
 10063d4:	28c00115 	stw	r3,4(r5)
 10063d8:	b0800117 	ldw	r2,4(r22)
 10063dc:	1080004c 	andi	r2,r2,1
 10063e0:	2084b03a 	or	r2,r4,r2
 10063e4:	b0800115 	stw	r2,4(r22)
 10063e8:	313fdd2e 	bgeu	r6,r4,1006360 <_malloc_r+0x58c>
 10063ec:	b1400204 	addi	r5,r22,8
 10063f0:	9009883a 	mov	r4,r18
 10063f4:	100c16c0 	call	100c16c <_free_r>
 10063f8:	e4000217 	ldw	r16,8(fp)
 10063fc:	003fd806 	br	1006360 <_malloc_r+0x58c>
 1006400:	00800504 	movi	r2,20
 1006404:	11001536 	bltu	r2,r4,100645c <_malloc_r+0x688>
 1006408:	210016c4 	addi	r4,r4,91
 100640c:	200690fa 	slli	r3,r4,3
 1006410:	003fa606 	br	10062ac <_malloc_r+0x4d8>
 1006414:	8804d4ba 	srli	r2,r17,18
 1006418:	11801f04 	addi	r6,r2,124
 100641c:	300490fa 	slli	r2,r6,3
 1006420:	003e9906 	br	1005e88 <_malloc_r+0xb4>
 1006424:	2009d0ba 	srai	r4,r4,2
 1006428:	014040b4 	movhi	r5,258
 100642c:	297f2704 	addi	r5,r5,-868
 1006430:	00c00044 	movi	r3,1
 1006434:	28800117 	ldw	r2,4(r5)
 1006438:	1906983a 	sll	r3,r3,r4
 100643c:	10c4b03a 	or	r2,r2,r3
 1006440:	28800115 	stw	r2,4(r5)
 1006444:	003fa306 	br	10062d4 <_malloc_r+0x500>
 1006448:	0027883a 	mov	r19,zero
 100644c:	00c00044 	movi	r3,1
 1006450:	003f8606 	br	100626c <_malloc_r+0x498>
 1006454:	d1200115 	stw	r4,-32764(gp)
 1006458:	003f7306 	br	1006228 <_malloc_r+0x454>
 100645c:	00801504 	movi	r2,84
 1006460:	11001936 	bltu	r2,r4,10064c8 <_malloc_r+0x6f4>
 1006464:	2804d33a 	srli	r2,r5,12
 1006468:	11001b84 	addi	r4,r2,110
 100646c:	200690fa 	slli	r3,r4,3
 1006470:	003f8e06 	br	10062ac <_malloc_r+0x4d8>
 1006474:	480b883a 	mov	r5,r9
 1006478:	6807883a 	mov	r3,r13
 100647c:	288000cc 	andi	r2,r5,3
 1006480:	18fffe04 	addi	r3,r3,-8
 1006484:	297fffc4 	addi	r5,r5,-1
 1006488:	10001526 	beq	r2,zero,10064e0 <_malloc_r+0x70c>
 100648c:	18800217 	ldw	r2,8(r3)
 1006490:	10fffa26 	beq	r2,r3,100647c <_malloc_r+0x6a8>
 1006494:	2109883a 	add	r4,r4,r4
 1006498:	393f1e36 	bltu	r7,r4,1006114 <_malloc_r+0x340>
 100649c:	203f1d26 	beq	r4,zero,1006114 <_malloc_r+0x340>
 10064a0:	21c4703a 	and	r2,r4,r7
 10064a4:	10000226 	beq	r2,zero,10064b0 <_malloc_r+0x6dc>
 10064a8:	6013883a 	mov	r9,r12
 10064ac:	003ee106 	br	1006034 <_malloc_r+0x260>
 10064b0:	2109883a 	add	r4,r4,r4
 10064b4:	3904703a 	and	r2,r7,r4
 10064b8:	63000104 	addi	r12,r12,4
 10064bc:	103ffc26 	beq	r2,zero,10064b0 <_malloc_r+0x6dc>
 10064c0:	6013883a 	mov	r9,r12
 10064c4:	003edb06 	br	1006034 <_malloc_r+0x260>
 10064c8:	00805504 	movi	r2,340
 10064cc:	11000836 	bltu	r2,r4,10064f0 <_malloc_r+0x71c>
 10064d0:	2804d3fa 	srli	r2,r5,15
 10064d4:	11001dc4 	addi	r4,r2,119
 10064d8:	200690fa 	slli	r3,r4,3
 10064dc:	003f7306 	br	10062ac <_malloc_r+0x4d8>
 10064e0:	0104303a 	nor	r2,zero,r4
 10064e4:	388e703a 	and	r7,r7,r2
 10064e8:	e1c00115 	stw	r7,4(fp)
 10064ec:	003fe906 	br	1006494 <_malloc_r+0x6c0>
 10064f0:	00815504 	movi	r2,1364
 10064f4:	1100032e 	bgeu	r2,r4,1006504 <_malloc_r+0x730>
 10064f8:	01001f84 	movi	r4,126
 10064fc:	00c0fc04 	movi	r3,1008
 1006500:	003f6a06 	br	10062ac <_malloc_r+0x4d8>
 1006504:	2804d4ba 	srli	r2,r5,18
 1006508:	11001f04 	addi	r4,r2,124
 100650c:	200690fa 	slli	r3,r4,3
 1006510:	003f6606 	br	10062ac <_malloc_r+0x4d8>

01006514 <printf>:
 1006514:	defffb04 	addi	sp,sp,-20
 1006518:	dfc00115 	stw	ra,4(sp)
 100651c:	d9400215 	stw	r5,8(sp)
 1006520:	d9800315 	stw	r6,12(sp)
 1006524:	d9c00415 	stw	r7,16(sp)
 1006528:	008040b4 	movhi	r2,258
 100652c:	1086c504 	addi	r2,r2,6932
 1006530:	10c00017 	ldw	r3,0(r2)
 1006534:	200b883a 	mov	r5,r4
 1006538:	d8800204 	addi	r2,sp,8
 100653c:	19000217 	ldw	r4,8(r3)
 1006540:	100d883a 	mov	r6,r2
 1006544:	d8800015 	stw	r2,0(sp)
 1006548:	10088680 	call	1008868 <__vfprintf_internal>
 100654c:	dfc00117 	ldw	ra,4(sp)
 1006550:	dec00504 	addi	sp,sp,20
 1006554:	f800283a 	ret

01006558 <_printf_r>:
 1006558:	defffc04 	addi	sp,sp,-16
 100655c:	dfc00115 	stw	ra,4(sp)
 1006560:	d9800215 	stw	r6,8(sp)
 1006564:	d9c00315 	stw	r7,12(sp)
 1006568:	280d883a 	mov	r6,r5
 100656c:	21400217 	ldw	r5,8(r4)
 1006570:	d8c00204 	addi	r3,sp,8
 1006574:	180f883a 	mov	r7,r3
 1006578:	d8c00015 	stw	r3,0(sp)
 100657c:	10069bc0 	call	10069bc <___vfprintf_internal_r>
 1006580:	dfc00117 	ldw	ra,4(sp)
 1006584:	dec00404 	addi	sp,sp,16
 1006588:	f800283a 	ret

0100658c <_puts_r>:
 100658c:	defff604 	addi	sp,sp,-40
 1006590:	dc400715 	stw	r17,28(sp)
 1006594:	2023883a 	mov	r17,r4
 1006598:	2809883a 	mov	r4,r5
 100659c:	dfc00915 	stw	ra,36(sp)
 10065a0:	dcc00815 	stw	r19,32(sp)
 10065a4:	2827883a 	mov	r19,r5
 10065a8:	10068940 	call	1006894 <strlen>
 10065ac:	89400217 	ldw	r5,8(r17)
 10065b0:	00c040b4 	movhi	r3,258
 10065b4:	18fcea04 	addi	r3,r3,-3160
 10065b8:	01c00044 	movi	r7,1
 10065bc:	12000044 	addi	r8,r2,1
 10065c0:	d8c00515 	stw	r3,20(sp)
 10065c4:	d9c00615 	stw	r7,24(sp)
 10065c8:	d8c00304 	addi	r3,sp,12
 10065cc:	01c00084 	movi	r7,2
 10065d0:	8809883a 	mov	r4,r17
 10065d4:	d80d883a 	mov	r6,sp
 10065d8:	d8c00015 	stw	r3,0(sp)
 10065dc:	dcc00315 	stw	r19,12(sp)
 10065e0:	da000215 	stw	r8,8(sp)
 10065e4:	d9c00115 	stw	r7,4(sp)
 10065e8:	d8800415 	stw	r2,16(sp)
 10065ec:	100c4800 	call	100c480 <__sfvwrite_r>
 10065f0:	00ffffc4 	movi	r3,-1
 10065f4:	10000626 	beq	r2,zero,1006610 <_puts_r+0x84>
 10065f8:	1805883a 	mov	r2,r3
 10065fc:	dfc00917 	ldw	ra,36(sp)
 1006600:	dcc00817 	ldw	r19,32(sp)
 1006604:	dc400717 	ldw	r17,28(sp)
 1006608:	dec00a04 	addi	sp,sp,40
 100660c:	f800283a 	ret
 1006610:	00c00284 	movi	r3,10
 1006614:	1805883a 	mov	r2,r3
 1006618:	dfc00917 	ldw	ra,36(sp)
 100661c:	dcc00817 	ldw	r19,32(sp)
 1006620:	dc400717 	ldw	r17,28(sp)
 1006624:	dec00a04 	addi	sp,sp,40
 1006628:	f800283a 	ret

0100662c <puts>:
 100662c:	008040b4 	movhi	r2,258
 1006630:	1086c504 	addi	r2,r2,6932
 1006634:	200b883a 	mov	r5,r4
 1006638:	11000017 	ldw	r4,0(r2)
 100663c:	100658c1 	jmpi	100658c <_puts_r>

01006640 <srand>:
 1006640:	008040b4 	movhi	r2,258
 1006644:	1086c504 	addi	r2,r2,6932
 1006648:	11400017 	ldw	r5,0(r2)
 100664c:	0007883a 	mov	r3,zero
 1006650:	28c02a15 	stw	r3,168(r5)
 1006654:	29002915 	stw	r4,164(r5)
 1006658:	f800283a 	ret

0100665c <rand>:
 100665c:	defffe04 	addi	sp,sp,-8
 1006660:	008040b4 	movhi	r2,258
 1006664:	1086c504 	addi	r2,r2,6932
 1006668:	dc000015 	stw	r16,0(sp)
 100666c:	14000017 	ldw	r16,0(r2)
 1006670:	dfc00115 	stw	ra,4(sp)
 1006674:	00932574 	movhi	r2,19605
 1006678:	109fcb44 	addi	r2,r2,32557
 100667c:	82002917 	ldw	r8,164(r16)
 1006680:	82402a17 	ldw	r9,168(r16)
 1006684:	00d614b4 	movhi	r3,22610
 1006688:	18fd0b44 	addi	r3,r3,-3027
 100668c:	4009883a 	mov	r4,r8
 1006690:	180f883a 	mov	r7,r3
 1006694:	100d883a 	mov	r6,r2
 1006698:	480b883a 	mov	r5,r9
 100669c:	10057800 	call	1005780 <__muldi3>
 10066a0:	02000044 	movi	r8,1
 10066a4:	1209883a 	add	r4,r2,r8
 10066a8:	2095803a 	cmpltu	r10,r4,r2
 10066ac:	50d5883a 	add	r10,r10,r3
 10066b0:	81002915 	stw	r4,164(r16)
 10066b4:	01200034 	movhi	r4,32768
 10066b8:	213fffc4 	addi	r4,r4,-1
 10066bc:	2284703a 	and	r2,r4,r10
 10066c0:	82802a15 	stw	r10,168(r16)
 10066c4:	dfc00117 	ldw	ra,4(sp)
 10066c8:	dc000017 	ldw	r16,0(sp)
 10066cc:	dec00204 	addi	sp,sp,8
 10066d0:	f800283a 	ret

010066d4 <_sbrk_r>:
 10066d4:	defffd04 	addi	sp,sp,-12
 10066d8:	dc000015 	stw	r16,0(sp)
 10066dc:	040040b4 	movhi	r16,258
 10066e0:	840e8304 	addi	r16,r16,14860
 10066e4:	dc400115 	stw	r17,4(sp)
 10066e8:	80000015 	stw	zero,0(r16)
 10066ec:	2023883a 	mov	r17,r4
 10066f0:	2809883a 	mov	r4,r5
 10066f4:	dfc00215 	stw	ra,8(sp)
 10066f8:	1013ee40 	call	1013ee4 <sbrk>
 10066fc:	1007883a 	mov	r3,r2
 1006700:	00bfffc4 	movi	r2,-1
 1006704:	18800626 	beq	r3,r2,1006720 <_sbrk_r+0x4c>
 1006708:	1805883a 	mov	r2,r3
 100670c:	dfc00217 	ldw	ra,8(sp)
 1006710:	dc400117 	ldw	r17,4(sp)
 1006714:	dc000017 	ldw	r16,0(sp)
 1006718:	dec00304 	addi	sp,sp,12
 100671c:	f800283a 	ret
 1006720:	80800017 	ldw	r2,0(r16)
 1006724:	103ff826 	beq	r2,zero,1006708 <_sbrk_r+0x34>
 1006728:	88800015 	stw	r2,0(r17)
 100672c:	1805883a 	mov	r2,r3
 1006730:	dfc00217 	ldw	ra,8(sp)
 1006734:	dc400117 	ldw	r17,4(sp)
 1006738:	dc000017 	ldw	r16,0(sp)
 100673c:	dec00304 	addi	sp,sp,12
 1006740:	f800283a 	ret

01006744 <_scanf_r>:
 1006744:	defffc04 	addi	sp,sp,-16
 1006748:	dfc00115 	stw	ra,4(sp)
 100674c:	d9800215 	stw	r6,8(sp)
 1006750:	d9c00315 	stw	r7,12(sp)
 1006754:	280d883a 	mov	r6,r5
 1006758:	21400117 	ldw	r5,4(r4)
 100675c:	d8c00204 	addi	r3,sp,8
 1006760:	180f883a 	mov	r7,r3
 1006764:	d8c00015 	stw	r3,0(sp)
 1006768:	100888c0 	call	100888c <__svfscanf_r>
 100676c:	dfc00117 	ldw	ra,4(sp)
 1006770:	dec00404 	addi	sp,sp,16
 1006774:	f800283a 	ret

01006778 <scanf>:
 1006778:	defffb04 	addi	sp,sp,-20
 100677c:	dfc00115 	stw	ra,4(sp)
 1006780:	d9400215 	stw	r5,8(sp)
 1006784:	d9800315 	stw	r6,12(sp)
 1006788:	d9c00415 	stw	r7,16(sp)
 100678c:	008040b4 	movhi	r2,258
 1006790:	1086c504 	addi	r2,r2,6932
 1006794:	11400017 	ldw	r5,0(r2)
 1006798:	200d883a 	mov	r6,r4
 100679c:	d8800204 	addi	r2,sp,8
 10067a0:	2809883a 	mov	r4,r5
 10067a4:	29400117 	ldw	r5,4(r5)
 10067a8:	100f883a 	mov	r7,r2
 10067ac:	d8800015 	stw	r2,0(sp)
 10067b0:	100888c0 	call	100888c <__svfscanf_r>
 10067b4:	dfc00117 	ldw	ra,4(sp)
 10067b8:	dec00504 	addi	sp,sp,20
 10067bc:	f800283a 	ret

010067c0 <sprintf>:
 10067c0:	deffe504 	addi	sp,sp,-108
 10067c4:	2013883a 	mov	r9,r4
 10067c8:	dfc01815 	stw	ra,96(sp)
 10067cc:	d9801915 	stw	r6,100(sp)
 10067d0:	d9c01a15 	stw	r7,104(sp)
 10067d4:	d8801904 	addi	r2,sp,100
 10067d8:	d8800015 	stw	r2,0(sp)
 10067dc:	008040b4 	movhi	r2,258
 10067e0:	1086c504 	addi	r2,r2,6932
 10067e4:	11000017 	ldw	r4,0(r2)
 10067e8:	d9c00017 	ldw	r7,0(sp)
 10067ec:	00808204 	movi	r2,520
 10067f0:	00e00034 	movhi	r3,32768
 10067f4:	18ffffc4 	addi	r3,r3,-1
 10067f8:	280d883a 	mov	r6,r5
 10067fc:	d880040d 	sth	r2,16(sp)
 1006800:	d9400104 	addi	r5,sp,4
 1006804:	00bfffc4 	movi	r2,-1
 1006808:	d8c00615 	stw	r3,24(sp)
 100680c:	d8c00315 	stw	r3,12(sp)
 1006810:	da400515 	stw	r9,20(sp)
 1006814:	d880048d 	sth	r2,18(sp)
 1006818:	da400115 	stw	r9,4(sp)
 100681c:	10069bc0 	call	10069bc <___vfprintf_internal_r>
 1006820:	d8c00117 	ldw	r3,4(sp)
 1006824:	18000005 	stb	zero,0(r3)
 1006828:	dfc01817 	ldw	ra,96(sp)
 100682c:	dec01b04 	addi	sp,sp,108
 1006830:	f800283a 	ret

01006834 <_sprintf_r>:
 1006834:	deffe604 	addi	sp,sp,-104
 1006838:	2813883a 	mov	r9,r5
 100683c:	dfc01815 	stw	ra,96(sp)
 1006840:	d9c01915 	stw	r7,100(sp)
 1006844:	d8801904 	addi	r2,sp,100
 1006848:	d8800015 	stw	r2,0(sp)
 100684c:	100f883a 	mov	r7,r2
 1006850:	00808204 	movi	r2,520
 1006854:	00e00034 	movhi	r3,32768
 1006858:	18ffffc4 	addi	r3,r3,-1
 100685c:	d880040d 	sth	r2,16(sp)
 1006860:	d9400104 	addi	r5,sp,4
 1006864:	00bfffc4 	movi	r2,-1
 1006868:	d8c00615 	stw	r3,24(sp)
 100686c:	d8c00315 	stw	r3,12(sp)
 1006870:	da400515 	stw	r9,20(sp)
 1006874:	d880048d 	sth	r2,18(sp)
 1006878:	da400115 	stw	r9,4(sp)
 100687c:	10069bc0 	call	10069bc <___vfprintf_internal_r>
 1006880:	d8c00117 	ldw	r3,4(sp)
 1006884:	18000005 	stb	zero,0(r3)
 1006888:	dfc01817 	ldw	ra,96(sp)
 100688c:	dec01a04 	addi	sp,sp,104
 1006890:	f800283a 	ret

01006894 <strlen>:
 1006894:	208000cc 	andi	r2,r4,3
 1006898:	2011883a 	mov	r8,r4
 100689c:	1000161e 	bne	r2,zero,10068f8 <strlen+0x64>
 10068a0:	20c00017 	ldw	r3,0(r4)
 10068a4:	017fbff4 	movhi	r5,65279
 10068a8:	297fbfc4 	addi	r5,r5,-257
 10068ac:	01e02074 	movhi	r7,32897
 10068b0:	39e02004 	addi	r7,r7,-32640
 10068b4:	1945883a 	add	r2,r3,r5
 10068b8:	11c4703a 	and	r2,r2,r7
 10068bc:	00c6303a 	nor	r3,zero,r3
 10068c0:	1886703a 	and	r3,r3,r2
 10068c4:	18000c1e 	bne	r3,zero,10068f8 <strlen+0x64>
 10068c8:	280d883a 	mov	r6,r5
 10068cc:	380b883a 	mov	r5,r7
 10068d0:	21000104 	addi	r4,r4,4
 10068d4:	20800017 	ldw	r2,0(r4)
 10068d8:	1187883a 	add	r3,r2,r6
 10068dc:	1946703a 	and	r3,r3,r5
 10068e0:	0084303a 	nor	r2,zero,r2
 10068e4:	10c4703a 	and	r2,r2,r3
 10068e8:	103ff926 	beq	r2,zero,10068d0 <strlen+0x3c>
 10068ec:	20800007 	ldb	r2,0(r4)
 10068f0:	10000326 	beq	r2,zero,1006900 <strlen+0x6c>
 10068f4:	21000044 	addi	r4,r4,1
 10068f8:	20800007 	ldb	r2,0(r4)
 10068fc:	103ffd1e 	bne	r2,zero,10068f4 <strlen+0x60>
 1006900:	2205c83a 	sub	r2,r4,r8
 1006904:	f800283a 	ret

01006908 <time>:
 1006908:	defffc04 	addi	sp,sp,-16
 100690c:	008040b4 	movhi	r2,258
 1006910:	1086c504 	addi	r2,r2,6932
 1006914:	dc000215 	stw	r16,8(sp)
 1006918:	2021883a 	mov	r16,r4
 100691c:	11000017 	ldw	r4,0(r2)
 1006920:	d80b883a 	mov	r5,sp
 1006924:	000d883a 	mov	r6,zero
 1006928:	dfc00315 	stw	ra,12(sp)
 100692c:	100ca9c0 	call	100ca9c <_gettimeofday_r>
 1006930:	00ffffc4 	movi	r3,-1
 1006934:	10000416 	blt	r2,zero,1006948 <time+0x40>
 1006938:	80000826 	beq	r16,zero,100695c <time+0x54>
 100693c:	d8800017 	ldw	r2,0(sp)
 1006940:	80800015 	stw	r2,0(r16)
 1006944:	1007883a 	mov	r3,r2
 1006948:	1805883a 	mov	r2,r3
 100694c:	dfc00317 	ldw	ra,12(sp)
 1006950:	dc000217 	ldw	r16,8(sp)
 1006954:	dec00404 	addi	sp,sp,16
 1006958:	f800283a 	ret
 100695c:	d8800017 	ldw	r2,0(sp)
 1006960:	003ff806 	br	1006944 <time+0x3c>

01006964 <__sprint_r>:
 1006964:	30800217 	ldw	r2,8(r6)
 1006968:	defffe04 	addi	sp,sp,-8
 100696c:	dc000015 	stw	r16,0(sp)
 1006970:	dfc00115 	stw	ra,4(sp)
 1006974:	3021883a 	mov	r16,r6
 1006978:	0007883a 	mov	r3,zero
 100697c:	1000061e 	bne	r2,zero,1006998 <__sprint_r+0x34>
 1006980:	1805883a 	mov	r2,r3
 1006984:	30000115 	stw	zero,4(r6)
 1006988:	dfc00117 	ldw	ra,4(sp)
 100698c:	dc000017 	ldw	r16,0(sp)
 1006990:	dec00204 	addi	sp,sp,8
 1006994:	f800283a 	ret
 1006998:	100c4800 	call	100c480 <__sfvwrite_r>
 100699c:	1007883a 	mov	r3,r2
 10069a0:	1805883a 	mov	r2,r3
 10069a4:	80000115 	stw	zero,4(r16)
 10069a8:	80000215 	stw	zero,8(r16)
 10069ac:	dfc00117 	ldw	ra,4(sp)
 10069b0:	dc000017 	ldw	r16,0(sp)
 10069b4:	dec00204 	addi	sp,sp,8
 10069b8:	f800283a 	ret

010069bc <___vfprintf_internal_r>:
 10069bc:	defea404 	addi	sp,sp,-1392
 10069c0:	dd815815 	stw	r22,1376(sp)
 10069c4:	dc015215 	stw	r16,1352(sp)
 10069c8:	d9c15115 	stw	r7,1348(sp)
 10069cc:	dfc15b15 	stw	ra,1388(sp)
 10069d0:	df015a15 	stw	fp,1384(sp)
 10069d4:	ddc15915 	stw	r23,1380(sp)
 10069d8:	dd415715 	stw	r21,1372(sp)
 10069dc:	dd015615 	stw	r20,1368(sp)
 10069e0:	dcc15515 	stw	r19,1364(sp)
 10069e4:	dc815415 	stw	r18,1360(sp)
 10069e8:	dc415315 	stw	r17,1356(sp)
 10069ec:	282d883a 	mov	r22,r5
 10069f0:	3021883a 	mov	r16,r6
 10069f4:	d9014f15 	stw	r4,1340(sp)
 10069f8:	100cb440 	call	100cb44 <_localeconv_r>
 10069fc:	10800017 	ldw	r2,0(r2)
 1006a00:	d9c15117 	ldw	r7,1348(sp)
 1006a04:	d8814915 	stw	r2,1316(sp)
 1006a08:	d8814f17 	ldw	r2,1340(sp)
 1006a0c:	10000226 	beq	r2,zero,1006a18 <___vfprintf_internal_r+0x5c>
 1006a10:	10800e17 	ldw	r2,56(r2)
 1006a14:	10020d26 	beq	r2,zero,100724c <___vfprintf_internal_r+0x890>
 1006a18:	b080030b 	ldhu	r2,12(r22)
 1006a1c:	1080020c 	andi	r2,r2,8
 1006a20:	10020e26 	beq	r2,zero,100725c <___vfprintf_internal_r+0x8a0>
 1006a24:	b0800417 	ldw	r2,16(r22)
 1006a28:	10020c26 	beq	r2,zero,100725c <___vfprintf_internal_r+0x8a0>
 1006a2c:	b200030b 	ldhu	r8,12(r22)
 1006a30:	00800284 	movi	r2,10
 1006a34:	40c0068c 	andi	r3,r8,26
 1006a38:	18802f1e 	bne	r3,r2,1006af8 <___vfprintf_internal_r+0x13c>
 1006a3c:	b080038f 	ldh	r2,14(r22)
 1006a40:	10002d16 	blt	r2,zero,1006af8 <___vfprintf_internal_r+0x13c>
 1006a44:	b240038b 	ldhu	r9,14(r22)
 1006a48:	b2800717 	ldw	r10,28(r22)
 1006a4c:	b2c00917 	ldw	r11,36(r22)
 1006a50:	d9014f17 	ldw	r4,1340(sp)
 1006a54:	dc402904 	addi	r17,sp,164
 1006a58:	d8804004 	addi	r2,sp,256
 1006a5c:	00c10004 	movi	r3,1024
 1006a60:	423fff4c 	andi	r8,r8,65533
 1006a64:	800d883a 	mov	r6,r16
 1006a68:	880b883a 	mov	r5,r17
 1006a6c:	da002c0d 	sth	r8,176(sp)
 1006a70:	da402c8d 	sth	r9,178(sp)
 1006a74:	da803015 	stw	r10,192(sp)
 1006a78:	dac03215 	stw	r11,200(sp)
 1006a7c:	d8802d15 	stw	r2,180(sp)
 1006a80:	d8c02e15 	stw	r3,184(sp)
 1006a84:	d8802915 	stw	r2,164(sp)
 1006a88:	d8c02b15 	stw	r3,172(sp)
 1006a8c:	d8002f15 	stw	zero,188(sp)
 1006a90:	10069bc0 	call	10069bc <___vfprintf_internal_r>
 1006a94:	d8814b15 	stw	r2,1324(sp)
 1006a98:	10000416 	blt	r2,zero,1006aac <___vfprintf_internal_r+0xf0>
 1006a9c:	d9014f17 	ldw	r4,1340(sp)
 1006aa0:	880b883a 	mov	r5,r17
 1006aa4:	100b9140 	call	100b914 <_fflush_r>
 1006aa8:	1002321e 	bne	r2,zero,1007374 <___vfprintf_internal_r+0x9b8>
 1006aac:	d8802c0b 	ldhu	r2,176(sp)
 1006ab0:	1080100c 	andi	r2,r2,64
 1006ab4:	10000326 	beq	r2,zero,1006ac4 <___vfprintf_internal_r+0x108>
 1006ab8:	b080030b 	ldhu	r2,12(r22)
 1006abc:	10801014 	ori	r2,r2,64
 1006ac0:	b080030d 	sth	r2,12(r22)
 1006ac4:	d8814b17 	ldw	r2,1324(sp)
 1006ac8:	dfc15b17 	ldw	ra,1388(sp)
 1006acc:	df015a17 	ldw	fp,1384(sp)
 1006ad0:	ddc15917 	ldw	r23,1380(sp)
 1006ad4:	dd815817 	ldw	r22,1376(sp)
 1006ad8:	dd415717 	ldw	r21,1372(sp)
 1006adc:	dd015617 	ldw	r20,1368(sp)
 1006ae0:	dcc15517 	ldw	r19,1364(sp)
 1006ae4:	dc815417 	ldw	r18,1360(sp)
 1006ae8:	dc415317 	ldw	r17,1356(sp)
 1006aec:	dc015217 	ldw	r16,1352(sp)
 1006af0:	dec15c04 	addi	sp,sp,1392
 1006af4:	f800283a 	ret
 1006af8:	0005883a 	mov	r2,zero
 1006afc:	0007883a 	mov	r3,zero
 1006b00:	dd401904 	addi	r21,sp,100
 1006b04:	d8814215 	stw	r2,1288(sp)
 1006b08:	802f883a 	mov	r23,r16
 1006b0c:	d8c14315 	stw	r3,1292(sp)
 1006b10:	d8014b15 	stw	zero,1324(sp)
 1006b14:	d8014815 	stw	zero,1312(sp)
 1006b18:	d8014415 	stw	zero,1296(sp)
 1006b1c:	d8014715 	stw	zero,1308(sp)
 1006b20:	dd400c15 	stw	r21,48(sp)
 1006b24:	d8000e15 	stw	zero,56(sp)
 1006b28:	d8000d15 	stw	zero,52(sp)
 1006b2c:	b8800007 	ldb	r2,0(r23)
 1006b30:	10001926 	beq	r2,zero,1006b98 <___vfprintf_internal_r+0x1dc>
 1006b34:	00c00944 	movi	r3,37
 1006b38:	10c01726 	beq	r2,r3,1006b98 <___vfprintf_internal_r+0x1dc>
 1006b3c:	b821883a 	mov	r16,r23
 1006b40:	00000106 	br	1006b48 <___vfprintf_internal_r+0x18c>
 1006b44:	10c00326 	beq	r2,r3,1006b54 <___vfprintf_internal_r+0x198>
 1006b48:	84000044 	addi	r16,r16,1
 1006b4c:	80800007 	ldb	r2,0(r16)
 1006b50:	103ffc1e 	bne	r2,zero,1006b44 <___vfprintf_internal_r+0x188>
 1006b54:	85e7c83a 	sub	r19,r16,r23
 1006b58:	98000e26 	beq	r19,zero,1006b94 <___vfprintf_internal_r+0x1d8>
 1006b5c:	dc800e17 	ldw	r18,56(sp)
 1006b60:	dc400d17 	ldw	r17,52(sp)
 1006b64:	008001c4 	movi	r2,7
 1006b68:	94e5883a 	add	r18,r18,r19
 1006b6c:	8c400044 	addi	r17,r17,1
 1006b70:	adc00015 	stw	r23,0(r21)
 1006b74:	dc800e15 	stw	r18,56(sp)
 1006b78:	acc00115 	stw	r19,4(r21)
 1006b7c:	dc400d15 	stw	r17,52(sp)
 1006b80:	14428b16 	blt	r2,r17,10075b0 <___vfprintf_internal_r+0xbf4>
 1006b84:	ad400204 	addi	r21,r21,8
 1006b88:	d9014b17 	ldw	r4,1324(sp)
 1006b8c:	24c9883a 	add	r4,r4,r19
 1006b90:	d9014b15 	stw	r4,1324(sp)
 1006b94:	802f883a 	mov	r23,r16
 1006b98:	b8800007 	ldb	r2,0(r23)
 1006b9c:	10013c26 	beq	r2,zero,1007090 <___vfprintf_internal_r+0x6d4>
 1006ba0:	bdc00044 	addi	r23,r23,1
 1006ba4:	d8000405 	stb	zero,16(sp)
 1006ba8:	b8c00007 	ldb	r3,0(r23)
 1006bac:	04ffffc4 	movi	r19,-1
 1006bb0:	d8014c15 	stw	zero,1328(sp)
 1006bb4:	d8014a15 	stw	zero,1320(sp)
 1006bb8:	d8c14d15 	stw	r3,1332(sp)
 1006bbc:	bdc00044 	addi	r23,r23,1
 1006bc0:	d9414d17 	ldw	r5,1332(sp)
 1006bc4:	00801604 	movi	r2,88
 1006bc8:	28fff804 	addi	r3,r5,-32
 1006bcc:	10c06036 	bltu	r2,r3,1006d50 <___vfprintf_internal_r+0x394>
 1006bd0:	18c5883a 	add	r2,r3,r3
 1006bd4:	1085883a 	add	r2,r2,r2
 1006bd8:	00c04034 	movhi	r3,256
 1006bdc:	18dafb04 	addi	r3,r3,27628
 1006be0:	10c5883a 	add	r2,r2,r3
 1006be4:	11000017 	ldw	r4,0(r2)
 1006be8:	2000683a 	jmp	r4
 1006bec:	01007b60 	cmpeqi	r4,zero,493
 1006bf0:	01006d50 	cmplti	r4,zero,437
 1006bf4:	01006d50 	cmplti	r4,zero,437
 1006bf8:	01007b4c 	andi	r4,zero,493
 1006bfc:	01006d50 	cmplti	r4,zero,437
 1006c00:	01006d50 	cmplti	r4,zero,437
 1006c04:	01006d50 	cmplti	r4,zero,437
 1006c08:	01006d50 	cmplti	r4,zero,437
 1006c0c:	01006d50 	cmplti	r4,zero,437
 1006c10:	01006d50 	cmplti	r4,zero,437
 1006c14:	0100792c 	andhi	r4,zero,484
 1006c18:	01007b3c 	xorhi	r4,zero,492
 1006c1c:	01006d50 	cmplti	r4,zero,437
 1006c20:	01007944 	movi	r4,485
 1006c24:	01007bd8 	cmpnei	r4,zero,495
 1006c28:	01006d50 	cmplti	r4,zero,437
 1006c2c:	01007bc4 	movi	r4,495
 1006c30:	01007b8c 	andi	r4,zero,494
 1006c34:	01007b8c 	andi	r4,zero,494
 1006c38:	01007b8c 	andi	r4,zero,494
 1006c3c:	01007b8c 	andi	r4,zero,494
 1006c40:	01007b8c 	andi	r4,zero,494
 1006c44:	01007b8c 	andi	r4,zero,494
 1006c48:	01007b8c 	andi	r4,zero,494
 1006c4c:	01007b8c 	andi	r4,zero,494
 1006c50:	01007b8c 	andi	r4,zero,494
 1006c54:	01006d50 	cmplti	r4,zero,437
 1006c58:	01006d50 	cmplti	r4,zero,437
 1006c5c:	01006d50 	cmplti	r4,zero,437
 1006c60:	01006d50 	cmplti	r4,zero,437
 1006c64:	01006d50 	cmplti	r4,zero,437
 1006c68:	01006d50 	cmplti	r4,zero,437
 1006c6c:	01006d50 	cmplti	r4,zero,437
 1006c70:	01006d50 	cmplti	r4,zero,437
 1006c74:	01006d50 	cmplti	r4,zero,437
 1006c78:	01006d50 	cmplti	r4,zero,437
 1006c7c:	010073a8 	cmpgeui	r4,zero,462
 1006c80:	01007a14 	movui	r4,488
 1006c84:	01006d50 	cmplti	r4,zero,437
 1006c88:	01007a14 	movui	r4,488
 1006c8c:	01006d50 	cmplti	r4,zero,437
 1006c90:	01006d50 	cmplti	r4,zero,437
 1006c94:	01006d50 	cmplti	r4,zero,437
 1006c98:	01006d50 	cmplti	r4,zero,437
 1006c9c:	01007b78 	rdprs	r4,zero,493
 1006ca0:	01006d50 	cmplti	r4,zero,437
 1006ca4:	01006d50 	cmplti	r4,zero,437
 1006ca8:	0100745c 	xori	r4,zero,465
 1006cac:	01006d50 	cmplti	r4,zero,437
 1006cb0:	01006d50 	cmplti	r4,zero,437
 1006cb4:	01006d50 	cmplti	r4,zero,437
 1006cb8:	01006d50 	cmplti	r4,zero,437
 1006cbc:	01006d50 	cmplti	r4,zero,437
 1006cc0:	010074a8 	cmpgeui	r4,zero,466
 1006cc4:	01006d50 	cmplti	r4,zero,437
 1006cc8:	01006d50 	cmplti	r4,zero,437
 1006ccc:	01007ac8 	cmpgei	r4,zero,491
 1006cd0:	01006d50 	cmplti	r4,zero,437
 1006cd4:	01006d50 	cmplti	r4,zero,437
 1006cd8:	01006d50 	cmplti	r4,zero,437
 1006cdc:	01006d50 	cmplti	r4,zero,437
 1006ce0:	01006d50 	cmplti	r4,zero,437
 1006ce4:	01006d50 	cmplti	r4,zero,437
 1006ce8:	01006d50 	cmplti	r4,zero,437
 1006cec:	01006d50 	cmplti	r4,zero,437
 1006cf0:	01006d50 	cmplti	r4,zero,437
 1006cf4:	01006d50 	cmplti	r4,zero,437
 1006cf8:	01007a9c 	xori	r4,zero,490
 1006cfc:	010073b4 	movhi	r4,462
 1006d00:	01007a14 	movui	r4,488
 1006d04:	01007a14 	movui	r4,488
 1006d08:	01007a14 	movui	r4,488
 1006d0c:	01007a00 	call	1007a0 <__alt_mem_onchip+0x1007a0>
 1006d10:	010073b4 	movhi	r4,462
 1006d14:	01006d50 	cmplti	r4,zero,437
 1006d18:	01006d50 	cmplti	r4,zero,437
 1006d1c:	01007988 	cmpgei	r4,zero,486
 1006d20:	01006d50 	cmplti	r4,zero,437
 1006d24:	01007958 	cmpnei	r4,zero,485
 1006d28:	01007468 	cmpgeui	r4,zero,465
 1006d2c:	010079b8 	rdprs	r4,zero,486
 1006d30:	010079a4 	muli	r4,zero,486
 1006d34:	01006d50 	cmplti	r4,zero,437
 1006d38:	01007c34 	movhi	r4,496
 1006d3c:	01006d50 	cmplti	r4,zero,437
 1006d40:	010074b4 	movhi	r4,466
 1006d44:	01006d50 	cmplti	r4,zero,437
 1006d48:	01006d50 	cmplti	r4,zero,437
 1006d4c:	01007b2c 	andhi	r4,zero,492
 1006d50:	d9014d17 	ldw	r4,1332(sp)
 1006d54:	2000ce26 	beq	r4,zero,1007090 <___vfprintf_internal_r+0x6d4>
 1006d58:	01400044 	movi	r5,1
 1006d5c:	d9800f04 	addi	r6,sp,60
 1006d60:	d9c14015 	stw	r7,1280(sp)
 1006d64:	d9414515 	stw	r5,1300(sp)
 1006d68:	d9814115 	stw	r6,1284(sp)
 1006d6c:	280f883a 	mov	r7,r5
 1006d70:	d9000f05 	stb	r4,60(sp)
 1006d74:	d8000405 	stb	zero,16(sp)
 1006d78:	d8014615 	stw	zero,1304(sp)
 1006d7c:	d8c14c17 	ldw	r3,1328(sp)
 1006d80:	1880008c 	andi	r2,r3,2
 1006d84:	1005003a 	cmpeq	r2,r2,zero
 1006d88:	d8815015 	stw	r2,1344(sp)
 1006d8c:	1000031e 	bne	r2,zero,1006d9c <___vfprintf_internal_r+0x3e0>
 1006d90:	d9014517 	ldw	r4,1300(sp)
 1006d94:	21000084 	addi	r4,r4,2
 1006d98:	d9014515 	stw	r4,1300(sp)
 1006d9c:	d9414c17 	ldw	r5,1328(sp)
 1006da0:	2940210c 	andi	r5,r5,132
 1006da4:	d9414e15 	stw	r5,1336(sp)
 1006da8:	28002d1e 	bne	r5,zero,1006e60 <___vfprintf_internal_r+0x4a4>
 1006dac:	d9814a17 	ldw	r6,1320(sp)
 1006db0:	d8814517 	ldw	r2,1300(sp)
 1006db4:	30a1c83a 	sub	r16,r6,r2
 1006db8:	0400290e 	bge	zero,r16,1006e60 <___vfprintf_internal_r+0x4a4>
 1006dbc:	00800404 	movi	r2,16
 1006dc0:	1404580e 	bge	r2,r16,1007f24 <___vfprintf_internal_r+0x1568>
 1006dc4:	dc800e17 	ldw	r18,56(sp)
 1006dc8:	dc400d17 	ldw	r17,52(sp)
 1006dcc:	1027883a 	mov	r19,r2
 1006dd0:	070040b4 	movhi	fp,258
 1006dd4:	e73d0684 	addi	fp,fp,-3046
 1006dd8:	050001c4 	movi	r20,7
 1006ddc:	00000306 	br	1006dec <___vfprintf_internal_r+0x430>
 1006de0:	843ffc04 	addi	r16,r16,-16
 1006de4:	ad400204 	addi	r21,r21,8
 1006de8:	9c00130e 	bge	r19,r16,1006e38 <___vfprintf_internal_r+0x47c>
 1006dec:	94800404 	addi	r18,r18,16
 1006df0:	8c400044 	addi	r17,r17,1
 1006df4:	af000015 	stw	fp,0(r21)
 1006df8:	acc00115 	stw	r19,4(r21)
 1006dfc:	dc800e15 	stw	r18,56(sp)
 1006e00:	dc400d15 	stw	r17,52(sp)
 1006e04:	a47ff60e 	bge	r20,r17,1006de0 <___vfprintf_internal_r+0x424>
 1006e08:	d9014f17 	ldw	r4,1340(sp)
 1006e0c:	b00b883a 	mov	r5,r22
 1006e10:	d9800c04 	addi	r6,sp,48
 1006e14:	d9c15115 	stw	r7,1348(sp)
 1006e18:	10069640 	call	1006964 <__sprint_r>
 1006e1c:	d9c15117 	ldw	r7,1348(sp)
 1006e20:	10009e1e 	bne	r2,zero,100709c <___vfprintf_internal_r+0x6e0>
 1006e24:	843ffc04 	addi	r16,r16,-16
 1006e28:	dc800e17 	ldw	r18,56(sp)
 1006e2c:	dc400d17 	ldw	r17,52(sp)
 1006e30:	dd401904 	addi	r21,sp,100
 1006e34:	9c3fed16 	blt	r19,r16,1006dec <___vfprintf_internal_r+0x430>
 1006e38:	9425883a 	add	r18,r18,r16
 1006e3c:	8c400044 	addi	r17,r17,1
 1006e40:	008001c4 	movi	r2,7
 1006e44:	af000015 	stw	fp,0(r21)
 1006e48:	ac000115 	stw	r16,4(r21)
 1006e4c:	dc800e15 	stw	r18,56(sp)
 1006e50:	dc400d15 	stw	r17,52(sp)
 1006e54:	1441f516 	blt	r2,r17,100762c <___vfprintf_internal_r+0xc70>
 1006e58:	ad400204 	addi	r21,r21,8
 1006e5c:	00000206 	br	1006e68 <___vfprintf_internal_r+0x4ac>
 1006e60:	dc800e17 	ldw	r18,56(sp)
 1006e64:	dc400d17 	ldw	r17,52(sp)
 1006e68:	d8800407 	ldb	r2,16(sp)
 1006e6c:	10000b26 	beq	r2,zero,1006e9c <___vfprintf_internal_r+0x4e0>
 1006e70:	00800044 	movi	r2,1
 1006e74:	94800044 	addi	r18,r18,1
 1006e78:	8c400044 	addi	r17,r17,1
 1006e7c:	a8800115 	stw	r2,4(r21)
 1006e80:	d8c00404 	addi	r3,sp,16
 1006e84:	008001c4 	movi	r2,7
 1006e88:	a8c00015 	stw	r3,0(r21)
 1006e8c:	dc800e15 	stw	r18,56(sp)
 1006e90:	dc400d15 	stw	r17,52(sp)
 1006e94:	1441da16 	blt	r2,r17,1007600 <___vfprintf_internal_r+0xc44>
 1006e98:	ad400204 	addi	r21,r21,8
 1006e9c:	d9015017 	ldw	r4,1344(sp)
 1006ea0:	20000b1e 	bne	r4,zero,1006ed0 <___vfprintf_internal_r+0x514>
 1006ea4:	d8800444 	addi	r2,sp,17
 1006ea8:	94800084 	addi	r18,r18,2
 1006eac:	8c400044 	addi	r17,r17,1
 1006eb0:	a8800015 	stw	r2,0(r21)
 1006eb4:	00c00084 	movi	r3,2
 1006eb8:	008001c4 	movi	r2,7
 1006ebc:	a8c00115 	stw	r3,4(r21)
 1006ec0:	dc800e15 	stw	r18,56(sp)
 1006ec4:	dc400d15 	stw	r17,52(sp)
 1006ec8:	1441c216 	blt	r2,r17,10075d4 <___vfprintf_internal_r+0xc18>
 1006ecc:	ad400204 	addi	r21,r21,8
 1006ed0:	d9414e17 	ldw	r5,1336(sp)
 1006ed4:	00802004 	movi	r2,128
 1006ed8:	2880b126 	beq	r5,r2,10071a0 <___vfprintf_internal_r+0x7e4>
 1006edc:	d8c14617 	ldw	r3,1304(sp)
 1006ee0:	19e1c83a 	sub	r16,r3,r7
 1006ee4:	0400260e 	bge	zero,r16,1006f80 <___vfprintf_internal_r+0x5c4>
 1006ee8:	00800404 	movi	r2,16
 1006eec:	1403c90e 	bge	r2,r16,1007e14 <___vfprintf_internal_r+0x1458>
 1006ef0:	1027883a 	mov	r19,r2
 1006ef4:	070040b4 	movhi	fp,258
 1006ef8:	e73d0284 	addi	fp,fp,-3062
 1006efc:	050001c4 	movi	r20,7
 1006f00:	00000306 	br	1006f10 <___vfprintf_internal_r+0x554>
 1006f04:	843ffc04 	addi	r16,r16,-16
 1006f08:	ad400204 	addi	r21,r21,8
 1006f0c:	9c00130e 	bge	r19,r16,1006f5c <___vfprintf_internal_r+0x5a0>
 1006f10:	94800404 	addi	r18,r18,16
 1006f14:	8c400044 	addi	r17,r17,1
 1006f18:	af000015 	stw	fp,0(r21)
 1006f1c:	acc00115 	stw	r19,4(r21)
 1006f20:	dc800e15 	stw	r18,56(sp)
 1006f24:	dc400d15 	stw	r17,52(sp)
 1006f28:	a47ff60e 	bge	r20,r17,1006f04 <___vfprintf_internal_r+0x548>
 1006f2c:	d9014f17 	ldw	r4,1340(sp)
 1006f30:	b00b883a 	mov	r5,r22
 1006f34:	d9800c04 	addi	r6,sp,48
 1006f38:	d9c15115 	stw	r7,1348(sp)
 1006f3c:	10069640 	call	1006964 <__sprint_r>
 1006f40:	d9c15117 	ldw	r7,1348(sp)
 1006f44:	1000551e 	bne	r2,zero,100709c <___vfprintf_internal_r+0x6e0>
 1006f48:	843ffc04 	addi	r16,r16,-16
 1006f4c:	dc800e17 	ldw	r18,56(sp)
 1006f50:	dc400d17 	ldw	r17,52(sp)
 1006f54:	dd401904 	addi	r21,sp,100
 1006f58:	9c3fed16 	blt	r19,r16,1006f10 <___vfprintf_internal_r+0x554>
 1006f5c:	9425883a 	add	r18,r18,r16
 1006f60:	8c400044 	addi	r17,r17,1
 1006f64:	008001c4 	movi	r2,7
 1006f68:	af000015 	stw	fp,0(r21)
 1006f6c:	ac000115 	stw	r16,4(r21)
 1006f70:	dc800e15 	stw	r18,56(sp)
 1006f74:	dc400d15 	stw	r17,52(sp)
 1006f78:	14418216 	blt	r2,r17,1007584 <___vfprintf_internal_r+0xbc8>
 1006f7c:	ad400204 	addi	r21,r21,8
 1006f80:	d9014c17 	ldw	r4,1328(sp)
 1006f84:	2080400c 	andi	r2,r4,256
 1006f88:	10004a1e 	bne	r2,zero,10070b4 <___vfprintf_internal_r+0x6f8>
 1006f8c:	d9414117 	ldw	r5,1284(sp)
 1006f90:	91e5883a 	add	r18,r18,r7
 1006f94:	8c400044 	addi	r17,r17,1
 1006f98:	008001c4 	movi	r2,7
 1006f9c:	a9400015 	stw	r5,0(r21)
 1006fa0:	a9c00115 	stw	r7,4(r21)
 1006fa4:	dc800e15 	stw	r18,56(sp)
 1006fa8:	dc400d15 	stw	r17,52(sp)
 1006fac:	14416716 	blt	r2,r17,100754c <___vfprintf_internal_r+0xb90>
 1006fb0:	a8c00204 	addi	r3,r21,8
 1006fb4:	d9814c17 	ldw	r6,1328(sp)
 1006fb8:	3080010c 	andi	r2,r6,4
 1006fbc:	10002826 	beq	r2,zero,1007060 <___vfprintf_internal_r+0x6a4>
 1006fc0:	d8814a17 	ldw	r2,1320(sp)
 1006fc4:	d9014517 	ldw	r4,1300(sp)
 1006fc8:	1121c83a 	sub	r16,r2,r4
 1006fcc:	0400240e 	bge	zero,r16,1007060 <___vfprintf_internal_r+0x6a4>
 1006fd0:	00800404 	movi	r2,16
 1006fd4:	14044f0e 	bge	r2,r16,1008114 <___vfprintf_internal_r+0x1758>
 1006fd8:	dc400d17 	ldw	r17,52(sp)
 1006fdc:	1027883a 	mov	r19,r2
 1006fe0:	070040b4 	movhi	fp,258
 1006fe4:	e73d0684 	addi	fp,fp,-3046
 1006fe8:	050001c4 	movi	r20,7
 1006fec:	00000306 	br	1006ffc <___vfprintf_internal_r+0x640>
 1006ff0:	843ffc04 	addi	r16,r16,-16
 1006ff4:	18c00204 	addi	r3,r3,8
 1006ff8:	9c00110e 	bge	r19,r16,1007040 <___vfprintf_internal_r+0x684>
 1006ffc:	94800404 	addi	r18,r18,16
 1007000:	8c400044 	addi	r17,r17,1
 1007004:	1f000015 	stw	fp,0(r3)
 1007008:	1cc00115 	stw	r19,4(r3)
 100700c:	dc800e15 	stw	r18,56(sp)
 1007010:	dc400d15 	stw	r17,52(sp)
 1007014:	a47ff60e 	bge	r20,r17,1006ff0 <___vfprintf_internal_r+0x634>
 1007018:	d9014f17 	ldw	r4,1340(sp)
 100701c:	b00b883a 	mov	r5,r22
 1007020:	d9800c04 	addi	r6,sp,48
 1007024:	10069640 	call	1006964 <__sprint_r>
 1007028:	10001c1e 	bne	r2,zero,100709c <___vfprintf_internal_r+0x6e0>
 100702c:	843ffc04 	addi	r16,r16,-16
 1007030:	dc800e17 	ldw	r18,56(sp)
 1007034:	dc400d17 	ldw	r17,52(sp)
 1007038:	d8c01904 	addi	r3,sp,100
 100703c:	9c3fef16 	blt	r19,r16,1006ffc <___vfprintf_internal_r+0x640>
 1007040:	9425883a 	add	r18,r18,r16
 1007044:	8c400044 	addi	r17,r17,1
 1007048:	008001c4 	movi	r2,7
 100704c:	1f000015 	stw	fp,0(r3)
 1007050:	1c000115 	stw	r16,4(r3)
 1007054:	dc800e15 	stw	r18,56(sp)
 1007058:	dc400d15 	stw	r17,52(sp)
 100705c:	1440cb16 	blt	r2,r17,100738c <___vfprintf_internal_r+0x9d0>
 1007060:	d8814a17 	ldw	r2,1320(sp)
 1007064:	d9414517 	ldw	r5,1300(sp)
 1007068:	1140010e 	bge	r2,r5,1007070 <___vfprintf_internal_r+0x6b4>
 100706c:	2805883a 	mov	r2,r5
 1007070:	d9814b17 	ldw	r6,1324(sp)
 1007074:	308d883a 	add	r6,r6,r2
 1007078:	d9814b15 	stw	r6,1324(sp)
 100707c:	90013b1e 	bne	r18,zero,100756c <___vfprintf_internal_r+0xbb0>
 1007080:	d9c14017 	ldw	r7,1280(sp)
 1007084:	dd401904 	addi	r21,sp,100
 1007088:	d8000d15 	stw	zero,52(sp)
 100708c:	003ea706 	br	1006b2c <___vfprintf_internal_r+0x170>
 1007090:	d8800e17 	ldw	r2,56(sp)
 1007094:	10053f1e 	bne	r2,zero,1008594 <___vfprintf_internal_r+0x1bd8>
 1007098:	d8000d15 	stw	zero,52(sp)
 100709c:	b080030b 	ldhu	r2,12(r22)
 10070a0:	1080100c 	andi	r2,r2,64
 10070a4:	103e8726 	beq	r2,zero,1006ac4 <___vfprintf_internal_r+0x108>
 10070a8:	00bfffc4 	movi	r2,-1
 10070ac:	d8814b15 	stw	r2,1324(sp)
 10070b0:	003e8406 	br	1006ac4 <___vfprintf_internal_r+0x108>
 10070b4:	d9814d17 	ldw	r6,1332(sp)
 10070b8:	00801944 	movi	r2,101
 10070bc:	11806e16 	blt	r2,r6,1007278 <___vfprintf_internal_r+0x8bc>
 10070c0:	d9414717 	ldw	r5,1308(sp)
 10070c4:	00c00044 	movi	r3,1
 10070c8:	1943430e 	bge	r3,r5,1007dd8 <___vfprintf_internal_r+0x141c>
 10070cc:	d8814117 	ldw	r2,1284(sp)
 10070d0:	94800044 	addi	r18,r18,1
 10070d4:	8c400044 	addi	r17,r17,1
 10070d8:	a8800015 	stw	r2,0(r21)
 10070dc:	008001c4 	movi	r2,7
 10070e0:	a8c00115 	stw	r3,4(r21)
 10070e4:	dc800e15 	stw	r18,56(sp)
 10070e8:	dc400d15 	stw	r17,52(sp)
 10070ec:	1441ca16 	blt	r2,r17,1007818 <___vfprintf_internal_r+0xe5c>
 10070f0:	a8c00204 	addi	r3,r21,8
 10070f4:	d9014917 	ldw	r4,1316(sp)
 10070f8:	00800044 	movi	r2,1
 10070fc:	94800044 	addi	r18,r18,1
 1007100:	8c400044 	addi	r17,r17,1
 1007104:	18800115 	stw	r2,4(r3)
 1007108:	008001c4 	movi	r2,7
 100710c:	19000015 	stw	r4,0(r3)
 1007110:	dc800e15 	stw	r18,56(sp)
 1007114:	dc400d15 	stw	r17,52(sp)
 1007118:	1441b616 	blt	r2,r17,10077f4 <___vfprintf_internal_r+0xe38>
 100711c:	1cc00204 	addi	r19,r3,8
 1007120:	d9014217 	ldw	r4,1288(sp)
 1007124:	d9414317 	ldw	r5,1292(sp)
 1007128:	000d883a 	mov	r6,zero
 100712c:	000f883a 	mov	r7,zero
 1007130:	10052cc0 	call	10052cc <__nedf2>
 1007134:	10017426 	beq	r2,zero,1007708 <___vfprintf_internal_r+0xd4c>
 1007138:	d9414717 	ldw	r5,1308(sp)
 100713c:	d9814117 	ldw	r6,1284(sp)
 1007140:	8c400044 	addi	r17,r17,1
 1007144:	2c85883a 	add	r2,r5,r18
 1007148:	14bfffc4 	addi	r18,r2,-1
 100714c:	28bfffc4 	addi	r2,r5,-1
 1007150:	30c00044 	addi	r3,r6,1
 1007154:	98800115 	stw	r2,4(r19)
 1007158:	008001c4 	movi	r2,7
 100715c:	98c00015 	stw	r3,0(r19)
 1007160:	dc800e15 	stw	r18,56(sp)
 1007164:	dc400d15 	stw	r17,52(sp)
 1007168:	14418e16 	blt	r2,r17,10077a4 <___vfprintf_internal_r+0xde8>
 100716c:	9cc00204 	addi	r19,r19,8
 1007170:	d9414817 	ldw	r5,1312(sp)
 1007174:	d8800804 	addi	r2,sp,32
 1007178:	8c400044 	addi	r17,r17,1
 100717c:	9165883a 	add	r18,r18,r5
 1007180:	98800015 	stw	r2,0(r19)
 1007184:	008001c4 	movi	r2,7
 1007188:	99400115 	stw	r5,4(r19)
 100718c:	dc800e15 	stw	r18,56(sp)
 1007190:	dc400d15 	stw	r17,52(sp)
 1007194:	1440ed16 	blt	r2,r17,100754c <___vfprintf_internal_r+0xb90>
 1007198:	98c00204 	addi	r3,r19,8
 100719c:	003f8506 	br	1006fb4 <___vfprintf_internal_r+0x5f8>
 10071a0:	d9814a17 	ldw	r6,1320(sp)
 10071a4:	d8814517 	ldw	r2,1300(sp)
 10071a8:	30a1c83a 	sub	r16,r6,r2
 10071ac:	043f4b0e 	bge	zero,r16,1006edc <___vfprintf_internal_r+0x520>
 10071b0:	00800404 	movi	r2,16
 10071b4:	1404340e 	bge	r2,r16,1008288 <___vfprintf_internal_r+0x18cc>
 10071b8:	1027883a 	mov	r19,r2
 10071bc:	070040b4 	movhi	fp,258
 10071c0:	e73d0284 	addi	fp,fp,-3062
 10071c4:	050001c4 	movi	r20,7
 10071c8:	00000306 	br	10071d8 <___vfprintf_internal_r+0x81c>
 10071cc:	843ffc04 	addi	r16,r16,-16
 10071d0:	ad400204 	addi	r21,r21,8
 10071d4:	9c00130e 	bge	r19,r16,1007224 <___vfprintf_internal_r+0x868>
 10071d8:	94800404 	addi	r18,r18,16
 10071dc:	8c400044 	addi	r17,r17,1
 10071e0:	af000015 	stw	fp,0(r21)
 10071e4:	acc00115 	stw	r19,4(r21)
 10071e8:	dc800e15 	stw	r18,56(sp)
 10071ec:	dc400d15 	stw	r17,52(sp)
 10071f0:	a47ff60e 	bge	r20,r17,10071cc <___vfprintf_internal_r+0x810>
 10071f4:	d9014f17 	ldw	r4,1340(sp)
 10071f8:	b00b883a 	mov	r5,r22
 10071fc:	d9800c04 	addi	r6,sp,48
 1007200:	d9c15115 	stw	r7,1348(sp)
 1007204:	10069640 	call	1006964 <__sprint_r>
 1007208:	d9c15117 	ldw	r7,1348(sp)
 100720c:	103fa31e 	bne	r2,zero,100709c <___vfprintf_internal_r+0x6e0>
 1007210:	843ffc04 	addi	r16,r16,-16
 1007214:	dc800e17 	ldw	r18,56(sp)
 1007218:	dc400d17 	ldw	r17,52(sp)
 100721c:	dd401904 	addi	r21,sp,100
 1007220:	9c3fed16 	blt	r19,r16,10071d8 <___vfprintf_internal_r+0x81c>
 1007224:	9425883a 	add	r18,r18,r16
 1007228:	8c400044 	addi	r17,r17,1
 100722c:	008001c4 	movi	r2,7
 1007230:	af000015 	stw	fp,0(r21)
 1007234:	ac000115 	stw	r16,4(r21)
 1007238:	dc800e15 	stw	r18,56(sp)
 100723c:	dc400d15 	stw	r17,52(sp)
 1007240:	14416116 	blt	r2,r17,10077c8 <___vfprintf_internal_r+0xe0c>
 1007244:	ad400204 	addi	r21,r21,8
 1007248:	003f2406 	br	1006edc <___vfprintf_internal_r+0x520>
 100724c:	d9014f17 	ldw	r4,1340(sp)
 1007250:	100bbac0 	call	100bbac <__sinit>
 1007254:	d9c15117 	ldw	r7,1348(sp)
 1007258:	003def06 	br	1006a18 <___vfprintf_internal_r+0x5c>
 100725c:	d9014f17 	ldw	r4,1340(sp)
 1007260:	b00b883a 	mov	r5,r22
 1007264:	d9c15115 	stw	r7,1348(sp)
 1007268:	100a00c0 	call	100a00c <__swsetup_r>
 100726c:	d9c15117 	ldw	r7,1348(sp)
 1007270:	103dee26 	beq	r2,zero,1006a2c <___vfprintf_internal_r+0x70>
 1007274:	003f8c06 	br	10070a8 <___vfprintf_internal_r+0x6ec>
 1007278:	d9014217 	ldw	r4,1288(sp)
 100727c:	d9414317 	ldw	r5,1292(sp)
 1007280:	000d883a 	mov	r6,zero
 1007284:	000f883a 	mov	r7,zero
 1007288:	10052440 	call	1005244 <__eqdf2>
 100728c:	1000f21e 	bne	r2,zero,1007658 <___vfprintf_internal_r+0xc9c>
 1007290:	008040b4 	movhi	r2,258
 1007294:	10bd0204 	addi	r2,r2,-3064
 1007298:	94800044 	addi	r18,r18,1
 100729c:	8c400044 	addi	r17,r17,1
 10072a0:	a8800015 	stw	r2,0(r21)
 10072a4:	00c00044 	movi	r3,1
 10072a8:	008001c4 	movi	r2,7
 10072ac:	a8c00115 	stw	r3,4(r21)
 10072b0:	dc800e15 	stw	r18,56(sp)
 10072b4:	dc400d15 	stw	r17,52(sp)
 10072b8:	1442fa16 	blt	r2,r17,1007ea4 <___vfprintf_internal_r+0x14e8>
 10072bc:	a8c00204 	addi	r3,r21,8
 10072c0:	d8800517 	ldw	r2,20(sp)
 10072c4:	d9014717 	ldw	r4,1308(sp)
 10072c8:	11015c0e 	bge	r2,r4,100783c <___vfprintf_internal_r+0xe80>
 10072cc:	dc400d17 	ldw	r17,52(sp)
 10072d0:	d9814917 	ldw	r6,1316(sp)
 10072d4:	00800044 	movi	r2,1
 10072d8:	94800044 	addi	r18,r18,1
 10072dc:	8c400044 	addi	r17,r17,1
 10072e0:	18800115 	stw	r2,4(r3)
 10072e4:	008001c4 	movi	r2,7
 10072e8:	19800015 	stw	r6,0(r3)
 10072ec:	dc800e15 	stw	r18,56(sp)
 10072f0:	dc400d15 	stw	r17,52(sp)
 10072f4:	14431016 	blt	r2,r17,1007f38 <___vfprintf_internal_r+0x157c>
 10072f8:	18c00204 	addi	r3,r3,8
 10072fc:	d8814717 	ldw	r2,1308(sp)
 1007300:	143fffc4 	addi	r16,r2,-1
 1007304:	043f2b0e 	bge	zero,r16,1006fb4 <___vfprintf_internal_r+0x5f8>
 1007308:	00800404 	movi	r2,16
 100730c:	1402a20e 	bge	r2,r16,1007d98 <___vfprintf_internal_r+0x13dc>
 1007310:	dc400d17 	ldw	r17,52(sp)
 1007314:	1027883a 	mov	r19,r2
 1007318:	070040b4 	movhi	fp,258
 100731c:	e73d0284 	addi	fp,fp,-3062
 1007320:	050001c4 	movi	r20,7
 1007324:	00000306 	br	1007334 <___vfprintf_internal_r+0x978>
 1007328:	18c00204 	addi	r3,r3,8
 100732c:	843ffc04 	addi	r16,r16,-16
 1007330:	9c029c0e 	bge	r19,r16,1007da4 <___vfprintf_internal_r+0x13e8>
 1007334:	94800404 	addi	r18,r18,16
 1007338:	8c400044 	addi	r17,r17,1
 100733c:	1f000015 	stw	fp,0(r3)
 1007340:	1cc00115 	stw	r19,4(r3)
 1007344:	dc800e15 	stw	r18,56(sp)
 1007348:	dc400d15 	stw	r17,52(sp)
 100734c:	a47ff60e 	bge	r20,r17,1007328 <___vfprintf_internal_r+0x96c>
 1007350:	d9014f17 	ldw	r4,1340(sp)
 1007354:	b00b883a 	mov	r5,r22
 1007358:	d9800c04 	addi	r6,sp,48
 100735c:	10069640 	call	1006964 <__sprint_r>
 1007360:	103f4e1e 	bne	r2,zero,100709c <___vfprintf_internal_r+0x6e0>
 1007364:	dc800e17 	ldw	r18,56(sp)
 1007368:	dc400d17 	ldw	r17,52(sp)
 100736c:	d8c01904 	addi	r3,sp,100
 1007370:	003fee06 	br	100732c <___vfprintf_internal_r+0x970>
 1007374:	d8802c0b 	ldhu	r2,176(sp)
 1007378:	00ffffc4 	movi	r3,-1
 100737c:	d8c14b15 	stw	r3,1324(sp)
 1007380:	1080100c 	andi	r2,r2,64
 1007384:	103dcc1e 	bne	r2,zero,1006ab8 <___vfprintf_internal_r+0xfc>
 1007388:	003dce06 	br	1006ac4 <___vfprintf_internal_r+0x108>
 100738c:	d9014f17 	ldw	r4,1340(sp)
 1007390:	b00b883a 	mov	r5,r22
 1007394:	d9800c04 	addi	r6,sp,48
 1007398:	10069640 	call	1006964 <__sprint_r>
 100739c:	103f3f1e 	bne	r2,zero,100709c <___vfprintf_internal_r+0x6e0>
 10073a0:	dc800e17 	ldw	r18,56(sp)
 10073a4:	003f2e06 	br	1007060 <___vfprintf_internal_r+0x6a4>
 10073a8:	d9414c17 	ldw	r5,1328(sp)
 10073ac:	29400414 	ori	r5,r5,16
 10073b0:	d9414c15 	stw	r5,1328(sp)
 10073b4:	d9814c17 	ldw	r6,1328(sp)
 10073b8:	3080080c 	andi	r2,r6,32
 10073bc:	10014f1e 	bne	r2,zero,10078fc <___vfprintf_internal_r+0xf40>
 10073c0:	d8c14c17 	ldw	r3,1328(sp)
 10073c4:	1880040c 	andi	r2,r3,16
 10073c8:	1002ea1e 	bne	r2,zero,1007f74 <___vfprintf_internal_r+0x15b8>
 10073cc:	d9014c17 	ldw	r4,1328(sp)
 10073d0:	2080100c 	andi	r2,r4,64
 10073d4:	1002e726 	beq	r2,zero,1007f74 <___vfprintf_internal_r+0x15b8>
 10073d8:	3880000f 	ldh	r2,0(r7)
 10073dc:	39c00104 	addi	r7,r7,4
 10073e0:	d9c14015 	stw	r7,1280(sp)
 10073e4:	1023d7fa 	srai	r17,r2,31
 10073e8:	1021883a 	mov	r16,r2
 10073ec:	88037216 	blt	r17,zero,10081b8 <___vfprintf_internal_r+0x17fc>
 10073f0:	01000044 	movi	r4,1
 10073f4:	98000416 	blt	r19,zero,1007408 <___vfprintf_internal_r+0xa4c>
 10073f8:	d8c14c17 	ldw	r3,1328(sp)
 10073fc:	00bfdfc4 	movi	r2,-129
 1007400:	1886703a 	and	r3,r3,r2
 1007404:	d8c14c15 	stw	r3,1328(sp)
 1007408:	8444b03a 	or	r2,r16,r17
 100740c:	1002261e 	bne	r2,zero,1007ca8 <___vfprintf_internal_r+0x12ec>
 1007410:	9802251e 	bne	r19,zero,1007ca8 <___vfprintf_internal_r+0x12ec>
 1007414:	20803fcc 	andi	r2,r4,255
 1007418:	10029b26 	beq	r2,zero,1007e88 <___vfprintf_internal_r+0x14cc>
 100741c:	d8c01904 	addi	r3,sp,100
 1007420:	dd000f04 	addi	r20,sp,60
 1007424:	d8c14115 	stw	r3,1284(sp)
 1007428:	d8c14117 	ldw	r3,1284(sp)
 100742c:	dcc14515 	stw	r19,1300(sp)
 1007430:	a0c5c83a 	sub	r2,r20,r3
 1007434:	11c00a04 	addi	r7,r2,40
 1007438:	99c0010e 	bge	r19,r7,1007440 <___vfprintf_internal_r+0xa84>
 100743c:	d9c14515 	stw	r7,1300(sp)
 1007440:	dcc14615 	stw	r19,1304(sp)
 1007444:	d8800407 	ldb	r2,16(sp)
 1007448:	103e4c26 	beq	r2,zero,1006d7c <___vfprintf_internal_r+0x3c0>
 100744c:	d8814517 	ldw	r2,1300(sp)
 1007450:	10800044 	addi	r2,r2,1
 1007454:	d8814515 	stw	r2,1300(sp)
 1007458:	003e4806 	br	1006d7c <___vfprintf_internal_r+0x3c0>
 100745c:	d9814c17 	ldw	r6,1328(sp)
 1007460:	31800414 	ori	r6,r6,16
 1007464:	d9814c15 	stw	r6,1328(sp)
 1007468:	d8c14c17 	ldw	r3,1328(sp)
 100746c:	1880080c 	andi	r2,r3,32
 1007470:	1001271e 	bne	r2,zero,1007910 <___vfprintf_internal_r+0xf54>
 1007474:	d9414c17 	ldw	r5,1328(sp)
 1007478:	2880040c 	andi	r2,r5,16
 100747c:	1002b61e 	bne	r2,zero,1007f58 <___vfprintf_internal_r+0x159c>
 1007480:	d9814c17 	ldw	r6,1328(sp)
 1007484:	3080100c 	andi	r2,r6,64
 1007488:	1002b326 	beq	r2,zero,1007f58 <___vfprintf_internal_r+0x159c>
 100748c:	3c00000b 	ldhu	r16,0(r7)
 1007490:	0009883a 	mov	r4,zero
 1007494:	39c00104 	addi	r7,r7,4
 1007498:	0023883a 	mov	r17,zero
 100749c:	d9c14015 	stw	r7,1280(sp)
 10074a0:	d8000405 	stb	zero,16(sp)
 10074a4:	003fd306 	br	10073f4 <___vfprintf_internal_r+0xa38>
 10074a8:	d9014c17 	ldw	r4,1328(sp)
 10074ac:	21000414 	ori	r4,r4,16
 10074b0:	d9014c15 	stw	r4,1328(sp)
 10074b4:	d9414c17 	ldw	r5,1328(sp)
 10074b8:	2880080c 	andi	r2,r5,32
 10074bc:	1001081e 	bne	r2,zero,10078e0 <___vfprintf_internal_r+0xf24>
 10074c0:	d8c14c17 	ldw	r3,1328(sp)
 10074c4:	1880040c 	andi	r2,r3,16
 10074c8:	1002b01e 	bne	r2,zero,1007f8c <___vfprintf_internal_r+0x15d0>
 10074cc:	d9014c17 	ldw	r4,1328(sp)
 10074d0:	2080100c 	andi	r2,r4,64
 10074d4:	1002ad26 	beq	r2,zero,1007f8c <___vfprintf_internal_r+0x15d0>
 10074d8:	3c00000b 	ldhu	r16,0(r7)
 10074dc:	01000044 	movi	r4,1
 10074e0:	39c00104 	addi	r7,r7,4
 10074e4:	0023883a 	mov	r17,zero
 10074e8:	d9c14015 	stw	r7,1280(sp)
 10074ec:	d8000405 	stb	zero,16(sp)
 10074f0:	003fc006 	br	10073f4 <___vfprintf_internal_r+0xa38>
 10074f4:	d9014f17 	ldw	r4,1340(sp)
 10074f8:	b00b883a 	mov	r5,r22
 10074fc:	d9800c04 	addi	r6,sp,48
 1007500:	10069640 	call	1006964 <__sprint_r>
 1007504:	103ee51e 	bne	r2,zero,100709c <___vfprintf_internal_r+0x6e0>
 1007508:	dc800e17 	ldw	r18,56(sp)
 100750c:	d8c01904 	addi	r3,sp,100
 1007510:	d9814c17 	ldw	r6,1328(sp)
 1007514:	3080004c 	andi	r2,r6,1
 1007518:	1005003a 	cmpeq	r2,r2,zero
 100751c:	103ea51e 	bne	r2,zero,1006fb4 <___vfprintf_internal_r+0x5f8>
 1007520:	00800044 	movi	r2,1
 1007524:	dc400d17 	ldw	r17,52(sp)
 1007528:	18800115 	stw	r2,4(r3)
 100752c:	d8814917 	ldw	r2,1316(sp)
 1007530:	94800044 	addi	r18,r18,1
 1007534:	8c400044 	addi	r17,r17,1
 1007538:	18800015 	stw	r2,0(r3)
 100753c:	008001c4 	movi	r2,7
 1007540:	dc800e15 	stw	r18,56(sp)
 1007544:	dc400d15 	stw	r17,52(sp)
 1007548:	14421e0e 	bge	r2,r17,1007dc4 <___vfprintf_internal_r+0x1408>
 100754c:	d9014f17 	ldw	r4,1340(sp)
 1007550:	b00b883a 	mov	r5,r22
 1007554:	d9800c04 	addi	r6,sp,48
 1007558:	10069640 	call	1006964 <__sprint_r>
 100755c:	103ecf1e 	bne	r2,zero,100709c <___vfprintf_internal_r+0x6e0>
 1007560:	dc800e17 	ldw	r18,56(sp)
 1007564:	d8c01904 	addi	r3,sp,100
 1007568:	003e9206 	br	1006fb4 <___vfprintf_internal_r+0x5f8>
 100756c:	d9014f17 	ldw	r4,1340(sp)
 1007570:	b00b883a 	mov	r5,r22
 1007574:	d9800c04 	addi	r6,sp,48
 1007578:	10069640 	call	1006964 <__sprint_r>
 100757c:	103ec026 	beq	r2,zero,1007080 <___vfprintf_internal_r+0x6c4>
 1007580:	003ec606 	br	100709c <___vfprintf_internal_r+0x6e0>
 1007584:	d9014f17 	ldw	r4,1340(sp)
 1007588:	b00b883a 	mov	r5,r22
 100758c:	d9800c04 	addi	r6,sp,48
 1007590:	d9c15115 	stw	r7,1348(sp)
 1007594:	10069640 	call	1006964 <__sprint_r>
 1007598:	d9c15117 	ldw	r7,1348(sp)
 100759c:	103ebf1e 	bne	r2,zero,100709c <___vfprintf_internal_r+0x6e0>
 10075a0:	dc800e17 	ldw	r18,56(sp)
 10075a4:	dc400d17 	ldw	r17,52(sp)
 10075a8:	dd401904 	addi	r21,sp,100
 10075ac:	003e7406 	br	1006f80 <___vfprintf_internal_r+0x5c4>
 10075b0:	d9014f17 	ldw	r4,1340(sp)
 10075b4:	b00b883a 	mov	r5,r22
 10075b8:	d9800c04 	addi	r6,sp,48
 10075bc:	d9c15115 	stw	r7,1348(sp)
 10075c0:	10069640 	call	1006964 <__sprint_r>
 10075c4:	d9c15117 	ldw	r7,1348(sp)
 10075c8:	103eb41e 	bne	r2,zero,100709c <___vfprintf_internal_r+0x6e0>
 10075cc:	dd401904 	addi	r21,sp,100
 10075d0:	003d6d06 	br	1006b88 <___vfprintf_internal_r+0x1cc>
 10075d4:	d9014f17 	ldw	r4,1340(sp)
 10075d8:	b00b883a 	mov	r5,r22
 10075dc:	d9800c04 	addi	r6,sp,48
 10075e0:	d9c15115 	stw	r7,1348(sp)
 10075e4:	10069640 	call	1006964 <__sprint_r>
 10075e8:	d9c15117 	ldw	r7,1348(sp)
 10075ec:	103eab1e 	bne	r2,zero,100709c <___vfprintf_internal_r+0x6e0>
 10075f0:	dc800e17 	ldw	r18,56(sp)
 10075f4:	dc400d17 	ldw	r17,52(sp)
 10075f8:	dd401904 	addi	r21,sp,100
 10075fc:	003e3406 	br	1006ed0 <___vfprintf_internal_r+0x514>
 1007600:	d9014f17 	ldw	r4,1340(sp)
 1007604:	b00b883a 	mov	r5,r22
 1007608:	d9800c04 	addi	r6,sp,48
 100760c:	d9c15115 	stw	r7,1348(sp)
 1007610:	10069640 	call	1006964 <__sprint_r>
 1007614:	d9c15117 	ldw	r7,1348(sp)
 1007618:	103ea01e 	bne	r2,zero,100709c <___vfprintf_internal_r+0x6e0>
 100761c:	dc800e17 	ldw	r18,56(sp)
 1007620:	dc400d17 	ldw	r17,52(sp)
 1007624:	dd401904 	addi	r21,sp,100
 1007628:	003e1c06 	br	1006e9c <___vfprintf_internal_r+0x4e0>
 100762c:	d9014f17 	ldw	r4,1340(sp)
 1007630:	b00b883a 	mov	r5,r22
 1007634:	d9800c04 	addi	r6,sp,48
 1007638:	d9c15115 	stw	r7,1348(sp)
 100763c:	10069640 	call	1006964 <__sprint_r>
 1007640:	d9c15117 	ldw	r7,1348(sp)
 1007644:	103e951e 	bne	r2,zero,100709c <___vfprintf_internal_r+0x6e0>
 1007648:	dc800e17 	ldw	r18,56(sp)
 100764c:	dc400d17 	ldw	r17,52(sp)
 1007650:	dd401904 	addi	r21,sp,100
 1007654:	003e0406 	br	1006e68 <___vfprintf_internal_r+0x4ac>
 1007658:	d9000517 	ldw	r4,20(sp)
 100765c:	0102520e 	bge	zero,r4,1007fa8 <___vfprintf_internal_r+0x15ec>
 1007660:	d9814717 	ldw	r6,1308(sp)
 1007664:	21807a16 	blt	r4,r6,1007850 <___vfprintf_internal_r+0xe94>
 1007668:	d8814117 	ldw	r2,1284(sp)
 100766c:	91a5883a 	add	r18,r18,r6
 1007670:	8c400044 	addi	r17,r17,1
 1007674:	a8800015 	stw	r2,0(r21)
 1007678:	008001c4 	movi	r2,7
 100767c:	a9800115 	stw	r6,4(r21)
 1007680:	dc800e15 	stw	r18,56(sp)
 1007684:	dc400d15 	stw	r17,52(sp)
 1007688:	1442f616 	blt	r2,r17,1008264 <___vfprintf_internal_r+0x18a8>
 100768c:	a8c00204 	addi	r3,r21,8
 1007690:	d9414717 	ldw	r5,1308(sp)
 1007694:	2161c83a 	sub	r16,r4,r5
 1007698:	043f9d0e 	bge	zero,r16,1007510 <___vfprintf_internal_r+0xb54>
 100769c:	00800404 	movi	r2,16
 10076a0:	1402130e 	bge	r2,r16,1007ef0 <___vfprintf_internal_r+0x1534>
 10076a4:	dc400d17 	ldw	r17,52(sp)
 10076a8:	1027883a 	mov	r19,r2
 10076ac:	070040b4 	movhi	fp,258
 10076b0:	e73d0284 	addi	fp,fp,-3062
 10076b4:	050001c4 	movi	r20,7
 10076b8:	00000306 	br	10076c8 <___vfprintf_internal_r+0xd0c>
 10076bc:	18c00204 	addi	r3,r3,8
 10076c0:	843ffc04 	addi	r16,r16,-16
 10076c4:	9c020d0e 	bge	r19,r16,1007efc <___vfprintf_internal_r+0x1540>
 10076c8:	94800404 	addi	r18,r18,16
 10076cc:	8c400044 	addi	r17,r17,1
 10076d0:	1f000015 	stw	fp,0(r3)
 10076d4:	1cc00115 	stw	r19,4(r3)
 10076d8:	dc800e15 	stw	r18,56(sp)
 10076dc:	dc400d15 	stw	r17,52(sp)
 10076e0:	a47ff60e 	bge	r20,r17,10076bc <___vfprintf_internal_r+0xd00>
 10076e4:	d9014f17 	ldw	r4,1340(sp)
 10076e8:	b00b883a 	mov	r5,r22
 10076ec:	d9800c04 	addi	r6,sp,48
 10076f0:	10069640 	call	1006964 <__sprint_r>
 10076f4:	103e691e 	bne	r2,zero,100709c <___vfprintf_internal_r+0x6e0>
 10076f8:	dc800e17 	ldw	r18,56(sp)
 10076fc:	dc400d17 	ldw	r17,52(sp)
 1007700:	d8c01904 	addi	r3,sp,100
 1007704:	003fee06 	br	10076c0 <___vfprintf_internal_r+0xd04>
 1007708:	d8814717 	ldw	r2,1308(sp)
 100770c:	143fffc4 	addi	r16,r2,-1
 1007710:	043e970e 	bge	zero,r16,1007170 <___vfprintf_internal_r+0x7b4>
 1007714:	00800404 	movi	r2,16
 1007718:	1400180e 	bge	r2,r16,100777c <___vfprintf_internal_r+0xdc0>
 100771c:	1029883a 	mov	r20,r2
 1007720:	070040b4 	movhi	fp,258
 1007724:	e73d0284 	addi	fp,fp,-3062
 1007728:	054001c4 	movi	r21,7
 100772c:	00000306 	br	100773c <___vfprintf_internal_r+0xd80>
 1007730:	9cc00204 	addi	r19,r19,8
 1007734:	843ffc04 	addi	r16,r16,-16
 1007738:	a400120e 	bge	r20,r16,1007784 <___vfprintf_internal_r+0xdc8>
 100773c:	94800404 	addi	r18,r18,16
 1007740:	8c400044 	addi	r17,r17,1
 1007744:	9f000015 	stw	fp,0(r19)
 1007748:	9d000115 	stw	r20,4(r19)
 100774c:	dc800e15 	stw	r18,56(sp)
 1007750:	dc400d15 	stw	r17,52(sp)
 1007754:	ac7ff60e 	bge	r21,r17,1007730 <___vfprintf_internal_r+0xd74>
 1007758:	d9014f17 	ldw	r4,1340(sp)
 100775c:	b00b883a 	mov	r5,r22
 1007760:	d9800c04 	addi	r6,sp,48
 1007764:	10069640 	call	1006964 <__sprint_r>
 1007768:	103e4c1e 	bne	r2,zero,100709c <___vfprintf_internal_r+0x6e0>
 100776c:	dc800e17 	ldw	r18,56(sp)
 1007770:	dc400d17 	ldw	r17,52(sp)
 1007774:	dcc01904 	addi	r19,sp,100
 1007778:	003fee06 	br	1007734 <___vfprintf_internal_r+0xd78>
 100777c:	070040b4 	movhi	fp,258
 1007780:	e73d0284 	addi	fp,fp,-3062
 1007784:	9425883a 	add	r18,r18,r16
 1007788:	8c400044 	addi	r17,r17,1
 100778c:	008001c4 	movi	r2,7
 1007790:	9f000015 	stw	fp,0(r19)
 1007794:	9c000115 	stw	r16,4(r19)
 1007798:	dc800e15 	stw	r18,56(sp)
 100779c:	dc400d15 	stw	r17,52(sp)
 10077a0:	147e720e 	bge	r2,r17,100716c <___vfprintf_internal_r+0x7b0>
 10077a4:	d9014f17 	ldw	r4,1340(sp)
 10077a8:	b00b883a 	mov	r5,r22
 10077ac:	d9800c04 	addi	r6,sp,48
 10077b0:	10069640 	call	1006964 <__sprint_r>
 10077b4:	103e391e 	bne	r2,zero,100709c <___vfprintf_internal_r+0x6e0>
 10077b8:	dc800e17 	ldw	r18,56(sp)
 10077bc:	dc400d17 	ldw	r17,52(sp)
 10077c0:	dcc01904 	addi	r19,sp,100
 10077c4:	003e6a06 	br	1007170 <___vfprintf_internal_r+0x7b4>
 10077c8:	d9014f17 	ldw	r4,1340(sp)
 10077cc:	b00b883a 	mov	r5,r22
 10077d0:	d9800c04 	addi	r6,sp,48
 10077d4:	d9c15115 	stw	r7,1348(sp)
 10077d8:	10069640 	call	1006964 <__sprint_r>
 10077dc:	d9c15117 	ldw	r7,1348(sp)
 10077e0:	103e2e1e 	bne	r2,zero,100709c <___vfprintf_internal_r+0x6e0>
 10077e4:	dc800e17 	ldw	r18,56(sp)
 10077e8:	dc400d17 	ldw	r17,52(sp)
 10077ec:	dd401904 	addi	r21,sp,100
 10077f0:	003dba06 	br	1006edc <___vfprintf_internal_r+0x520>
 10077f4:	d9014f17 	ldw	r4,1340(sp)
 10077f8:	b00b883a 	mov	r5,r22
 10077fc:	d9800c04 	addi	r6,sp,48
 1007800:	10069640 	call	1006964 <__sprint_r>
 1007804:	103e251e 	bne	r2,zero,100709c <___vfprintf_internal_r+0x6e0>
 1007808:	dc800e17 	ldw	r18,56(sp)
 100780c:	dc400d17 	ldw	r17,52(sp)
 1007810:	dcc01904 	addi	r19,sp,100
 1007814:	003e4206 	br	1007120 <___vfprintf_internal_r+0x764>
 1007818:	d9014f17 	ldw	r4,1340(sp)
 100781c:	b00b883a 	mov	r5,r22
 1007820:	d9800c04 	addi	r6,sp,48
 1007824:	10069640 	call	1006964 <__sprint_r>
 1007828:	103e1c1e 	bne	r2,zero,100709c <___vfprintf_internal_r+0x6e0>
 100782c:	dc800e17 	ldw	r18,56(sp)
 1007830:	dc400d17 	ldw	r17,52(sp)
 1007834:	d8c01904 	addi	r3,sp,100
 1007838:	003e2e06 	br	10070f4 <___vfprintf_internal_r+0x738>
 100783c:	d9414c17 	ldw	r5,1328(sp)
 1007840:	2880004c 	andi	r2,r5,1
 1007844:	1005003a 	cmpeq	r2,r2,zero
 1007848:	103dda1e 	bne	r2,zero,1006fb4 <___vfprintf_internal_r+0x5f8>
 100784c:	003e9f06 	br	10072cc <___vfprintf_internal_r+0x910>
 1007850:	d8c14117 	ldw	r3,1284(sp)
 1007854:	9125883a 	add	r18,r18,r4
 1007858:	8c400044 	addi	r17,r17,1
 100785c:	008001c4 	movi	r2,7
 1007860:	a8c00015 	stw	r3,0(r21)
 1007864:	a9000115 	stw	r4,4(r21)
 1007868:	dc800e15 	stw	r18,56(sp)
 100786c:	dc400d15 	stw	r17,52(sp)
 1007870:	14426616 	blt	r2,r17,100820c <___vfprintf_internal_r+0x1850>
 1007874:	a8c00204 	addi	r3,r21,8
 1007878:	d9414917 	ldw	r5,1316(sp)
 100787c:	00800044 	movi	r2,1
 1007880:	94800044 	addi	r18,r18,1
 1007884:	8c400044 	addi	r17,r17,1
 1007888:	18800115 	stw	r2,4(r3)
 100788c:	008001c4 	movi	r2,7
 1007890:	19400015 	stw	r5,0(r3)
 1007894:	dc800e15 	stw	r18,56(sp)
 1007898:	dc400d15 	stw	r17,52(sp)
 100789c:	2021883a 	mov	r16,r4
 10078a0:	14425016 	blt	r2,r17,10081e4 <___vfprintf_internal_r+0x1828>
 10078a4:	19400204 	addi	r5,r3,8
 10078a8:	d9814717 	ldw	r6,1308(sp)
 10078ac:	8c400044 	addi	r17,r17,1
 10078b0:	dc400d15 	stw	r17,52(sp)
 10078b4:	3107c83a 	sub	r3,r6,r4
 10078b8:	d9014117 	ldw	r4,1284(sp)
 10078bc:	90e5883a 	add	r18,r18,r3
 10078c0:	28c00115 	stw	r3,4(r5)
 10078c4:	8105883a 	add	r2,r16,r4
 10078c8:	28800015 	stw	r2,0(r5)
 10078cc:	008001c4 	movi	r2,7
 10078d0:	dc800e15 	stw	r18,56(sp)
 10078d4:	147f1d16 	blt	r2,r17,100754c <___vfprintf_internal_r+0xb90>
 10078d8:	28c00204 	addi	r3,r5,8
 10078dc:	003db506 	br	1006fb4 <___vfprintf_internal_r+0x5f8>
 10078e0:	3c000017 	ldw	r16,0(r7)
 10078e4:	3c400117 	ldw	r17,4(r7)
 10078e8:	39800204 	addi	r6,r7,8
 10078ec:	01000044 	movi	r4,1
 10078f0:	d9814015 	stw	r6,1280(sp)
 10078f4:	d8000405 	stb	zero,16(sp)
 10078f8:	003ebe06 	br	10073f4 <___vfprintf_internal_r+0xa38>
 10078fc:	3c000017 	ldw	r16,0(r7)
 1007900:	3c400117 	ldw	r17,4(r7)
 1007904:	38800204 	addi	r2,r7,8
 1007908:	d8814015 	stw	r2,1280(sp)
 100790c:	003eb706 	br	10073ec <___vfprintf_internal_r+0xa30>
 1007910:	3c000017 	ldw	r16,0(r7)
 1007914:	3c400117 	ldw	r17,4(r7)
 1007918:	39000204 	addi	r4,r7,8
 100791c:	d9014015 	stw	r4,1280(sp)
 1007920:	0009883a 	mov	r4,zero
 1007924:	d8000405 	stb	zero,16(sp)
 1007928:	003eb206 	br	10073f4 <___vfprintf_internal_r+0xa38>
 100792c:	38c00017 	ldw	r3,0(r7)
 1007930:	39c00104 	addi	r7,r7,4
 1007934:	d8c14a15 	stw	r3,1320(sp)
 1007938:	1800d10e 	bge	r3,zero,1007c80 <___vfprintf_internal_r+0x12c4>
 100793c:	00c7c83a 	sub	r3,zero,r3
 1007940:	d8c14a15 	stw	r3,1320(sp)
 1007944:	d9014c17 	ldw	r4,1328(sp)
 1007948:	b8c00007 	ldb	r3,0(r23)
 100794c:	21000114 	ori	r4,r4,4
 1007950:	d9014c15 	stw	r4,1328(sp)
 1007954:	003c9806 	br	1006bb8 <___vfprintf_internal_r+0x1fc>
 1007958:	d9814c17 	ldw	r6,1328(sp)
 100795c:	3080080c 	andi	r2,r6,32
 1007960:	1001f026 	beq	r2,zero,1008124 <___vfprintf_internal_r+0x1768>
 1007964:	d9014b17 	ldw	r4,1324(sp)
 1007968:	38800017 	ldw	r2,0(r7)
 100796c:	39c00104 	addi	r7,r7,4
 1007970:	d9c14015 	stw	r7,1280(sp)
 1007974:	2007d7fa 	srai	r3,r4,31
 1007978:	d9c14017 	ldw	r7,1280(sp)
 100797c:	11000015 	stw	r4,0(r2)
 1007980:	10c00115 	stw	r3,4(r2)
 1007984:	003c6906 	br	1006b2c <___vfprintf_internal_r+0x170>
 1007988:	b8c00007 	ldb	r3,0(r23)
 100798c:	00801b04 	movi	r2,108
 1007990:	18824f26 	beq	r3,r2,10082d0 <___vfprintf_internal_r+0x1914>
 1007994:	d9414c17 	ldw	r5,1328(sp)
 1007998:	29400414 	ori	r5,r5,16
 100799c:	d9414c15 	stw	r5,1328(sp)
 10079a0:	003c8506 	br	1006bb8 <___vfprintf_internal_r+0x1fc>
 10079a4:	d9814c17 	ldw	r6,1328(sp)
 10079a8:	b8c00007 	ldb	r3,0(r23)
 10079ac:	31800814 	ori	r6,r6,32
 10079b0:	d9814c15 	stw	r6,1328(sp)
 10079b4:	003c8006 	br	1006bb8 <___vfprintf_internal_r+0x1fc>
 10079b8:	d8814c17 	ldw	r2,1328(sp)
 10079bc:	3c000017 	ldw	r16,0(r7)
 10079c0:	00c01e04 	movi	r3,120
 10079c4:	10800094 	ori	r2,r2,2
 10079c8:	d8814c15 	stw	r2,1328(sp)
 10079cc:	39c00104 	addi	r7,r7,4
 10079d0:	014040b4 	movhi	r5,258
 10079d4:	297ceb04 	addi	r5,r5,-3156
 10079d8:	00800c04 	movi	r2,48
 10079dc:	0023883a 	mov	r17,zero
 10079e0:	01000084 	movi	r4,2
 10079e4:	d9c14015 	stw	r7,1280(sp)
 10079e8:	d8c14d15 	stw	r3,1332(sp)
 10079ec:	d9414415 	stw	r5,1296(sp)
 10079f0:	d8800445 	stb	r2,17(sp)
 10079f4:	d8c00485 	stb	r3,18(sp)
 10079f8:	d8000405 	stb	zero,16(sp)
 10079fc:	003e7d06 	br	10073f4 <___vfprintf_internal_r+0xa38>
 1007a00:	d8814c17 	ldw	r2,1328(sp)
 1007a04:	b8c00007 	ldb	r3,0(r23)
 1007a08:	10801014 	ori	r2,r2,64
 1007a0c:	d8814c15 	stw	r2,1328(sp)
 1007a10:	003c6906 	br	1006bb8 <___vfprintf_internal_r+0x1fc>
 1007a14:	d9414c17 	ldw	r5,1328(sp)
 1007a18:	2880020c 	andi	r2,r5,8
 1007a1c:	1001df26 	beq	r2,zero,100819c <___vfprintf_internal_r+0x17e0>
 1007a20:	39800017 	ldw	r6,0(r7)
 1007a24:	38800204 	addi	r2,r7,8
 1007a28:	d8814015 	stw	r2,1280(sp)
 1007a2c:	d9814215 	stw	r6,1288(sp)
 1007a30:	39c00117 	ldw	r7,4(r7)
 1007a34:	d9c14315 	stw	r7,1292(sp)
 1007a38:	d9014217 	ldw	r4,1288(sp)
 1007a3c:	d9414317 	ldw	r5,1292(sp)
 1007a40:	100e9580 	call	100e958 <__isinfd>
 1007a44:	10021726 	beq	r2,zero,10082a4 <___vfprintf_internal_r+0x18e8>
 1007a48:	d9014217 	ldw	r4,1288(sp)
 1007a4c:	d9414317 	ldw	r5,1292(sp)
 1007a50:	000d883a 	mov	r6,zero
 1007a54:	000f883a 	mov	r7,zero
 1007a58:	1012e100 	call	1012e10 <__ltdf2>
 1007a5c:	1002ca16 	blt	r2,zero,1008588 <___vfprintf_internal_r+0x1bcc>
 1007a60:	d9414d17 	ldw	r5,1332(sp)
 1007a64:	008011c4 	movi	r2,71
 1007a68:	11420a16 	blt	r2,r5,1008294 <___vfprintf_internal_r+0x18d8>
 1007a6c:	018040b4 	movhi	r6,258
 1007a70:	31bcf004 	addi	r6,r6,-3136
 1007a74:	d9814115 	stw	r6,1284(sp)
 1007a78:	d9014c17 	ldw	r4,1328(sp)
 1007a7c:	00c000c4 	movi	r3,3
 1007a80:	00bfdfc4 	movi	r2,-129
 1007a84:	2088703a 	and	r4,r4,r2
 1007a88:	180f883a 	mov	r7,r3
 1007a8c:	d8c14515 	stw	r3,1300(sp)
 1007a90:	d9014c15 	stw	r4,1328(sp)
 1007a94:	d8014615 	stw	zero,1304(sp)
 1007a98:	003e6a06 	br	1007444 <___vfprintf_internal_r+0xa88>
 1007a9c:	38800017 	ldw	r2,0(r7)
 1007aa0:	00c00044 	movi	r3,1
 1007aa4:	39c00104 	addi	r7,r7,4
 1007aa8:	d9c14015 	stw	r7,1280(sp)
 1007aac:	d9000f04 	addi	r4,sp,60
 1007ab0:	180f883a 	mov	r7,r3
 1007ab4:	d8c14515 	stw	r3,1300(sp)
 1007ab8:	d9014115 	stw	r4,1284(sp)
 1007abc:	d8800f05 	stb	r2,60(sp)
 1007ac0:	d8000405 	stb	zero,16(sp)
 1007ac4:	003cac06 	br	1006d78 <___vfprintf_internal_r+0x3bc>
 1007ac8:	014040b4 	movhi	r5,258
 1007acc:	297cf604 	addi	r5,r5,-3112
 1007ad0:	d9414415 	stw	r5,1296(sp)
 1007ad4:	d9814c17 	ldw	r6,1328(sp)
 1007ad8:	3080080c 	andi	r2,r6,32
 1007adc:	1000f926 	beq	r2,zero,1007ec4 <___vfprintf_internal_r+0x1508>
 1007ae0:	3c000017 	ldw	r16,0(r7)
 1007ae4:	3c400117 	ldw	r17,4(r7)
 1007ae8:	38800204 	addi	r2,r7,8
 1007aec:	d8814015 	stw	r2,1280(sp)
 1007af0:	d9414c17 	ldw	r5,1328(sp)
 1007af4:	2880004c 	andi	r2,r5,1
 1007af8:	1005003a 	cmpeq	r2,r2,zero
 1007afc:	1000b31e 	bne	r2,zero,1007dcc <___vfprintf_internal_r+0x1410>
 1007b00:	8444b03a 	or	r2,r16,r17
 1007b04:	1000b126 	beq	r2,zero,1007dcc <___vfprintf_internal_r+0x1410>
 1007b08:	d9814d17 	ldw	r6,1332(sp)
 1007b0c:	29400094 	ori	r5,r5,2
 1007b10:	00800c04 	movi	r2,48
 1007b14:	01000084 	movi	r4,2
 1007b18:	d9414c15 	stw	r5,1328(sp)
 1007b1c:	d8800445 	stb	r2,17(sp)
 1007b20:	d9800485 	stb	r6,18(sp)
 1007b24:	d8000405 	stb	zero,16(sp)
 1007b28:	003e3206 	br	10073f4 <___vfprintf_internal_r+0xa38>
 1007b2c:	018040b4 	movhi	r6,258
 1007b30:	31bceb04 	addi	r6,r6,-3156
 1007b34:	d9814415 	stw	r6,1296(sp)
 1007b38:	003fe606 	br	1007ad4 <___vfprintf_internal_r+0x1118>
 1007b3c:	00800ac4 	movi	r2,43
 1007b40:	d8800405 	stb	r2,16(sp)
 1007b44:	b8c00007 	ldb	r3,0(r23)
 1007b48:	003c1b06 	br	1006bb8 <___vfprintf_internal_r+0x1fc>
 1007b4c:	d8814c17 	ldw	r2,1328(sp)
 1007b50:	b8c00007 	ldb	r3,0(r23)
 1007b54:	10800054 	ori	r2,r2,1
 1007b58:	d8814c15 	stw	r2,1328(sp)
 1007b5c:	003c1606 	br	1006bb8 <___vfprintf_internal_r+0x1fc>
 1007b60:	d8800407 	ldb	r2,16(sp)
 1007b64:	1000461e 	bne	r2,zero,1007c80 <___vfprintf_internal_r+0x12c4>
 1007b68:	00800804 	movi	r2,32
 1007b6c:	d8800405 	stb	r2,16(sp)
 1007b70:	b8c00007 	ldb	r3,0(r23)
 1007b74:	003c1006 	br	1006bb8 <___vfprintf_internal_r+0x1fc>
 1007b78:	d9814c17 	ldw	r6,1328(sp)
 1007b7c:	b8c00007 	ldb	r3,0(r23)
 1007b80:	31800214 	ori	r6,r6,8
 1007b84:	d9814c15 	stw	r6,1328(sp)
 1007b88:	003c0b06 	br	1006bb8 <___vfprintf_internal_r+0x1fc>
 1007b8c:	0007883a 	mov	r3,zero
 1007b90:	01000244 	movi	r4,9
 1007b94:	188002a4 	muli	r2,r3,10
 1007b98:	b8c00007 	ldb	r3,0(r23)
 1007b9c:	d9814d17 	ldw	r6,1332(sp)
 1007ba0:	bdc00044 	addi	r23,r23,1
 1007ba4:	d8c14d15 	stw	r3,1332(sp)
 1007ba8:	d9414d17 	ldw	r5,1332(sp)
 1007bac:	3085883a 	add	r2,r6,r2
 1007bb0:	10fff404 	addi	r3,r2,-48
 1007bb4:	28bff404 	addi	r2,r5,-48
 1007bb8:	20bff62e 	bgeu	r4,r2,1007b94 <___vfprintf_internal_r+0x11d8>
 1007bbc:	d8c14a15 	stw	r3,1320(sp)
 1007bc0:	003bff06 	br	1006bc0 <___vfprintf_internal_r+0x204>
 1007bc4:	d9414c17 	ldw	r5,1328(sp)
 1007bc8:	b8c00007 	ldb	r3,0(r23)
 1007bcc:	29402014 	ori	r5,r5,128
 1007bd0:	d9414c15 	stw	r5,1328(sp)
 1007bd4:	003bf806 	br	1006bb8 <___vfprintf_internal_r+0x1fc>
 1007bd8:	b8c00007 	ldb	r3,0(r23)
 1007bdc:	00800a84 	movi	r2,42
 1007be0:	bdc00044 	addi	r23,r23,1
 1007be4:	18831526 	beq	r3,r2,100883c <___vfprintf_internal_r+0x1e80>
 1007be8:	d8c14d15 	stw	r3,1332(sp)
 1007bec:	18bff404 	addi	r2,r3,-48
 1007bf0:	00c00244 	movi	r3,9
 1007bf4:	18827836 	bltu	r3,r2,10085d8 <___vfprintf_internal_r+0x1c1c>
 1007bf8:	000d883a 	mov	r6,zero
 1007bfc:	308002a4 	muli	r2,r6,10
 1007c00:	b9800007 	ldb	r6,0(r23)
 1007c04:	d9414d17 	ldw	r5,1332(sp)
 1007c08:	bdc00044 	addi	r23,r23,1
 1007c0c:	d9814d15 	stw	r6,1332(sp)
 1007c10:	d9014d17 	ldw	r4,1332(sp)
 1007c14:	1145883a 	add	r2,r2,r5
 1007c18:	11bff404 	addi	r6,r2,-48
 1007c1c:	20bff404 	addi	r2,r4,-48
 1007c20:	18bff62e 	bgeu	r3,r2,1007bfc <___vfprintf_internal_r+0x1240>
 1007c24:	3027883a 	mov	r19,r6
 1007c28:	303be50e 	bge	r6,zero,1006bc0 <___vfprintf_internal_r+0x204>
 1007c2c:	04ffffc4 	movi	r19,-1
 1007c30:	003be306 	br	1006bc0 <___vfprintf_internal_r+0x204>
 1007c34:	d8000405 	stb	zero,16(sp)
 1007c38:	39800017 	ldw	r6,0(r7)
 1007c3c:	39c00104 	addi	r7,r7,4
 1007c40:	d9c14015 	stw	r7,1280(sp)
 1007c44:	d9814115 	stw	r6,1284(sp)
 1007c48:	3001c926 	beq	r6,zero,1008370 <___vfprintf_internal_r+0x19b4>
 1007c4c:	98000e16 	blt	r19,zero,1007c88 <___vfprintf_internal_r+0x12cc>
 1007c50:	d9014117 	ldw	r4,1284(sp)
 1007c54:	000b883a 	mov	r5,zero
 1007c58:	980d883a 	mov	r6,r19
 1007c5c:	100ce940 	call	100ce94 <memchr>
 1007c60:	10025926 	beq	r2,zero,10085c8 <___vfprintf_internal_r+0x1c0c>
 1007c64:	d8c14117 	ldw	r3,1284(sp)
 1007c68:	10cfc83a 	sub	r7,r2,r3
 1007c6c:	99c19e16 	blt	r19,r7,10082e8 <___vfprintf_internal_r+0x192c>
 1007c70:	d9c14515 	stw	r7,1300(sp)
 1007c74:	38000916 	blt	r7,zero,1007c9c <___vfprintf_internal_r+0x12e0>
 1007c78:	d8014615 	stw	zero,1304(sp)
 1007c7c:	003df106 	br	1007444 <___vfprintf_internal_r+0xa88>
 1007c80:	b8c00007 	ldb	r3,0(r23)
 1007c84:	003bcc06 	br	1006bb8 <___vfprintf_internal_r+0x1fc>
 1007c88:	d9014117 	ldw	r4,1284(sp)
 1007c8c:	10068940 	call	1006894 <strlen>
 1007c90:	d8814515 	stw	r2,1300(sp)
 1007c94:	100f883a 	mov	r7,r2
 1007c98:	103ff70e 	bge	r2,zero,1007c78 <___vfprintf_internal_r+0x12bc>
 1007c9c:	d8014515 	stw	zero,1300(sp)
 1007ca0:	d8014615 	stw	zero,1304(sp)
 1007ca4:	003de706 	br	1007444 <___vfprintf_internal_r+0xa88>
 1007ca8:	20c03fcc 	andi	r3,r4,255
 1007cac:	00800044 	movi	r2,1
 1007cb0:	18802d26 	beq	r3,r2,1007d68 <___vfprintf_internal_r+0x13ac>
 1007cb4:	18800e36 	bltu	r3,r2,1007cf0 <___vfprintf_internal_r+0x1334>
 1007cb8:	00800084 	movi	r2,2
 1007cbc:	1880fa26 	beq	r3,r2,10080a8 <___vfprintf_internal_r+0x16ec>
 1007cc0:	010040b4 	movhi	r4,258
 1007cc4:	213cfb04 	addi	r4,r4,-3092
 1007cc8:	10068940 	call	1006894 <strlen>
 1007ccc:	100f883a 	mov	r7,r2
 1007cd0:	dcc14515 	stw	r19,1300(sp)
 1007cd4:	9880010e 	bge	r19,r2,1007cdc <___vfprintf_internal_r+0x1320>
 1007cd8:	d8814515 	stw	r2,1300(sp)
 1007cdc:	008040b4 	movhi	r2,258
 1007ce0:	10bcfb04 	addi	r2,r2,-3092
 1007ce4:	dcc14615 	stw	r19,1304(sp)
 1007ce8:	d8814115 	stw	r2,1284(sp)
 1007cec:	003dd506 	br	1007444 <___vfprintf_internal_r+0xa88>
 1007cf0:	d9401904 	addi	r5,sp,100
 1007cf4:	dd000f04 	addi	r20,sp,60
 1007cf8:	d9414115 	stw	r5,1284(sp)
 1007cfc:	880a977a 	slli	r5,r17,29
 1007d00:	d9814117 	ldw	r6,1284(sp)
 1007d04:	8004d0fa 	srli	r2,r16,3
 1007d08:	8806d0fa 	srli	r3,r17,3
 1007d0c:	810001cc 	andi	r4,r16,7
 1007d10:	2884b03a 	or	r2,r5,r2
 1007d14:	31bfffc4 	addi	r6,r6,-1
 1007d18:	21000c04 	addi	r4,r4,48
 1007d1c:	d9814115 	stw	r6,1284(sp)
 1007d20:	10cab03a 	or	r5,r2,r3
 1007d24:	31000005 	stb	r4,0(r6)
 1007d28:	1021883a 	mov	r16,r2
 1007d2c:	1823883a 	mov	r17,r3
 1007d30:	283ff21e 	bne	r5,zero,1007cfc <___vfprintf_internal_r+0x1340>
 1007d34:	d8c14c17 	ldw	r3,1328(sp)
 1007d38:	1880004c 	andi	r2,r3,1
 1007d3c:	1005003a 	cmpeq	r2,r2,zero
 1007d40:	103db91e 	bne	r2,zero,1007428 <___vfprintf_internal_r+0xa6c>
 1007d44:	20803fcc 	andi	r2,r4,255
 1007d48:	1080201c 	xori	r2,r2,128
 1007d4c:	10bfe004 	addi	r2,r2,-128
 1007d50:	00c00c04 	movi	r3,48
 1007d54:	10fdb426 	beq	r2,r3,1007428 <___vfprintf_internal_r+0xa6c>
 1007d58:	31bfffc4 	addi	r6,r6,-1
 1007d5c:	d9814115 	stw	r6,1284(sp)
 1007d60:	30c00005 	stb	r3,0(r6)
 1007d64:	003db006 	br	1007428 <___vfprintf_internal_r+0xa6c>
 1007d68:	88800068 	cmpgeui	r2,r17,1
 1007d6c:	10002c1e 	bne	r2,zero,1007e20 <___vfprintf_internal_r+0x1464>
 1007d70:	8800021e 	bne	r17,zero,1007d7c <___vfprintf_internal_r+0x13c0>
 1007d74:	00800244 	movi	r2,9
 1007d78:	14002936 	bltu	r2,r16,1007e20 <___vfprintf_internal_r+0x1464>
 1007d7c:	d90018c4 	addi	r4,sp,99
 1007d80:	dd000f04 	addi	r20,sp,60
 1007d84:	d9014115 	stw	r4,1284(sp)
 1007d88:	d9014117 	ldw	r4,1284(sp)
 1007d8c:	80800c04 	addi	r2,r16,48
 1007d90:	20800005 	stb	r2,0(r4)
 1007d94:	003da406 	br	1007428 <___vfprintf_internal_r+0xa6c>
 1007d98:	dc400d17 	ldw	r17,52(sp)
 1007d9c:	070040b4 	movhi	fp,258
 1007da0:	e73d0284 	addi	fp,fp,-3062
 1007da4:	9425883a 	add	r18,r18,r16
 1007da8:	8c400044 	addi	r17,r17,1
 1007dac:	008001c4 	movi	r2,7
 1007db0:	1f000015 	stw	fp,0(r3)
 1007db4:	1c000115 	stw	r16,4(r3)
 1007db8:	dc800e15 	stw	r18,56(sp)
 1007dbc:	dc400d15 	stw	r17,52(sp)
 1007dc0:	147de216 	blt	r2,r17,100754c <___vfprintf_internal_r+0xb90>
 1007dc4:	18c00204 	addi	r3,r3,8
 1007dc8:	003c7a06 	br	1006fb4 <___vfprintf_internal_r+0x5f8>
 1007dcc:	01000084 	movi	r4,2
 1007dd0:	d8000405 	stb	zero,16(sp)
 1007dd4:	003d8706 	br	10073f4 <___vfprintf_internal_r+0xa38>
 1007dd8:	d9814c17 	ldw	r6,1328(sp)
 1007ddc:	30c4703a 	and	r2,r6,r3
 1007de0:	1005003a 	cmpeq	r2,r2,zero
 1007de4:	103cb926 	beq	r2,zero,10070cc <___vfprintf_internal_r+0x710>
 1007de8:	d9014117 	ldw	r4,1284(sp)
 1007dec:	94800044 	addi	r18,r18,1
 1007df0:	8c400044 	addi	r17,r17,1
 1007df4:	008001c4 	movi	r2,7
 1007df8:	a9000015 	stw	r4,0(r21)
 1007dfc:	a8c00115 	stw	r3,4(r21)
 1007e00:	dc800e15 	stw	r18,56(sp)
 1007e04:	dc400d15 	stw	r17,52(sp)
 1007e08:	147e6616 	blt	r2,r17,10077a4 <___vfprintf_internal_r+0xde8>
 1007e0c:	acc00204 	addi	r19,r21,8
 1007e10:	003cd706 	br	1007170 <___vfprintf_internal_r+0x7b4>
 1007e14:	070040b4 	movhi	fp,258
 1007e18:	e73d0284 	addi	fp,fp,-3062
 1007e1c:	003c4f06 	br	1006f5c <___vfprintf_internal_r+0x5a0>
 1007e20:	dd000f04 	addi	r20,sp,60
 1007e24:	dc801904 	addi	r18,sp,100
 1007e28:	8009883a 	mov	r4,r16
 1007e2c:	880b883a 	mov	r5,r17
 1007e30:	01800284 	movi	r6,10
 1007e34:	000f883a 	mov	r7,zero
 1007e38:	10126f80 	call	10126f8 <__umoddi3>
 1007e3c:	12000c04 	addi	r8,r2,48
 1007e40:	94bfffc4 	addi	r18,r18,-1
 1007e44:	8009883a 	mov	r4,r16
 1007e48:	880b883a 	mov	r5,r17
 1007e4c:	01800284 	movi	r6,10
 1007e50:	000f883a 	mov	r7,zero
 1007e54:	92000005 	stb	r8,0(r18)
 1007e58:	101211c0 	call	101211c <__udivdi3>
 1007e5c:	1009883a 	mov	r4,r2
 1007e60:	1021883a 	mov	r16,r2
 1007e64:	18800068 	cmpgeui	r2,r3,1
 1007e68:	1823883a 	mov	r17,r3
 1007e6c:	103fee1e 	bne	r2,zero,1007e28 <___vfprintf_internal_r+0x146c>
 1007e70:	1800021e 	bne	r3,zero,1007e7c <___vfprintf_internal_r+0x14c0>
 1007e74:	00800244 	movi	r2,9
 1007e78:	113feb36 	bltu	r2,r4,1007e28 <___vfprintf_internal_r+0x146c>
 1007e7c:	94bfffc4 	addi	r18,r18,-1
 1007e80:	dc814115 	stw	r18,1284(sp)
 1007e84:	003fc006 	br	1007d88 <___vfprintf_internal_r+0x13cc>
 1007e88:	d9014c17 	ldw	r4,1328(sp)
 1007e8c:	2080004c 	andi	r2,r4,1
 1007e90:	10009a1e 	bne	r2,zero,10080fc <___vfprintf_internal_r+0x1740>
 1007e94:	d9401904 	addi	r5,sp,100
 1007e98:	dd000f04 	addi	r20,sp,60
 1007e9c:	d9414115 	stw	r5,1284(sp)
 1007ea0:	003d6106 	br	1007428 <___vfprintf_internal_r+0xa6c>
 1007ea4:	d9014f17 	ldw	r4,1340(sp)
 1007ea8:	b00b883a 	mov	r5,r22
 1007eac:	d9800c04 	addi	r6,sp,48
 1007eb0:	10069640 	call	1006964 <__sprint_r>
 1007eb4:	103c791e 	bne	r2,zero,100709c <___vfprintf_internal_r+0x6e0>
 1007eb8:	dc800e17 	ldw	r18,56(sp)
 1007ebc:	d8c01904 	addi	r3,sp,100
 1007ec0:	003cff06 	br	10072c0 <___vfprintf_internal_r+0x904>
 1007ec4:	d8c14c17 	ldw	r3,1328(sp)
 1007ec8:	1880040c 	andi	r2,r3,16
 1007ecc:	1000711e 	bne	r2,zero,1008094 <___vfprintf_internal_r+0x16d8>
 1007ed0:	d9014c17 	ldw	r4,1328(sp)
 1007ed4:	2080100c 	andi	r2,r4,64
 1007ed8:	10006e26 	beq	r2,zero,1008094 <___vfprintf_internal_r+0x16d8>
 1007edc:	3c00000b 	ldhu	r16,0(r7)
 1007ee0:	0023883a 	mov	r17,zero
 1007ee4:	39c00104 	addi	r7,r7,4
 1007ee8:	d9c14015 	stw	r7,1280(sp)
 1007eec:	003f0006 	br	1007af0 <___vfprintf_internal_r+0x1134>
 1007ef0:	dc400d17 	ldw	r17,52(sp)
 1007ef4:	070040b4 	movhi	fp,258
 1007ef8:	e73d0284 	addi	fp,fp,-3062
 1007efc:	9425883a 	add	r18,r18,r16
 1007f00:	8c400044 	addi	r17,r17,1
 1007f04:	008001c4 	movi	r2,7
 1007f08:	1f000015 	stw	fp,0(r3)
 1007f0c:	1c000115 	stw	r16,4(r3)
 1007f10:	dc800e15 	stw	r18,56(sp)
 1007f14:	dc400d15 	stw	r17,52(sp)
 1007f18:	147d7616 	blt	r2,r17,10074f4 <___vfprintf_internal_r+0xb38>
 1007f1c:	18c00204 	addi	r3,r3,8
 1007f20:	003d7b06 	br	1007510 <___vfprintf_internal_r+0xb54>
 1007f24:	dc800e17 	ldw	r18,56(sp)
 1007f28:	dc400d17 	ldw	r17,52(sp)
 1007f2c:	070040b4 	movhi	fp,258
 1007f30:	e73d0684 	addi	fp,fp,-3046
 1007f34:	003bc006 	br	1006e38 <___vfprintf_internal_r+0x47c>
 1007f38:	d9014f17 	ldw	r4,1340(sp)
 1007f3c:	b00b883a 	mov	r5,r22
 1007f40:	d9800c04 	addi	r6,sp,48
 1007f44:	10069640 	call	1006964 <__sprint_r>
 1007f48:	103c541e 	bne	r2,zero,100709c <___vfprintf_internal_r+0x6e0>
 1007f4c:	dc800e17 	ldw	r18,56(sp)
 1007f50:	d8c01904 	addi	r3,sp,100
 1007f54:	003ce906 	br	10072fc <___vfprintf_internal_r+0x940>
 1007f58:	3c000017 	ldw	r16,0(r7)
 1007f5c:	0009883a 	mov	r4,zero
 1007f60:	39c00104 	addi	r7,r7,4
 1007f64:	0023883a 	mov	r17,zero
 1007f68:	d9c14015 	stw	r7,1280(sp)
 1007f6c:	d8000405 	stb	zero,16(sp)
 1007f70:	003d2006 	br	10073f4 <___vfprintf_internal_r+0xa38>
 1007f74:	38800017 	ldw	r2,0(r7)
 1007f78:	39c00104 	addi	r7,r7,4
 1007f7c:	d9c14015 	stw	r7,1280(sp)
 1007f80:	1023d7fa 	srai	r17,r2,31
 1007f84:	1021883a 	mov	r16,r2
 1007f88:	003d1806 	br	10073ec <___vfprintf_internal_r+0xa30>
 1007f8c:	3c000017 	ldw	r16,0(r7)
 1007f90:	01000044 	movi	r4,1
 1007f94:	39c00104 	addi	r7,r7,4
 1007f98:	0023883a 	mov	r17,zero
 1007f9c:	d9c14015 	stw	r7,1280(sp)
 1007fa0:	d8000405 	stb	zero,16(sp)
 1007fa4:	003d1306 	br	10073f4 <___vfprintf_internal_r+0xa38>
 1007fa8:	008040b4 	movhi	r2,258
 1007fac:	10bd0204 	addi	r2,r2,-3064
 1007fb0:	94800044 	addi	r18,r18,1
 1007fb4:	8c400044 	addi	r17,r17,1
 1007fb8:	a8800015 	stw	r2,0(r21)
 1007fbc:	00c00044 	movi	r3,1
 1007fc0:	008001c4 	movi	r2,7
 1007fc4:	a8c00115 	stw	r3,4(r21)
 1007fc8:	dc800e15 	stw	r18,56(sp)
 1007fcc:	dc400d15 	stw	r17,52(sp)
 1007fd0:	1440ca16 	blt	r2,r17,10082fc <___vfprintf_internal_r+0x1940>
 1007fd4:	a8c00204 	addi	r3,r21,8
 1007fd8:	2000061e 	bne	r4,zero,1007ff4 <___vfprintf_internal_r+0x1638>
 1007fdc:	d9414717 	ldw	r5,1308(sp)
 1007fe0:	2800041e 	bne	r5,zero,1007ff4 <___vfprintf_internal_r+0x1638>
 1007fe4:	d9814c17 	ldw	r6,1328(sp)
 1007fe8:	3080004c 	andi	r2,r6,1
 1007fec:	1005003a 	cmpeq	r2,r2,zero
 1007ff0:	103bf01e 	bne	r2,zero,1006fb4 <___vfprintf_internal_r+0x5f8>
 1007ff4:	00800044 	movi	r2,1
 1007ff8:	dc400d17 	ldw	r17,52(sp)
 1007ffc:	18800115 	stw	r2,4(r3)
 1008000:	d8814917 	ldw	r2,1316(sp)
 1008004:	94800044 	addi	r18,r18,1
 1008008:	8c400044 	addi	r17,r17,1
 100800c:	18800015 	stw	r2,0(r3)
 1008010:	008001c4 	movi	r2,7
 1008014:	dc800e15 	stw	r18,56(sp)
 1008018:	dc400d15 	stw	r17,52(sp)
 100801c:	1440ca16 	blt	r2,r17,1008348 <___vfprintf_internal_r+0x198c>
 1008020:	18c00204 	addi	r3,r3,8
 1008024:	0121c83a 	sub	r16,zero,r4
 1008028:	0400500e 	bge	zero,r16,100816c <___vfprintf_internal_r+0x17b0>
 100802c:	00800404 	movi	r2,16
 1008030:	1400800e 	bge	r2,r16,1008234 <___vfprintf_internal_r+0x1878>
 1008034:	1027883a 	mov	r19,r2
 1008038:	070040b4 	movhi	fp,258
 100803c:	e73d0284 	addi	fp,fp,-3062
 1008040:	050001c4 	movi	r20,7
 1008044:	00000306 	br	1008054 <___vfprintf_internal_r+0x1698>
 1008048:	18c00204 	addi	r3,r3,8
 100804c:	843ffc04 	addi	r16,r16,-16
 1008050:	9c007a0e 	bge	r19,r16,100823c <___vfprintf_internal_r+0x1880>
 1008054:	94800404 	addi	r18,r18,16
 1008058:	8c400044 	addi	r17,r17,1
 100805c:	1f000015 	stw	fp,0(r3)
 1008060:	1cc00115 	stw	r19,4(r3)
 1008064:	dc800e15 	stw	r18,56(sp)
 1008068:	dc400d15 	stw	r17,52(sp)
 100806c:	a47ff60e 	bge	r20,r17,1008048 <___vfprintf_internal_r+0x168c>
 1008070:	d9014f17 	ldw	r4,1340(sp)
 1008074:	b00b883a 	mov	r5,r22
 1008078:	d9800c04 	addi	r6,sp,48
 100807c:	10069640 	call	1006964 <__sprint_r>
 1008080:	103c061e 	bne	r2,zero,100709c <___vfprintf_internal_r+0x6e0>
 1008084:	dc800e17 	ldw	r18,56(sp)
 1008088:	dc400d17 	ldw	r17,52(sp)
 100808c:	d8c01904 	addi	r3,sp,100
 1008090:	003fee06 	br	100804c <___vfprintf_internal_r+0x1690>
 1008094:	3c000017 	ldw	r16,0(r7)
 1008098:	0023883a 	mov	r17,zero
 100809c:	39c00104 	addi	r7,r7,4
 10080a0:	d9c14015 	stw	r7,1280(sp)
 10080a4:	003e9206 	br	1007af0 <___vfprintf_internal_r+0x1134>
 10080a8:	d9401904 	addi	r5,sp,100
 10080ac:	dd000f04 	addi	r20,sp,60
 10080b0:	d9414115 	stw	r5,1284(sp)
 10080b4:	d9814417 	ldw	r6,1296(sp)
 10080b8:	880a973a 	slli	r5,r17,28
 10080bc:	8004d13a 	srli	r2,r16,4
 10080c0:	810003cc 	andi	r4,r16,15
 10080c4:	3109883a 	add	r4,r6,r4
 10080c8:	2884b03a 	or	r2,r5,r2
 10080cc:	21400003 	ldbu	r5,0(r4)
 10080d0:	d9014117 	ldw	r4,1284(sp)
 10080d4:	8806d13a 	srli	r3,r17,4
 10080d8:	1021883a 	mov	r16,r2
 10080dc:	213fffc4 	addi	r4,r4,-1
 10080e0:	d9014115 	stw	r4,1284(sp)
 10080e4:	d9814117 	ldw	r6,1284(sp)
 10080e8:	10c8b03a 	or	r4,r2,r3
 10080ec:	1823883a 	mov	r17,r3
 10080f0:	31400005 	stb	r5,0(r6)
 10080f4:	203fef1e 	bne	r4,zero,10080b4 <___vfprintf_internal_r+0x16f8>
 10080f8:	003ccb06 	br	1007428 <___vfprintf_internal_r+0xa6c>
 10080fc:	00800c04 	movi	r2,48
 1008100:	d98018c4 	addi	r6,sp,99
 1008104:	dd000f04 	addi	r20,sp,60
 1008108:	d88018c5 	stb	r2,99(sp)
 100810c:	d9814115 	stw	r6,1284(sp)
 1008110:	003cc506 	br	1007428 <___vfprintf_internal_r+0xa6c>
 1008114:	dc400d17 	ldw	r17,52(sp)
 1008118:	070040b4 	movhi	fp,258
 100811c:	e73d0684 	addi	fp,fp,-3046
 1008120:	003bc706 	br	1007040 <___vfprintf_internal_r+0x684>
 1008124:	d9414c17 	ldw	r5,1328(sp)
 1008128:	2880040c 	andi	r2,r5,16
 100812c:	10007c26 	beq	r2,zero,1008320 <___vfprintf_internal_r+0x1964>
 1008130:	38800017 	ldw	r2,0(r7)
 1008134:	39c00104 	addi	r7,r7,4
 1008138:	d9c14015 	stw	r7,1280(sp)
 100813c:	d9814b17 	ldw	r6,1324(sp)
 1008140:	d9c14017 	ldw	r7,1280(sp)
 1008144:	11800015 	stw	r6,0(r2)
 1008148:	003a7806 	br	1006b2c <___vfprintf_internal_r+0x170>
 100814c:	d9014f17 	ldw	r4,1340(sp)
 1008150:	b00b883a 	mov	r5,r22
 1008154:	d9800c04 	addi	r6,sp,48
 1008158:	10069640 	call	1006964 <__sprint_r>
 100815c:	103bcf1e 	bne	r2,zero,100709c <___vfprintf_internal_r+0x6e0>
 1008160:	dc800e17 	ldw	r18,56(sp)
 1008164:	dc400d17 	ldw	r17,52(sp)
 1008168:	d8c01904 	addi	r3,sp,100
 100816c:	d9014717 	ldw	r4,1308(sp)
 1008170:	d9414117 	ldw	r5,1284(sp)
 1008174:	8c400044 	addi	r17,r17,1
 1008178:	9125883a 	add	r18,r18,r4
 100817c:	008001c4 	movi	r2,7
 1008180:	19400015 	stw	r5,0(r3)
 1008184:	19000115 	stw	r4,4(r3)
 1008188:	dc800e15 	stw	r18,56(sp)
 100818c:	dc400d15 	stw	r17,52(sp)
 1008190:	147cee16 	blt	r2,r17,100754c <___vfprintf_internal_r+0xb90>
 1008194:	18c00204 	addi	r3,r3,8
 1008198:	003b8606 	br	1006fb4 <___vfprintf_internal_r+0x5f8>
 100819c:	38c00017 	ldw	r3,0(r7)
 10081a0:	39000204 	addi	r4,r7,8
 10081a4:	d9014015 	stw	r4,1280(sp)
 10081a8:	d8c14215 	stw	r3,1288(sp)
 10081ac:	39c00117 	ldw	r7,4(r7)
 10081b0:	d9c14315 	stw	r7,1292(sp)
 10081b4:	003e2006 	br	1007a38 <___vfprintf_internal_r+0x107c>
 10081b8:	0005883a 	mov	r2,zero
 10081bc:	1409c83a 	sub	r4,r2,r16
 10081c0:	1105803a 	cmpltu	r2,r2,r4
 10081c4:	044bc83a 	sub	r5,zero,r17
 10081c8:	2885c83a 	sub	r2,r5,r2
 10081cc:	2021883a 	mov	r16,r4
 10081d0:	1023883a 	mov	r17,r2
 10081d4:	01000044 	movi	r4,1
 10081d8:	00800b44 	movi	r2,45
 10081dc:	d8800405 	stb	r2,16(sp)
 10081e0:	003c8406 	br	10073f4 <___vfprintf_internal_r+0xa38>
 10081e4:	d9014f17 	ldw	r4,1340(sp)
 10081e8:	b00b883a 	mov	r5,r22
 10081ec:	d9800c04 	addi	r6,sp,48
 10081f0:	10069640 	call	1006964 <__sprint_r>
 10081f4:	103ba91e 	bne	r2,zero,100709c <___vfprintf_internal_r+0x6e0>
 10081f8:	dc800e17 	ldw	r18,56(sp)
 10081fc:	dc400d17 	ldw	r17,52(sp)
 1008200:	d9000517 	ldw	r4,20(sp)
 1008204:	d9401904 	addi	r5,sp,100
 1008208:	003da706 	br	10078a8 <___vfprintf_internal_r+0xeec>
 100820c:	d9014f17 	ldw	r4,1340(sp)
 1008210:	b00b883a 	mov	r5,r22
 1008214:	d9800c04 	addi	r6,sp,48
 1008218:	10069640 	call	1006964 <__sprint_r>
 100821c:	103b9f1e 	bne	r2,zero,100709c <___vfprintf_internal_r+0x6e0>
 1008220:	dc800e17 	ldw	r18,56(sp)
 1008224:	dc400d17 	ldw	r17,52(sp)
 1008228:	d9000517 	ldw	r4,20(sp)
 100822c:	d8c01904 	addi	r3,sp,100
 1008230:	003d9106 	br	1007878 <___vfprintf_internal_r+0xebc>
 1008234:	070040b4 	movhi	fp,258
 1008238:	e73d0284 	addi	fp,fp,-3062
 100823c:	9425883a 	add	r18,r18,r16
 1008240:	8c400044 	addi	r17,r17,1
 1008244:	008001c4 	movi	r2,7
 1008248:	1f000015 	stw	fp,0(r3)
 100824c:	1c000115 	stw	r16,4(r3)
 1008250:	dc800e15 	stw	r18,56(sp)
 1008254:	dc400d15 	stw	r17,52(sp)
 1008258:	147fbc16 	blt	r2,r17,100814c <___vfprintf_internal_r+0x1790>
 100825c:	18c00204 	addi	r3,r3,8
 1008260:	003fc206 	br	100816c <___vfprintf_internal_r+0x17b0>
 1008264:	d9014f17 	ldw	r4,1340(sp)
 1008268:	b00b883a 	mov	r5,r22
 100826c:	d9800c04 	addi	r6,sp,48
 1008270:	10069640 	call	1006964 <__sprint_r>
 1008274:	103b891e 	bne	r2,zero,100709c <___vfprintf_internal_r+0x6e0>
 1008278:	dc800e17 	ldw	r18,56(sp)
 100827c:	d9000517 	ldw	r4,20(sp)
 1008280:	d8c01904 	addi	r3,sp,100
 1008284:	003d0206 	br	1007690 <___vfprintf_internal_r+0xcd4>
 1008288:	070040b4 	movhi	fp,258
 100828c:	e73d0284 	addi	fp,fp,-3062
 1008290:	003be406 	br	1007224 <___vfprintf_internal_r+0x868>
 1008294:	008040b4 	movhi	r2,258
 1008298:	10bcf104 	addi	r2,r2,-3132
 100829c:	d8814115 	stw	r2,1284(sp)
 10082a0:	003df506 	br	1007a78 <___vfprintf_internal_r+0x10bc>
 10082a4:	d9014217 	ldw	r4,1288(sp)
 10082a8:	d9414317 	ldw	r5,1292(sp)
 10082ac:	100e9980 	call	100e998 <__isnand>
 10082b0:	10003926 	beq	r2,zero,1008398 <___vfprintf_internal_r+0x19dc>
 10082b4:	d9414d17 	ldw	r5,1332(sp)
 10082b8:	008011c4 	movi	r2,71
 10082bc:	1140ce16 	blt	r2,r5,10085f8 <___vfprintf_internal_r+0x1c3c>
 10082c0:	018040b4 	movhi	r6,258
 10082c4:	31bcf204 	addi	r6,r6,-3128
 10082c8:	d9814115 	stw	r6,1284(sp)
 10082cc:	003dea06 	br	1007a78 <___vfprintf_internal_r+0x10bc>
 10082d0:	d9014c17 	ldw	r4,1328(sp)
 10082d4:	bdc00044 	addi	r23,r23,1
 10082d8:	b8c00007 	ldb	r3,0(r23)
 10082dc:	21000814 	ori	r4,r4,32
 10082e0:	d9014c15 	stw	r4,1328(sp)
 10082e4:	003a3406 	br	1006bb8 <___vfprintf_internal_r+0x1fc>
 10082e8:	dcc14515 	stw	r19,1300(sp)
 10082ec:	98011016 	blt	r19,zero,1008730 <___vfprintf_internal_r+0x1d74>
 10082f0:	980f883a 	mov	r7,r19
 10082f4:	d8014615 	stw	zero,1304(sp)
 10082f8:	003c5206 	br	1007444 <___vfprintf_internal_r+0xa88>
 10082fc:	d9014f17 	ldw	r4,1340(sp)
 1008300:	b00b883a 	mov	r5,r22
 1008304:	d9800c04 	addi	r6,sp,48
 1008308:	10069640 	call	1006964 <__sprint_r>
 100830c:	103b631e 	bne	r2,zero,100709c <___vfprintf_internal_r+0x6e0>
 1008310:	dc800e17 	ldw	r18,56(sp)
 1008314:	d9000517 	ldw	r4,20(sp)
 1008318:	d8c01904 	addi	r3,sp,100
 100831c:	003f2e06 	br	1007fd8 <___vfprintf_internal_r+0x161c>
 1008320:	d8c14c17 	ldw	r3,1328(sp)
 1008324:	1880100c 	andi	r2,r3,64
 1008328:	1000a026 	beq	r2,zero,10085ac <___vfprintf_internal_r+0x1bf0>
 100832c:	38800017 	ldw	r2,0(r7)
 1008330:	39c00104 	addi	r7,r7,4
 1008334:	d9c14015 	stw	r7,1280(sp)
 1008338:	d9014b17 	ldw	r4,1324(sp)
 100833c:	d9c14017 	ldw	r7,1280(sp)
 1008340:	1100000d 	sth	r4,0(r2)
 1008344:	0039f906 	br	1006b2c <___vfprintf_internal_r+0x170>
 1008348:	d9014f17 	ldw	r4,1340(sp)
 100834c:	b00b883a 	mov	r5,r22
 1008350:	d9800c04 	addi	r6,sp,48
 1008354:	10069640 	call	1006964 <__sprint_r>
 1008358:	103b501e 	bne	r2,zero,100709c <___vfprintf_internal_r+0x6e0>
 100835c:	dc800e17 	ldw	r18,56(sp)
 1008360:	dc400d17 	ldw	r17,52(sp)
 1008364:	d9000517 	ldw	r4,20(sp)
 1008368:	d8c01904 	addi	r3,sp,100
 100836c:	003f2d06 	br	1008024 <___vfprintf_internal_r+0x1668>
 1008370:	00800184 	movi	r2,6
 1008374:	14c09a36 	bltu	r2,r19,10085e0 <___vfprintf_internal_r+0x1c24>
 1008378:	dcc14515 	stw	r19,1300(sp)
 100837c:	9800010e 	bge	r19,zero,1008384 <___vfprintf_internal_r+0x19c8>
 1008380:	d8014515 	stw	zero,1300(sp)
 1008384:	008040b4 	movhi	r2,258
 1008388:	10bcf404 	addi	r2,r2,-3120
 100838c:	980f883a 	mov	r7,r19
 1008390:	d8814115 	stw	r2,1284(sp)
 1008394:	003a7806 	br	1006d78 <___vfprintf_internal_r+0x3bc>
 1008398:	00bfffc4 	movi	r2,-1
 100839c:	9880e226 	beq	r19,r2,1008728 <___vfprintf_internal_r+0x1d6c>
 10083a0:	d9414d17 	ldw	r5,1332(sp)
 10083a4:	008019c4 	movi	r2,103
 10083a8:	2880dc26 	beq	r5,r2,100871c <___vfprintf_internal_r+0x1d60>
 10083ac:	008011c4 	movi	r2,71
 10083b0:	2880da26 	beq	r5,r2,100871c <___vfprintf_internal_r+0x1d60>
 10083b4:	d9414c17 	ldw	r5,1328(sp)
 10083b8:	d9014317 	ldw	r4,1292(sp)
 10083bc:	d9814217 	ldw	r6,1288(sp)
 10083c0:	29404014 	ori	r5,r5,256
 10083c4:	d9414c15 	stw	r5,1328(sp)
 10083c8:	2000cc16 	blt	r4,zero,10086fc <___vfprintf_internal_r+0x1d40>
 10083cc:	3021883a 	mov	r16,r6
 10083d0:	2023883a 	mov	r17,r4
 10083d4:	0039883a 	mov	fp,zero
 10083d8:	d9414d17 	ldw	r5,1332(sp)
 10083dc:	00801984 	movi	r2,102
 10083e0:	2880b726 	beq	r5,r2,10086c0 <___vfprintf_internal_r+0x1d04>
 10083e4:	00801184 	movi	r2,70
 10083e8:	2880b526 	beq	r5,r2,10086c0 <___vfprintf_internal_r+0x1d04>
 10083ec:	00801944 	movi	r2,101
 10083f0:	2880c826 	beq	r5,r2,1008714 <___vfprintf_internal_r+0x1d58>
 10083f4:	00801144 	movi	r2,69
 10083f8:	2880c626 	beq	r5,r2,1008714 <___vfprintf_internal_r+0x1d58>
 10083fc:	9829883a 	mov	r20,r19
 1008400:	d9014f17 	ldw	r4,1340(sp)
 1008404:	d8800504 	addi	r2,sp,20
 1008408:	880d883a 	mov	r6,r17
 100840c:	d8800115 	stw	r2,4(sp)
 1008410:	d8c00604 	addi	r3,sp,24
 1008414:	d8800704 	addi	r2,sp,28
 1008418:	800b883a 	mov	r5,r16
 100841c:	01c00084 	movi	r7,2
 1008420:	d8c00215 	stw	r3,8(sp)
 1008424:	d8800315 	stw	r2,12(sp)
 1008428:	dd000015 	stw	r20,0(sp)
 100842c:	100a3600 	call	100a360 <_dtoa_r>
 1008430:	d9814d17 	ldw	r6,1332(sp)
 1008434:	d8814115 	stw	r2,1284(sp)
 1008438:	008019c4 	movi	r2,103
 100843c:	30809526 	beq	r6,r2,1008694 <___vfprintf_internal_r+0x1cd8>
 1008440:	d8c14d17 	ldw	r3,1332(sp)
 1008444:	008011c4 	movi	r2,71
 1008448:	18809226 	beq	r3,r2,1008694 <___vfprintf_internal_r+0x1cd8>
 100844c:	d9414117 	ldw	r5,1284(sp)
 1008450:	d9814d17 	ldw	r6,1332(sp)
 1008454:	00801984 	movi	r2,102
 1008458:	2d25883a 	add	r18,r5,r20
 100845c:	30808626 	beq	r6,r2,1008678 <___vfprintf_internal_r+0x1cbc>
 1008460:	00801184 	movi	r2,70
 1008464:	30808426 	beq	r6,r2,1008678 <___vfprintf_internal_r+0x1cbc>
 1008468:	000d883a 	mov	r6,zero
 100846c:	000f883a 	mov	r7,zero
 1008470:	880b883a 	mov	r5,r17
 1008474:	8009883a 	mov	r4,r16
 1008478:	10052440 	call	1005244 <__eqdf2>
 100847c:	1000751e 	bne	r2,zero,1008654 <___vfprintf_internal_r+0x1c98>
 1008480:	9005883a 	mov	r2,r18
 1008484:	dc800715 	stw	r18,28(sp)
 1008488:	d9014117 	ldw	r4,1284(sp)
 100848c:	d9414d17 	ldw	r5,1332(sp)
 1008490:	00c019c4 	movi	r3,103
 1008494:	1125c83a 	sub	r18,r2,r4
 1008498:	28c06826 	beq	r5,r3,100863c <___vfprintf_internal_r+0x1c80>
 100849c:	008011c4 	movi	r2,71
 10084a0:	28806626 	beq	r5,r2,100863c <___vfprintf_internal_r+0x1c80>
 10084a4:	d9000517 	ldw	r4,20(sp)
 10084a8:	d8c14d17 	ldw	r3,1332(sp)
 10084ac:	00801944 	movi	r2,101
 10084b0:	10c05516 	blt	r2,r3,1008608 <___vfprintf_internal_r+0x1c4c>
 10084b4:	213fffc4 	addi	r4,r4,-1
 10084b8:	d9000515 	stw	r4,20(sp)
 10084bc:	d8c00805 	stb	r3,32(sp)
 10084c0:	2021883a 	mov	r16,r4
 10084c4:	2000c116 	blt	r4,zero,10087cc <___vfprintf_internal_r+0x1e10>
 10084c8:	00800ac4 	movi	r2,43
 10084cc:	d8800845 	stb	r2,33(sp)
 10084d0:	00800244 	movi	r2,9
 10084d4:	1400af0e 	bge	r2,r16,1008794 <___vfprintf_internal_r+0x1dd8>
 10084d8:	1027883a 	mov	r19,r2
 10084dc:	dc400b84 	addi	r17,sp,46
 10084e0:	8009883a 	mov	r4,r16
 10084e4:	01400284 	movi	r5,10
 10084e8:	10057100 	call	1005710 <__modsi3>
 10084ec:	10800c04 	addi	r2,r2,48
 10084f0:	8c7fffc4 	addi	r17,r17,-1
 10084f4:	8009883a 	mov	r4,r16
 10084f8:	01400284 	movi	r5,10
 10084fc:	88800005 	stb	r2,0(r17)
 1008500:	10056b00 	call	10056b0 <__divsi3>
 1008504:	1021883a 	mov	r16,r2
 1008508:	98bff516 	blt	r19,r2,10084e0 <___vfprintf_internal_r+0x1b24>
 100850c:	10c00c04 	addi	r3,r2,48
 1008510:	d88009c4 	addi	r2,sp,39
 1008514:	108001c4 	addi	r2,r2,7
 1008518:	897fffc4 	addi	r5,r17,-1
 100851c:	88ffffc5 	stb	r3,-1(r17)
 1008520:	2880a72e 	bgeu	r5,r2,10087c0 <___vfprintf_internal_r+0x1e04>
 1008524:	1009883a 	mov	r4,r2
 1008528:	d9800804 	addi	r6,sp,32
 100852c:	d8c00884 	addi	r3,sp,34
 1008530:	28800003 	ldbu	r2,0(r5)
 1008534:	29400044 	addi	r5,r5,1
 1008538:	18800005 	stb	r2,0(r3)
 100853c:	18c00044 	addi	r3,r3,1
 1008540:	293ffb36 	bltu	r5,r4,1008530 <___vfprintf_internal_r+0x1b74>
 1008544:	1987c83a 	sub	r3,r3,r6
 1008548:	00800044 	movi	r2,1
 100854c:	d8c14815 	stw	r3,1312(sp)
 1008550:	90cf883a 	add	r7,r18,r3
 1008554:	1480960e 	bge	r2,r18,10087b0 <___vfprintf_internal_r+0x1df4>
 1008558:	39c00044 	addi	r7,r7,1
 100855c:	d9c14515 	stw	r7,1300(sp)
 1008560:	38003416 	blt	r7,zero,1008634 <___vfprintf_internal_r+0x1c78>
 1008564:	e0803fcc 	andi	r2,fp,255
 1008568:	1080201c 	xori	r2,r2,128
 100856c:	10bfe004 	addi	r2,r2,-128
 1008570:	10004e26 	beq	r2,zero,10086ac <___vfprintf_internal_r+0x1cf0>
 1008574:	00800b44 	movi	r2,45
 1008578:	dc814715 	stw	r18,1308(sp)
 100857c:	d8014615 	stw	zero,1304(sp)
 1008580:	d8800405 	stb	r2,16(sp)
 1008584:	003bb106 	br	100744c <___vfprintf_internal_r+0xa90>
 1008588:	00800b44 	movi	r2,45
 100858c:	d8800405 	stb	r2,16(sp)
 1008590:	003d3306 	br	1007a60 <___vfprintf_internal_r+0x10a4>
 1008594:	d9014f17 	ldw	r4,1340(sp)
 1008598:	b00b883a 	mov	r5,r22
 100859c:	d9800c04 	addi	r6,sp,48
 10085a0:	10069640 	call	1006964 <__sprint_r>
 10085a4:	103abd1e 	bne	r2,zero,100709c <___vfprintf_internal_r+0x6e0>
 10085a8:	003abb06 	br	1007098 <___vfprintf_internal_r+0x6dc>
 10085ac:	38800017 	ldw	r2,0(r7)
 10085b0:	39c00104 	addi	r7,r7,4
 10085b4:	d9c14015 	stw	r7,1280(sp)
 10085b8:	d9414b17 	ldw	r5,1324(sp)
 10085bc:	d9c14017 	ldw	r7,1280(sp)
 10085c0:	11400015 	stw	r5,0(r2)
 10085c4:	00395906 	br	1006b2c <___vfprintf_internal_r+0x170>
 10085c8:	980f883a 	mov	r7,r19
 10085cc:	dcc14515 	stw	r19,1300(sp)
 10085d0:	d8014615 	stw	zero,1304(sp)
 10085d4:	003b9b06 	br	1007444 <___vfprintf_internal_r+0xa88>
 10085d8:	0027883a 	mov	r19,zero
 10085dc:	00397806 	br	1006bc0 <___vfprintf_internal_r+0x204>
 10085e0:	00c040b4 	movhi	r3,258
 10085e4:	18fcf404 	addi	r3,r3,-3120
 10085e8:	100f883a 	mov	r7,r2
 10085ec:	d8814515 	stw	r2,1300(sp)
 10085f0:	d8c14115 	stw	r3,1284(sp)
 10085f4:	0039e006 	br	1006d78 <___vfprintf_internal_r+0x3bc>
 10085f8:	008040b4 	movhi	r2,258
 10085fc:	10bcf304 	addi	r2,r2,-3124
 1008600:	d8814115 	stw	r2,1284(sp)
 1008604:	003d1c06 	br	1007a78 <___vfprintf_internal_r+0x10bc>
 1008608:	d9414d17 	ldw	r5,1332(sp)
 100860c:	00801984 	movi	r2,102
 1008610:	28804926 	beq	r5,r2,1008738 <___vfprintf_internal_r+0x1d7c>
 1008614:	200f883a 	mov	r7,r4
 1008618:	24805716 	blt	r4,r18,1008778 <___vfprintf_internal_r+0x1dbc>
 100861c:	d9414c17 	ldw	r5,1328(sp)
 1008620:	2880004c 	andi	r2,r5,1
 1008624:	10000126 	beq	r2,zero,100862c <___vfprintf_internal_r+0x1c70>
 1008628:	21c00044 	addi	r7,r4,1
 100862c:	d9c14515 	stw	r7,1300(sp)
 1008630:	383fcc0e 	bge	r7,zero,1008564 <___vfprintf_internal_r+0x1ba8>
 1008634:	d8014515 	stw	zero,1300(sp)
 1008638:	003fca06 	br	1008564 <___vfprintf_internal_r+0x1ba8>
 100863c:	d9000517 	ldw	r4,20(sp)
 1008640:	00bfff04 	movi	r2,-4
 1008644:	1100480e 	bge	r2,r4,1008768 <___vfprintf_internal_r+0x1dac>
 1008648:	99004716 	blt	r19,r4,1008768 <___vfprintf_internal_r+0x1dac>
 100864c:	d8c14d15 	stw	r3,1332(sp)
 1008650:	003ff006 	br	1008614 <___vfprintf_internal_r+0x1c58>
 1008654:	d8800717 	ldw	r2,28(sp)
 1008658:	14bf8b2e 	bgeu	r2,r18,1008488 <___vfprintf_internal_r+0x1acc>
 100865c:	9007883a 	mov	r3,r18
 1008660:	01000c04 	movi	r4,48
 1008664:	11000005 	stb	r4,0(r2)
 1008668:	10800044 	addi	r2,r2,1
 100866c:	d8800715 	stw	r2,28(sp)
 1008670:	18bffc1e 	bne	r3,r2,1008664 <___vfprintf_internal_r+0x1ca8>
 1008674:	003f8406 	br	1008488 <___vfprintf_internal_r+0x1acc>
 1008678:	d8814117 	ldw	r2,1284(sp)
 100867c:	10c00007 	ldb	r3,0(r2)
 1008680:	00800c04 	movi	r2,48
 1008684:	18805b26 	beq	r3,r2,10087f4 <___vfprintf_internal_r+0x1e38>
 1008688:	d9000517 	ldw	r4,20(sp)
 100868c:	9125883a 	add	r18,r18,r4
 1008690:	003f7506 	br	1008468 <___vfprintf_internal_r+0x1aac>
 1008694:	d9014c17 	ldw	r4,1328(sp)
 1008698:	2080004c 	andi	r2,r4,1
 100869c:	1005003a 	cmpeq	r2,r2,zero
 10086a0:	103f6a26 	beq	r2,zero,100844c <___vfprintf_internal_r+0x1a90>
 10086a4:	d8800717 	ldw	r2,28(sp)
 10086a8:	003f7706 	br	1008488 <___vfprintf_internal_r+0x1acc>
 10086ac:	d9c14515 	stw	r7,1300(sp)
 10086b0:	38004d16 	blt	r7,zero,10087e8 <___vfprintf_internal_r+0x1e2c>
 10086b4:	dc814715 	stw	r18,1308(sp)
 10086b8:	d8014615 	stw	zero,1304(sp)
 10086bc:	003b6106 	br	1007444 <___vfprintf_internal_r+0xa88>
 10086c0:	d9014f17 	ldw	r4,1340(sp)
 10086c4:	d8800504 	addi	r2,sp,20
 10086c8:	d8800115 	stw	r2,4(sp)
 10086cc:	d8c00604 	addi	r3,sp,24
 10086d0:	d8800704 	addi	r2,sp,28
 10086d4:	800b883a 	mov	r5,r16
 10086d8:	880d883a 	mov	r6,r17
 10086dc:	01c000c4 	movi	r7,3
 10086e0:	d8c00215 	stw	r3,8(sp)
 10086e4:	d8800315 	stw	r2,12(sp)
 10086e8:	dcc00015 	stw	r19,0(sp)
 10086ec:	9829883a 	mov	r20,r19
 10086f0:	100a3600 	call	100a360 <_dtoa_r>
 10086f4:	d8814115 	stw	r2,1284(sp)
 10086f8:	003f5106 	br	1008440 <___vfprintf_internal_r+0x1a84>
 10086fc:	d8c14217 	ldw	r3,1288(sp)
 1008700:	d9014317 	ldw	r4,1292(sp)
 1008704:	07000b44 	movi	fp,45
 1008708:	1821883a 	mov	r16,r3
 100870c:	2460003c 	xorhi	r17,r4,32768
 1008710:	003f3106 	br	10083d8 <___vfprintf_internal_r+0x1a1c>
 1008714:	9d000044 	addi	r20,r19,1
 1008718:	003f3906 	br	1008400 <___vfprintf_internal_r+0x1a44>
 100871c:	983f251e 	bne	r19,zero,10083b4 <___vfprintf_internal_r+0x19f8>
 1008720:	04c00044 	movi	r19,1
 1008724:	003f2306 	br	10083b4 <___vfprintf_internal_r+0x19f8>
 1008728:	04c00184 	movi	r19,6
 100872c:	003f2106 	br	10083b4 <___vfprintf_internal_r+0x19f8>
 1008730:	d8014515 	stw	zero,1300(sp)
 1008734:	003eee06 	br	10082f0 <___vfprintf_internal_r+0x1934>
 1008738:	200f883a 	mov	r7,r4
 100873c:	0100370e 	bge	zero,r4,100881c <___vfprintf_internal_r+0x1e60>
 1008740:	9800031e 	bne	r19,zero,1008750 <___vfprintf_internal_r+0x1d94>
 1008744:	d9814c17 	ldw	r6,1328(sp)
 1008748:	3080004c 	andi	r2,r6,1
 100874c:	103fb726 	beq	r2,zero,100862c <___vfprintf_internal_r+0x1c70>
 1008750:	20800044 	addi	r2,r4,1
 1008754:	98a7883a 	add	r19,r19,r2
 1008758:	dcc14515 	stw	r19,1300(sp)
 100875c:	980f883a 	mov	r7,r19
 1008760:	983f800e 	bge	r19,zero,1008564 <___vfprintf_internal_r+0x1ba8>
 1008764:	003fb306 	br	1008634 <___vfprintf_internal_r+0x1c78>
 1008768:	d9814d17 	ldw	r6,1332(sp)
 100876c:	31bfff84 	addi	r6,r6,-2
 1008770:	d9814d15 	stw	r6,1332(sp)
 1008774:	003f4c06 	br	10084a8 <___vfprintf_internal_r+0x1aec>
 1008778:	0100180e 	bge	zero,r4,10087dc <___vfprintf_internal_r+0x1e20>
 100877c:	00800044 	movi	r2,1
 1008780:	1485883a 	add	r2,r2,r18
 1008784:	d8814515 	stw	r2,1300(sp)
 1008788:	100f883a 	mov	r7,r2
 100878c:	103f750e 	bge	r2,zero,1008564 <___vfprintf_internal_r+0x1ba8>
 1008790:	003fa806 	br	1008634 <___vfprintf_internal_r+0x1c78>
 1008794:	80c00c04 	addi	r3,r16,48
 1008798:	00800c04 	movi	r2,48
 100879c:	d8c008c5 	stb	r3,35(sp)
 10087a0:	d9800804 	addi	r6,sp,32
 10087a4:	d8c00904 	addi	r3,sp,36
 10087a8:	d8800885 	stb	r2,34(sp)
 10087ac:	003f6506 	br	1008544 <___vfprintf_internal_r+0x1b88>
 10087b0:	d9014c17 	ldw	r4,1328(sp)
 10087b4:	2084703a 	and	r2,r4,r2
 10087b8:	103f9c26 	beq	r2,zero,100862c <___vfprintf_internal_r+0x1c70>
 10087bc:	003f6606 	br	1008558 <___vfprintf_internal_r+0x1b9c>
 10087c0:	d9800804 	addi	r6,sp,32
 10087c4:	d8c00884 	addi	r3,sp,34
 10087c8:	003f5e06 	br	1008544 <___vfprintf_internal_r+0x1b88>
 10087cc:	00800b44 	movi	r2,45
 10087d0:	0121c83a 	sub	r16,zero,r4
 10087d4:	d8800845 	stb	r2,33(sp)
 10087d8:	003f3d06 	br	10084d0 <___vfprintf_internal_r+0x1b14>
 10087dc:	00800084 	movi	r2,2
 10087e0:	1105c83a 	sub	r2,r2,r4
 10087e4:	003fe606 	br	1008780 <___vfprintf_internal_r+0x1dc4>
 10087e8:	d8014515 	stw	zero,1300(sp)
 10087ec:	dc814715 	stw	r18,1308(sp)
 10087f0:	003fb106 	br	10086b8 <___vfprintf_internal_r+0x1cfc>
 10087f4:	000d883a 	mov	r6,zero
 10087f8:	000f883a 	mov	r7,zero
 10087fc:	8009883a 	mov	r4,r16
 1008800:	880b883a 	mov	r5,r17
 1008804:	10052cc0 	call	10052cc <__nedf2>
 1008808:	103f9f26 	beq	r2,zero,1008688 <___vfprintf_internal_r+0x1ccc>
 100880c:	00800044 	movi	r2,1
 1008810:	1509c83a 	sub	r4,r2,r20
 1008814:	d9000515 	stw	r4,20(sp)
 1008818:	003f9b06 	br	1008688 <___vfprintf_internal_r+0x1ccc>
 100881c:	98000d1e 	bne	r19,zero,1008854 <___vfprintf_internal_r+0x1e98>
 1008820:	d8c14c17 	ldw	r3,1328(sp)
 1008824:	1880004c 	andi	r2,r3,1
 1008828:	10000a1e 	bne	r2,zero,1008854 <___vfprintf_internal_r+0x1e98>
 100882c:	01000044 	movi	r4,1
 1008830:	200f883a 	mov	r7,r4
 1008834:	d9014515 	stw	r4,1300(sp)
 1008838:	003f4a06 	br	1008564 <___vfprintf_internal_r+0x1ba8>
 100883c:	3cc00017 	ldw	r19,0(r7)
 1008840:	39c00104 	addi	r7,r7,4
 1008844:	983d0e0e 	bge	r19,zero,1007c80 <___vfprintf_internal_r+0x12c4>
 1008848:	b8c00007 	ldb	r3,0(r23)
 100884c:	04ffffc4 	movi	r19,-1
 1008850:	0038d906 	br	1006bb8 <___vfprintf_internal_r+0x1fc>
 1008854:	9cc00084 	addi	r19,r19,2
 1008858:	dcc14515 	stw	r19,1300(sp)
 100885c:	980f883a 	mov	r7,r19
 1008860:	983f400e 	bge	r19,zero,1008564 <___vfprintf_internal_r+0x1ba8>
 1008864:	003f7306 	br	1008634 <___vfprintf_internal_r+0x1c78>

01008868 <__vfprintf_internal>:
 1008868:	008040b4 	movhi	r2,258
 100886c:	1086c504 	addi	r2,r2,6932
 1008870:	2013883a 	mov	r9,r4
 1008874:	11000017 	ldw	r4,0(r2)
 1008878:	2805883a 	mov	r2,r5
 100887c:	300f883a 	mov	r7,r6
 1008880:	480b883a 	mov	r5,r9
 1008884:	100d883a 	mov	r6,r2
 1008888:	10069bc1 	jmpi	10069bc <___vfprintf_internal_r>

0100888c <__svfscanf_r>:
 100888c:	deff4e04 	addi	sp,sp,-712
 1008890:	dd80ae15 	stw	r22,696(sp)
 1008894:	dd00ac15 	stw	r20,688(sp)
 1008898:	dc40a915 	stw	r17,676(sp)
 100889c:	dc00a815 	stw	r16,672(sp)
 10088a0:	dfc0b115 	stw	ra,708(sp)
 10088a4:	df00b015 	stw	fp,704(sp)
 10088a8:	ddc0af15 	stw	r23,700(sp)
 10088ac:	dd40ad15 	stw	r21,692(sp)
 10088b0:	dcc0ab15 	stw	r19,684(sp)
 10088b4:	dc80aa15 	stw	r18,680(sp)
 10088b8:	202d883a 	mov	r22,r4
 10088bc:	2821883a 	mov	r16,r5
 10088c0:	d9c0a415 	stw	r7,656(sp)
 10088c4:	3029883a 	mov	r20,r6
 10088c8:	d800a215 	stw	zero,648(sp)
 10088cc:	0023883a 	mov	r17,zero
 10088d0:	d800a115 	stw	zero,644(sp)
 10088d4:	d800a015 	stw	zero,640(sp)
 10088d8:	a1000007 	ldb	r4,0(r20)
 10088dc:	d9000115 	stw	r4,4(sp)
 10088e0:	20001f26 	beq	r4,zero,1008960 <__svfscanf_r+0xd4>
 10088e4:	048040b4 	movhi	r18,258
 10088e8:	9486c404 	addi	r18,r18,6928
 10088ec:	91800017 	ldw	r6,0(r18)
 10088f0:	a5000044 	addi	r20,r20,1
 10088f4:	3107883a 	add	r3,r6,r4
 10088f8:	18800003 	ldbu	r2,0(r3)
 10088fc:	1080020c 	andi	r2,r2,8
 1008900:	10002426 	beq	r2,zero,1008994 <__svfscanf_r+0x108>
 1008904:	80c00117 	ldw	r3,4(r16)
 1008908:	00c00e0e 	bge	zero,r3,1008944 <__svfscanf_r+0xb8>
 100890c:	81400017 	ldw	r5,0(r16)
 1008910:	90800017 	ldw	r2,0(r18)
 1008914:	28c00003 	ldbu	r3,0(r5)
 1008918:	1887883a 	add	r3,r3,r2
 100891c:	19000003 	ldbu	r4,0(r3)
 1008920:	2100020c 	andi	r4,r4,8
 1008924:	203fec26 	beq	r4,zero,10088d8 <__svfscanf_r+0x4c>
 1008928:	80c00117 	ldw	r3,4(r16)
 100892c:	29800044 	addi	r6,r5,1
 1008930:	8c400044 	addi	r17,r17,1
 1008934:	18ffffc4 	addi	r3,r3,-1
 1008938:	81800015 	stw	r6,0(r16)
 100893c:	80c00115 	stw	r3,4(r16)
 1008940:	00fff216 	blt	zero,r3,100890c <__svfscanf_r+0x80>
 1008944:	b009883a 	mov	r4,r22
 1008948:	800b883a 	mov	r5,r16
 100894c:	100e7780 	call	100e778 <__srefill_r>
 1008950:	103fee26 	beq	r2,zero,100890c <__svfscanf_r+0x80>
 1008954:	a1000007 	ldb	r4,0(r20)
 1008958:	d9000115 	stw	r4,4(sp)
 100895c:	203fe11e 	bne	r4,zero,10088e4 <__svfscanf_r+0x58>
 1008960:	d880a217 	ldw	r2,648(sp)
 1008964:	dfc0b117 	ldw	ra,708(sp)
 1008968:	df00b017 	ldw	fp,704(sp)
 100896c:	ddc0af17 	ldw	r23,700(sp)
 1008970:	dd80ae17 	ldw	r22,696(sp)
 1008974:	dd40ad17 	ldw	r21,692(sp)
 1008978:	dd00ac17 	ldw	r20,688(sp)
 100897c:	dcc0ab17 	ldw	r19,684(sp)
 1008980:	dc80aa17 	ldw	r18,680(sp)
 1008984:	dc40a917 	ldw	r17,676(sp)
 1008988:	dc00a817 	ldw	r16,672(sp)
 100898c:	dec0b204 	addi	sp,sp,712
 1008990:	f800283a 	ret
 1008994:	00800944 	movi	r2,37
 1008998:	20801626 	beq	r4,r2,10089f4 <__svfscanf_r+0x168>
 100899c:	80800117 	ldw	r2,4(r16)
 10089a0:	00800b0e 	bge	zero,r2,10089d0 <__svfscanf_r+0x144>
 10089a4:	81000017 	ldw	r4,0(r16)
 10089a8:	a0ffffc7 	ldb	r3,-1(r20)
 10089ac:	20800003 	ldbu	r2,0(r4)
 10089b0:	10ffeb1e 	bne	r2,r3,1008960 <__svfscanf_r+0xd4>
 10089b4:	80c00117 	ldw	r3,4(r16)
 10089b8:	21800044 	addi	r6,r4,1
 10089bc:	8c400044 	addi	r17,r17,1
 10089c0:	18ffffc4 	addi	r3,r3,-1
 10089c4:	80c00115 	stw	r3,4(r16)
 10089c8:	81800015 	stw	r6,0(r16)
 10089cc:	003fc206 	br	10088d8 <__svfscanf_r+0x4c>
 10089d0:	b009883a 	mov	r4,r22
 10089d4:	800b883a 	mov	r5,r16
 10089d8:	100e7780 	call	100e778 <__srefill_r>
 10089dc:	103ff126 	beq	r2,zero,10089a4 <__svfscanf_r+0x118>
 10089e0:	d900a217 	ldw	r4,648(sp)
 10089e4:	2004c91e 	bne	r4,zero,1009d0c <__svfscanf_r+0x1480>
 10089e8:	00bfffc4 	movi	r2,-1
 10089ec:	d880a215 	stw	r2,648(sp)
 10089f0:	003fdb06 	br	1008960 <__svfscanf_r+0xd4>
 10089f4:	d800a315 	stw	zero,652(sp)
 10089f8:	0027883a 	mov	r19,zero
 10089fc:	a0c00003 	ldbu	r3,0(r20)
 1008a00:	00801e04 	movi	r2,120
 1008a04:	a5000044 	addi	r20,r20,1
 1008a08:	19403fcc 	andi	r5,r3,255
 1008a0c:	2940201c 	xori	r5,r5,128
 1008a10:	297fe004 	addi	r5,r5,-128
 1008a14:	10c08036 	bltu	r2,r3,1008c18 <__svfscanf_r+0x38c>
 1008a18:	18c5883a 	add	r2,r3,r3
 1008a1c:	1085883a 	add	r2,r2,r2
 1008a20:	00c04074 	movhi	r3,257
 1008a24:	18e28d04 	addi	r3,r3,-30156
 1008a28:	10c5883a 	add	r2,r2,r3
 1008a2c:	11000017 	ldw	r4,0(r2)
 1008a30:	2000683a 	jmp	r4
 1008a34:	010089e8 	cmpgeui	r4,zero,551
 1008a38:	01008c18 	cmpnei	r4,zero,560
 1008a3c:	01008c18 	cmpnei	r4,zero,560
 1008a40:	01008c18 	cmpnei	r4,zero,560
 1008a44:	01008c18 	cmpnei	r4,zero,560
 1008a48:	01008c18 	cmpnei	r4,zero,560
 1008a4c:	01008c18 	cmpnei	r4,zero,560
 1008a50:	01008c18 	cmpnei	r4,zero,560
 1008a54:	01008c18 	cmpnei	r4,zero,560
 1008a58:	01008c18 	cmpnei	r4,zero,560
 1008a5c:	01008c18 	cmpnei	r4,zero,560
 1008a60:	01008c18 	cmpnei	r4,zero,560
 1008a64:	01008c18 	cmpnei	r4,zero,560
 1008a68:	01008c18 	cmpnei	r4,zero,560
 1008a6c:	01008c18 	cmpnei	r4,zero,560
 1008a70:	01008c18 	cmpnei	r4,zero,560
 1008a74:	01008c18 	cmpnei	r4,zero,560
 1008a78:	01008c18 	cmpnei	r4,zero,560
 1008a7c:	01008c18 	cmpnei	r4,zero,560
 1008a80:	01008c18 	cmpnei	r4,zero,560
 1008a84:	01008c18 	cmpnei	r4,zero,560
 1008a88:	01008c18 	cmpnei	r4,zero,560
 1008a8c:	01008c18 	cmpnei	r4,zero,560
 1008a90:	01008c18 	cmpnei	r4,zero,560
 1008a94:	01008c18 	cmpnei	r4,zero,560
 1008a98:	01008c18 	cmpnei	r4,zero,560
 1008a9c:	01008c18 	cmpnei	r4,zero,560
 1008aa0:	01008c18 	cmpnei	r4,zero,560
 1008aa4:	01008c18 	cmpnei	r4,zero,560
 1008aa8:	01008c18 	cmpnei	r4,zero,560
 1008aac:	01008c18 	cmpnei	r4,zero,560
 1008ab0:	01008c18 	cmpnei	r4,zero,560
 1008ab4:	01008c18 	cmpnei	r4,zero,560
 1008ab8:	01008c18 	cmpnei	r4,zero,560
 1008abc:	01008c18 	cmpnei	r4,zero,560
 1008ac0:	01008c18 	cmpnei	r4,zero,560
 1008ac4:	01008c18 	cmpnei	r4,zero,560
 1008ac8:	0100899c 	xori	r4,zero,550
 1008acc:	01008c18 	cmpnei	r4,zero,560
 1008ad0:	01008c18 	cmpnei	r4,zero,560
 1008ad4:	01008c18 	cmpnei	r4,zero,560
 1008ad8:	01008c18 	cmpnei	r4,zero,560
 1008adc:	01009c3c 	xorhi	r4,zero,624
 1008ae0:	01008c18 	cmpnei	r4,zero,560
 1008ae4:	01008c18 	cmpnei	r4,zero,560
 1008ae8:	01008c18 	cmpnei	r4,zero,560
 1008aec:	01008c18 	cmpnei	r4,zero,560
 1008af0:	01008c18 	cmpnei	r4,zero,560
 1008af4:	01009638 	rdprs	r4,zero,600
 1008af8:	01009638 	rdprs	r4,zero,600
 1008afc:	01009638 	rdprs	r4,zero,600
 1008b00:	01009638 	rdprs	r4,zero,600
 1008b04:	01009638 	rdprs	r4,zero,600
 1008b08:	01009638 	rdprs	r4,zero,600
 1008b0c:	01009638 	rdprs	r4,zero,600
 1008b10:	01009638 	rdprs	r4,zero,600
 1008b14:	01009638 	rdprs	r4,zero,600
 1008b18:	01009638 	rdprs	r4,zero,600
 1008b1c:	01008c18 	cmpnei	r4,zero,560
 1008b20:	01008c18 	cmpnei	r4,zero,560
 1008b24:	01008c18 	cmpnei	r4,zero,560
 1008b28:	01008c18 	cmpnei	r4,zero,560
 1008b2c:	01008c18 	cmpnei	r4,zero,560
 1008b30:	01008c18 	cmpnei	r4,zero,560
 1008b34:	01008c18 	cmpnei	r4,zero,560
 1008b38:	01008c18 	cmpnei	r4,zero,560
 1008b3c:	01008c18 	cmpnei	r4,zero,560
 1008b40:	01008c18 	cmpnei	r4,zero,560
 1008b44:	01009db8 	rdprs	r4,zero,630
 1008b48:	01009db0 	cmpltui	r4,zero,630
 1008b4c:	01008c18 	cmpnei	r4,zero,560
 1008b50:	01009db0 	cmpltui	r4,zero,630
 1008b54:	01008c18 	cmpnei	r4,zero,560
 1008b58:	01008c18 	cmpnei	r4,zero,560
 1008b5c:	01008c18 	cmpnei	r4,zero,560
 1008b60:	01008c18 	cmpnei	r4,zero,560
 1008b64:	01009e48 	cmpgei	r4,zero,633
 1008b68:	01008c18 	cmpnei	r4,zero,560
 1008b6c:	01008c18 	cmpnei	r4,zero,560
 1008b70:	01009e00 	call	1009e0 <__alt_mem_onchip+0x1009e0>
 1008b74:	01008c18 	cmpnei	r4,zero,560
 1008b78:	01008c18 	cmpnei	r4,zero,560
 1008b7c:	01008c18 	cmpnei	r4,zero,560
 1008b80:	01008c18 	cmpnei	r4,zero,560
 1008b84:	01008c18 	cmpnei	r4,zero,560
 1008b88:	01008c18 	cmpnei	r4,zero,560
 1008b8c:	01008c18 	cmpnei	r4,zero,560
 1008b90:	01008c18 	cmpnei	r4,zero,560
 1008b94:	01009c44 	movi	r4,625
 1008b98:	01008c18 	cmpnei	r4,zero,560
 1008b9c:	01008c18 	cmpnei	r4,zero,560
 1008ba0:	01009de4 	muli	r4,zero,631
 1008ba4:	01008c18 	cmpnei	r4,zero,560
 1008ba8:	01008c18 	cmpnei	r4,zero,560
 1008bac:	01008c18 	cmpnei	r4,zero,560
 1008bb0:	01008c18 	cmpnei	r4,zero,560
 1008bb4:	01008c18 	cmpnei	r4,zero,560
 1008bb8:	01008c18 	cmpnei	r4,zero,560
 1008bbc:	01008c18 	cmpnei	r4,zero,560
 1008bc0:	01009dd8 	cmpnei	r4,zero,631
 1008bc4:	01009dbc 	xorhi	r4,zero,630
 1008bc8:	01009db0 	cmpltui	r4,zero,630
 1008bcc:	01009db0 	cmpltui	r4,zero,630
 1008bd0:	01009db0 	cmpltui	r4,zero,630
 1008bd4:	01009da8 	cmpgeui	r4,zero,630
 1008bd8:	01009e9c 	xori	r4,zero,634
 1008bdc:	01008c18 	cmpnei	r4,zero,560
 1008be0:	01008c18 	cmpnei	r4,zero,560
 1008be4:	01009e88 	cmpgei	r4,zero,634
 1008be8:	01008c18 	cmpnei	r4,zero,560
 1008bec:	01009e20 	cmpeqi	r4,zero,632
 1008bf0:	01009e04 	movi	r4,632
 1008bf4:	01009e58 	cmpnei	r4,zero,633
 1008bf8:	01008c18 	cmpnei	r4,zero,560
 1008bfc:	01008c18 	cmpnei	r4,zero,560
 1008c00:	01009e50 	cmplti	r4,zero,633
 1008c04:	01008c18 	cmpnei	r4,zero,560
 1008c08:	01009188 	cmpgei	r4,zero,582
 1008c0c:	01008c18 	cmpnei	r4,zero,560
 1008c10:	01008c18 	cmpnei	r4,zero,560
 1008c14:	01009c44 	movi	r4,625
 1008c18:	2987883a 	add	r3,r5,r6
 1008c1c:	18800003 	ldbu	r2,0(r3)
 1008c20:	1080004c 	andi	r2,r2,1
 1008c24:	1005003a 	cmpeq	r2,r2,zero
 1008c28:	10002c26 	beq	r2,zero,1008cdc <__svfscanf_r+0x450>
 1008c2c:	01004074 	movhi	r4,257
 1008c30:	2100c104 	addi	r4,r4,772
 1008c34:	00800284 	movi	r2,10
 1008c38:	d900a015 	stw	r4,640(sp)
 1008c3c:	054000c4 	movi	r21,3
 1008c40:	d880a115 	stw	r2,644(sp)
 1008c44:	80c00117 	ldw	r3,4(r16)
 1008c48:	00c14a0e 	bge	zero,r3,1009174 <__svfscanf_r+0x8e8>
 1008c4c:	9880100c 	andi	r2,r19,64
 1008c50:	10001326 	beq	r2,zero,1008ca0 <__svfscanf_r+0x414>
 1008c54:	00800104 	movi	r2,4
 1008c58:	157f1f36 	bltu	r2,r21,10088d8 <__svfscanf_r+0x4c>
 1008c5c:	ad45883a 	add	r2,r21,r21
 1008c60:	1085883a 	add	r2,r2,r2
 1008c64:	00c04074 	movhi	r3,257
 1008c68:	18e31e04 	addi	r3,r3,-29576
 1008c6c:	10c5883a 	add	r2,r2,r3
 1008c70:	11000017 	ldw	r4,0(r2)
 1008c74:	2000683a 	jmp	r4
 1008c78:	01008ce4 	muli	r4,zero,563
 1008c7c:	01008df0 	cmpltui	r4,zero,567
 1008c80:	01008e64 	muli	r4,zero,569
 1008c84:	01009150 	cmplti	r4,zero,581
 1008c88:	01008f9c 	xori	r4,zero,574
 1008c8c:	b009883a 	mov	r4,r22
 1008c90:	800b883a 	mov	r5,r16
 1008c94:	100e7780 	call	100e778 <__srefill_r>
 1008c98:	103f511e 	bne	r2,zero,10089e0 <__svfscanf_r+0x154>
 1008c9c:	8c400044 	addi	r17,r17,1
 1008ca0:	81400017 	ldw	r5,0(r16)
 1008ca4:	90800017 	ldw	r2,0(r18)
 1008ca8:	28c00003 	ldbu	r3,0(r5)
 1008cac:	1887883a 	add	r3,r3,r2
 1008cb0:	19000003 	ldbu	r4,0(r3)
 1008cb4:	2100020c 	andi	r4,r4,8
 1008cb8:	203fe626 	beq	r4,zero,1008c54 <__svfscanf_r+0x3c8>
 1008cbc:	80c00117 	ldw	r3,4(r16)
 1008cc0:	18ffffc4 	addi	r3,r3,-1
 1008cc4:	80c00115 	stw	r3,4(r16)
 1008cc8:	00fff00e 	bge	zero,r3,1008c8c <__svfscanf_r+0x400>
 1008ccc:	29800044 	addi	r6,r5,1
 1008cd0:	8c400044 	addi	r17,r17,1
 1008cd4:	81800015 	stw	r6,0(r16)
 1008cd8:	003ff106 	br	1008ca0 <__svfscanf_r+0x414>
 1008cdc:	9cc00054 	ori	r19,r19,1
 1008ce0:	003fd206 	br	1008c2c <__svfscanf_r+0x3a0>
 1008ce4:	d8c0a317 	ldw	r3,652(sp)
 1008ce8:	1800021e 	bne	r3,zero,1008cf4 <__svfscanf_r+0x468>
 1008cec:	01000044 	movi	r4,1
 1008cf0:	d900a315 	stw	r4,652(sp)
 1008cf4:	9880004c 	andi	r2,r19,1
 1008cf8:	1005003a 	cmpeq	r2,r2,zero
 1008cfc:	1003d91e 	bne	r2,zero,1009c64 <__svfscanf_r+0x13d8>
 1008d00:	9d40040c 	andi	r21,r19,16
 1008d04:	a839003a 	cmpeq	fp,r21,zero
 1008d08:	e0042526 	beq	fp,zero,1009da0 <__svfscanf_r+0x1514>
 1008d0c:	d880a417 	ldw	r2,656(sp)
 1008d10:	14c00017 	ldw	r19,0(r2)
 1008d14:	10800104 	addi	r2,r2,4
 1008d18:	d880a415 	stw	r2,656(sp)
 1008d1c:	d8c0a317 	ldw	r3,652(sp)
 1008d20:	18041a26 	beq	r3,zero,1009d8c <__svfscanf_r+0x1500>
 1008d24:	010040b4 	movhi	r4,258
 1008d28:	2106c704 	addi	r4,r4,6940
 1008d2c:	20800017 	ldw	r2,0(r4)
 1008d30:	103f2b26 	beq	r2,zero,10089e0 <__svfscanf_r+0x154>
 1008d34:	d8804404 	addi	r2,sp,272
 1008d38:	0025883a 	mov	r18,zero
 1008d3c:	d880a615 	stw	r2,664(sp)
 1008d40:	05ffffc4 	movi	r23,-1
 1008d44:	80800017 	ldw	r2,0(r16)
 1008d48:	80c00117 	ldw	r3,4(r16)
 1008d4c:	d900a617 	ldw	r4,664(sp)
 1008d50:	12000003 	ldbu	r8,0(r2)
 1008d54:	18ffffc4 	addi	r3,r3,-1
 1008d58:	11800044 	addi	r6,r2,1
 1008d5c:	248f883a 	add	r7,r4,r18
 1008d60:	80c00115 	stw	r3,4(r16)
 1008d64:	81800015 	stw	r6,0(r16)
 1008d68:	3a000005 	stb	r8,0(r7)
 1008d6c:	d9000204 	addi	r4,sp,8
 1008d70:	000b883a 	mov	r5,zero
 1008d74:	01800204 	movi	r6,8
 1008d78:	100d0f80 	call	100d0f8 <memset>
 1008d7c:	d980a617 	ldw	r6,664(sp)
 1008d80:	94800044 	addi	r18,r18,1
 1008d84:	d8800204 	addi	r2,sp,8
 1008d88:	b009883a 	mov	r4,r22
 1008d8c:	980b883a 	mov	r5,r19
 1008d90:	900f883a 	mov	r7,r18
 1008d94:	d8800015 	stw	r2,0(sp)
 1008d98:	100cd940 	call	100cd94 <_mbrtowc_r>
 1008d9c:	1007883a 	mov	r3,r2
 1008da0:	15ff0f26 	beq	r2,r23,10089e0 <__svfscanf_r+0x154>
 1008da4:	1003f11e 	bne	r2,zero,1009d6c <__svfscanf_r+0x14e0>
 1008da8:	a800011e 	bne	r21,zero,1008db0 <__svfscanf_r+0x524>
 1008dac:	98000015 	stw	zero,0(r19)
 1008db0:	d8c0a317 	ldw	r3,652(sp)
 1008db4:	8ca3883a 	add	r17,r17,r18
 1008db8:	18ffffc4 	addi	r3,r3,-1
 1008dbc:	d8c0a315 	stw	r3,652(sp)
 1008dc0:	e0000126 	beq	fp,zero,1008dc8 <__svfscanf_r+0x53c>
 1008dc4:	9cc00104 	addi	r19,r19,4
 1008dc8:	0025883a 	mov	r18,zero
 1008dcc:	80c00117 	ldw	r3,4(r16)
 1008dd0:	00c3e90e 	bge	zero,r3,1009d78 <__svfscanf_r+0x14ec>
 1008dd4:	d900a317 	ldw	r4,652(sp)
 1008dd8:	2003ec26 	beq	r4,zero,1009d8c <__svfscanf_r+0x1500>
 1008ddc:	00c040b4 	movhi	r3,258
 1008de0:	18c6c704 	addi	r3,r3,6940
 1008de4:	18800017 	ldw	r2,0(r3)
 1008de8:	90bfd61e 	bne	r18,r2,1008d44 <__svfscanf_r+0x4b8>
 1008dec:	003efc06 	br	10089e0 <__svfscanf_r+0x154>
 1008df0:	d880a317 	ldw	r2,652(sp)
 1008df4:	1000021e 	bne	r2,zero,1008e00 <__svfscanf_r+0x574>
 1008df8:	00ffffc4 	movi	r3,-1
 1008dfc:	d8c0a315 	stw	r3,652(sp)
 1008e00:	9880040c 	andi	r2,r19,16
 1008e04:	10036526 	beq	r2,zero,1009b9c <__svfscanf_r+0x1310>
 1008e08:	0027883a 	mov	r19,zero
 1008e0c:	dd400404 	addi	r21,sp,16
 1008e10:	81000017 	ldw	r4,0(r16)
 1008e14:	20800003 	ldbu	r2,0(r4)
 1008e18:	a885883a 	add	r2,r21,r2
 1008e1c:	10c00007 	ldb	r3,0(r2)
 1008e20:	1803be26 	beq	r3,zero,1009d1c <__svfscanf_r+0x1490>
 1008e24:	80c00117 	ldw	r3,4(r16)
 1008e28:	21800044 	addi	r6,r4,1
 1008e2c:	d900a317 	ldw	r4,652(sp)
 1008e30:	18ffffc4 	addi	r3,r3,-1
 1008e34:	9cc00044 	addi	r19,r19,1
 1008e38:	81800015 	stw	r6,0(r16)
 1008e3c:	80c00115 	stw	r3,4(r16)
 1008e40:	24c3b626 	beq	r4,r19,1009d1c <__svfscanf_r+0x1490>
 1008e44:	00fff216 	blt	zero,r3,1008e10 <__svfscanf_r+0x584>
 1008e48:	b009883a 	mov	r4,r22
 1008e4c:	800b883a 	mov	r5,r16
 1008e50:	100e7780 	call	100e778 <__srefill_r>
 1008e54:	103fee26 	beq	r2,zero,1008e10 <__svfscanf_r+0x584>
 1008e58:	983ee126 	beq	r19,zero,10089e0 <__svfscanf_r+0x154>
 1008e5c:	8ce3883a 	add	r17,r17,r19
 1008e60:	003e9d06 	br	10088d8 <__svfscanf_r+0x4c>
 1008e64:	d900a317 	ldw	r4,652(sp)
 1008e68:	2000021e 	bne	r4,zero,1008e74 <__svfscanf_r+0x5e8>
 1008e6c:	00bfffc4 	movi	r2,-1
 1008e70:	d880a315 	stw	r2,652(sp)
 1008e74:	9880004c 	andi	r2,r19,1
 1008e78:	1005003a 	cmpeq	r2,r2,zero
 1008e7c:	1001f41e 	bne	r2,zero,1009650 <__svfscanf_r+0xdc4>
 1008e80:	9dc0040c 	andi	r23,r19,16
 1008e84:	b807003a 	cmpeq	r3,r23,zero
 1008e88:	d8c0a515 	stw	r3,660(sp)
 1008e8c:	1803b21e 	bne	r3,zero,1009d58 <__svfscanf_r+0x14cc>
 1008e90:	dd400104 	addi	r21,sp,4
 1008e94:	0027883a 	mov	r19,zero
 1008e98:	073fffc4 	movi	fp,-1
 1008e9c:	81400017 	ldw	r5,0(r16)
 1008ea0:	90800017 	ldw	r2,0(r18)
 1008ea4:	29c00003 	ldbu	r7,0(r5)
 1008ea8:	38c03fcc 	andi	r3,r7,255
 1008eac:	1887883a 	add	r3,r3,r2
 1008eb0:	19000003 	ldbu	r4,0(r3)
 1008eb4:	2100020c 	andi	r4,r4,8
 1008eb8:	2000321e 	bne	r4,zero,1008f84 <__svfscanf_r+0x6f8>
 1008ebc:	d8c0a317 	ldw	r3,652(sp)
 1008ec0:	18003026 	beq	r3,zero,1008f84 <__svfscanf_r+0x6f8>
 1008ec4:	008040b4 	movhi	r2,258
 1008ec8:	1086c704 	addi	r2,r2,6940
 1008ecc:	10c00017 	ldw	r3,0(r2)
 1008ed0:	98fec326 	beq	r19,r3,10089e0 <__svfscanf_r+0x154>
 1008ed4:	d8c04404 	addi	r3,sp,272
 1008ed8:	80800117 	ldw	r2,4(r16)
 1008edc:	d8c0a615 	stw	r3,664(sp)
 1008ee0:	d900a617 	ldw	r4,664(sp)
 1008ee4:	10ffffc4 	addi	r3,r2,-1
 1008ee8:	29800044 	addi	r6,r5,1
 1008eec:	80c00115 	stw	r3,4(r16)
 1008ef0:	24c5883a 	add	r2,r4,r19
 1008ef4:	81800015 	stw	r6,0(r16)
 1008ef8:	d9000204 	addi	r4,sp,8
 1008efc:	000b883a 	mov	r5,zero
 1008f00:	01800204 	movi	r6,8
 1008f04:	11c00005 	stb	r7,0(r2)
 1008f08:	100d0f80 	call	100d0f8 <memset>
 1008f0c:	d980a617 	ldw	r6,664(sp)
 1008f10:	9cc00044 	addi	r19,r19,1
 1008f14:	d8800204 	addi	r2,sp,8
 1008f18:	b009883a 	mov	r4,r22
 1008f1c:	a80b883a 	mov	r5,r21
 1008f20:	980f883a 	mov	r7,r19
 1008f24:	d8800015 	stw	r2,0(sp)
 1008f28:	100cd940 	call	100cd94 <_mbrtowc_r>
 1008f2c:	1007883a 	mov	r3,r2
 1008f30:	173eab26 	beq	r2,fp,10089e0 <__svfscanf_r+0x154>
 1008f34:	1003851e 	bne	r2,zero,1009d4c <__svfscanf_r+0x14c0>
 1008f38:	a8000015 	stw	zero,0(r21)
 1008f3c:	a9000017 	ldw	r4,0(r21)
 1008f40:	100cb100 	call	100cb10 <iswspace>
 1008f44:	1003781e 	bne	r2,zero,1009d28 <__svfscanf_r+0x149c>
 1008f48:	d900a317 	ldw	r4,652(sp)
 1008f4c:	d880a517 	ldw	r2,660(sp)
 1008f50:	8ce3883a 	add	r17,r17,r19
 1008f54:	213fffc4 	addi	r4,r4,-1
 1008f58:	d900a315 	stw	r4,652(sp)
 1008f5c:	10000126 	beq	r2,zero,1008f64 <__svfscanf_r+0x6d8>
 1008f60:	ad400104 	addi	r21,r21,4
 1008f64:	0027883a 	mov	r19,zero
 1008f68:	80c00117 	ldw	r3,4(r16)
 1008f6c:	00ffcb16 	blt	zero,r3,1008e9c <__svfscanf_r+0x610>
 1008f70:	b009883a 	mov	r4,r22
 1008f74:	800b883a 	mov	r5,r16
 1008f78:	100e7780 	call	100e778 <__srefill_r>
 1008f7c:	103fc726 	beq	r2,zero,1008e9c <__svfscanf_r+0x610>
 1008f80:	983e971e 	bne	r19,zero,10089e0 <__svfscanf_r+0x154>
 1008f84:	b83e541e 	bne	r23,zero,10088d8 <__svfscanf_r+0x4c>
 1008f88:	d900a217 	ldw	r4,648(sp)
 1008f8c:	a8000015 	stw	zero,0(r21)
 1008f90:	21000044 	addi	r4,r4,1
 1008f94:	d900a215 	stw	r4,648(sp)
 1008f98:	003e4f06 	br	10088d8 <__svfscanf_r+0x4c>
 1008f9c:	d900a317 	ldw	r4,652(sp)
 1008fa0:	00805704 	movi	r2,348
 1008fa4:	20ffffc4 	addi	r3,r4,-1
 1008fa8:	10c1ed2e 	bgeu	r2,r3,1009760 <__svfscanf_r+0xed4>
 1008fac:	00805744 	movi	r2,349
 1008fb0:	21bfa8c4 	addi	r6,r4,-349
 1008fb4:	9d41e014 	ori	r21,r19,1920
 1008fb8:	d880a315 	stw	r2,652(sp)
 1008fbc:	d8c04404 	addi	r3,sp,272
 1008fc0:	d8c0a615 	stw	r3,664(sp)
 1008fc4:	182f883a 	mov	r23,r3
 1008fc8:	d8009f15 	stw	zero,636(sp)
 1008fcc:	d8009e15 	stw	zero,632(sp)
 1008fd0:	d8009d15 	stw	zero,628(sp)
 1008fd4:	d8009c15 	stw	zero,624(sp)
 1008fd8:	0039883a 	mov	fp,zero
 1008fdc:	0025883a 	mov	r18,zero
 1008fe0:	80800017 	ldw	r2,0(r16)
 1008fe4:	11400003 	ldbu	r5,0(r2)
 1008fe8:	00801384 	movi	r2,78
 1008fec:	28fff544 	addi	r3,r5,-43
 1008ff0:	18c03fcc 	andi	r3,r3,255
 1008ff4:	10c07d36 	bltu	r2,r3,10091ec <__svfscanf_r+0x960>
 1008ff8:	18c5883a 	add	r2,r3,r3
 1008ffc:	1085883a 	add	r2,r2,r2
 1009000:	00c04074 	movhi	r3,257
 1009004:	18e40504 	addi	r3,r3,-28652
 1009008:	10c5883a 	add	r2,r2,r3
 100900c:	11000017 	ldw	r4,0(r2)
 1009010:	2000683a 	jmp	r4
 1009014:	010091a4 	muli	r4,zero,582
 1009018:	010091ec 	andhi	r4,zero,583
 100901c:	010091a4 	muli	r4,zero,582
 1009020:	01009338 	rdprs	r4,zero,588
 1009024:	010091ec 	andhi	r4,zero,583
 1009028:	01009370 	cmpltui	r4,zero,589
 100902c:	010093a4 	muli	r4,zero,590
 1009030:	010093a4 	muli	r4,zero,590
 1009034:	010093a4 	muli	r4,zero,590
 1009038:	010093a4 	muli	r4,zero,590
 100903c:	010093a4 	muli	r4,zero,590
 1009040:	010093a4 	muli	r4,zero,590
 1009044:	010093a4 	muli	r4,zero,590
 1009048:	010093a4 	muli	r4,zero,590
 100904c:	010093a4 	muli	r4,zero,590
 1009050:	010091ec 	andhi	r4,zero,583
 1009054:	010091ec 	andhi	r4,zero,583
 1009058:	010091ec 	andhi	r4,zero,583
 100905c:	010091ec 	andhi	r4,zero,583
 1009060:	010091ec 	andhi	r4,zero,583
 1009064:	010091ec 	andhi	r4,zero,583
 1009068:	010091ec 	andhi	r4,zero,583
 100906c:	010093c4 	movi	r4,591
 1009070:	010091ec 	andhi	r4,zero,583
 1009074:	010091ec 	andhi	r4,zero,583
 1009078:	010091ec 	andhi	r4,zero,583
 100907c:	010093d4 	movui	r4,591
 1009080:	01009470 	cmpltui	r4,zero,593
 1009084:	010091ec 	andhi	r4,zero,583
 1009088:	010091ec 	andhi	r4,zero,583
 100908c:	0100948c 	andi	r4,zero,594
 1009090:	010091ec 	andhi	r4,zero,583
 1009094:	010091ec 	andhi	r4,zero,583
 1009098:	010091ec 	andhi	r4,zero,583
 100909c:	010091ec 	andhi	r4,zero,583
 10090a0:	010094b8 	rdprs	r4,zero,594
 10090a4:	010091ec 	andhi	r4,zero,583
 10090a8:	010091ec 	andhi	r4,zero,583
 10090ac:	010091ec 	andhi	r4,zero,583
 10090b0:	010091ec 	andhi	r4,zero,583
 10090b4:	010091ec 	andhi	r4,zero,583
 10090b8:	0100950c 	andi	r4,zero,596
 10090bc:	010091ec 	andhi	r4,zero,583
 10090c0:	010091ec 	andhi	r4,zero,583
 10090c4:	010091ec 	andhi	r4,zero,583
 10090c8:	010091ec 	andhi	r4,zero,583
 10090cc:	0100961c 	xori	r4,zero,600
 10090d0:	010091ec 	andhi	r4,zero,583
 10090d4:	010091ec 	andhi	r4,zero,583
 10090d8:	010091ec 	andhi	r4,zero,583
 10090dc:	010091ec 	andhi	r4,zero,583
 10090e0:	010091ec 	andhi	r4,zero,583
 10090e4:	010091ec 	andhi	r4,zero,583
 10090e8:	010091ec 	andhi	r4,zero,583
 10090ec:	010093c4 	movi	r4,591
 10090f0:	010091ec 	andhi	r4,zero,583
 10090f4:	010091ec 	andhi	r4,zero,583
 10090f8:	010091ec 	andhi	r4,zero,583
 10090fc:	010093d4 	movui	r4,591
 1009100:	01009470 	cmpltui	r4,zero,593
 1009104:	010091ec 	andhi	r4,zero,583
 1009108:	010091ec 	andhi	r4,zero,583
 100910c:	0100948c 	andi	r4,zero,594
 1009110:	010091ec 	andhi	r4,zero,583
 1009114:	010091ec 	andhi	r4,zero,583
 1009118:	010091ec 	andhi	r4,zero,583
 100911c:	010091ec 	andhi	r4,zero,583
 1009120:	010094b8 	rdprs	r4,zero,594
 1009124:	010091ec 	andhi	r4,zero,583
 1009128:	010091ec 	andhi	r4,zero,583
 100912c:	010091ec 	andhi	r4,zero,583
 1009130:	010091ec 	andhi	r4,zero,583
 1009134:	010091ec 	andhi	r4,zero,583
 1009138:	0100950c 	andi	r4,zero,596
 100913c:	010091ec 	andhi	r4,zero,583
 1009140:	010091ec 	andhi	r4,zero,583
 1009144:	010091ec 	andhi	r4,zero,583
 1009148:	010091ec 	andhi	r4,zero,583
 100914c:	0100961c 	xori	r4,zero,600
 1009150:	d900a317 	ldw	r4,652(sp)
 1009154:	00805704 	movi	r2,348
 1009158:	20ffffc4 	addi	r3,r4,-1
 100915c:	10c18c2e 	bgeu	r2,r3,1009790 <__svfscanf_r+0xf04>
 1009160:	00805744 	movi	r2,349
 1009164:	257fa8c4 	addi	r21,r4,-349
 1009168:	9c836014 	ori	r18,r19,3456
 100916c:	d880a315 	stw	r2,652(sp)
 1009170:	0001a106 	br	10097f8 <__svfscanf_r+0xf6c>
 1009174:	b009883a 	mov	r4,r22
 1009178:	800b883a 	mov	r5,r16
 100917c:	100e7780 	call	100e778 <__srefill_r>
 1009180:	103eb226 	beq	r2,zero,1008c4c <__svfscanf_r+0x3c0>
 1009184:	003e1606 	br	10089e0 <__svfscanf_r+0x154>
 1009188:	01000284 	movi	r4,10
 100918c:	00804074 	movhi	r2,257
 1009190:	10822104 	addi	r2,r2,2180
 1009194:	054000c4 	movi	r21,3
 1009198:	d900a115 	stw	r4,644(sp)
 100919c:	d880a015 	stw	r2,640(sp)
 10091a0:	003ea806 	br	1008c44 <__svfscanf_r+0x3b8>
 10091a4:	a880200c 	andi	r2,r21,128
 10091a8:	10001026 	beq	r2,zero,10091ec <__svfscanf_r+0x960>
 10091ac:	00bfdfc4 	movi	r2,-129
 10091b0:	a8aa703a 	and	r21,r21,r2
 10091b4:	b9400005 	stb	r5,0(r23)
 10091b8:	bdc00044 	addi	r23,r23,1
 10091bc:	80c00117 	ldw	r3,4(r16)
 10091c0:	8c400044 	addi	r17,r17,1
 10091c4:	18bfffc4 	addi	r2,r3,-1
 10091c8:	80800115 	stw	r2,4(r16)
 10091cc:	0080610e 	bge	zero,r2,1009354 <__svfscanf_r+0xac8>
 10091d0:	80800017 	ldw	r2,0(r16)
 10091d4:	10800044 	addi	r2,r2,1
 10091d8:	80800015 	stw	r2,0(r16)
 10091dc:	d880a317 	ldw	r2,652(sp)
 10091e0:	10bfffc4 	addi	r2,r2,-1
 10091e4:	d880a315 	stw	r2,652(sp)
 10091e8:	103f7d1e 	bne	r2,zero,1008fe0 <__svfscanf_r+0x754>
 10091ec:	d8c09e17 	ldw	r3,632(sp)
 10091f0:	18000226 	beq	r3,zero,10091fc <__svfscanf_r+0x970>
 10091f4:	00bfbfc4 	movi	r2,-257
 10091f8:	a8aa703a 	and	r21,r21,r2
 10091fc:	90ffffc4 	addi	r3,r18,-1
 1009200:	00800044 	movi	r2,1
 1009204:	10c0cd2e 	bgeu	r2,r3,100953c <__svfscanf_r+0xcb0>
 1009208:	e1003fcc 	andi	r4,fp,255
 100920c:	2100201c 	xori	r4,r4,128
 1009210:	213fe004 	addi	r4,r4,-128
 1009214:	20ffffc4 	addi	r3,r4,-1
 1009218:	00800184 	movi	r2,6
 100921c:	10c01736 	bltu	r2,r3,100927c <__svfscanf_r+0x9f0>
 1009220:	00c00084 	movi	r3,2
 1009224:	1900880e 	bge	r3,r4,1009448 <__svfscanf_r+0xbbc>
 1009228:	008000c4 	movi	r2,3
 100922c:	1100130e 	bge	r2,r4,100927c <__svfscanf_r+0x9f0>
 1009230:	e4ffffc4 	addi	r19,fp,-1
 1009234:	b825883a 	mov	r18,r23
 1009238:	94bfffc4 	addi	r18,r18,-1
 100923c:	91400007 	ldb	r5,0(r18)
 1009240:	b009883a 	mov	r4,r22
 1009244:	800d883a 	mov	r6,r16
 1009248:	1010ea40 	call	1010ea4 <_ungetc_r>
 100924c:	9cffffc4 	addi	r19,r19,-1
 1009250:	98c03fcc 	andi	r3,r19,255
 1009254:	18c0201c 	xori	r3,r3,128
 1009258:	18ffe004 	addi	r3,r3,-128
 100925c:	00800084 	movi	r2,2
 1009260:	18bff51e 	bne	r3,r2,1009238 <__svfscanf_r+0x9ac>
 1009264:	e0bfff04 	addi	r2,fp,-4
 1009268:	10803fcc 	andi	r2,r2,255
 100926c:	b887c83a 	sub	r3,r23,r2
 1009270:	8885c83a 	sub	r2,r17,r2
 1009274:	147fffc4 	addi	r17,r2,-1
 1009278:	1dffffc4 	addi	r23,r3,-1
 100927c:	a880400c 	andi	r2,r21,256
 1009280:	10001226 	beq	r2,zero,10092cc <__svfscanf_r+0xa40>
 1009284:	a881000c 	andi	r2,r21,1024
 1009288:	1000651e 	bne	r2,zero,1009420 <__svfscanf_r+0xb94>
 100928c:	bdffffc4 	addi	r23,r23,-1
 1009290:	b9400007 	ldb	r5,0(r23)
 1009294:	00801944 	movi	r2,101
 1009298:	8c7fffc4 	addi	r17,r17,-1
 100929c:	28800826 	beq	r5,r2,10092c0 <__svfscanf_r+0xa34>
 10092a0:	00801144 	movi	r2,69
 10092a4:	28800626 	beq	r5,r2,10092c0 <__svfscanf_r+0xa34>
 10092a8:	bdffffc4 	addi	r23,r23,-1
 10092ac:	b009883a 	mov	r4,r22
 10092b0:	800d883a 	mov	r6,r16
 10092b4:	1010ea40 	call	1010ea4 <_ungetc_r>
 10092b8:	b9400007 	ldb	r5,0(r23)
 10092bc:	8c7fffc4 	addi	r17,r17,-1
 10092c0:	b009883a 	mov	r4,r22
 10092c4:	800d883a 	mov	r6,r16
 10092c8:	1010ea40 	call	1010ea4 <_ungetc_r>
 10092cc:	a880040c 	andi	r2,r21,16
 10092d0:	103d811e 	bne	r2,zero,10088d8 <__svfscanf_r+0x4c>
 10092d4:	a8c1800c 	andi	r3,r21,1536
 10092d8:	00810004 	movi	r2,1024
 10092dc:	b8000005 	stb	zero,0(r23)
 10092e0:	1880bb26 	beq	r3,r2,10095d0 <__svfscanf_r+0xd44>
 10092e4:	d8809d17 	ldw	r2,628(sp)
 10092e8:	1000a61e 	bne	r2,zero,1009584 <__svfscanf_r+0xcf8>
 10092ec:	d940a617 	ldw	r5,664(sp)
 10092f0:	b009883a 	mov	r4,r22
 10092f4:	000d883a 	mov	r6,zero
 10092f8:	100ece00 	call	100ece0 <_strtod_r>
 10092fc:	a900004c 	andi	r4,r21,1
 1009300:	2009003a 	cmpeq	r4,r4,zero
 1009304:	1025883a 	mov	r18,r2
 1009308:	1827883a 	mov	r19,r3
 100930c:	2000951e 	bne	r4,zero,1009564 <__svfscanf_r+0xcd8>
 1009310:	d8c0a417 	ldw	r3,656(sp)
 1009314:	18800017 	ldw	r2,0(r3)
 1009318:	1d400104 	addi	r21,r3,4
 100931c:	14c00115 	stw	r19,4(r2)
 1009320:	14800015 	stw	r18,0(r2)
 1009324:	d8c0a217 	ldw	r3,648(sp)
 1009328:	dd40a415 	stw	r21,656(sp)
 100932c:	18c00044 	addi	r3,r3,1
 1009330:	d8c0a215 	stw	r3,648(sp)
 1009334:	003d6806 	br	10088d8 <__svfscanf_r+0x4c>
 1009338:	a880800c 	andi	r2,r21,512
 100933c:	103fab26 	beq	r2,zero,10091ec <__svfscanf_r+0x960>
 1009340:	d9009e17 	ldw	r4,632(sp)
 1009344:	00bf5fc4 	movi	r2,-641
 1009348:	a8aa703a 	and	r21,r21,r2
 100934c:	d9009f15 	stw	r4,636(sp)
 1009350:	003f9806 	br	10091b4 <__svfscanf_r+0x928>
 1009354:	b009883a 	mov	r4,r22
 1009358:	800b883a 	mov	r5,r16
 100935c:	d980a715 	stw	r6,668(sp)
 1009360:	100e7780 	call	100e778 <__srefill_r>
 1009364:	d980a717 	ldw	r6,668(sp)
 1009368:	103f9c26 	beq	r2,zero,10091dc <__svfscanf_r+0x950>
 100936c:	003f9f06 	br	10091ec <__svfscanf_r+0x960>
 1009370:	a880400c 	andi	r2,r21,256
 1009374:	10000b26 	beq	r2,zero,10093a4 <__svfscanf_r+0xb18>
 1009378:	00bfdfc4 	movi	r2,-129
 100937c:	a8aa703a 	and	r21,r21,r2
 1009380:	d8809e17 	ldw	r2,632(sp)
 1009384:	10800044 	addi	r2,r2,1
 1009388:	d8809e15 	stw	r2,632(sp)
 100938c:	303f8b26 	beq	r6,zero,10091bc <__svfscanf_r+0x930>
 1009390:	d8c0a317 	ldw	r3,652(sp)
 1009394:	31bfffc4 	addi	r6,r6,-1
 1009398:	18c00044 	addi	r3,r3,1
 100939c:	d8c0a315 	stw	r3,652(sp)
 10093a0:	003f8606 	br	10091bc <__svfscanf_r+0x930>
 10093a4:	e0803fcc 	andi	r2,fp,255
 10093a8:	1080201c 	xori	r2,r2,128
 10093ac:	10bfe004 	addi	r2,r2,-128
 10093b0:	9085883a 	add	r2,r18,r2
 10093b4:	103f8d1e 	bne	r2,zero,10091ec <__svfscanf_r+0x960>
 10093b8:	00bf9fc4 	movi	r2,-385
 10093bc:	a8aa703a 	and	r21,r21,r2
 10093c0:	003f7c06 	br	10091b4 <__svfscanf_r+0x928>
 10093c4:	00800044 	movi	r2,1
 10093c8:	90bf881e 	bne	r18,r2,10091ec <__svfscanf_r+0x960>
 10093cc:	04800084 	movi	r18,2
 10093d0:	003f7806 	br	10091b4 <__svfscanf_r+0x928>
 10093d4:	a8c1400c 	andi	r3,r21,1280
 10093d8:	00810004 	movi	r2,1024
 10093dc:	18800426 	beq	r3,r2,10093f0 <__svfscanf_r+0xb64>
 10093e0:	a884703a 	and	r2,r21,r2
 10093e4:	103f8126 	beq	r2,zero,10091ec <__svfscanf_r+0x960>
 10093e8:	d8809e17 	ldw	r2,632(sp)
 10093ec:	103f8326 	beq	r2,zero,10091fc <__svfscanf_r+0x970>
 10093f0:	a880800c 	andi	r2,r21,512
 10093f4:	1000051e 	bne	r2,zero,100940c <__svfscanf_r+0xb80>
 10093f8:	d8c09e17 	ldw	r3,632(sp)
 10093fc:	d9009f17 	ldw	r4,636(sp)
 1009400:	ddc09c15 	stw	r23,624(sp)
 1009404:	1907c83a 	sub	r3,r3,r4
 1009408:	d8c09d15 	stw	r3,628(sp)
 100940c:	00be7fc4 	movi	r2,-1537
 1009410:	a884703a 	and	r2,r21,r2
 1009414:	15406014 	ori	r21,r2,384
 1009418:	d8009e15 	stw	zero,632(sp)
 100941c:	003f6506 	br	10091b4 <__svfscanf_r+0x928>
 1009420:	d900a617 	ldw	r4,664(sp)
 1009424:	25fd4e2e 	bgeu	r4,r23,1008960 <__svfscanf_r+0xd4>
 1009428:	bdffffc4 	addi	r23,r23,-1
 100942c:	b9400007 	ldb	r5,0(r23)
 1009430:	b009883a 	mov	r4,r22
 1009434:	800d883a 	mov	r6,r16
 1009438:	1010ea40 	call	1010ea4 <_ungetc_r>
 100943c:	d880a617 	ldw	r2,664(sp)
 1009440:	15fff936 	bltu	r2,r23,1009428 <__svfscanf_r+0xb9c>
 1009444:	003d4606 	br	1008960 <__svfscanf_r+0xd4>
 1009448:	d900a617 	ldw	r4,664(sp)
 100944c:	25fd442e 	bgeu	r4,r23,1008960 <__svfscanf_r+0xd4>
 1009450:	bdffffc4 	addi	r23,r23,-1
 1009454:	b9400007 	ldb	r5,0(r23)
 1009458:	b009883a 	mov	r4,r22
 100945c:	800d883a 	mov	r6,r16
 1009460:	1010ea40 	call	1010ea4 <_ungetc_r>
 1009464:	d8c0a617 	ldw	r3,664(sp)
 1009468:	1dfff936 	bltu	r3,r23,1009450 <__svfscanf_r+0xbc4>
 100946c:	003d3c06 	br	1008960 <__svfscanf_r+0xd4>
 1009470:	e0c03fcc 	andi	r3,fp,255
 1009474:	18c0201c 	xori	r3,r3,128
 1009478:	18ffe004 	addi	r3,r3,-128
 100947c:	00800084 	movi	r2,2
 1009480:	18bf5a1e 	bne	r3,r2,10091ec <__svfscanf_r+0x960>
 1009484:	070000c4 	movi	fp,3
 1009488:	003f4a06 	br	10091b4 <__svfscanf_r+0x928>
 100948c:	e0c03fcc 	andi	r3,fp,255
 1009490:	18c0201c 	xori	r3,r3,128
 1009494:	18ffe004 	addi	r3,r3,-128
 1009498:	1800231e 	bne	r3,zero,1009528 <__svfscanf_r+0xc9c>
 100949c:	a8c1c00c 	andi	r3,r21,1792
 10094a0:	0081c004 	movi	r2,1792
 10094a4:	18bf511e 	bne	r3,r2,10091ec <__svfscanf_r+0x960>
 10094a8:	00be1fc4 	movi	r2,-1921
 10094ac:	a8aa703a 	and	r21,r21,r2
 10094b0:	07000044 	movi	fp,1
 10094b4:	003f3f06 	br	10091b4 <__svfscanf_r+0x928>
 10094b8:	9000101e 	bne	r18,zero,10094fc <__svfscanf_r+0xc70>
 10094bc:	a8c1c00c 	andi	r3,r21,1792
 10094c0:	0081c004 	movi	r2,1792
 10094c4:	18800926 	beq	r3,r2,10094ec <__svfscanf_r+0xc60>
 10094c8:	e0c03fcc 	andi	r3,fp,255
 10094cc:	18c0201c 	xori	r3,r3,128
 10094d0:	18ffe004 	addi	r3,r3,-128
 10094d4:	00800044 	movi	r2,1
 10094d8:	18800226 	beq	r3,r2,10094e4 <__svfscanf_r+0xc58>
 10094dc:	00800104 	movi	r2,4
 10094e0:	18bf421e 	bne	r3,r2,10091ec <__svfscanf_r+0x960>
 10094e4:	e7000044 	addi	fp,fp,1
 10094e8:	003f3206 	br	10091b4 <__svfscanf_r+0x928>
 10094ec:	00be1fc4 	movi	r2,-1921
 10094f0:	a8aa703a 	and	r21,r21,r2
 10094f4:	04800044 	movi	r18,1
 10094f8:	003f2e06 	br	10091b4 <__svfscanf_r+0x928>
 10094fc:	00800084 	movi	r2,2
 1009500:	90bff11e 	bne	r18,r2,10094c8 <__svfscanf_r+0xc3c>
 1009504:	048000c4 	movi	r18,3
 1009508:	003f2a06 	br	10091b4 <__svfscanf_r+0x928>
 100950c:	e0c03fcc 	andi	r3,fp,255
 1009510:	18c0201c 	xori	r3,r3,128
 1009514:	18ffe004 	addi	r3,r3,-128
 1009518:	00800184 	movi	r2,6
 100951c:	18bf331e 	bne	r3,r2,10091ec <__svfscanf_r+0x960>
 1009520:	070001c4 	movi	fp,7
 1009524:	003f2306 	br	10091b4 <__svfscanf_r+0x928>
 1009528:	008000c4 	movi	r2,3
 100952c:	18bfed26 	beq	r3,r2,10094e4 <__svfscanf_r+0xc58>
 1009530:	00800144 	movi	r2,5
 1009534:	18bfeb26 	beq	r3,r2,10094e4 <__svfscanf_r+0xc58>
 1009538:	003f2c06 	br	10091ec <__svfscanf_r+0x960>
 100953c:	d900a617 	ldw	r4,664(sp)
 1009540:	25fd072e 	bgeu	r4,r23,1008960 <__svfscanf_r+0xd4>
 1009544:	bdffffc4 	addi	r23,r23,-1
 1009548:	b9400007 	ldb	r5,0(r23)
 100954c:	b009883a 	mov	r4,r22
 1009550:	800d883a 	mov	r6,r16
 1009554:	1010ea40 	call	1010ea4 <_ungetc_r>
 1009558:	d880a617 	ldw	r2,664(sp)
 100955c:	15fff936 	bltu	r2,r23,1009544 <__svfscanf_r+0xcb8>
 1009560:	003cff06 	br	1008960 <__svfscanf_r+0xd4>
 1009564:	a880008c 	andi	r2,r21,2
 1009568:	10002026 	beq	r2,zero,10095ec <__svfscanf_r+0xd60>
 100956c:	d900a417 	ldw	r4,656(sp)
 1009570:	20800017 	ldw	r2,0(r4)
 1009574:	25400104 	addi	r21,r4,4
 1009578:	10c00115 	stw	r3,4(r2)
 100957c:	14800015 	stw	r18,0(r2)
 1009580:	003f6806 	br	1009324 <__svfscanf_r+0xa98>
 1009584:	d8c09c17 	ldw	r3,624(sp)
 1009588:	b009883a 	mov	r4,r22
 100958c:	000d883a 	mov	r6,zero
 1009590:	19400044 	addi	r5,r3,1
 1009594:	01c00284 	movi	r7,10
 1009598:	10103040 	call	1010304 <_strtol_r>
 100959c:	d9009d17 	ldw	r4,628(sp)
 10095a0:	110dc83a 	sub	r6,r2,r4
 10095a4:	d8c0a617 	ldw	r3,664(sp)
 10095a8:	d9009c17 	ldw	r4,624(sp)
 10095ac:	188054c4 	addi	r2,r3,339
 10095b0:	20800236 	bltu	r4,r2,10095bc <__svfscanf_r+0xd30>
 10095b4:	18805484 	addi	r2,r3,338
 10095b8:	d8809c15 	stw	r2,624(sp)
 10095bc:	d9009c17 	ldw	r4,624(sp)
 10095c0:	014040b4 	movhi	r5,258
 10095c4:	297d0b04 	addi	r5,r5,-3028
 10095c8:	10067c00 	call	10067c0 <sprintf>
 10095cc:	003f4706 	br	10092ec <__svfscanf_r+0xa60>
 10095d0:	d8c09e17 	ldw	r3,632(sp)
 10095d4:	d9009f17 	ldw	r4,636(sp)
 10095d8:	1905c83a 	sub	r2,r3,r4
 10095dc:	103f4326 	beq	r2,zero,10092ec <__svfscanf_r+0xa60>
 10095e0:	008dc83a 	sub	r6,zero,r2
 10095e4:	ddc09c15 	stw	r23,624(sp)
 10095e8:	003fee06 	br	10095a4 <__svfscanf_r+0xd18>
 10095ec:	d880a417 	ldw	r2,656(sp)
 10095f0:	9009883a 	mov	r4,r18
 10095f4:	180b883a 	mov	r5,r3
 10095f8:	15c00017 	ldw	r23,0(r2)
 10095fc:	15400104 	addi	r21,r2,4
 1009600:	100e9980 	call	100e998 <__isnand>
 1009604:	10021c1e 	bne	r2,zero,1009e78 <__svfscanf_r+0x15ec>
 1009608:	980b883a 	mov	r5,r19
 100960c:	9009883a 	mov	r4,r18
 1009610:	1012f200 	call	1012f20 <__truncdfsf2>
 1009614:	b8800015 	stw	r2,0(r23)
 1009618:	003f4206 	br	1009324 <__svfscanf_r+0xa98>
 100961c:	e0c03fcc 	andi	r3,fp,255
 1009620:	18c0201c 	xori	r3,r3,128
 1009624:	18ffe004 	addi	r3,r3,-128
 1009628:	008001c4 	movi	r2,7
 100962c:	18beef1e 	bne	r3,r2,10091ec <__svfscanf_r+0x960>
 1009630:	07000204 	movi	fp,8
 1009634:	003edf06 	br	10091b4 <__svfscanf_r+0x928>
 1009638:	d900a317 	ldw	r4,652(sp)
 100963c:	208002a4 	muli	r2,r4,10
 1009640:	1145883a 	add	r2,r2,r5
 1009644:	10bff404 	addi	r2,r2,-48
 1009648:	d880a315 	stw	r2,652(sp)
 100964c:	003ceb06 	br	10089fc <__svfscanf_r+0x170>
 1009650:	9880040c 	andi	r2,r19,16
 1009654:	10001426 	beq	r2,zero,10096a8 <__svfscanf_r+0xe1c>
 1009658:	0027883a 	mov	r19,zero
 100965c:	00000906 	br	1009684 <__svfscanf_r+0xdf8>
 1009660:	80c00117 	ldw	r3,4(r16)
 1009664:	d880a317 	ldw	r2,652(sp)
 1009668:	29800044 	addi	r6,r5,1
 100966c:	18ffffc4 	addi	r3,r3,-1
 1009670:	9cc00044 	addi	r19,r19,1
 1009674:	81800015 	stw	r6,0(r16)
 1009678:	80c00115 	stw	r3,4(r16)
 100967c:	14fdf726 	beq	r2,r19,1008e5c <__svfscanf_r+0x5d0>
 1009680:	00c02c0e 	bge	zero,r3,1009734 <__svfscanf_r+0xea8>
 1009684:	81400017 	ldw	r5,0(r16)
 1009688:	90800017 	ldw	r2,0(r18)
 100968c:	28c00003 	ldbu	r3,0(r5)
 1009690:	1887883a 	add	r3,r3,r2
 1009694:	19000003 	ldbu	r4,0(r3)
 1009698:	2100020c 	andi	r4,r4,8
 100969c:	203ff026 	beq	r4,zero,1009660 <__svfscanf_r+0xdd4>
 10096a0:	8ce3883a 	add	r17,r17,r19
 10096a4:	003c8c06 	br	10088d8 <__svfscanf_r+0x4c>
 10096a8:	d8c0a417 	ldw	r3,656(sp)
 10096ac:	1d400017 	ldw	r21,0(r3)
 10096b0:	a827883a 	mov	r19,r21
 10096b4:	00000e06 	br	10096f0 <__svfscanf_r+0xe64>
 10096b8:	80800117 	ldw	r2,4(r16)
 10096bc:	d900a317 	ldw	r4,652(sp)
 10096c0:	29800044 	addi	r6,r5,1
 10096c4:	10ffffc4 	addi	r3,r2,-1
 10096c8:	213fffc4 	addi	r4,r4,-1
 10096cc:	d900a315 	stw	r4,652(sp)
 10096d0:	80c00115 	stw	r3,4(r16)
 10096d4:	28800003 	ldbu	r2,0(r5)
 10096d8:	98800005 	stb	r2,0(r19)
 10096dc:	81800015 	stw	r6,0(r16)
 10096e0:	9cc00044 	addi	r19,r19,1
 10096e4:	20000926 	beq	r4,zero,100970c <__svfscanf_r+0xe80>
 10096e8:	80800117 	ldw	r2,4(r16)
 10096ec:	0080170e 	bge	zero,r2,100974c <__svfscanf_r+0xec0>
 10096f0:	81400017 	ldw	r5,0(r16)
 10096f4:	90800017 	ldw	r2,0(r18)
 10096f8:	28c00003 	ldbu	r3,0(r5)
 10096fc:	1887883a 	add	r3,r3,r2
 1009700:	19000003 	ldbu	r4,0(r3)
 1009704:	2100020c 	andi	r4,r4,8
 1009708:	203feb26 	beq	r4,zero,10096b8 <__svfscanf_r+0xe2c>
 100970c:	9d45c83a 	sub	r2,r19,r21
 1009710:	d8c0a217 	ldw	r3,648(sp)
 1009714:	88a3883a 	add	r17,r17,r2
 1009718:	d880a417 	ldw	r2,656(sp)
 100971c:	18c00044 	addi	r3,r3,1
 1009720:	d8c0a215 	stw	r3,648(sp)
 1009724:	10800104 	addi	r2,r2,4
 1009728:	d880a415 	stw	r2,656(sp)
 100972c:	98000005 	stb	zero,0(r19)
 1009730:	003c6906 	br	10088d8 <__svfscanf_r+0x4c>
 1009734:	b009883a 	mov	r4,r22
 1009738:	800b883a 	mov	r5,r16
 100973c:	100e7780 	call	100e778 <__srefill_r>
 1009740:	103fd026 	beq	r2,zero,1009684 <__svfscanf_r+0xdf8>
 1009744:	8ce3883a 	add	r17,r17,r19
 1009748:	003c6306 	br	10088d8 <__svfscanf_r+0x4c>
 100974c:	b009883a 	mov	r4,r22
 1009750:	800b883a 	mov	r5,r16
 1009754:	100e7780 	call	100e778 <__srefill_r>
 1009758:	103fe526 	beq	r2,zero,10096f0 <__svfscanf_r+0xe64>
 100975c:	003feb06 	br	100970c <__svfscanf_r+0xe80>
 1009760:	d900a317 	ldw	r4,652(sp)
 1009764:	9d41e014 	ori	r21,r19,1920
 1009768:	2000821e 	bne	r4,zero,1009974 <__svfscanf_r+0x10e8>
 100976c:	d8c04404 	addi	r3,sp,272
 1009770:	182f883a 	mov	r23,r3
 1009774:	0039883a 	mov	fp,zero
 1009778:	d8c0a615 	stw	r3,664(sp)
 100977c:	d8009c15 	stw	zero,624(sp)
 1009780:	d8009d15 	stw	zero,628(sp)
 1009784:	d8009f15 	stw	zero,636(sp)
 1009788:	d8009e15 	stw	zero,632(sp)
 100978c:	003e9e06 	br	1009208 <__svfscanf_r+0x97c>
 1009790:	d900a317 	ldw	r4,652(sp)
 1009794:	9c836014 	ori	r18,r19,3456
 1009798:	2000161e 	bne	r4,zero,10097f4 <__svfscanf_r+0xf68>
 100979c:	d8804404 	addi	r2,sp,272
 10097a0:	d880a615 	stw	r2,664(sp)
 10097a4:	002f883a 	mov	r23,zero
 10097a8:	1027883a 	mov	r19,r2
 10097ac:	9080400c 	andi	r2,r18,256
 10097b0:	10000926 	beq	r2,zero,10097d8 <__svfscanf_r+0xf4c>
 10097b4:	d8c0a617 	ldw	r3,664(sp)
 10097b8:	1cc0052e 	bgeu	r3,r19,10097d0 <__svfscanf_r+0xf44>
 10097bc:	9cffffc4 	addi	r19,r19,-1
 10097c0:	99400007 	ldb	r5,0(r19)
 10097c4:	b009883a 	mov	r4,r22
 10097c8:	800d883a 	mov	r6,r16
 10097cc:	1010ea40 	call	1010ea4 <_ungetc_r>
 10097d0:	d900a617 	ldw	r4,664(sp)
 10097d4:	24fc6226 	beq	r4,r19,1008960 <__svfscanf_r+0xd4>
 10097d8:	9080040c 	andi	r2,r18,16
 10097dc:	10006726 	beq	r2,zero,100997c <__svfscanf_r+0x10f0>
 10097e0:	d8c0a617 	ldw	r3,664(sp)
 10097e4:	98c5c83a 	sub	r2,r19,r3
 10097e8:	b885883a 	add	r2,r23,r2
 10097ec:	88a3883a 	add	r17,r17,r2
 10097f0:	003c3906 	br	10088d8 <__svfscanf_r+0x4c>
 10097f4:	002b883a 	mov	r21,zero
 10097f8:	d8c04404 	addi	r3,sp,272
 10097fc:	d8c0a615 	stw	r3,664(sp)
 1009800:	002f883a 	mov	r23,zero
 1009804:	1827883a 	mov	r19,r3
 1009808:	81800017 	ldw	r6,0(r16)
 100980c:	00c01344 	movi	r3,77
 1009810:	31400003 	ldbu	r5,0(r6)
 1009814:	28bff544 	addi	r2,r5,-43
 1009818:	10803fcc 	andi	r2,r2,255
 100981c:	18bfe336 	bltu	r3,r2,10097ac <__svfscanf_r+0xf20>
 1009820:	1085883a 	add	r2,r2,r2
 1009824:	1085883a 	add	r2,r2,r2
 1009828:	00c04074 	movhi	r3,257
 100982c:	18e60f04 	addi	r3,r3,-26564
 1009830:	10c5883a 	add	r2,r2,r3
 1009834:	11000017 	ldw	r4,0(r2)
 1009838:	2000683a 	jmp	r4
 100983c:	010099d0 	cmplti	r4,zero,615
 1009840:	010097ac 	andhi	r4,zero,606
 1009844:	010099d0 	cmplti	r4,zero,615
 1009848:	010097ac 	andhi	r4,zero,606
 100984c:	010097ac 	andhi	r4,zero,606
 1009850:	01009a14 	movui	r4,616
 1009854:	01009b10 	cmplti	r4,zero,620
 1009858:	01009b10 	cmplti	r4,zero,620
 100985c:	01009b10 	cmplti	r4,zero,620
 1009860:	01009b10 	cmplti	r4,zero,620
 1009864:	01009b10 	cmplti	r4,zero,620
 1009868:	01009b10 	cmplti	r4,zero,620
 100986c:	01009b10 	cmplti	r4,zero,620
 1009870:	01009b38 	rdprs	r4,zero,620
 1009874:	01009b38 	rdprs	r4,zero,620
 1009878:	010097ac 	andhi	r4,zero,606
 100987c:	010097ac 	andhi	r4,zero,606
 1009880:	010097ac 	andhi	r4,zero,606
 1009884:	010097ac 	andhi	r4,zero,606
 1009888:	010097ac 	andhi	r4,zero,606
 100988c:	010097ac 	andhi	r4,zero,606
 1009890:	010097ac 	andhi	r4,zero,606
 1009894:	01009b68 	cmpgeui	r4,zero,621
 1009898:	01009b68 	cmpgeui	r4,zero,621
 100989c:	01009b68 	cmpgeui	r4,zero,621
 10098a0:	01009b68 	cmpgeui	r4,zero,621
 10098a4:	01009b68 	cmpgeui	r4,zero,621
 10098a8:	01009b68 	cmpgeui	r4,zero,621
 10098ac:	010097ac 	andhi	r4,zero,606
 10098b0:	010097ac 	andhi	r4,zero,606
 10098b4:	010097ac 	andhi	r4,zero,606
 10098b8:	010097ac 	andhi	r4,zero,606
 10098bc:	010097ac 	andhi	r4,zero,606
 10098c0:	010097ac 	andhi	r4,zero,606
 10098c4:	010097ac 	andhi	r4,zero,606
 10098c8:	010097ac 	andhi	r4,zero,606
 10098cc:	010097ac 	andhi	r4,zero,606
 10098d0:	010097ac 	andhi	r4,zero,606
 10098d4:	010097ac 	andhi	r4,zero,606
 10098d8:	010097ac 	andhi	r4,zero,606
 10098dc:	010097ac 	andhi	r4,zero,606
 10098e0:	010097ac 	andhi	r4,zero,606
 10098e4:	010097ac 	andhi	r4,zero,606
 10098e8:	010097ac 	andhi	r4,zero,606
 10098ec:	010097ac 	andhi	r4,zero,606
 10098f0:	01009b78 	rdprs	r4,zero,621
 10098f4:	010097ac 	andhi	r4,zero,606
 10098f8:	010097ac 	andhi	r4,zero,606
 10098fc:	010097ac 	andhi	r4,zero,606
 1009900:	010097ac 	andhi	r4,zero,606
 1009904:	010097ac 	andhi	r4,zero,606
 1009908:	010097ac 	andhi	r4,zero,606
 100990c:	010097ac 	andhi	r4,zero,606
 1009910:	010097ac 	andhi	r4,zero,606
 1009914:	01009b68 	cmpgeui	r4,zero,621
 1009918:	01009b68 	cmpgeui	r4,zero,621
 100991c:	01009b68 	cmpgeui	r4,zero,621
 1009920:	01009b68 	cmpgeui	r4,zero,621
 1009924:	01009b68 	cmpgeui	r4,zero,621
 1009928:	01009b68 	cmpgeui	r4,zero,621
 100992c:	010097ac 	andhi	r4,zero,606
 1009930:	010097ac 	andhi	r4,zero,606
 1009934:	010097ac 	andhi	r4,zero,606
 1009938:	010097ac 	andhi	r4,zero,606
 100993c:	010097ac 	andhi	r4,zero,606
 1009940:	010097ac 	andhi	r4,zero,606
 1009944:	010097ac 	andhi	r4,zero,606
 1009948:	010097ac 	andhi	r4,zero,606
 100994c:	010097ac 	andhi	r4,zero,606
 1009950:	010097ac 	andhi	r4,zero,606
 1009954:	010097ac 	andhi	r4,zero,606
 1009958:	010097ac 	andhi	r4,zero,606
 100995c:	010097ac 	andhi	r4,zero,606
 1009960:	010097ac 	andhi	r4,zero,606
 1009964:	010097ac 	andhi	r4,zero,606
 1009968:	010097ac 	andhi	r4,zero,606
 100996c:	010097ac 	andhi	r4,zero,606
 1009970:	01009b78 	rdprs	r4,zero,621
 1009974:	000d883a 	mov	r6,zero
 1009978:	003d9006 	br	1008fbc <__svfscanf_r+0x730>
 100997c:	98000005 	stb	zero,0(r19)
 1009980:	d8c0a017 	ldw	r3,640(sp)
 1009984:	d940a617 	ldw	r5,664(sp)
 1009988:	d9c0a117 	ldw	r7,644(sp)
 100998c:	b009883a 	mov	r4,r22
 1009990:	000d883a 	mov	r6,zero
 1009994:	183ee83a 	callr	r3
 1009998:	1007883a 	mov	r3,r2
 100999c:	9080080c 	andi	r2,r18,32
 10099a0:	10004d1e 	bne	r2,zero,1009ad8 <__svfscanf_r+0x124c>
 10099a4:	9080010c 	andi	r2,r18,4
 10099a8:	10003426 	beq	r2,zero,1009a7c <__svfscanf_r+0x11f0>
 10099ac:	d900a417 	ldw	r4,656(sp)
 10099b0:	20800017 	ldw	r2,0(r4)
 10099b4:	21000104 	addi	r4,r4,4
 10099b8:	d900a415 	stw	r4,656(sp)
 10099bc:	10c0000d 	sth	r3,0(r2)
 10099c0:	d880a217 	ldw	r2,648(sp)
 10099c4:	10800044 	addi	r2,r2,1
 10099c8:	d880a215 	stw	r2,648(sp)
 10099cc:	003f8406 	br	10097e0 <__svfscanf_r+0xf54>
 10099d0:	9080200c 	andi	r2,r18,128
 10099d4:	103f7526 	beq	r2,zero,10097ac <__svfscanf_r+0xf20>
 10099d8:	00bfdfc4 	movi	r2,-129
 10099dc:	90a4703a 	and	r18,r18,r2
 10099e0:	99400005 	stb	r5,0(r19)
 10099e4:	9cc00044 	addi	r19,r19,1
 10099e8:	80c00117 	ldw	r3,4(r16)
 10099ec:	18ffffc4 	addi	r3,r3,-1
 10099f0:	80c00115 	stw	r3,4(r16)
 10099f4:	00c0130e 	bge	zero,r3,1009a44 <__svfscanf_r+0x11b8>
 10099f8:	31800044 	addi	r6,r6,1
 10099fc:	81800015 	stw	r6,0(r16)
 1009a00:	d880a317 	ldw	r2,652(sp)
 1009a04:	10bfffc4 	addi	r2,r2,-1
 1009a08:	d880a315 	stw	r2,652(sp)
 1009a0c:	103f7e1e 	bne	r2,zero,1009808 <__svfscanf_r+0xf7c>
 1009a10:	003f6606 	br	10097ac <__svfscanf_r+0xf20>
 1009a14:	9082000c 	andi	r2,r18,2048
 1009a18:	103ff126 	beq	r2,zero,10099e0 <__svfscanf_r+0x1154>
 1009a1c:	d8c0a117 	ldw	r3,644(sp)
 1009a20:	1800031e 	bne	r3,zero,1009a30 <__svfscanf_r+0x11a4>
 1009a24:	01000204 	movi	r4,8
 1009a28:	94808014 	ori	r18,r18,512
 1009a2c:	d900a115 	stw	r4,644(sp)
 1009a30:	9081000c 	andi	r2,r18,1024
 1009a34:	10000826 	beq	r2,zero,1009a58 <__svfscanf_r+0x11cc>
 1009a38:	00be9fc4 	movi	r2,-1409
 1009a3c:	90a4703a 	and	r18,r18,r2
 1009a40:	003fe706 	br	10099e0 <__svfscanf_r+0x1154>
 1009a44:	b009883a 	mov	r4,r22
 1009a48:	800b883a 	mov	r5,r16
 1009a4c:	100e7780 	call	100e778 <__srefill_r>
 1009a50:	103feb26 	beq	r2,zero,1009a00 <__svfscanf_r+0x1174>
 1009a54:	003f5506 	br	10097ac <__svfscanf_r+0xf20>
 1009a58:	a8000426 	beq	r21,zero,1009a6c <__svfscanf_r+0x11e0>
 1009a5c:	d880a317 	ldw	r2,652(sp)
 1009a60:	ad7fffc4 	addi	r21,r21,-1
 1009a64:	10800044 	addi	r2,r2,1
 1009a68:	d880a315 	stw	r2,652(sp)
 1009a6c:	00bf1fc4 	movi	r2,-897
 1009a70:	90a4703a 	and	r18,r18,r2
 1009a74:	bdc00044 	addi	r23,r23,1
 1009a78:	003fdb06 	br	10099e8 <__svfscanf_r+0x115c>
 1009a7c:	9080004c 	andi	r2,r18,1
 1009a80:	1005003a 	cmpeq	r2,r2,zero
 1009a84:	10001426 	beq	r2,zero,1009ad8 <__svfscanf_r+0x124c>
 1009a88:	9080008c 	andi	r2,r18,2
 1009a8c:	10001226 	beq	r2,zero,1009ad8 <__svfscanf_r+0x124c>
 1009a90:	d8c0a017 	ldw	r3,640(sp)
 1009a94:	00804074 	movhi	r2,257
 1009a98:	10822104 	addi	r2,r2,2180
 1009a9c:	18801426 	beq	r3,r2,1009af0 <__svfscanf_r+0x1264>
 1009aa0:	d9c0a117 	ldw	r7,644(sp)
 1009aa4:	d940a617 	ldw	r5,664(sp)
 1009aa8:	000d883a 	mov	r6,zero
 1009aac:	b009883a 	mov	r4,r22
 1009ab0:	101056c0 	call	101056c <_strtoll_r>
 1009ab4:	100d883a 	mov	r6,r2
 1009ab8:	180f883a 	mov	r7,r3
 1009abc:	d900a417 	ldw	r4,656(sp)
 1009ac0:	20800017 	ldw	r2,0(r4)
 1009ac4:	21000104 	addi	r4,r4,4
 1009ac8:	d900a415 	stw	r4,656(sp)
 1009acc:	11c00115 	stw	r7,4(r2)
 1009ad0:	11800015 	stw	r6,0(r2)
 1009ad4:	003fba06 	br	10099c0 <__svfscanf_r+0x1134>
 1009ad8:	d900a417 	ldw	r4,656(sp)
 1009adc:	20800017 	ldw	r2,0(r4)
 1009ae0:	21000104 	addi	r4,r4,4
 1009ae4:	d900a415 	stw	r4,656(sp)
 1009ae8:	10c00015 	stw	r3,0(r2)
 1009aec:	003fb406 	br	10099c0 <__svfscanf_r+0x1134>
 1009af0:	d9c0a117 	ldw	r7,644(sp)
 1009af4:	d940a617 	ldw	r5,664(sp)
 1009af8:	000d883a 	mov	r6,zero
 1009afc:	b009883a 	mov	r4,r22
 1009b00:	1010ad80 	call	1010ad8 <_strtoull_r>
 1009b04:	100d883a 	mov	r6,r2
 1009b08:	180f883a 	mov	r7,r3
 1009b0c:	003feb06 	br	1009abc <__svfscanf_r+0x1230>
 1009b10:	d8c0a117 	ldw	r3,644(sp)
 1009b14:	18c5883a 	add	r2,r3,r3
 1009b18:	00c040b4 	movhi	r3,258
 1009b1c:	18fd0c84 	addi	r3,r3,-3022
 1009b20:	10c5883a 	add	r2,r2,r3
 1009b24:	1080000f 	ldh	r2,0(r2)
 1009b28:	00fd1fc4 	movi	r3,-2945
 1009b2c:	90e4703a 	and	r18,r18,r3
 1009b30:	d880a115 	stw	r2,644(sp)
 1009b34:	003faa06 	br	10099e0 <__svfscanf_r+0x1154>
 1009b38:	d900a117 	ldw	r4,644(sp)
 1009b3c:	00c040b4 	movhi	r3,258
 1009b40:	18fd0c84 	addi	r3,r3,-3022
 1009b44:	2105883a 	add	r2,r4,r4
 1009b48:	10c5883a 	add	r2,r2,r3
 1009b4c:	1080000f 	ldh	r2,0(r2)
 1009b50:	00c00204 	movi	r3,8
 1009b54:	d880a115 	stw	r2,644(sp)
 1009b58:	18bf140e 	bge	r3,r2,10097ac <__svfscanf_r+0xf20>
 1009b5c:	00bd1fc4 	movi	r2,-2945
 1009b60:	90a4703a 	and	r18,r18,r2
 1009b64:	003f9e06 	br	10099e0 <__svfscanf_r+0x1154>
 1009b68:	d8c0a117 	ldw	r3,644(sp)
 1009b6c:	00800284 	movi	r2,10
 1009b70:	10fffa16 	blt	r2,r3,1009b5c <__svfscanf_r+0x12d0>
 1009b74:	003f0d06 	br	10097ac <__svfscanf_r+0xf20>
 1009b78:	90c1800c 	andi	r3,r18,1536
 1009b7c:	00808004 	movi	r2,512
 1009b80:	18bf0a1e 	bne	r3,r2,10097ac <__svfscanf_r+0xf20>
 1009b84:	00bf7fc4 	movi	r2,-513
 1009b88:	9084703a 	and	r2,r18,r2
 1009b8c:	01000404 	movi	r4,16
 1009b90:	14814014 	ori	r18,r2,1280
 1009b94:	d900a115 	stw	r4,644(sp)
 1009b98:	003f9106 	br	10099e0 <__svfscanf_r+0x1154>
 1009b9c:	d880a417 	ldw	r2,656(sp)
 1009ba0:	dd400404 	addi	r21,sp,16
 1009ba4:	14800017 	ldw	r18,0(r2)
 1009ba8:	9027883a 	mov	r19,r18
 1009bac:	81000017 	ldw	r4,0(r16)
 1009bb0:	20800003 	ldbu	r2,0(r4)
 1009bb4:	a885883a 	add	r2,r21,r2
 1009bb8:	10c00007 	ldb	r3,0(r2)
 1009bbc:	18001426 	beq	r3,zero,1009c10 <__svfscanf_r+0x1384>
 1009bc0:	d8c0a317 	ldw	r3,652(sp)
 1009bc4:	80800117 	ldw	r2,4(r16)
 1009bc8:	21800044 	addi	r6,r4,1
 1009bcc:	18ffffc4 	addi	r3,r3,-1
 1009bd0:	d8c0a315 	stw	r3,652(sp)
 1009bd4:	10ffffc4 	addi	r3,r2,-1
 1009bd8:	80c00115 	stw	r3,4(r16)
 1009bdc:	20800003 	ldbu	r2,0(r4)
 1009be0:	90800005 	stb	r2,0(r18)
 1009be4:	d900a317 	ldw	r4,652(sp)
 1009be8:	81800015 	stw	r6,0(r16)
 1009bec:	94800044 	addi	r18,r18,1
 1009bf0:	20000726 	beq	r4,zero,1009c10 <__svfscanf_r+0x1384>
 1009bf4:	80800117 	ldw	r2,4(r16)
 1009bf8:	00bfec16 	blt	zero,r2,1009bac <__svfscanf_r+0x1320>
 1009bfc:	b009883a 	mov	r4,r22
 1009c00:	800b883a 	mov	r5,r16
 1009c04:	100e7780 	call	100e778 <__srefill_r>
 1009c08:	103fe826 	beq	r2,zero,1009bac <__svfscanf_r+0x1320>
 1009c0c:	9cbb7426 	beq	r19,r18,10089e0 <__svfscanf_r+0x154>
 1009c10:	94e7c83a 	sub	r19,r18,r19
 1009c14:	983b5226 	beq	r19,zero,1008960 <__svfscanf_r+0xd4>
 1009c18:	90000005 	stb	zero,0(r18)
 1009c1c:	d880a417 	ldw	r2,656(sp)
 1009c20:	d8c0a217 	ldw	r3,648(sp)
 1009c24:	8ce3883a 	add	r17,r17,r19
 1009c28:	10800104 	addi	r2,r2,4
 1009c2c:	18c00044 	addi	r3,r3,1
 1009c30:	d880a415 	stw	r2,656(sp)
 1009c34:	d8c0a215 	stw	r3,648(sp)
 1009c38:	003b2706 	br	10088d8 <__svfscanf_r+0x4c>
 1009c3c:	9cc00414 	ori	r19,r19,16
 1009c40:	003b6e06 	br	10089fc <__svfscanf_r+0x170>
 1009c44:	00c00404 	movi	r3,16
 1009c48:	01004074 	movhi	r4,257
 1009c4c:	21022104 	addi	r4,r4,2180
 1009c50:	9cc08014 	ori	r19,r19,512
 1009c54:	054000c4 	movi	r21,3
 1009c58:	d8c0a115 	stw	r3,644(sp)
 1009c5c:	d900a015 	stw	r4,640(sp)
 1009c60:	003bf806 	br	1008c44 <__svfscanf_r+0x3b8>
 1009c64:	9880040c 	andi	r2,r19,16
 1009c68:	10001926 	beq	r2,zero,1009cd0 <__svfscanf_r+0x1444>
 1009c6c:	0027883a 	mov	r19,zero
 1009c70:	00000b06 	br	1009ca0 <__svfscanf_r+0x1414>
 1009c74:	80800017 	ldw	r2,0(r16)
 1009c78:	b009883a 	mov	r4,r22
 1009c7c:	800b883a 	mov	r5,r16
 1009c80:	148d883a 	add	r6,r2,r18
 1009c84:	81800015 	stw	r6,0(r16)
 1009c88:	9ca7883a 	add	r19,r19,r18
 1009c8c:	100e7780 	call	100e778 <__srefill_r>
 1009c90:	103c711e 	bne	r2,zero,1008e58 <__svfscanf_r+0x5cc>
 1009c94:	d900a317 	ldw	r4,652(sp)
 1009c98:	2489c83a 	sub	r4,r4,r18
 1009c9c:	d900a315 	stw	r4,652(sp)
 1009ca0:	84800117 	ldw	r18,4(r16)
 1009ca4:	d8c0a317 	ldw	r3,652(sp)
 1009ca8:	90fff216 	blt	r18,r3,1009c74 <__svfscanf_r+0x13e8>
 1009cac:	d900a317 	ldw	r4,652(sp)
 1009cb0:	80800017 	ldw	r2,0(r16)
 1009cb4:	9927883a 	add	r19,r19,r4
 1009cb8:	9107c83a 	sub	r3,r18,r4
 1009cbc:	110d883a 	add	r6,r2,r4
 1009cc0:	8ce3883a 	add	r17,r17,r19
 1009cc4:	80c00115 	stw	r3,4(r16)
 1009cc8:	81800015 	stw	r6,0(r16)
 1009ccc:	003b0206 	br	10088d8 <__svfscanf_r+0x4c>
 1009cd0:	d880a417 	ldw	r2,656(sp)
 1009cd4:	d980a317 	ldw	r6,652(sp)
 1009cd8:	01400044 	movi	r5,1
 1009cdc:	11000017 	ldw	r4,0(r2)
 1009ce0:	800f883a 	mov	r7,r16
 1009ce4:	100c0000 	call	100c000 <fread>
 1009ce8:	103b3d26 	beq	r2,zero,10089e0 <__svfscanf_r+0x154>
 1009cec:	d8c0a417 	ldw	r3,656(sp)
 1009cf0:	d900a217 	ldw	r4,648(sp)
 1009cf4:	88a3883a 	add	r17,r17,r2
 1009cf8:	18c00104 	addi	r3,r3,4
 1009cfc:	21000044 	addi	r4,r4,1
 1009d00:	d8c0a415 	stw	r3,656(sp)
 1009d04:	d900a215 	stw	r4,648(sp)
 1009d08:	003af306 	br	10088d8 <__svfscanf_r+0x4c>
 1009d0c:	8080030b 	ldhu	r2,12(r16)
 1009d10:	1080100c 	andi	r2,r2,64
 1009d14:	103b1226 	beq	r2,zero,1008960 <__svfscanf_r+0xd4>
 1009d18:	003b3306 	br	10089e8 <__svfscanf_r+0x15c>
 1009d1c:	983b1026 	beq	r19,zero,1008960 <__svfscanf_r+0xd4>
 1009d20:	8ce3883a 	add	r17,r17,r19
 1009d24:	003aec06 	br	10088d8 <__svfscanf_r+0x4c>
 1009d28:	983c9626 	beq	r19,zero,1008f84 <__svfscanf_r+0x6f8>
 1009d2c:	9cffffc4 	addi	r19,r19,-1
 1009d30:	d8c04404 	addi	r3,sp,272
 1009d34:	1cc5883a 	add	r2,r3,r19
 1009d38:	11400003 	ldbu	r5,0(r2)
 1009d3c:	b009883a 	mov	r4,r22
 1009d40:	800d883a 	mov	r6,r16
 1009d44:	1010ea40 	call	1010ea4 <_ungetc_r>
 1009d48:	003ff706 	br	1009d28 <__svfscanf_r+0x149c>
 1009d4c:	00bfff84 	movi	r2,-2
 1009d50:	18bc7a1e 	bne	r3,r2,1008f3c <__svfscanf_r+0x6b0>
 1009d54:	003c8406 	br	1008f68 <__svfscanf_r+0x6dc>
 1009d58:	d900a417 	ldw	r4,656(sp)
 1009d5c:	25400017 	ldw	r21,0(r4)
 1009d60:	21000104 	addi	r4,r4,4
 1009d64:	d900a415 	stw	r4,656(sp)
 1009d68:	003c4a06 	br	1008e94 <__svfscanf_r+0x608>
 1009d6c:	00bfff84 	movi	r2,-2
 1009d70:	18bc0f1e 	bne	r3,r2,1008db0 <__svfscanf_r+0x524>
 1009d74:	003c1506 	br	1008dcc <__svfscanf_r+0x540>
 1009d78:	b009883a 	mov	r4,r22
 1009d7c:	800b883a 	mov	r5,r16
 1009d80:	100e7780 	call	100e778 <__srefill_r>
 1009d84:	103c1326 	beq	r2,zero,1008dd4 <__svfscanf_r+0x548>
 1009d88:	903b151e 	bne	r18,zero,10089e0 <__svfscanf_r+0x154>
 1009d8c:	a83ad21e 	bne	r21,zero,10088d8 <__svfscanf_r+0x4c>
 1009d90:	d880a217 	ldw	r2,648(sp)
 1009d94:	10800044 	addi	r2,r2,1
 1009d98:	d880a215 	stw	r2,648(sp)
 1009d9c:	003ace06 	br	10088d8 <__svfscanf_r+0x4c>
 1009da0:	0027883a 	mov	r19,zero
 1009da4:	003bdd06 	br	1008d1c <__svfscanf_r+0x490>
 1009da8:	9cc00114 	ori	r19,r19,4
 1009dac:	003b1306 	br	10089fc <__svfscanf_r+0x170>
 1009db0:	05400104 	movi	r21,4
 1009db4:	003ba306 	br	1008c44 <__svfscanf_r+0x3b8>
 1009db8:	9cc00054 	ori	r19,r19,1
 1009dbc:	00804074 	movhi	r2,257
 1009dc0:	1080c104 	addi	r2,r2,772
 1009dc4:	00c00284 	movi	r3,10
 1009dc8:	054000c4 	movi	r21,3
 1009dcc:	d880a015 	stw	r2,640(sp)
 1009dd0:	d8c0a115 	stw	r3,644(sp)
 1009dd4:	003b9b06 	br	1008c44 <__svfscanf_r+0x3b8>
 1009dd8:	9cc01014 	ori	r19,r19,64
 1009ddc:	002b883a 	mov	r21,zero
 1009de0:	003b9806 	br	1008c44 <__svfscanf_r+0x3b8>
 1009de4:	a00b883a 	mov	r5,r20
 1009de8:	d9000404 	addi	r4,sp,16
 1009dec:	100e9c80 	call	100e9c8 <__sccl>
 1009df0:	1029883a 	mov	r20,r2
 1009df4:	9cc01014 	ori	r19,r19,64
 1009df8:	05400044 	movi	r21,1
 1009dfc:	003b9106 	br	1008c44 <__svfscanf_r+0x3b8>
 1009e00:	9cc00054 	ori	r19,r19,1
 1009e04:	00800204 	movi	r2,8
 1009e08:	00c04074 	movhi	r3,257
 1009e0c:	18c22104 	addi	r3,r3,2180
 1009e10:	054000c4 	movi	r21,3
 1009e14:	d880a115 	stw	r2,644(sp)
 1009e18:	d8c0a015 	stw	r3,640(sp)
 1009e1c:	003b8906 	br	1008c44 <__svfscanf_r+0x3b8>
 1009e20:	9880040c 	andi	r2,r19,16
 1009e24:	103aac1e 	bne	r2,zero,10088d8 <__svfscanf_r+0x4c>
 1009e28:	9880010c 	andi	r2,r19,4
 1009e2c:	10002426 	beq	r2,zero,1009ec0 <__svfscanf_r+0x1634>
 1009e30:	d900a417 	ldw	r4,656(sp)
 1009e34:	20800017 	ldw	r2,0(r4)
 1009e38:	21000104 	addi	r4,r4,4
 1009e3c:	d900a415 	stw	r4,656(sp)
 1009e40:	1440000d 	sth	r17,0(r2)
 1009e44:	003aa406 	br	10088d8 <__svfscanf_r+0x4c>
 1009e48:	9cc00094 	ori	r19,r19,2
 1009e4c:	003aeb06 	br	10089fc <__svfscanf_r+0x170>
 1009e50:	05400084 	movi	r21,2
 1009e54:	003b7b06 	br	1008c44 <__svfscanf_r+0x3b8>
 1009e58:	00800404 	movi	r2,16
 1009e5c:	00c04074 	movhi	r3,257
 1009e60:	18c22104 	addi	r3,r3,2180
 1009e64:	9cc08814 	ori	r19,r19,544
 1009e68:	054000c4 	movi	r21,3
 1009e6c:	d880a115 	stw	r2,644(sp)
 1009e70:	d8c0a015 	stw	r3,640(sp)
 1009e74:	003b7306 	br	1008c44 <__svfscanf_r+0x3b8>
 1009e78:	0009883a 	mov	r4,zero
 1009e7c:	100ea880 	call	100ea88 <nanf>
 1009e80:	b8800015 	stw	r2,0(r23)
 1009e84:	003d2706 	br	1009324 <__svfscanf_r+0xa98>
 1009e88:	a0c00007 	ldb	r3,0(r20)
 1009e8c:	00801b04 	movi	r2,108
 1009e90:	18800826 	beq	r3,r2,1009eb4 <__svfscanf_r+0x1628>
 1009e94:	9cc00054 	ori	r19,r19,1
 1009e98:	003ad806 	br	10089fc <__svfscanf_r+0x170>
 1009e9c:	01004074 	movhi	r4,257
 1009ea0:	2100c104 	addi	r4,r4,772
 1009ea4:	054000c4 	movi	r21,3
 1009ea8:	d900a015 	stw	r4,640(sp)
 1009eac:	d800a115 	stw	zero,644(sp)
 1009eb0:	003b6406 	br	1008c44 <__svfscanf_r+0x3b8>
 1009eb4:	a5000044 	addi	r20,r20,1
 1009eb8:	9cc00094 	ori	r19,r19,2
 1009ebc:	003acf06 	br	10089fc <__svfscanf_r+0x170>
 1009ec0:	9880004c 	andi	r2,r19,1
 1009ec4:	1005003a 	cmpeq	r2,r2,zero
 1009ec8:	10000a26 	beq	r2,zero,1009ef4 <__svfscanf_r+0x1668>
 1009ecc:	9880008c 	andi	r2,r19,2
 1009ed0:	10000826 	beq	r2,zero,1009ef4 <__svfscanf_r+0x1668>
 1009ed4:	d900a417 	ldw	r4,656(sp)
 1009ed8:	8807d7fa 	srai	r3,r17,31
 1009edc:	20800017 	ldw	r2,0(r4)
 1009ee0:	21000104 	addi	r4,r4,4
 1009ee4:	d900a415 	stw	r4,656(sp)
 1009ee8:	14400015 	stw	r17,0(r2)
 1009eec:	10c00115 	stw	r3,4(r2)
 1009ef0:	003a7906 	br	10088d8 <__svfscanf_r+0x4c>
 1009ef4:	d8c0a417 	ldw	r3,656(sp)
 1009ef8:	18800017 	ldw	r2,0(r3)
 1009efc:	18c00104 	addi	r3,r3,4
 1009f00:	d8c0a415 	stw	r3,656(sp)
 1009f04:	14400015 	stw	r17,0(r2)
 1009f08:	003a7306 	br	10088d8 <__svfscanf_r+0x4c>

01009f0c <__svfscanf>:
 1009f0c:	008040b4 	movhi	r2,258
 1009f10:	1086c504 	addi	r2,r2,6932
 1009f14:	2013883a 	mov	r9,r4
 1009f18:	11000017 	ldw	r4,0(r2)
 1009f1c:	2805883a 	mov	r2,r5
 1009f20:	300f883a 	mov	r7,r6
 1009f24:	480b883a 	mov	r5,r9
 1009f28:	100d883a 	mov	r6,r2
 1009f2c:	100888c1 	jmpi	100888c <__svfscanf_r>

01009f30 <_vfscanf_r>:
 1009f30:	defffb04 	addi	sp,sp,-20
 1009f34:	dcc00315 	stw	r19,12(sp)
 1009f38:	dc800215 	stw	r18,8(sp)
 1009f3c:	dc400115 	stw	r17,4(sp)
 1009f40:	dc000015 	stw	r16,0(sp)
 1009f44:	dfc00415 	stw	ra,16(sp)
 1009f48:	2021883a 	mov	r16,r4
 1009f4c:	2823883a 	mov	r17,r5
 1009f50:	3025883a 	mov	r18,r6
 1009f54:	3827883a 	mov	r19,r7
 1009f58:	20000226 	beq	r4,zero,1009f64 <_vfscanf_r+0x34>
 1009f5c:	20800e17 	ldw	r2,56(r4)
 1009f60:	10000b26 	beq	r2,zero,1009f90 <_vfscanf_r+0x60>
 1009f64:	8009883a 	mov	r4,r16
 1009f68:	880b883a 	mov	r5,r17
 1009f6c:	900d883a 	mov	r6,r18
 1009f70:	980f883a 	mov	r7,r19
 1009f74:	dfc00417 	ldw	ra,16(sp)
 1009f78:	dcc00317 	ldw	r19,12(sp)
 1009f7c:	dc800217 	ldw	r18,8(sp)
 1009f80:	dc400117 	ldw	r17,4(sp)
 1009f84:	dc000017 	ldw	r16,0(sp)
 1009f88:	dec00504 	addi	sp,sp,20
 1009f8c:	100888c1 	jmpi	100888c <__svfscanf_r>
 1009f90:	100bbac0 	call	100bbac <__sinit>
 1009f94:	003ff306 	br	1009f64 <_vfscanf_r+0x34>

01009f98 <vfscanf>:
 1009f98:	defffb04 	addi	sp,sp,-20
 1009f9c:	dcc00315 	stw	r19,12(sp)
 1009fa0:	04c040b4 	movhi	r19,258
 1009fa4:	9cc6c504 	addi	r19,r19,6932
 1009fa8:	98c00017 	ldw	r3,0(r19)
 1009fac:	dc800215 	stw	r18,8(sp)
 1009fb0:	dc400115 	stw	r17,4(sp)
 1009fb4:	dc000015 	stw	r16,0(sp)
 1009fb8:	dfc00415 	stw	ra,16(sp)
 1009fbc:	2021883a 	mov	r16,r4
 1009fc0:	2823883a 	mov	r17,r5
 1009fc4:	3025883a 	mov	r18,r6
 1009fc8:	18000326 	beq	r3,zero,1009fd8 <vfscanf+0x40>
 1009fcc:	18800e17 	ldw	r2,56(r3)
 1009fd0:	1809883a 	mov	r4,r3
 1009fd4:	10000b26 	beq	r2,zero,100a004 <vfscanf+0x6c>
 1009fd8:	99000017 	ldw	r4,0(r19)
 1009fdc:	800b883a 	mov	r5,r16
 1009fe0:	880d883a 	mov	r6,r17
 1009fe4:	900f883a 	mov	r7,r18
 1009fe8:	dfc00417 	ldw	ra,16(sp)
 1009fec:	dcc00317 	ldw	r19,12(sp)
 1009ff0:	dc800217 	ldw	r18,8(sp)
 1009ff4:	dc400117 	ldw	r17,4(sp)
 1009ff8:	dc000017 	ldw	r16,0(sp)
 1009ffc:	dec00504 	addi	sp,sp,20
 100a000:	100888c1 	jmpi	100888c <__svfscanf_r>
 100a004:	100bbac0 	call	100bbac <__sinit>
 100a008:	003ff306 	br	1009fd8 <vfscanf+0x40>

0100a00c <__swsetup_r>:
 100a00c:	008040b4 	movhi	r2,258
 100a010:	1086c504 	addi	r2,r2,6932
 100a014:	10c00017 	ldw	r3,0(r2)
 100a018:	defffd04 	addi	sp,sp,-12
 100a01c:	dc400115 	stw	r17,4(sp)
 100a020:	dc000015 	stw	r16,0(sp)
 100a024:	dfc00215 	stw	ra,8(sp)
 100a028:	2023883a 	mov	r17,r4
 100a02c:	2821883a 	mov	r16,r5
 100a030:	18000226 	beq	r3,zero,100a03c <__swsetup_r+0x30>
 100a034:	18800e17 	ldw	r2,56(r3)
 100a038:	10001f26 	beq	r2,zero,100a0b8 <__swsetup_r+0xac>
 100a03c:	8100030b 	ldhu	r4,12(r16)
 100a040:	2080020c 	andi	r2,r4,8
 100a044:	10002826 	beq	r2,zero,100a0e8 <__swsetup_r+0xdc>
 100a048:	81400417 	ldw	r5,16(r16)
 100a04c:	28001d26 	beq	r5,zero,100a0c4 <__swsetup_r+0xb8>
 100a050:	2080004c 	andi	r2,r4,1
 100a054:	1005003a 	cmpeq	r2,r2,zero
 100a058:	10000b26 	beq	r2,zero,100a088 <__swsetup_r+0x7c>
 100a05c:	2080008c 	andi	r2,r4,2
 100a060:	10001226 	beq	r2,zero,100a0ac <__swsetup_r+0xa0>
 100a064:	0005883a 	mov	r2,zero
 100a068:	80800215 	stw	r2,8(r16)
 100a06c:	28000b26 	beq	r5,zero,100a09c <__swsetup_r+0x90>
 100a070:	0005883a 	mov	r2,zero
 100a074:	dfc00217 	ldw	ra,8(sp)
 100a078:	dc400117 	ldw	r17,4(sp)
 100a07c:	dc000017 	ldw	r16,0(sp)
 100a080:	dec00304 	addi	sp,sp,12
 100a084:	f800283a 	ret
 100a088:	80800517 	ldw	r2,20(r16)
 100a08c:	80000215 	stw	zero,8(r16)
 100a090:	0085c83a 	sub	r2,zero,r2
 100a094:	80800615 	stw	r2,24(r16)
 100a098:	283ff51e 	bne	r5,zero,100a070 <__swsetup_r+0x64>
 100a09c:	2080200c 	andi	r2,r4,128
 100a0a0:	103ff326 	beq	r2,zero,100a070 <__swsetup_r+0x64>
 100a0a4:	00bfffc4 	movi	r2,-1
 100a0a8:	003ff206 	br	100a074 <__swsetup_r+0x68>
 100a0ac:	80800517 	ldw	r2,20(r16)
 100a0b0:	80800215 	stw	r2,8(r16)
 100a0b4:	003fed06 	br	100a06c <__swsetup_r+0x60>
 100a0b8:	1809883a 	mov	r4,r3
 100a0bc:	100bbac0 	call	100bbac <__sinit>
 100a0c0:	003fde06 	br	100a03c <__swsetup_r+0x30>
 100a0c4:	20c0a00c 	andi	r3,r4,640
 100a0c8:	00808004 	movi	r2,512
 100a0cc:	18bfe026 	beq	r3,r2,100a050 <__swsetup_r+0x44>
 100a0d0:	8809883a 	mov	r4,r17
 100a0d4:	800b883a 	mov	r5,r16
 100a0d8:	100cc000 	call	100cc00 <__smakebuf_r>
 100a0dc:	8100030b 	ldhu	r4,12(r16)
 100a0e0:	81400417 	ldw	r5,16(r16)
 100a0e4:	003fda06 	br	100a050 <__swsetup_r+0x44>
 100a0e8:	2080040c 	andi	r2,r4,16
 100a0ec:	103fed26 	beq	r2,zero,100a0a4 <__swsetup_r+0x98>
 100a0f0:	2080010c 	andi	r2,r4,4
 100a0f4:	10001226 	beq	r2,zero,100a140 <__swsetup_r+0x134>
 100a0f8:	81400c17 	ldw	r5,48(r16)
 100a0fc:	28000526 	beq	r5,zero,100a114 <__swsetup_r+0x108>
 100a100:	80801004 	addi	r2,r16,64
 100a104:	28800226 	beq	r5,r2,100a110 <__swsetup_r+0x104>
 100a108:	8809883a 	mov	r4,r17
 100a10c:	100c16c0 	call	100c16c <_free_r>
 100a110:	80000c15 	stw	zero,48(r16)
 100a114:	8080030b 	ldhu	r2,12(r16)
 100a118:	81400417 	ldw	r5,16(r16)
 100a11c:	80000115 	stw	zero,4(r16)
 100a120:	10bff6cc 	andi	r2,r2,65499
 100a124:	8080030d 	sth	r2,12(r16)
 100a128:	81400015 	stw	r5,0(r16)
 100a12c:	8080030b 	ldhu	r2,12(r16)
 100a130:	10800214 	ori	r2,r2,8
 100a134:	113fffcc 	andi	r4,r2,65535
 100a138:	8080030d 	sth	r2,12(r16)
 100a13c:	003fc306 	br	100a04c <__swsetup_r+0x40>
 100a140:	81400417 	ldw	r5,16(r16)
 100a144:	003ff906 	br	100a12c <__swsetup_r+0x120>

0100a148 <quorem>:
 100a148:	28c00417 	ldw	r3,16(r5)
 100a14c:	20800417 	ldw	r2,16(r4)
 100a150:	defff604 	addi	sp,sp,-40
 100a154:	ddc00715 	stw	r23,28(sp)
 100a158:	dd400515 	stw	r21,20(sp)
 100a15c:	dfc00915 	stw	ra,36(sp)
 100a160:	df000815 	stw	fp,32(sp)
 100a164:	dd800615 	stw	r22,24(sp)
 100a168:	dd000415 	stw	r20,16(sp)
 100a16c:	dcc00315 	stw	r19,12(sp)
 100a170:	dc800215 	stw	r18,8(sp)
 100a174:	dc400115 	stw	r17,4(sp)
 100a178:	dc000015 	stw	r16,0(sp)
 100a17c:	202f883a 	mov	r23,r4
 100a180:	282b883a 	mov	r21,r5
 100a184:	10c07416 	blt	r2,r3,100a358 <quorem+0x210>
 100a188:	1c7fffc4 	addi	r17,r3,-1
 100a18c:	8c45883a 	add	r2,r17,r17
 100a190:	1085883a 	add	r2,r2,r2
 100a194:	2c000504 	addi	r16,r5,20
 100a198:	24c00504 	addi	r19,r4,20
 100a19c:	14ed883a 	add	r22,r2,r19
 100a1a0:	80a5883a 	add	r18,r16,r2
 100a1a4:	b7000017 	ldw	fp,0(r22)
 100a1a8:	91400017 	ldw	r5,0(r18)
 100a1ac:	e009883a 	mov	r4,fp
 100a1b0:	29400044 	addi	r5,r5,1
 100a1b4:	10057700 	call	1005770 <__udivsi3>
 100a1b8:	1029883a 	mov	r20,r2
 100a1bc:	10003c1e 	bne	r2,zero,100a2b0 <quorem+0x168>
 100a1c0:	a80b883a 	mov	r5,r21
 100a1c4:	b809883a 	mov	r4,r23
 100a1c8:	100d2ec0 	call	100d2ec <__mcmp>
 100a1cc:	10002b16 	blt	r2,zero,100a27c <quorem+0x134>
 100a1d0:	a5000044 	addi	r20,r20,1
 100a1d4:	980f883a 	mov	r7,r19
 100a1d8:	0011883a 	mov	r8,zero
 100a1dc:	0009883a 	mov	r4,zero
 100a1e0:	81400017 	ldw	r5,0(r16)
 100a1e4:	38c00017 	ldw	r3,0(r7)
 100a1e8:	84000104 	addi	r16,r16,4
 100a1ec:	28bfffcc 	andi	r2,r5,65535
 100a1f0:	2085883a 	add	r2,r4,r2
 100a1f4:	11bfffcc 	andi	r6,r2,65535
 100a1f8:	193fffcc 	andi	r4,r3,65535
 100a1fc:	1004d43a 	srli	r2,r2,16
 100a200:	280ad43a 	srli	r5,r5,16
 100a204:	2189c83a 	sub	r4,r4,r6
 100a208:	2209883a 	add	r4,r4,r8
 100a20c:	1806d43a 	srli	r3,r3,16
 100a210:	288b883a 	add	r5,r5,r2
 100a214:	200dd43a 	srai	r6,r4,16
 100a218:	28bfffcc 	andi	r2,r5,65535
 100a21c:	1887c83a 	sub	r3,r3,r2
 100a220:	1987883a 	add	r3,r3,r6
 100a224:	3900000d 	sth	r4,0(r7)
 100a228:	38c0008d 	sth	r3,2(r7)
 100a22c:	2808d43a 	srli	r4,r5,16
 100a230:	39c00104 	addi	r7,r7,4
 100a234:	1811d43a 	srai	r8,r3,16
 100a238:	943fe92e 	bgeu	r18,r16,100a1e0 <quorem+0x98>
 100a23c:	8c45883a 	add	r2,r17,r17
 100a240:	1085883a 	add	r2,r2,r2
 100a244:	9885883a 	add	r2,r19,r2
 100a248:	10c00017 	ldw	r3,0(r2)
 100a24c:	18000b1e 	bne	r3,zero,100a27c <quorem+0x134>
 100a250:	113fff04 	addi	r4,r2,-4
 100a254:	9900082e 	bgeu	r19,r4,100a278 <quorem+0x130>
 100a258:	10bfff17 	ldw	r2,-4(r2)
 100a25c:	10000326 	beq	r2,zero,100a26c <quorem+0x124>
 100a260:	00000506 	br	100a278 <quorem+0x130>
 100a264:	20800017 	ldw	r2,0(r4)
 100a268:	1000031e 	bne	r2,zero,100a278 <quorem+0x130>
 100a26c:	213fff04 	addi	r4,r4,-4
 100a270:	8c7fffc4 	addi	r17,r17,-1
 100a274:	993ffb36 	bltu	r19,r4,100a264 <quorem+0x11c>
 100a278:	bc400415 	stw	r17,16(r23)
 100a27c:	a005883a 	mov	r2,r20
 100a280:	dfc00917 	ldw	ra,36(sp)
 100a284:	df000817 	ldw	fp,32(sp)
 100a288:	ddc00717 	ldw	r23,28(sp)
 100a28c:	dd800617 	ldw	r22,24(sp)
 100a290:	dd400517 	ldw	r21,20(sp)
 100a294:	dd000417 	ldw	r20,16(sp)
 100a298:	dcc00317 	ldw	r19,12(sp)
 100a29c:	dc800217 	ldw	r18,8(sp)
 100a2a0:	dc400117 	ldw	r17,4(sp)
 100a2a4:	dc000017 	ldw	r16,0(sp)
 100a2a8:	dec00a04 	addi	sp,sp,40
 100a2ac:	f800283a 	ret
 100a2b0:	980f883a 	mov	r7,r19
 100a2b4:	8011883a 	mov	r8,r16
 100a2b8:	0013883a 	mov	r9,zero
 100a2bc:	000d883a 	mov	r6,zero
 100a2c0:	40c00017 	ldw	r3,0(r8)
 100a2c4:	39000017 	ldw	r4,0(r7)
 100a2c8:	42000104 	addi	r8,r8,4
 100a2cc:	18bfffcc 	andi	r2,r3,65535
 100a2d0:	a085383a 	mul	r2,r20,r2
 100a2d4:	1806d43a 	srli	r3,r3,16
 100a2d8:	217fffcc 	andi	r5,r4,65535
 100a2dc:	3085883a 	add	r2,r6,r2
 100a2e0:	11bfffcc 	andi	r6,r2,65535
 100a2e4:	a0c7383a 	mul	r3,r20,r3
 100a2e8:	1004d43a 	srli	r2,r2,16
 100a2ec:	298bc83a 	sub	r5,r5,r6
 100a2f0:	2a4b883a 	add	r5,r5,r9
 100a2f4:	2008d43a 	srli	r4,r4,16
 100a2f8:	1887883a 	add	r3,r3,r2
 100a2fc:	280dd43a 	srai	r6,r5,16
 100a300:	18bfffcc 	andi	r2,r3,65535
 100a304:	2089c83a 	sub	r4,r4,r2
 100a308:	2189883a 	add	r4,r4,r6
 100a30c:	3900008d 	sth	r4,2(r7)
 100a310:	3940000d 	sth	r5,0(r7)
 100a314:	180cd43a 	srli	r6,r3,16
 100a318:	39c00104 	addi	r7,r7,4
 100a31c:	2013d43a 	srai	r9,r4,16
 100a320:	923fe72e 	bgeu	r18,r8,100a2c0 <quorem+0x178>
 100a324:	e03fa61e 	bne	fp,zero,100a1c0 <quorem+0x78>
 100a328:	b0ffff04 	addi	r3,r22,-4
 100a32c:	98c0082e 	bgeu	r19,r3,100a350 <quorem+0x208>
 100a330:	b0bfff17 	ldw	r2,-4(r22)
 100a334:	10000326 	beq	r2,zero,100a344 <quorem+0x1fc>
 100a338:	00000506 	br	100a350 <quorem+0x208>
 100a33c:	18800017 	ldw	r2,0(r3)
 100a340:	1000031e 	bne	r2,zero,100a350 <quorem+0x208>
 100a344:	18ffff04 	addi	r3,r3,-4
 100a348:	8c7fffc4 	addi	r17,r17,-1
 100a34c:	98fffb36 	bltu	r19,r3,100a33c <quorem+0x1f4>
 100a350:	bc400415 	stw	r17,16(r23)
 100a354:	003f9a06 	br	100a1c0 <quorem+0x78>
 100a358:	0005883a 	mov	r2,zero
 100a35c:	003fc806 	br	100a280 <quorem+0x138>

0100a360 <_dtoa_r>:
 100a360:	22001017 	ldw	r8,64(r4)
 100a364:	deffda04 	addi	sp,sp,-152
 100a368:	dd402115 	stw	r21,132(sp)
 100a36c:	dd002015 	stw	r20,128(sp)
 100a370:	dc801e15 	stw	r18,120(sp)
 100a374:	dc401d15 	stw	r17,116(sp)
 100a378:	dfc02515 	stw	ra,148(sp)
 100a37c:	df002415 	stw	fp,144(sp)
 100a380:	ddc02315 	stw	r23,140(sp)
 100a384:	dd802215 	stw	r22,136(sp)
 100a388:	dcc01f15 	stw	r19,124(sp)
 100a38c:	dc001c15 	stw	r16,112(sp)
 100a390:	d9001615 	stw	r4,88(sp)
 100a394:	3023883a 	mov	r17,r6
 100a398:	2829883a 	mov	r20,r5
 100a39c:	d9c01715 	stw	r7,92(sp)
 100a3a0:	dc802817 	ldw	r18,160(sp)
 100a3a4:	302b883a 	mov	r21,r6
 100a3a8:	40000a26 	beq	r8,zero,100a3d4 <_dtoa_r+0x74>
 100a3ac:	20801117 	ldw	r2,68(r4)
 100a3b0:	400b883a 	mov	r5,r8
 100a3b4:	40800115 	stw	r2,4(r8)
 100a3b8:	20c01117 	ldw	r3,68(r4)
 100a3bc:	00800044 	movi	r2,1
 100a3c0:	10c4983a 	sll	r2,r2,r3
 100a3c4:	40800215 	stw	r2,8(r8)
 100a3c8:	100d1900 	call	100d190 <_Bfree>
 100a3cc:	d8c01617 	ldw	r3,88(sp)
 100a3d0:	18001015 	stw	zero,64(r3)
 100a3d4:	8800a316 	blt	r17,zero,100a664 <_dtoa_r+0x304>
 100a3d8:	90000015 	stw	zero,0(r18)
 100a3dc:	a8dffc2c 	andhi	r3,r21,32752
 100a3e0:	009ffc34 	movhi	r2,32752
 100a3e4:	18809126 	beq	r3,r2,100a62c <_dtoa_r+0x2cc>
 100a3e8:	000d883a 	mov	r6,zero
 100a3ec:	000f883a 	mov	r7,zero
 100a3f0:	a009883a 	mov	r4,r20
 100a3f4:	a80b883a 	mov	r5,r21
 100a3f8:	dd001215 	stw	r20,72(sp)
 100a3fc:	dd401315 	stw	r21,76(sp)
 100a400:	10052cc0 	call	10052cc <__nedf2>
 100a404:	1000171e 	bne	r2,zero,100a464 <_dtoa_r+0x104>
 100a408:	d9802717 	ldw	r6,156(sp)
 100a40c:	00800044 	movi	r2,1
 100a410:	30800015 	stw	r2,0(r6)
 100a414:	d8802917 	ldw	r2,164(sp)
 100a418:	10029b26 	beq	r2,zero,100ae88 <_dtoa_r+0xb28>
 100a41c:	d9002917 	ldw	r4,164(sp)
 100a420:	008040b4 	movhi	r2,258
 100a424:	10bd0244 	addi	r2,r2,-3063
 100a428:	10ffffc4 	addi	r3,r2,-1
 100a42c:	20800015 	stw	r2,0(r4)
 100a430:	1805883a 	mov	r2,r3
 100a434:	dfc02517 	ldw	ra,148(sp)
 100a438:	df002417 	ldw	fp,144(sp)
 100a43c:	ddc02317 	ldw	r23,140(sp)
 100a440:	dd802217 	ldw	r22,136(sp)
 100a444:	dd402117 	ldw	r21,132(sp)
 100a448:	dd002017 	ldw	r20,128(sp)
 100a44c:	dcc01f17 	ldw	r19,124(sp)
 100a450:	dc801e17 	ldw	r18,120(sp)
 100a454:	dc401d17 	ldw	r17,116(sp)
 100a458:	dc001c17 	ldw	r16,112(sp)
 100a45c:	dec02604 	addi	sp,sp,152
 100a460:	f800283a 	ret
 100a464:	d9001617 	ldw	r4,88(sp)
 100a468:	d9401217 	ldw	r5,72(sp)
 100a46c:	d8800104 	addi	r2,sp,4
 100a470:	a80d883a 	mov	r6,r21
 100a474:	d9c00204 	addi	r7,sp,8
 100a478:	d8800015 	stw	r2,0(sp)
 100a47c:	100d7cc0 	call	100d7cc <__d2b>
 100a480:	d8800715 	stw	r2,28(sp)
 100a484:	a804d53a 	srli	r2,r21,20
 100a488:	1101ffcc 	andi	r4,r2,2047
 100a48c:	20008626 	beq	r4,zero,100a6a8 <_dtoa_r+0x348>
 100a490:	d8c01217 	ldw	r3,72(sp)
 100a494:	00800434 	movhi	r2,16
 100a498:	10bfffc4 	addi	r2,r2,-1
 100a49c:	ddc00117 	ldw	r23,4(sp)
 100a4a0:	a884703a 	and	r2,r21,r2
 100a4a4:	1811883a 	mov	r8,r3
 100a4a8:	124ffc34 	orhi	r9,r2,16368
 100a4ac:	25bf0044 	addi	r22,r4,-1023
 100a4b0:	d8000815 	stw	zero,32(sp)
 100a4b4:	0005883a 	mov	r2,zero
 100a4b8:	00cffe34 	movhi	r3,16376
 100a4bc:	480b883a 	mov	r5,r9
 100a4c0:	4009883a 	mov	r4,r8
 100a4c4:	180f883a 	mov	r7,r3
 100a4c8:	100d883a 	mov	r6,r2
 100a4cc:	1004b340 	call	1004b34 <__subdf3>
 100a4d0:	0218dbf4 	movhi	r8,25455
 100a4d4:	4210d844 	addi	r8,r8,17249
 100a4d8:	024ff4f4 	movhi	r9,16339
 100a4dc:	4a61e9c4 	addi	r9,r9,-30809
 100a4e0:	480f883a 	mov	r7,r9
 100a4e4:	400d883a 	mov	r6,r8
 100a4e8:	180b883a 	mov	r5,r3
 100a4ec:	1009883a 	mov	r4,r2
 100a4f0:	1004c280 	call	1004c28 <__muldf3>
 100a4f4:	0222d874 	movhi	r8,35681
 100a4f8:	42322cc4 	addi	r8,r8,-14157
 100a4fc:	024ff1f4 	movhi	r9,16327
 100a500:	4a628a04 	addi	r9,r9,-30168
 100a504:	480f883a 	mov	r7,r9
 100a508:	400d883a 	mov	r6,r8
 100a50c:	180b883a 	mov	r5,r3
 100a510:	1009883a 	mov	r4,r2
 100a514:	1004bb40 	call	1004bb4 <__adddf3>
 100a518:	b009883a 	mov	r4,r22
 100a51c:	1021883a 	mov	r16,r2
 100a520:	1823883a 	mov	r17,r3
 100a524:	10054640 	call	1005464 <__floatsidf>
 100a528:	021427f4 	movhi	r8,20639
 100a52c:	421e7ec4 	addi	r8,r8,31227
 100a530:	024ff4f4 	movhi	r9,16339
 100a534:	4a5104c4 	addi	r9,r9,17427
 100a538:	480f883a 	mov	r7,r9
 100a53c:	400d883a 	mov	r6,r8
 100a540:	180b883a 	mov	r5,r3
 100a544:	1009883a 	mov	r4,r2
 100a548:	1004c280 	call	1004c28 <__muldf3>
 100a54c:	180f883a 	mov	r7,r3
 100a550:	880b883a 	mov	r5,r17
 100a554:	100d883a 	mov	r6,r2
 100a558:	8009883a 	mov	r4,r16
 100a55c:	1004bb40 	call	1004bb4 <__adddf3>
 100a560:	1009883a 	mov	r4,r2
 100a564:	180b883a 	mov	r5,r3
 100a568:	1021883a 	mov	r16,r2
 100a56c:	1823883a 	mov	r17,r3
 100a570:	100555c0 	call	100555c <__fixdfsi>
 100a574:	000d883a 	mov	r6,zero
 100a578:	000f883a 	mov	r7,zero
 100a57c:	8009883a 	mov	r4,r16
 100a580:	880b883a 	mov	r5,r17
 100a584:	d8800d15 	stw	r2,52(sp)
 100a588:	1012e100 	call	1012e10 <__ltdf2>
 100a58c:	10031716 	blt	r2,zero,100b1ec <_dtoa_r+0xe8c>
 100a590:	d8c00d17 	ldw	r3,52(sp)
 100a594:	00800584 	movi	r2,22
 100a598:	10c1482e 	bgeu	r2,r3,100aabc <_dtoa_r+0x75c>
 100a59c:	01000044 	movi	r4,1
 100a5a0:	d9000c15 	stw	r4,48(sp)
 100a5a4:	bd85c83a 	sub	r2,r23,r22
 100a5a8:	11bfffc4 	addi	r6,r2,-1
 100a5ac:	30030b16 	blt	r6,zero,100b1dc <_dtoa_r+0xe7c>
 100a5b0:	d9800a15 	stw	r6,40(sp)
 100a5b4:	d8001115 	stw	zero,68(sp)
 100a5b8:	d8c00d17 	ldw	r3,52(sp)
 100a5bc:	1802ff16 	blt	r3,zero,100b1bc <_dtoa_r+0xe5c>
 100a5c0:	d9000a17 	ldw	r4,40(sp)
 100a5c4:	d8c00915 	stw	r3,36(sp)
 100a5c8:	d8001015 	stw	zero,64(sp)
 100a5cc:	20c9883a 	add	r4,r4,r3
 100a5d0:	d9000a15 	stw	r4,40(sp)
 100a5d4:	d9001717 	ldw	r4,92(sp)
 100a5d8:	00800244 	movi	r2,9
 100a5dc:	11004636 	bltu	r2,r4,100a6f8 <_dtoa_r+0x398>
 100a5e0:	00800144 	movi	r2,5
 100a5e4:	11020416 	blt	r2,r4,100adf8 <_dtoa_r+0xa98>
 100a5e8:	04400044 	movi	r17,1
 100a5ec:	d8c01717 	ldw	r3,92(sp)
 100a5f0:	00800144 	movi	r2,5
 100a5f4:	10c1ed36 	bltu	r2,r3,100adac <_dtoa_r+0xa4c>
 100a5f8:	18c5883a 	add	r2,r3,r3
 100a5fc:	1085883a 	add	r2,r2,r2
 100a600:	00c04074 	movhi	r3,257
 100a604:	18e98504 	addi	r3,r3,-23020
 100a608:	10c5883a 	add	r2,r2,r3
 100a60c:	11000017 	ldw	r4,0(r2)
 100a610:	2000683a 	jmp	r4
 100a614:	0100a700 	call	100a70 <__alt_mem_onchip+0x100a70>
 100a618:	0100a700 	call	100a70 <__alt_mem_onchip+0x100a70>
 100a61c:	0100b100 	call	100b10 <__alt_mem_onchip+0x100b10>
 100a620:	0100b0d8 	cmpnei	r4,zero,707
 100a624:	0100b11c 	xori	r4,zero,708
 100a628:	0100b128 	cmpgeui	r4,zero,708
 100a62c:	d9002717 	ldw	r4,156(sp)
 100a630:	0089c3c4 	movi	r2,9999
 100a634:	20800015 	stw	r2,0(r4)
 100a638:	a0001026 	beq	r20,zero,100a67c <_dtoa_r+0x31c>
 100a63c:	00c040b4 	movhi	r3,258
 100a640:	18fdb904 	addi	r3,r3,-2332
 100a644:	d9802917 	ldw	r6,164(sp)
 100a648:	303f7926 	beq	r6,zero,100a430 <_dtoa_r+0xd0>
 100a64c:	188000c7 	ldb	r2,3(r3)
 100a650:	190000c4 	addi	r4,r3,3
 100a654:	1000101e 	bne	r2,zero,100a698 <_dtoa_r+0x338>
 100a658:	d8802917 	ldw	r2,164(sp)
 100a65c:	11000015 	stw	r4,0(r2)
 100a660:	003f7306 	br	100a430 <_dtoa_r+0xd0>
 100a664:	00a00034 	movhi	r2,32768
 100a668:	10bfffc4 	addi	r2,r2,-1
 100a66c:	00c00044 	movi	r3,1
 100a670:	88aa703a 	and	r21,r17,r2
 100a674:	90c00015 	stw	r3,0(r18)
 100a678:	003f5806 	br	100a3dc <_dtoa_r+0x7c>
 100a67c:	00800434 	movhi	r2,16
 100a680:	10bfffc4 	addi	r2,r2,-1
 100a684:	a884703a 	and	r2,r21,r2
 100a688:	103fec1e 	bne	r2,zero,100a63c <_dtoa_r+0x2dc>
 100a68c:	00c040b4 	movhi	r3,258
 100a690:	18fdb604 	addi	r3,r3,-2344
 100a694:	003feb06 	br	100a644 <_dtoa_r+0x2e4>
 100a698:	d8802917 	ldw	r2,164(sp)
 100a69c:	19000204 	addi	r4,r3,8
 100a6a0:	11000015 	stw	r4,0(r2)
 100a6a4:	003f6206 	br	100a430 <_dtoa_r+0xd0>
 100a6a8:	ddc00117 	ldw	r23,4(sp)
 100a6ac:	d8800217 	ldw	r2,8(sp)
 100a6b0:	01000804 	movi	r4,32
 100a6b4:	b8c10c84 	addi	r3,r23,1074
 100a6b8:	18a3883a 	add	r17,r3,r2
 100a6bc:	2441b80e 	bge	r4,r17,100ada0 <_dtoa_r+0xa40>
 100a6c0:	00c01004 	movi	r3,64
 100a6c4:	1c47c83a 	sub	r3,r3,r17
 100a6c8:	88bff804 	addi	r2,r17,-32
 100a6cc:	a8c6983a 	sll	r3,r21,r3
 100a6d0:	a084d83a 	srl	r2,r20,r2
 100a6d4:	1888b03a 	or	r4,r3,r2
 100a6d8:	1012f940 	call	1012f94 <__floatunsidf>
 100a6dc:	1011883a 	mov	r8,r2
 100a6e0:	00bf8434 	movhi	r2,65040
 100a6e4:	01000044 	movi	r4,1
 100a6e8:	10d3883a 	add	r9,r2,r3
 100a6ec:	8dbef344 	addi	r22,r17,-1075
 100a6f0:	d9000815 	stw	r4,32(sp)
 100a6f4:	003f6f06 	br	100a4b4 <_dtoa_r+0x154>
 100a6f8:	d8001715 	stw	zero,92(sp)
 100a6fc:	04400044 	movi	r17,1
 100a700:	00bfffc4 	movi	r2,-1
 100a704:	00c00044 	movi	r3,1
 100a708:	d8800e15 	stw	r2,56(sp)
 100a70c:	d8002615 	stw	zero,152(sp)
 100a710:	d8800f15 	stw	r2,60(sp)
 100a714:	d8c00b15 	stw	r3,44(sp)
 100a718:	1021883a 	mov	r16,r2
 100a71c:	d8801617 	ldw	r2,88(sp)
 100a720:	10001115 	stw	zero,68(r2)
 100a724:	d8801617 	ldw	r2,88(sp)
 100a728:	11401117 	ldw	r5,68(r2)
 100a72c:	1009883a 	mov	r4,r2
 100a730:	100d7100 	call	100d710 <_Balloc>
 100a734:	d8c01617 	ldw	r3,88(sp)
 100a738:	d8800515 	stw	r2,20(sp)
 100a73c:	18801015 	stw	r2,64(r3)
 100a740:	00800384 	movi	r2,14
 100a744:	14006836 	bltu	r2,r16,100a8e8 <_dtoa_r+0x588>
 100a748:	8805003a 	cmpeq	r2,r17,zero
 100a74c:	1000661e 	bne	r2,zero,100a8e8 <_dtoa_r+0x588>
 100a750:	d9000d17 	ldw	r4,52(sp)
 100a754:	0102300e 	bge	zero,r4,100b018 <_dtoa_r+0xcb8>
 100a758:	208003cc 	andi	r2,r4,15
 100a75c:	100490fa 	slli	r2,r2,3
 100a760:	2025d13a 	srai	r18,r4,4
 100a764:	00c040b4 	movhi	r3,258
 100a768:	18fdcb04 	addi	r3,r3,-2260
 100a76c:	10c5883a 	add	r2,r2,r3
 100a770:	90c0040c 	andi	r3,r18,16
 100a774:	14000017 	ldw	r16,0(r2)
 100a778:	14400117 	ldw	r17,4(r2)
 100a77c:	18036a1e 	bne	r3,zero,100b528 <_dtoa_r+0x11c8>
 100a780:	05800084 	movi	r22,2
 100a784:	90001026 	beq	r18,zero,100a7c8 <_dtoa_r+0x468>
 100a788:	04c040b4 	movhi	r19,258
 100a78c:	9cfdfd04 	addi	r19,r19,-2060
 100a790:	9080004c 	andi	r2,r18,1
 100a794:	1005003a 	cmpeq	r2,r2,zero
 100a798:	1000081e 	bne	r2,zero,100a7bc <_dtoa_r+0x45c>
 100a79c:	99800017 	ldw	r6,0(r19)
 100a7a0:	99c00117 	ldw	r7,4(r19)
 100a7a4:	880b883a 	mov	r5,r17
 100a7a8:	8009883a 	mov	r4,r16
 100a7ac:	1004c280 	call	1004c28 <__muldf3>
 100a7b0:	1021883a 	mov	r16,r2
 100a7b4:	b5800044 	addi	r22,r22,1
 100a7b8:	1823883a 	mov	r17,r3
 100a7bc:	9025d07a 	srai	r18,r18,1
 100a7c0:	9cc00204 	addi	r19,r19,8
 100a7c4:	903ff21e 	bne	r18,zero,100a790 <_dtoa_r+0x430>
 100a7c8:	a80b883a 	mov	r5,r21
 100a7cc:	a009883a 	mov	r4,r20
 100a7d0:	880f883a 	mov	r7,r17
 100a7d4:	800d883a 	mov	r6,r16
 100a7d8:	1004fec0 	call	1004fec <__divdf3>
 100a7dc:	1029883a 	mov	r20,r2
 100a7e0:	182b883a 	mov	r21,r3
 100a7e4:	d8c00c17 	ldw	r3,48(sp)
 100a7e8:	1805003a 	cmpeq	r2,r3,zero
 100a7ec:	1000081e 	bne	r2,zero,100a810 <_dtoa_r+0x4b0>
 100a7f0:	0005883a 	mov	r2,zero
 100a7f4:	00cffc34 	movhi	r3,16368
 100a7f8:	180f883a 	mov	r7,r3
 100a7fc:	a009883a 	mov	r4,r20
 100a800:	a80b883a 	mov	r5,r21
 100a804:	100d883a 	mov	r6,r2
 100a808:	1012e100 	call	1012e10 <__ltdf2>
 100a80c:	1003fe16 	blt	r2,zero,100b808 <_dtoa_r+0x14a8>
 100a810:	b009883a 	mov	r4,r22
 100a814:	10054640 	call	1005464 <__floatsidf>
 100a818:	180b883a 	mov	r5,r3
 100a81c:	1009883a 	mov	r4,r2
 100a820:	a00d883a 	mov	r6,r20
 100a824:	a80f883a 	mov	r7,r21
 100a828:	1004c280 	call	1004c28 <__muldf3>
 100a82c:	0011883a 	mov	r8,zero
 100a830:	02500734 	movhi	r9,16412
 100a834:	1009883a 	mov	r4,r2
 100a838:	180b883a 	mov	r5,r3
 100a83c:	480f883a 	mov	r7,r9
 100a840:	400d883a 	mov	r6,r8
 100a844:	1004bb40 	call	1004bb4 <__adddf3>
 100a848:	d9000f17 	ldw	r4,60(sp)
 100a84c:	102d883a 	mov	r22,r2
 100a850:	00bf3034 	movhi	r2,64704
 100a854:	18b9883a 	add	fp,r3,r2
 100a858:	e02f883a 	mov	r23,fp
 100a85c:	20028f1e 	bne	r4,zero,100b29c <_dtoa_r+0xf3c>
 100a860:	0005883a 	mov	r2,zero
 100a864:	00d00534 	movhi	r3,16404
 100a868:	a009883a 	mov	r4,r20
 100a86c:	a80b883a 	mov	r5,r21
 100a870:	180f883a 	mov	r7,r3
 100a874:	100d883a 	mov	r6,r2
 100a878:	1004b340 	call	1004b34 <__subdf3>
 100a87c:	1009883a 	mov	r4,r2
 100a880:	e00f883a 	mov	r7,fp
 100a884:	180b883a 	mov	r5,r3
 100a888:	b00d883a 	mov	r6,r22
 100a88c:	1025883a 	mov	r18,r2
 100a890:	1827883a 	mov	r19,r3
 100a894:	10053540 	call	1005354 <__gtdf2>
 100a898:	00834f16 	blt	zero,r2,100b5d8 <_dtoa_r+0x1278>
 100a89c:	e0e0003c 	xorhi	r3,fp,32768
 100a8a0:	9009883a 	mov	r4,r18
 100a8a4:	980b883a 	mov	r5,r19
 100a8a8:	180f883a 	mov	r7,r3
 100a8ac:	b00d883a 	mov	r6,r22
 100a8b0:	1012e100 	call	1012e10 <__ltdf2>
 100a8b4:	1000080e 	bge	r2,zero,100a8d8 <_dtoa_r+0x578>
 100a8b8:	0027883a 	mov	r19,zero
 100a8bc:	0025883a 	mov	r18,zero
 100a8c0:	d8802617 	ldw	r2,152(sp)
 100a8c4:	df000517 	ldw	fp,20(sp)
 100a8c8:	d8000615 	stw	zero,24(sp)
 100a8cc:	0084303a 	nor	r2,zero,r2
 100a8d0:	d8800d15 	stw	r2,52(sp)
 100a8d4:	00019b06 	br	100af44 <_dtoa_r+0xbe4>
 100a8d8:	d9801217 	ldw	r6,72(sp)
 100a8dc:	d8801317 	ldw	r2,76(sp)
 100a8e0:	3029883a 	mov	r20,r6
 100a8e4:	102b883a 	mov	r21,r2
 100a8e8:	d8c00217 	ldw	r3,8(sp)
 100a8ec:	18008516 	blt	r3,zero,100ab04 <_dtoa_r+0x7a4>
 100a8f0:	d9000d17 	ldw	r4,52(sp)
 100a8f4:	00800384 	movi	r2,14
 100a8f8:	11008216 	blt	r2,r4,100ab04 <_dtoa_r+0x7a4>
 100a8fc:	200490fa 	slli	r2,r4,3
 100a900:	d9802617 	ldw	r6,152(sp)
 100a904:	00c040b4 	movhi	r3,258
 100a908:	18fdcb04 	addi	r3,r3,-2260
 100a90c:	10c5883a 	add	r2,r2,r3
 100a910:	14800017 	ldw	r18,0(r2)
 100a914:	14c00117 	ldw	r19,4(r2)
 100a918:	30031e16 	blt	r6,zero,100b594 <_dtoa_r+0x1234>
 100a91c:	d9000517 	ldw	r4,20(sp)
 100a920:	d8c00f17 	ldw	r3,60(sp)
 100a924:	a823883a 	mov	r17,r21
 100a928:	a021883a 	mov	r16,r20
 100a92c:	192b883a 	add	r21,r3,r4
 100a930:	2039883a 	mov	fp,r4
 100a934:	00000f06 	br	100a974 <_dtoa_r+0x614>
 100a938:	0005883a 	mov	r2,zero
 100a93c:	00d00934 	movhi	r3,16420
 100a940:	5009883a 	mov	r4,r10
 100a944:	580b883a 	mov	r5,r11
 100a948:	180f883a 	mov	r7,r3
 100a94c:	100d883a 	mov	r6,r2
 100a950:	1004c280 	call	1004c28 <__muldf3>
 100a954:	180b883a 	mov	r5,r3
 100a958:	000d883a 	mov	r6,zero
 100a95c:	000f883a 	mov	r7,zero
 100a960:	1009883a 	mov	r4,r2
 100a964:	1021883a 	mov	r16,r2
 100a968:	1823883a 	mov	r17,r3
 100a96c:	10052cc0 	call	10052cc <__nedf2>
 100a970:	10004526 	beq	r2,zero,100aa88 <_dtoa_r+0x728>
 100a974:	900d883a 	mov	r6,r18
 100a978:	980f883a 	mov	r7,r19
 100a97c:	8009883a 	mov	r4,r16
 100a980:	880b883a 	mov	r5,r17
 100a984:	1004fec0 	call	1004fec <__divdf3>
 100a988:	180b883a 	mov	r5,r3
 100a98c:	1009883a 	mov	r4,r2
 100a990:	100555c0 	call	100555c <__fixdfsi>
 100a994:	1009883a 	mov	r4,r2
 100a998:	1029883a 	mov	r20,r2
 100a99c:	10054640 	call	1005464 <__floatsidf>
 100a9a0:	180f883a 	mov	r7,r3
 100a9a4:	9009883a 	mov	r4,r18
 100a9a8:	980b883a 	mov	r5,r19
 100a9ac:	100d883a 	mov	r6,r2
 100a9b0:	1004c280 	call	1004c28 <__muldf3>
 100a9b4:	180f883a 	mov	r7,r3
 100a9b8:	880b883a 	mov	r5,r17
 100a9bc:	8009883a 	mov	r4,r16
 100a9c0:	100d883a 	mov	r6,r2
 100a9c4:	1004b340 	call	1004b34 <__subdf3>
 100a9c8:	1015883a 	mov	r10,r2
 100a9cc:	a0800c04 	addi	r2,r20,48
 100a9d0:	e0800005 	stb	r2,0(fp)
 100a9d4:	e7000044 	addi	fp,fp,1
 100a9d8:	1817883a 	mov	r11,r3
 100a9dc:	e57fd61e 	bne	fp,r21,100a938 <_dtoa_r+0x5d8>
 100a9e0:	500d883a 	mov	r6,r10
 100a9e4:	180f883a 	mov	r7,r3
 100a9e8:	5009883a 	mov	r4,r10
 100a9ec:	180b883a 	mov	r5,r3
 100a9f0:	1004bb40 	call	1004bb4 <__adddf3>
 100a9f4:	100d883a 	mov	r6,r2
 100a9f8:	9009883a 	mov	r4,r18
 100a9fc:	980b883a 	mov	r5,r19
 100aa00:	180f883a 	mov	r7,r3
 100aa04:	1021883a 	mov	r16,r2
 100aa08:	1823883a 	mov	r17,r3
 100aa0c:	1012e100 	call	1012e10 <__ltdf2>
 100aa10:	10000816 	blt	r2,zero,100aa34 <_dtoa_r+0x6d4>
 100aa14:	980b883a 	mov	r5,r19
 100aa18:	800d883a 	mov	r6,r16
 100aa1c:	880f883a 	mov	r7,r17
 100aa20:	9009883a 	mov	r4,r18
 100aa24:	10052440 	call	1005244 <__eqdf2>
 100aa28:	1000171e 	bne	r2,zero,100aa88 <_dtoa_r+0x728>
 100aa2c:	a080004c 	andi	r2,r20,1
 100aa30:	10001526 	beq	r2,zero,100aa88 <_dtoa_r+0x728>
 100aa34:	d8800d17 	ldw	r2,52(sp)
 100aa38:	d8800415 	stw	r2,16(sp)
 100aa3c:	e009883a 	mov	r4,fp
 100aa40:	213fffc4 	addi	r4,r4,-1
 100aa44:	20c00007 	ldb	r3,0(r4)
 100aa48:	00800e44 	movi	r2,57
 100aa4c:	1880081e 	bne	r3,r2,100aa70 <_dtoa_r+0x710>
 100aa50:	d8800517 	ldw	r2,20(sp)
 100aa54:	113ffa1e 	bne	r2,r4,100aa40 <_dtoa_r+0x6e0>
 100aa58:	d8c00417 	ldw	r3,16(sp)
 100aa5c:	d9800517 	ldw	r6,20(sp)
 100aa60:	00800c04 	movi	r2,48
 100aa64:	18c00044 	addi	r3,r3,1
 100aa68:	d8c00415 	stw	r3,16(sp)
 100aa6c:	30800005 	stb	r2,0(r6)
 100aa70:	20800003 	ldbu	r2,0(r4)
 100aa74:	d8c00417 	ldw	r3,16(sp)
 100aa78:	27000044 	addi	fp,r4,1
 100aa7c:	10800044 	addi	r2,r2,1
 100aa80:	d8c00d15 	stw	r3,52(sp)
 100aa84:	20800005 	stb	r2,0(r4)
 100aa88:	d9001617 	ldw	r4,88(sp)
 100aa8c:	d9400717 	ldw	r5,28(sp)
 100aa90:	100d1900 	call	100d190 <_Bfree>
 100aa94:	e0000005 	stb	zero,0(fp)
 100aa98:	d9800d17 	ldw	r6,52(sp)
 100aa9c:	d8c02717 	ldw	r3,156(sp)
 100aaa0:	d9002917 	ldw	r4,164(sp)
 100aaa4:	30800044 	addi	r2,r6,1
 100aaa8:	18800015 	stw	r2,0(r3)
 100aaac:	20029c26 	beq	r4,zero,100b520 <_dtoa_r+0x11c0>
 100aab0:	d8c00517 	ldw	r3,20(sp)
 100aab4:	27000015 	stw	fp,0(r4)
 100aab8:	003e5d06 	br	100a430 <_dtoa_r+0xd0>
 100aabc:	d9800d17 	ldw	r6,52(sp)
 100aac0:	00c040b4 	movhi	r3,258
 100aac4:	18fdcb04 	addi	r3,r3,-2260
 100aac8:	d9001217 	ldw	r4,72(sp)
 100aacc:	300490fa 	slli	r2,r6,3
 100aad0:	d9401317 	ldw	r5,76(sp)
 100aad4:	10c5883a 	add	r2,r2,r3
 100aad8:	12000017 	ldw	r8,0(r2)
 100aadc:	12400117 	ldw	r9,4(r2)
 100aae0:	400d883a 	mov	r6,r8
 100aae4:	480f883a 	mov	r7,r9
 100aae8:	1012e100 	call	1012e10 <__ltdf2>
 100aaec:	1000030e 	bge	r2,zero,100aafc <_dtoa_r+0x79c>
 100aaf0:	d8800d17 	ldw	r2,52(sp)
 100aaf4:	10bfffc4 	addi	r2,r2,-1
 100aaf8:	d8800d15 	stw	r2,52(sp)
 100aafc:	d8000c15 	stw	zero,48(sp)
 100ab00:	003ea806 	br	100a5a4 <_dtoa_r+0x244>
 100ab04:	d9000b17 	ldw	r4,44(sp)
 100ab08:	202cc03a 	cmpne	r22,r4,zero
 100ab0c:	b000c71e 	bne	r22,zero,100ae2c <_dtoa_r+0xacc>
 100ab10:	dc001117 	ldw	r16,68(sp)
 100ab14:	dc801017 	ldw	r18,64(sp)
 100ab18:	0027883a 	mov	r19,zero
 100ab1c:	04000b0e 	bge	zero,r16,100ab4c <_dtoa_r+0x7ec>
 100ab20:	d8c00a17 	ldw	r3,40(sp)
 100ab24:	00c0090e 	bge	zero,r3,100ab4c <_dtoa_r+0x7ec>
 100ab28:	8005883a 	mov	r2,r16
 100ab2c:	1c011316 	blt	r3,r16,100af7c <_dtoa_r+0xc1c>
 100ab30:	d9000a17 	ldw	r4,40(sp)
 100ab34:	d9801117 	ldw	r6,68(sp)
 100ab38:	80a1c83a 	sub	r16,r16,r2
 100ab3c:	2089c83a 	sub	r4,r4,r2
 100ab40:	308dc83a 	sub	r6,r6,r2
 100ab44:	d9000a15 	stw	r4,40(sp)
 100ab48:	d9801115 	stw	r6,68(sp)
 100ab4c:	d8801017 	ldw	r2,64(sp)
 100ab50:	0080150e 	bge	zero,r2,100aba8 <_dtoa_r+0x848>
 100ab54:	d8c00b17 	ldw	r3,44(sp)
 100ab58:	1805003a 	cmpeq	r2,r3,zero
 100ab5c:	1001c91e 	bne	r2,zero,100b284 <_dtoa_r+0xf24>
 100ab60:	04800e0e 	bge	zero,r18,100ab9c <_dtoa_r+0x83c>
 100ab64:	d9001617 	ldw	r4,88(sp)
 100ab68:	980b883a 	mov	r5,r19
 100ab6c:	900d883a 	mov	r6,r18
 100ab70:	100df440 	call	100df44 <__pow5mult>
 100ab74:	d9001617 	ldw	r4,88(sp)
 100ab78:	d9800717 	ldw	r6,28(sp)
 100ab7c:	100b883a 	mov	r5,r2
 100ab80:	1027883a 	mov	r19,r2
 100ab84:	100dc200 	call	100dc20 <__multiply>
 100ab88:	d9001617 	ldw	r4,88(sp)
 100ab8c:	d9400717 	ldw	r5,28(sp)
 100ab90:	1023883a 	mov	r17,r2
 100ab94:	100d1900 	call	100d190 <_Bfree>
 100ab98:	dc400715 	stw	r17,28(sp)
 100ab9c:	d9001017 	ldw	r4,64(sp)
 100aba0:	248dc83a 	sub	r6,r4,r18
 100aba4:	30010e1e 	bne	r6,zero,100afe0 <_dtoa_r+0xc80>
 100aba8:	d9001617 	ldw	r4,88(sp)
 100abac:	04400044 	movi	r17,1
 100abb0:	880b883a 	mov	r5,r17
 100abb4:	100de080 	call	100de08 <__i2b>
 100abb8:	d9800917 	ldw	r6,36(sp)
 100abbc:	1025883a 	mov	r18,r2
 100abc0:	0180040e 	bge	zero,r6,100abd4 <_dtoa_r+0x874>
 100abc4:	d9001617 	ldw	r4,88(sp)
 100abc8:	100b883a 	mov	r5,r2
 100abcc:	100df440 	call	100df44 <__pow5mult>
 100abd0:	1025883a 	mov	r18,r2
 100abd4:	d8801717 	ldw	r2,92(sp)
 100abd8:	8880f30e 	bge	r17,r2,100afa8 <_dtoa_r+0xc48>
 100abdc:	0023883a 	mov	r17,zero
 100abe0:	d9800917 	ldw	r6,36(sp)
 100abe4:	30019e1e 	bne	r6,zero,100b260 <_dtoa_r+0xf00>
 100abe8:	00c00044 	movi	r3,1
 100abec:	d9000a17 	ldw	r4,40(sp)
 100abf0:	20c5883a 	add	r2,r4,r3
 100abf4:	10c007cc 	andi	r3,r2,31
 100abf8:	1800841e 	bne	r3,zero,100ae0c <_dtoa_r+0xaac>
 100abfc:	00800704 	movi	r2,28
 100ac00:	d9000a17 	ldw	r4,40(sp)
 100ac04:	d9801117 	ldw	r6,68(sp)
 100ac08:	80a1883a 	add	r16,r16,r2
 100ac0c:	2089883a 	add	r4,r4,r2
 100ac10:	308d883a 	add	r6,r6,r2
 100ac14:	d9000a15 	stw	r4,40(sp)
 100ac18:	d9801115 	stw	r6,68(sp)
 100ac1c:	d8801117 	ldw	r2,68(sp)
 100ac20:	0080050e 	bge	zero,r2,100ac38 <_dtoa_r+0x8d8>
 100ac24:	d9400717 	ldw	r5,28(sp)
 100ac28:	d9001617 	ldw	r4,88(sp)
 100ac2c:	100d883a 	mov	r6,r2
 100ac30:	100dad40 	call	100dad4 <__lshift>
 100ac34:	d8800715 	stw	r2,28(sp)
 100ac38:	d8c00a17 	ldw	r3,40(sp)
 100ac3c:	00c0050e 	bge	zero,r3,100ac54 <_dtoa_r+0x8f4>
 100ac40:	d9001617 	ldw	r4,88(sp)
 100ac44:	900b883a 	mov	r5,r18
 100ac48:	180d883a 	mov	r6,r3
 100ac4c:	100dad40 	call	100dad4 <__lshift>
 100ac50:	1025883a 	mov	r18,r2
 100ac54:	d9000c17 	ldw	r4,48(sp)
 100ac58:	2005003a 	cmpeq	r2,r4,zero
 100ac5c:	10016f26 	beq	r2,zero,100b21c <_dtoa_r+0xebc>
 100ac60:	d9000f17 	ldw	r4,60(sp)
 100ac64:	0102170e 	bge	zero,r4,100b4c4 <_dtoa_r+0x1164>
 100ac68:	d9800b17 	ldw	r6,44(sp)
 100ac6c:	3005003a 	cmpeq	r2,r6,zero
 100ac70:	1000881e 	bne	r2,zero,100ae94 <_dtoa_r+0xb34>
 100ac74:	0400050e 	bge	zero,r16,100ac8c <_dtoa_r+0x92c>
 100ac78:	d9001617 	ldw	r4,88(sp)
 100ac7c:	980b883a 	mov	r5,r19
 100ac80:	800d883a 	mov	r6,r16
 100ac84:	100dad40 	call	100dad4 <__lshift>
 100ac88:	1027883a 	mov	r19,r2
 100ac8c:	8804c03a 	cmpne	r2,r17,zero
 100ac90:	1002541e 	bne	r2,zero,100b5e4 <_dtoa_r+0x1284>
 100ac94:	980b883a 	mov	r5,r19
 100ac98:	dd800517 	ldw	r22,20(sp)
 100ac9c:	dcc00615 	stw	r19,24(sp)
 100aca0:	a700004c 	andi	fp,r20,1
 100aca4:	2827883a 	mov	r19,r5
 100aca8:	d9000717 	ldw	r4,28(sp)
 100acac:	900b883a 	mov	r5,r18
 100acb0:	100a1480 	call	100a148 <quorem>
 100acb4:	d9000717 	ldw	r4,28(sp)
 100acb8:	d9400617 	ldw	r5,24(sp)
 100acbc:	1023883a 	mov	r17,r2
 100acc0:	8dc00c04 	addi	r23,r17,48
 100acc4:	100d2ec0 	call	100d2ec <__mcmp>
 100acc8:	d9001617 	ldw	r4,88(sp)
 100accc:	900b883a 	mov	r5,r18
 100acd0:	980d883a 	mov	r6,r19
 100acd4:	1029883a 	mov	r20,r2
 100acd8:	100d9480 	call	100d948 <__mdiff>
 100acdc:	102b883a 	mov	r21,r2
 100ace0:	10800317 	ldw	r2,12(r2)
 100ace4:	1001281e 	bne	r2,zero,100b188 <_dtoa_r+0xe28>
 100ace8:	d9000717 	ldw	r4,28(sp)
 100acec:	a80b883a 	mov	r5,r21
 100acf0:	100d2ec0 	call	100d2ec <__mcmp>
 100acf4:	d9001617 	ldw	r4,88(sp)
 100acf8:	1021883a 	mov	r16,r2
 100acfc:	a80b883a 	mov	r5,r21
 100ad00:	100d1900 	call	100d190 <_Bfree>
 100ad04:	8000041e 	bne	r16,zero,100ad18 <_dtoa_r+0x9b8>
 100ad08:	d8801717 	ldw	r2,92(sp)
 100ad0c:	1000021e 	bne	r2,zero,100ad18 <_dtoa_r+0x9b8>
 100ad10:	e004c03a 	cmpne	r2,fp,zero
 100ad14:	10011726 	beq	r2,zero,100b174 <_dtoa_r+0xe14>
 100ad18:	a0010616 	blt	r20,zero,100b134 <_dtoa_r+0xdd4>
 100ad1c:	a000041e 	bne	r20,zero,100ad30 <_dtoa_r+0x9d0>
 100ad20:	d8c01717 	ldw	r3,92(sp)
 100ad24:	1800021e 	bne	r3,zero,100ad30 <_dtoa_r+0x9d0>
 100ad28:	e004c03a 	cmpne	r2,fp,zero
 100ad2c:	10010126 	beq	r2,zero,100b134 <_dtoa_r+0xdd4>
 100ad30:	04023d16 	blt	zero,r16,100b628 <_dtoa_r+0x12c8>
 100ad34:	b5c00005 	stb	r23,0(r22)
 100ad38:	d9800517 	ldw	r6,20(sp)
 100ad3c:	d9000f17 	ldw	r4,60(sp)
 100ad40:	b5800044 	addi	r22,r22,1
 100ad44:	3105883a 	add	r2,r6,r4
 100ad48:	b0806526 	beq	r22,r2,100aee0 <_dtoa_r+0xb80>
 100ad4c:	d9400717 	ldw	r5,28(sp)
 100ad50:	d9001617 	ldw	r4,88(sp)
 100ad54:	01800284 	movi	r6,10
 100ad58:	000f883a 	mov	r7,zero
 100ad5c:	100de440 	call	100de44 <__multadd>
 100ad60:	d8800715 	stw	r2,28(sp)
 100ad64:	d8800617 	ldw	r2,24(sp)
 100ad68:	14c10c26 	beq	r2,r19,100b19c <_dtoa_r+0xe3c>
 100ad6c:	d9400617 	ldw	r5,24(sp)
 100ad70:	d9001617 	ldw	r4,88(sp)
 100ad74:	01800284 	movi	r6,10
 100ad78:	000f883a 	mov	r7,zero
 100ad7c:	100de440 	call	100de44 <__multadd>
 100ad80:	d9001617 	ldw	r4,88(sp)
 100ad84:	980b883a 	mov	r5,r19
 100ad88:	01800284 	movi	r6,10
 100ad8c:	000f883a 	mov	r7,zero
 100ad90:	d8800615 	stw	r2,24(sp)
 100ad94:	100de440 	call	100de44 <__multadd>
 100ad98:	1027883a 	mov	r19,r2
 100ad9c:	003fc206 	br	100aca8 <_dtoa_r+0x948>
 100ada0:	2445c83a 	sub	r2,r4,r17
 100ada4:	a088983a 	sll	r4,r20,r2
 100ada8:	003e4b06 	br	100a6d8 <_dtoa_r+0x378>
 100adac:	01bfffc4 	movi	r6,-1
 100adb0:	00800044 	movi	r2,1
 100adb4:	d9800e15 	stw	r6,56(sp)
 100adb8:	d9800f15 	stw	r6,60(sp)
 100adbc:	d8800b15 	stw	r2,44(sp)
 100adc0:	d8c01617 	ldw	r3,88(sp)
 100adc4:	008005c4 	movi	r2,23
 100adc8:	18001115 	stw	zero,68(r3)
 100adcc:	1580082e 	bgeu	r2,r22,100adf0 <_dtoa_r+0xa90>
 100add0:	00c00104 	movi	r3,4
 100add4:	0009883a 	mov	r4,zero
 100add8:	18c7883a 	add	r3,r3,r3
 100addc:	18800504 	addi	r2,r3,20
 100ade0:	21000044 	addi	r4,r4,1
 100ade4:	b0bffc2e 	bgeu	r22,r2,100add8 <_dtoa_r+0xa78>
 100ade8:	d9801617 	ldw	r6,88(sp)
 100adec:	31001115 	stw	r4,68(r6)
 100adf0:	dc000f17 	ldw	r16,60(sp)
 100adf4:	003e4b06 	br	100a724 <_dtoa_r+0x3c4>
 100adf8:	d9801717 	ldw	r6,92(sp)
 100adfc:	0023883a 	mov	r17,zero
 100ae00:	31bfff04 	addi	r6,r6,-4
 100ae04:	d9801715 	stw	r6,92(sp)
 100ae08:	003df806 	br	100a5ec <_dtoa_r+0x28c>
 100ae0c:	00800804 	movi	r2,32
 100ae10:	10c9c83a 	sub	r4,r2,r3
 100ae14:	00c00104 	movi	r3,4
 100ae18:	19005a16 	blt	r3,r4,100af84 <_dtoa_r+0xc24>
 100ae1c:	008000c4 	movi	r2,3
 100ae20:	113f7e16 	blt	r2,r4,100ac1c <_dtoa_r+0x8bc>
 100ae24:	20800704 	addi	r2,r4,28
 100ae28:	003f7506 	br	100ac00 <_dtoa_r+0x8a0>
 100ae2c:	d9801717 	ldw	r6,92(sp)
 100ae30:	00800044 	movi	r2,1
 100ae34:	1180a10e 	bge	r2,r6,100b0bc <_dtoa_r+0xd5c>
 100ae38:	d9800f17 	ldw	r6,60(sp)
 100ae3c:	d8c01017 	ldw	r3,64(sp)
 100ae40:	30bfffc4 	addi	r2,r6,-1
 100ae44:	1881c616 	blt	r3,r2,100b560 <_dtoa_r+0x1200>
 100ae48:	18a5c83a 	sub	r18,r3,r2
 100ae4c:	d8800f17 	ldw	r2,60(sp)
 100ae50:	10026216 	blt	r2,zero,100b7dc <_dtoa_r+0x147c>
 100ae54:	dc001117 	ldw	r16,68(sp)
 100ae58:	1007883a 	mov	r3,r2
 100ae5c:	d9800a17 	ldw	r6,40(sp)
 100ae60:	d8801117 	ldw	r2,68(sp)
 100ae64:	d9001617 	ldw	r4,88(sp)
 100ae68:	30cd883a 	add	r6,r6,r3
 100ae6c:	10c5883a 	add	r2,r2,r3
 100ae70:	01400044 	movi	r5,1
 100ae74:	d9800a15 	stw	r6,40(sp)
 100ae78:	d8801115 	stw	r2,68(sp)
 100ae7c:	100de080 	call	100de08 <__i2b>
 100ae80:	1027883a 	mov	r19,r2
 100ae84:	003f2506 	br	100ab1c <_dtoa_r+0x7bc>
 100ae88:	00c040b4 	movhi	r3,258
 100ae8c:	18fd0204 	addi	r3,r3,-3064
 100ae90:	003d6706 	br	100a430 <_dtoa_r+0xd0>
 100ae94:	dd800517 	ldw	r22,20(sp)
 100ae98:	04000044 	movi	r16,1
 100ae9c:	00000706 	br	100aebc <_dtoa_r+0xb5c>
 100aea0:	d9400717 	ldw	r5,28(sp)
 100aea4:	d9001617 	ldw	r4,88(sp)
 100aea8:	01800284 	movi	r6,10
 100aeac:	000f883a 	mov	r7,zero
 100aeb0:	100de440 	call	100de44 <__multadd>
 100aeb4:	d8800715 	stw	r2,28(sp)
 100aeb8:	84000044 	addi	r16,r16,1
 100aebc:	d9000717 	ldw	r4,28(sp)
 100aec0:	900b883a 	mov	r5,r18
 100aec4:	100a1480 	call	100a148 <quorem>
 100aec8:	15c00c04 	addi	r23,r2,48
 100aecc:	b5c00005 	stb	r23,0(r22)
 100aed0:	d8c00f17 	ldw	r3,60(sp)
 100aed4:	b5800044 	addi	r22,r22,1
 100aed8:	80fff116 	blt	r16,r3,100aea0 <_dtoa_r+0xb40>
 100aedc:	d8000615 	stw	zero,24(sp)
 100aee0:	d9400717 	ldw	r5,28(sp)
 100aee4:	d9001617 	ldw	r4,88(sp)
 100aee8:	01800044 	movi	r6,1
 100aeec:	100dad40 	call	100dad4 <__lshift>
 100aef0:	1009883a 	mov	r4,r2
 100aef4:	900b883a 	mov	r5,r18
 100aef8:	d8800715 	stw	r2,28(sp)
 100aefc:	100d2ec0 	call	100d2ec <__mcmp>
 100af00:	00803c0e 	bge	zero,r2,100aff4 <_dtoa_r+0xc94>
 100af04:	b009883a 	mov	r4,r22
 100af08:	213fffc4 	addi	r4,r4,-1
 100af0c:	21400003 	ldbu	r5,0(r4)
 100af10:	00800e44 	movi	r2,57
 100af14:	28c03fcc 	andi	r3,r5,255
 100af18:	18c0201c 	xori	r3,r3,128
 100af1c:	18ffe004 	addi	r3,r3,-128
 100af20:	1881981e 	bne	r3,r2,100b584 <_dtoa_r+0x1224>
 100af24:	d9800517 	ldw	r6,20(sp)
 100af28:	21bff71e 	bne	r4,r6,100af08 <_dtoa_r+0xba8>
 100af2c:	d8800d17 	ldw	r2,52(sp)
 100af30:	37000044 	addi	fp,r6,1
 100af34:	10800044 	addi	r2,r2,1
 100af38:	d8800d15 	stw	r2,52(sp)
 100af3c:	00800c44 	movi	r2,49
 100af40:	30800005 	stb	r2,0(r6)
 100af44:	d9001617 	ldw	r4,88(sp)
 100af48:	900b883a 	mov	r5,r18
 100af4c:	100d1900 	call	100d190 <_Bfree>
 100af50:	983ecd26 	beq	r19,zero,100aa88 <_dtoa_r+0x728>
 100af54:	d8c00617 	ldw	r3,24(sp)
 100af58:	18000426 	beq	r3,zero,100af6c <_dtoa_r+0xc0c>
 100af5c:	1cc00326 	beq	r3,r19,100af6c <_dtoa_r+0xc0c>
 100af60:	d9001617 	ldw	r4,88(sp)
 100af64:	180b883a 	mov	r5,r3
 100af68:	100d1900 	call	100d190 <_Bfree>
 100af6c:	d9001617 	ldw	r4,88(sp)
 100af70:	980b883a 	mov	r5,r19
 100af74:	100d1900 	call	100d190 <_Bfree>
 100af78:	003ec306 	br	100aa88 <_dtoa_r+0x728>
 100af7c:	1805883a 	mov	r2,r3
 100af80:	003eeb06 	br	100ab30 <_dtoa_r+0x7d0>
 100af84:	d9800a17 	ldw	r6,40(sp)
 100af88:	d8c01117 	ldw	r3,68(sp)
 100af8c:	20bfff04 	addi	r2,r4,-4
 100af90:	308d883a 	add	r6,r6,r2
 100af94:	1887883a 	add	r3,r3,r2
 100af98:	80a1883a 	add	r16,r16,r2
 100af9c:	d9800a15 	stw	r6,40(sp)
 100afa0:	d8c01115 	stw	r3,68(sp)
 100afa4:	003f1d06 	br	100ac1c <_dtoa_r+0x8bc>
 100afa8:	a03f0c1e 	bne	r20,zero,100abdc <_dtoa_r+0x87c>
 100afac:	00800434 	movhi	r2,16
 100afb0:	10bfffc4 	addi	r2,r2,-1
 100afb4:	a884703a 	and	r2,r21,r2
 100afb8:	103f081e 	bne	r2,zero,100abdc <_dtoa_r+0x87c>
 100afbc:	a89ffc2c 	andhi	r2,r21,32752
 100afc0:	103f0626 	beq	r2,zero,100abdc <_dtoa_r+0x87c>
 100afc4:	d8c01117 	ldw	r3,68(sp)
 100afc8:	d9000a17 	ldw	r4,40(sp)
 100afcc:	18c00044 	addi	r3,r3,1
 100afd0:	21000044 	addi	r4,r4,1
 100afd4:	d8c01115 	stw	r3,68(sp)
 100afd8:	d9000a15 	stw	r4,40(sp)
 100afdc:	003f0006 	br	100abe0 <_dtoa_r+0x880>
 100afe0:	d9400717 	ldw	r5,28(sp)
 100afe4:	d9001617 	ldw	r4,88(sp)
 100afe8:	100df440 	call	100df44 <__pow5mult>
 100afec:	d8800715 	stw	r2,28(sp)
 100aff0:	003eed06 	br	100aba8 <_dtoa_r+0x848>
 100aff4:	1000021e 	bne	r2,zero,100b000 <_dtoa_r+0xca0>
 100aff8:	b880004c 	andi	r2,r23,1
 100affc:	103fc11e 	bne	r2,zero,100af04 <_dtoa_r+0xba4>
 100b000:	b5bfffc4 	addi	r22,r22,-1
 100b004:	b0c00007 	ldb	r3,0(r22)
 100b008:	00800c04 	movi	r2,48
 100b00c:	18bffc26 	beq	r3,r2,100b000 <_dtoa_r+0xca0>
 100b010:	b7000044 	addi	fp,r22,1
 100b014:	003fcb06 	br	100af44 <_dtoa_r+0xbe4>
 100b018:	d9800d17 	ldw	r6,52(sp)
 100b01c:	018fc83a 	sub	r7,zero,r6
 100b020:	3801f726 	beq	r7,zero,100b800 <_dtoa_r+0x14a0>
 100b024:	398003cc 	andi	r6,r7,15
 100b028:	300c90fa 	slli	r6,r6,3
 100b02c:	014040b4 	movhi	r5,258
 100b030:	297dcb04 	addi	r5,r5,-2260
 100b034:	d9001217 	ldw	r4,72(sp)
 100b038:	314d883a 	add	r6,r6,r5
 100b03c:	30c00117 	ldw	r3,4(r6)
 100b040:	30800017 	ldw	r2,0(r6)
 100b044:	d9401317 	ldw	r5,76(sp)
 100b048:	3821d13a 	srai	r16,r7,4
 100b04c:	100d883a 	mov	r6,r2
 100b050:	180f883a 	mov	r7,r3
 100b054:	1004c280 	call	1004c28 <__muldf3>
 100b058:	1011883a 	mov	r8,r2
 100b05c:	1813883a 	mov	r9,r3
 100b060:	1029883a 	mov	r20,r2
 100b064:	182b883a 	mov	r21,r3
 100b068:	8001e526 	beq	r16,zero,100b800 <_dtoa_r+0x14a0>
 100b06c:	05800084 	movi	r22,2
 100b070:	044040b4 	movhi	r17,258
 100b074:	8c7dfd04 	addi	r17,r17,-2060
 100b078:	8080004c 	andi	r2,r16,1
 100b07c:	1005003a 	cmpeq	r2,r2,zero
 100b080:	1000081e 	bne	r2,zero,100b0a4 <_dtoa_r+0xd44>
 100b084:	89800017 	ldw	r6,0(r17)
 100b088:	89c00117 	ldw	r7,4(r17)
 100b08c:	480b883a 	mov	r5,r9
 100b090:	4009883a 	mov	r4,r8
 100b094:	1004c280 	call	1004c28 <__muldf3>
 100b098:	1011883a 	mov	r8,r2
 100b09c:	b5800044 	addi	r22,r22,1
 100b0a0:	1813883a 	mov	r9,r3
 100b0a4:	8021d07a 	srai	r16,r16,1
 100b0a8:	8c400204 	addi	r17,r17,8
 100b0ac:	803ff21e 	bne	r16,zero,100b078 <_dtoa_r+0xd18>
 100b0b0:	4029883a 	mov	r20,r8
 100b0b4:	482b883a 	mov	r21,r9
 100b0b8:	003dca06 	br	100a7e4 <_dtoa_r+0x484>
 100b0bc:	d9000817 	ldw	r4,32(sp)
 100b0c0:	2005003a 	cmpeq	r2,r4,zero
 100b0c4:	1001f61e 	bne	r2,zero,100b8a0 <_dtoa_r+0x1540>
 100b0c8:	dc001117 	ldw	r16,68(sp)
 100b0cc:	dc801017 	ldw	r18,64(sp)
 100b0d0:	18c10cc4 	addi	r3,r3,1075
 100b0d4:	003f6106 	br	100ae5c <_dtoa_r+0xafc>
 100b0d8:	d8000b15 	stw	zero,44(sp)
 100b0dc:	d9802617 	ldw	r6,152(sp)
 100b0e0:	d8c00d17 	ldw	r3,52(sp)
 100b0e4:	30800044 	addi	r2,r6,1
 100b0e8:	18ad883a 	add	r22,r3,r2
 100b0ec:	b13fffc4 	addi	r4,r22,-1
 100b0f0:	d9000e15 	stw	r4,56(sp)
 100b0f4:	0581f60e 	bge	zero,r22,100b8d0 <_dtoa_r+0x1570>
 100b0f8:	dd800f15 	stw	r22,60(sp)
 100b0fc:	003f3006 	br	100adc0 <_dtoa_r+0xa60>
 100b100:	d8000b15 	stw	zero,44(sp)
 100b104:	d9002617 	ldw	r4,152(sp)
 100b108:	0101eb0e 	bge	zero,r4,100b8b8 <_dtoa_r+0x1558>
 100b10c:	202d883a 	mov	r22,r4
 100b110:	d9000e15 	stw	r4,56(sp)
 100b114:	d9000f15 	stw	r4,60(sp)
 100b118:	003f2906 	br	100adc0 <_dtoa_r+0xa60>
 100b11c:	01800044 	movi	r6,1
 100b120:	d9800b15 	stw	r6,44(sp)
 100b124:	003ff706 	br	100b104 <_dtoa_r+0xda4>
 100b128:	01000044 	movi	r4,1
 100b12c:	d9000b15 	stw	r4,44(sp)
 100b130:	003fea06 	br	100b0dc <_dtoa_r+0xd7c>
 100b134:	04000c0e 	bge	zero,r16,100b168 <_dtoa_r+0xe08>
 100b138:	d9400717 	ldw	r5,28(sp)
 100b13c:	d9001617 	ldw	r4,88(sp)
 100b140:	01800044 	movi	r6,1
 100b144:	100dad40 	call	100dad4 <__lshift>
 100b148:	1009883a 	mov	r4,r2
 100b14c:	900b883a 	mov	r5,r18
 100b150:	d8800715 	stw	r2,28(sp)
 100b154:	100d2ec0 	call	100d2ec <__mcmp>
 100b158:	0081e00e 	bge	zero,r2,100b8dc <_dtoa_r+0x157c>
 100b15c:	bdc00044 	addi	r23,r23,1
 100b160:	00800e84 	movi	r2,58
 100b164:	b881a226 	beq	r23,r2,100b7f0 <_dtoa_r+0x1490>
 100b168:	b7000044 	addi	fp,r22,1
 100b16c:	b5c00005 	stb	r23,0(r22)
 100b170:	003f7406 	br	100af44 <_dtoa_r+0xbe4>
 100b174:	00800e44 	movi	r2,57
 100b178:	b8819d26 	beq	r23,r2,100b7f0 <_dtoa_r+0x1490>
 100b17c:	053ffa0e 	bge	zero,r20,100b168 <_dtoa_r+0xe08>
 100b180:	8dc00c44 	addi	r23,r17,49
 100b184:	003ff806 	br	100b168 <_dtoa_r+0xe08>
 100b188:	d9001617 	ldw	r4,88(sp)
 100b18c:	a80b883a 	mov	r5,r21
 100b190:	04000044 	movi	r16,1
 100b194:	100d1900 	call	100d190 <_Bfree>
 100b198:	003edf06 	br	100ad18 <_dtoa_r+0x9b8>
 100b19c:	d9001617 	ldw	r4,88(sp)
 100b1a0:	980b883a 	mov	r5,r19
 100b1a4:	01800284 	movi	r6,10
 100b1a8:	000f883a 	mov	r7,zero
 100b1ac:	100de440 	call	100de44 <__multadd>
 100b1b0:	1027883a 	mov	r19,r2
 100b1b4:	d8800615 	stw	r2,24(sp)
 100b1b8:	003ebb06 	br	100aca8 <_dtoa_r+0x948>
 100b1bc:	d9801117 	ldw	r6,68(sp)
 100b1c0:	d8800d17 	ldw	r2,52(sp)
 100b1c4:	d8000915 	stw	zero,36(sp)
 100b1c8:	308dc83a 	sub	r6,r6,r2
 100b1cc:	0087c83a 	sub	r3,zero,r2
 100b1d0:	d9801115 	stw	r6,68(sp)
 100b1d4:	d8c01015 	stw	r3,64(sp)
 100b1d8:	003cfe06 	br	100a5d4 <_dtoa_r+0x274>
 100b1dc:	018dc83a 	sub	r6,zero,r6
 100b1e0:	d9801115 	stw	r6,68(sp)
 100b1e4:	d8000a15 	stw	zero,40(sp)
 100b1e8:	003cf306 	br	100a5b8 <_dtoa_r+0x258>
 100b1ec:	d9000d17 	ldw	r4,52(sp)
 100b1f0:	10054640 	call	1005464 <__floatsidf>
 100b1f4:	880b883a 	mov	r5,r17
 100b1f8:	8009883a 	mov	r4,r16
 100b1fc:	180f883a 	mov	r7,r3
 100b200:	100d883a 	mov	r6,r2
 100b204:	10052cc0 	call	10052cc <__nedf2>
 100b208:	103ce126 	beq	r2,zero,100a590 <_dtoa_r+0x230>
 100b20c:	d9800d17 	ldw	r6,52(sp)
 100b210:	31bfffc4 	addi	r6,r6,-1
 100b214:	d9800d15 	stw	r6,52(sp)
 100b218:	003cdd06 	br	100a590 <_dtoa_r+0x230>
 100b21c:	d9000717 	ldw	r4,28(sp)
 100b220:	900b883a 	mov	r5,r18
 100b224:	100d2ec0 	call	100d2ec <__mcmp>
 100b228:	103e8d0e 	bge	r2,zero,100ac60 <_dtoa_r+0x900>
 100b22c:	d9400717 	ldw	r5,28(sp)
 100b230:	d9001617 	ldw	r4,88(sp)
 100b234:	01800284 	movi	r6,10
 100b238:	000f883a 	mov	r7,zero
 100b23c:	100de440 	call	100de44 <__multadd>
 100b240:	d9800d17 	ldw	r6,52(sp)
 100b244:	d8800715 	stw	r2,28(sp)
 100b248:	31bfffc4 	addi	r6,r6,-1
 100b24c:	d9800d15 	stw	r6,52(sp)
 100b250:	b001a71e 	bne	r22,zero,100b8f0 <_dtoa_r+0x1590>
 100b254:	d8800e17 	ldw	r2,56(sp)
 100b258:	d8800f15 	stw	r2,60(sp)
 100b25c:	003e8006 	br	100ac60 <_dtoa_r+0x900>
 100b260:	90800417 	ldw	r2,16(r18)
 100b264:	1085883a 	add	r2,r2,r2
 100b268:	1085883a 	add	r2,r2,r2
 100b26c:	1485883a 	add	r2,r2,r18
 100b270:	11000417 	ldw	r4,16(r2)
 100b274:	100d1b80 	call	100d1b8 <__hi0bits>
 100b278:	00c00804 	movi	r3,32
 100b27c:	1887c83a 	sub	r3,r3,r2
 100b280:	003e5a06 	br	100abec <_dtoa_r+0x88c>
 100b284:	d9400717 	ldw	r5,28(sp)
 100b288:	d9801017 	ldw	r6,64(sp)
 100b28c:	d9001617 	ldw	r4,88(sp)
 100b290:	100df440 	call	100df44 <__pow5mult>
 100b294:	d8800715 	stw	r2,28(sp)
 100b298:	003e4306 	br	100aba8 <_dtoa_r+0x848>
 100b29c:	d9800f17 	ldw	r6,60(sp)
 100b2a0:	d8800d17 	ldw	r2,52(sp)
 100b2a4:	d9800315 	stw	r6,12(sp)
 100b2a8:	d8800415 	stw	r2,16(sp)
 100b2ac:	d8c00b17 	ldw	r3,44(sp)
 100b2b0:	1805003a 	cmpeq	r2,r3,zero
 100b2b4:	1000e21e 	bne	r2,zero,100b640 <_dtoa_r+0x12e0>
 100b2b8:	d9000317 	ldw	r4,12(sp)
 100b2bc:	0005883a 	mov	r2,zero
 100b2c0:	00cff834 	movhi	r3,16352
 100b2c4:	200c90fa 	slli	r6,r4,3
 100b2c8:	010040b4 	movhi	r4,258
 100b2cc:	213dcb04 	addi	r4,r4,-2260
 100b2d0:	180b883a 	mov	r5,r3
 100b2d4:	310d883a 	add	r6,r6,r4
 100b2d8:	327fff17 	ldw	r9,-4(r6)
 100b2dc:	323ffe17 	ldw	r8,-8(r6)
 100b2e0:	1009883a 	mov	r4,r2
 100b2e4:	480f883a 	mov	r7,r9
 100b2e8:	400d883a 	mov	r6,r8
 100b2ec:	1004fec0 	call	1004fec <__divdf3>
 100b2f0:	180b883a 	mov	r5,r3
 100b2f4:	b00d883a 	mov	r6,r22
 100b2f8:	b80f883a 	mov	r7,r23
 100b2fc:	1009883a 	mov	r4,r2
 100b300:	1004b340 	call	1004b34 <__subdf3>
 100b304:	a80b883a 	mov	r5,r21
 100b308:	a009883a 	mov	r4,r20
 100b30c:	d8c01915 	stw	r3,100(sp)
 100b310:	d8801815 	stw	r2,96(sp)
 100b314:	100555c0 	call	100555c <__fixdfsi>
 100b318:	1009883a 	mov	r4,r2
 100b31c:	1027883a 	mov	r19,r2
 100b320:	10054640 	call	1005464 <__floatsidf>
 100b324:	a80b883a 	mov	r5,r21
 100b328:	a009883a 	mov	r4,r20
 100b32c:	180f883a 	mov	r7,r3
 100b330:	100d883a 	mov	r6,r2
 100b334:	1004b340 	call	1004b34 <__subdf3>
 100b338:	d9801817 	ldw	r6,96(sp)
 100b33c:	1823883a 	mov	r17,r3
 100b340:	d8801415 	stw	r2,80(sp)
 100b344:	302d883a 	mov	r22,r6
 100b348:	d9800517 	ldw	r6,20(sp)
 100b34c:	9cc00c04 	addi	r19,r19,48
 100b350:	dc401515 	stw	r17,84(sp)
 100b354:	d8c01917 	ldw	r3,100(sp)
 100b358:	34c00005 	stb	r19,0(r6)
 100b35c:	d8800517 	ldw	r2,20(sp)
 100b360:	d9401917 	ldw	r5,100(sp)
 100b364:	d9801417 	ldw	r6,80(sp)
 100b368:	b009883a 	mov	r4,r22
 100b36c:	880f883a 	mov	r7,r17
 100b370:	182f883a 	mov	r23,r3
 100b374:	17000044 	addi	fp,r2,1
 100b378:	10053540 	call	1005354 <__gtdf2>
 100b37c:	00804e16 	blt	zero,r2,100b4b8 <_dtoa_r+0x1158>
 100b380:	d9801417 	ldw	r6,80(sp)
 100b384:	0005883a 	mov	r2,zero
 100b388:	00cffc34 	movhi	r3,16368
 100b38c:	180b883a 	mov	r5,r3
 100b390:	880f883a 	mov	r7,r17
 100b394:	1009883a 	mov	r4,r2
 100b398:	1004b340 	call	1004b34 <__subdf3>
 100b39c:	d9401917 	ldw	r5,100(sp)
 100b3a0:	180f883a 	mov	r7,r3
 100b3a4:	b009883a 	mov	r4,r22
 100b3a8:	100d883a 	mov	r6,r2
 100b3ac:	10053540 	call	1005354 <__gtdf2>
 100b3b0:	00bda216 	blt	zero,r2,100aa3c <_dtoa_r+0x6dc>
 100b3b4:	d8c00317 	ldw	r3,12(sp)
 100b3b8:	00800044 	movi	r2,1
 100b3bc:	10c01216 	blt	r2,r3,100b408 <_dtoa_r+0x10a8>
 100b3c0:	003d4506 	br	100a8d8 <_dtoa_r+0x578>
 100b3c4:	d9801417 	ldw	r6,80(sp)
 100b3c8:	0005883a 	mov	r2,zero
 100b3cc:	00cffc34 	movhi	r3,16368
 100b3d0:	180b883a 	mov	r5,r3
 100b3d4:	880f883a 	mov	r7,r17
 100b3d8:	1009883a 	mov	r4,r2
 100b3dc:	1004b340 	call	1004b34 <__subdf3>
 100b3e0:	d9c01b17 	ldw	r7,108(sp)
 100b3e4:	180b883a 	mov	r5,r3
 100b3e8:	1009883a 	mov	r4,r2
 100b3ec:	b00d883a 	mov	r6,r22
 100b3f0:	1012e100 	call	1012e10 <__ltdf2>
 100b3f4:	103d9116 	blt	r2,zero,100aa3c <_dtoa_r+0x6dc>
 100b3f8:	d9800517 	ldw	r6,20(sp)
 100b3fc:	d9000317 	ldw	r4,12(sp)
 100b400:	3105883a 	add	r2,r6,r4
 100b404:	e0bd3426 	beq	fp,r2,100a8d8 <_dtoa_r+0x578>
 100b408:	04500934 	movhi	r17,16420
 100b40c:	0021883a 	mov	r16,zero
 100b410:	b80b883a 	mov	r5,r23
 100b414:	b009883a 	mov	r4,r22
 100b418:	800d883a 	mov	r6,r16
 100b41c:	880f883a 	mov	r7,r17
 100b420:	1004c280 	call	1004c28 <__muldf3>
 100b424:	d9401517 	ldw	r5,84(sp)
 100b428:	d9001417 	ldw	r4,80(sp)
 100b42c:	880f883a 	mov	r7,r17
 100b430:	000d883a 	mov	r6,zero
 100b434:	d8801a15 	stw	r2,104(sp)
 100b438:	d8c01b15 	stw	r3,108(sp)
 100b43c:	1004c280 	call	1004c28 <__muldf3>
 100b440:	180b883a 	mov	r5,r3
 100b444:	1009883a 	mov	r4,r2
 100b448:	1823883a 	mov	r17,r3
 100b44c:	1021883a 	mov	r16,r2
 100b450:	100555c0 	call	100555c <__fixdfsi>
 100b454:	1009883a 	mov	r4,r2
 100b458:	102b883a 	mov	r21,r2
 100b45c:	10054640 	call	1005464 <__floatsidf>
 100b460:	880b883a 	mov	r5,r17
 100b464:	8009883a 	mov	r4,r16
 100b468:	180f883a 	mov	r7,r3
 100b46c:	100d883a 	mov	r6,r2
 100b470:	1004b340 	call	1004b34 <__subdf3>
 100b474:	1021883a 	mov	r16,r2
 100b478:	d9001b17 	ldw	r4,108(sp)
 100b47c:	1823883a 	mov	r17,r3
 100b480:	dc001415 	stw	r16,80(sp)
 100b484:	ad400c04 	addi	r21,r21,48
 100b488:	dc401515 	stw	r17,84(sp)
 100b48c:	d8801a17 	ldw	r2,104(sp)
 100b490:	e5400005 	stb	r21,0(fp)
 100b494:	202f883a 	mov	r23,r4
 100b498:	d9c01b17 	ldw	r7,108(sp)
 100b49c:	d9001417 	ldw	r4,80(sp)
 100b4a0:	880b883a 	mov	r5,r17
 100b4a4:	100d883a 	mov	r6,r2
 100b4a8:	102d883a 	mov	r22,r2
 100b4ac:	e7000044 	addi	fp,fp,1
 100b4b0:	1012e100 	call	1012e10 <__ltdf2>
 100b4b4:	103fc30e 	bge	r2,zero,100b3c4 <_dtoa_r+0x1064>
 100b4b8:	d9000417 	ldw	r4,16(sp)
 100b4bc:	d9000d15 	stw	r4,52(sp)
 100b4c0:	003d7106 	br	100aa88 <_dtoa_r+0x728>
 100b4c4:	d9801717 	ldw	r6,92(sp)
 100b4c8:	00800084 	movi	r2,2
 100b4cc:	11bde60e 	bge	r2,r6,100ac68 <_dtoa_r+0x908>
 100b4d0:	203cfb1e 	bne	r4,zero,100a8c0 <_dtoa_r+0x560>
 100b4d4:	d9001617 	ldw	r4,88(sp)
 100b4d8:	900b883a 	mov	r5,r18
 100b4dc:	01800144 	movi	r6,5
 100b4e0:	000f883a 	mov	r7,zero
 100b4e4:	100de440 	call	100de44 <__multadd>
 100b4e8:	d9000717 	ldw	r4,28(sp)
 100b4ec:	100b883a 	mov	r5,r2
 100b4f0:	1025883a 	mov	r18,r2
 100b4f4:	100d2ec0 	call	100d2ec <__mcmp>
 100b4f8:	00bcf10e 	bge	zero,r2,100a8c0 <_dtoa_r+0x560>
 100b4fc:	d8c00d17 	ldw	r3,52(sp)
 100b500:	d9000517 	ldw	r4,20(sp)
 100b504:	d8000615 	stw	zero,24(sp)
 100b508:	18c00044 	addi	r3,r3,1
 100b50c:	d8c00d15 	stw	r3,52(sp)
 100b510:	00800c44 	movi	r2,49
 100b514:	27000044 	addi	fp,r4,1
 100b518:	20800005 	stb	r2,0(r4)
 100b51c:	003e8906 	br	100af44 <_dtoa_r+0xbe4>
 100b520:	d8c00517 	ldw	r3,20(sp)
 100b524:	003bc206 	br	100a430 <_dtoa_r+0xd0>
 100b528:	018040b4 	movhi	r6,258
 100b52c:	31bdfd04 	addi	r6,r6,-2060
 100b530:	30c00917 	ldw	r3,36(r6)
 100b534:	30800817 	ldw	r2,32(r6)
 100b538:	d9001217 	ldw	r4,72(sp)
 100b53c:	d9401317 	ldw	r5,76(sp)
 100b540:	180f883a 	mov	r7,r3
 100b544:	100d883a 	mov	r6,r2
 100b548:	1004fec0 	call	1004fec <__divdf3>
 100b54c:	948003cc 	andi	r18,r18,15
 100b550:	058000c4 	movi	r22,3
 100b554:	1029883a 	mov	r20,r2
 100b558:	182b883a 	mov	r21,r3
 100b55c:	003c8906 	br	100a784 <_dtoa_r+0x424>
 100b560:	d9001017 	ldw	r4,64(sp)
 100b564:	d9800917 	ldw	r6,36(sp)
 100b568:	0025883a 	mov	r18,zero
 100b56c:	1105c83a 	sub	r2,r2,r4
 100b570:	2089883a 	add	r4,r4,r2
 100b574:	308d883a 	add	r6,r6,r2
 100b578:	d9001015 	stw	r4,64(sp)
 100b57c:	d9800915 	stw	r6,36(sp)
 100b580:	003e3206 	br	100ae4c <_dtoa_r+0xaec>
 100b584:	28800044 	addi	r2,r5,1
 100b588:	27000044 	addi	fp,r4,1
 100b58c:	20800005 	stb	r2,0(r4)
 100b590:	003e6c06 	br	100af44 <_dtoa_r+0xbe4>
 100b594:	d8800f17 	ldw	r2,60(sp)
 100b598:	00bce016 	blt	zero,r2,100a91c <_dtoa_r+0x5bc>
 100b59c:	d9800f17 	ldw	r6,60(sp)
 100b5a0:	303cc51e 	bne	r6,zero,100a8b8 <_dtoa_r+0x558>
 100b5a4:	0005883a 	mov	r2,zero
 100b5a8:	00d00534 	movhi	r3,16404
 100b5ac:	980b883a 	mov	r5,r19
 100b5b0:	180f883a 	mov	r7,r3
 100b5b4:	9009883a 	mov	r4,r18
 100b5b8:	100d883a 	mov	r6,r2
 100b5bc:	1004c280 	call	1004c28 <__muldf3>
 100b5c0:	180b883a 	mov	r5,r3
 100b5c4:	a80f883a 	mov	r7,r21
 100b5c8:	1009883a 	mov	r4,r2
 100b5cc:	a00d883a 	mov	r6,r20
 100b5d0:	10053dc0 	call	10053dc <__gedf2>
 100b5d4:	103cb80e 	bge	r2,zero,100a8b8 <_dtoa_r+0x558>
 100b5d8:	0027883a 	mov	r19,zero
 100b5dc:	0025883a 	mov	r18,zero
 100b5e0:	003fc606 	br	100b4fc <_dtoa_r+0x119c>
 100b5e4:	99400117 	ldw	r5,4(r19)
 100b5e8:	d9001617 	ldw	r4,88(sp)
 100b5ec:	100d7100 	call	100d710 <_Balloc>
 100b5f0:	99800417 	ldw	r6,16(r19)
 100b5f4:	11000304 	addi	r4,r2,12
 100b5f8:	99400304 	addi	r5,r19,12
 100b5fc:	318d883a 	add	r6,r6,r6
 100b600:	318d883a 	add	r6,r6,r6
 100b604:	31800204 	addi	r6,r6,8
 100b608:	1023883a 	mov	r17,r2
 100b60c:	100cf780 	call	100cf78 <memcpy>
 100b610:	d9001617 	ldw	r4,88(sp)
 100b614:	880b883a 	mov	r5,r17
 100b618:	01800044 	movi	r6,1
 100b61c:	100dad40 	call	100dad4 <__lshift>
 100b620:	100b883a 	mov	r5,r2
 100b624:	003d9c06 	br	100ac98 <_dtoa_r+0x938>
 100b628:	00800e44 	movi	r2,57
 100b62c:	b8807026 	beq	r23,r2,100b7f0 <_dtoa_r+0x1490>
 100b630:	b8800044 	addi	r2,r23,1
 100b634:	b7000044 	addi	fp,r22,1
 100b638:	b0800005 	stb	r2,0(r22)
 100b63c:	003e4106 	br	100af44 <_dtoa_r+0xbe4>
 100b640:	d8800317 	ldw	r2,12(sp)
 100b644:	018040b4 	movhi	r6,258
 100b648:	31bdcb04 	addi	r6,r6,-2260
 100b64c:	b009883a 	mov	r4,r22
 100b650:	100e90fa 	slli	r7,r2,3
 100b654:	b80b883a 	mov	r5,r23
 100b658:	398f883a 	add	r7,r7,r6
 100b65c:	38bffe17 	ldw	r2,-8(r7)
 100b660:	d9800517 	ldw	r6,20(sp)
 100b664:	38ffff17 	ldw	r3,-4(r7)
 100b668:	37000044 	addi	fp,r6,1
 100b66c:	180f883a 	mov	r7,r3
 100b670:	100d883a 	mov	r6,r2
 100b674:	1004c280 	call	1004c28 <__muldf3>
 100b678:	a80b883a 	mov	r5,r21
 100b67c:	a009883a 	mov	r4,r20
 100b680:	182f883a 	mov	r23,r3
 100b684:	102d883a 	mov	r22,r2
 100b688:	100555c0 	call	100555c <__fixdfsi>
 100b68c:	1009883a 	mov	r4,r2
 100b690:	1027883a 	mov	r19,r2
 100b694:	10054640 	call	1005464 <__floatsidf>
 100b698:	a80b883a 	mov	r5,r21
 100b69c:	a009883a 	mov	r4,r20
 100b6a0:	180f883a 	mov	r7,r3
 100b6a4:	100d883a 	mov	r6,r2
 100b6a8:	1004b340 	call	1004b34 <__subdf3>
 100b6ac:	180b883a 	mov	r5,r3
 100b6b0:	d8c00517 	ldw	r3,20(sp)
 100b6b4:	9cc00c04 	addi	r19,r19,48
 100b6b8:	1009883a 	mov	r4,r2
 100b6bc:	1cc00005 	stb	r19,0(r3)
 100b6c0:	2021883a 	mov	r16,r4
 100b6c4:	d9000317 	ldw	r4,12(sp)
 100b6c8:	00800044 	movi	r2,1
 100b6cc:	2823883a 	mov	r17,r5
 100b6d0:	20802226 	beq	r4,r2,100b75c <_dtoa_r+0x13fc>
 100b6d4:	1029883a 	mov	r20,r2
 100b6d8:	0005883a 	mov	r2,zero
 100b6dc:	00d00934 	movhi	r3,16420
 100b6e0:	180f883a 	mov	r7,r3
 100b6e4:	100d883a 	mov	r6,r2
 100b6e8:	880b883a 	mov	r5,r17
 100b6ec:	8009883a 	mov	r4,r16
 100b6f0:	1004c280 	call	1004c28 <__muldf3>
 100b6f4:	180b883a 	mov	r5,r3
 100b6f8:	1009883a 	mov	r4,r2
 100b6fc:	1823883a 	mov	r17,r3
 100b700:	1021883a 	mov	r16,r2
 100b704:	100555c0 	call	100555c <__fixdfsi>
 100b708:	1009883a 	mov	r4,r2
 100b70c:	102b883a 	mov	r21,r2
 100b710:	10054640 	call	1005464 <__floatsidf>
 100b714:	880b883a 	mov	r5,r17
 100b718:	8009883a 	mov	r4,r16
 100b71c:	180f883a 	mov	r7,r3
 100b720:	100d883a 	mov	r6,r2
 100b724:	1004b340 	call	1004b34 <__subdf3>
 100b728:	180b883a 	mov	r5,r3
 100b72c:	d8c00517 	ldw	r3,20(sp)
 100b730:	1009883a 	mov	r4,r2
 100b734:	ad400c04 	addi	r21,r21,48
 100b738:	1d05883a 	add	r2,r3,r20
 100b73c:	15400005 	stb	r21,0(r2)
 100b740:	2021883a 	mov	r16,r4
 100b744:	d9000317 	ldw	r4,12(sp)
 100b748:	a5000044 	addi	r20,r20,1
 100b74c:	2823883a 	mov	r17,r5
 100b750:	a13fe11e 	bne	r20,r4,100b6d8 <_dtoa_r+0x1378>
 100b754:	e505883a 	add	r2,fp,r20
 100b758:	173fffc4 	addi	fp,r2,-1
 100b75c:	0025883a 	mov	r18,zero
 100b760:	04cff834 	movhi	r19,16352
 100b764:	b009883a 	mov	r4,r22
 100b768:	b80b883a 	mov	r5,r23
 100b76c:	900d883a 	mov	r6,r18
 100b770:	980f883a 	mov	r7,r19
 100b774:	1004bb40 	call	1004bb4 <__adddf3>
 100b778:	180b883a 	mov	r5,r3
 100b77c:	1009883a 	mov	r4,r2
 100b780:	800d883a 	mov	r6,r16
 100b784:	880f883a 	mov	r7,r17
 100b788:	1012e100 	call	1012e10 <__ltdf2>
 100b78c:	103cab16 	blt	r2,zero,100aa3c <_dtoa_r+0x6dc>
 100b790:	0009883a 	mov	r4,zero
 100b794:	980b883a 	mov	r5,r19
 100b798:	b80f883a 	mov	r7,r23
 100b79c:	b00d883a 	mov	r6,r22
 100b7a0:	1004b340 	call	1004b34 <__subdf3>
 100b7a4:	180b883a 	mov	r5,r3
 100b7a8:	880f883a 	mov	r7,r17
 100b7ac:	1009883a 	mov	r4,r2
 100b7b0:	800d883a 	mov	r6,r16
 100b7b4:	10053540 	call	1005354 <__gtdf2>
 100b7b8:	00bc470e 	bge	zero,r2,100a8d8 <_dtoa_r+0x578>
 100b7bc:	00c00c04 	movi	r3,48
 100b7c0:	e73fffc4 	addi	fp,fp,-1
 100b7c4:	e0800007 	ldb	r2,0(fp)
 100b7c8:	10fffd26 	beq	r2,r3,100b7c0 <_dtoa_r+0x1460>
 100b7cc:	d9800417 	ldw	r6,16(sp)
 100b7d0:	e7000044 	addi	fp,fp,1
 100b7d4:	d9800d15 	stw	r6,52(sp)
 100b7d8:	003cab06 	br	100aa88 <_dtoa_r+0x728>
 100b7dc:	d8c00f17 	ldw	r3,60(sp)
 100b7e0:	d9001117 	ldw	r4,68(sp)
 100b7e4:	20e1c83a 	sub	r16,r4,r3
 100b7e8:	0007883a 	mov	r3,zero
 100b7ec:	003d9b06 	br	100ae5c <_dtoa_r+0xafc>
 100b7f0:	00800e44 	movi	r2,57
 100b7f4:	b0800005 	stb	r2,0(r22)
 100b7f8:	b5800044 	addi	r22,r22,1
 100b7fc:	003dc106 	br	100af04 <_dtoa_r+0xba4>
 100b800:	05800084 	movi	r22,2
 100b804:	003bf706 	br	100a7e4 <_dtoa_r+0x484>
 100b808:	d9000f17 	ldw	r4,60(sp)
 100b80c:	013c000e 	bge	zero,r4,100a810 <_dtoa_r+0x4b0>
 100b810:	d9800e17 	ldw	r6,56(sp)
 100b814:	01bc300e 	bge	zero,r6,100a8d8 <_dtoa_r+0x578>
 100b818:	0005883a 	mov	r2,zero
 100b81c:	00d00934 	movhi	r3,16420
 100b820:	a80b883a 	mov	r5,r21
 100b824:	180f883a 	mov	r7,r3
 100b828:	a009883a 	mov	r4,r20
 100b82c:	100d883a 	mov	r6,r2
 100b830:	1004c280 	call	1004c28 <__muldf3>
 100b834:	b1000044 	addi	r4,r22,1
 100b838:	1021883a 	mov	r16,r2
 100b83c:	1823883a 	mov	r17,r3
 100b840:	10054640 	call	1005464 <__floatsidf>
 100b844:	880b883a 	mov	r5,r17
 100b848:	8009883a 	mov	r4,r16
 100b84c:	180f883a 	mov	r7,r3
 100b850:	100d883a 	mov	r6,r2
 100b854:	1004c280 	call	1004c28 <__muldf3>
 100b858:	0011883a 	mov	r8,zero
 100b85c:	02500734 	movhi	r9,16412
 100b860:	180b883a 	mov	r5,r3
 100b864:	480f883a 	mov	r7,r9
 100b868:	1009883a 	mov	r4,r2
 100b86c:	400d883a 	mov	r6,r8
 100b870:	1004bb40 	call	1004bb4 <__adddf3>
 100b874:	102d883a 	mov	r22,r2
 100b878:	00bf3034 	movhi	r2,64704
 100b87c:	10ef883a 	add	r23,r2,r3
 100b880:	d8800d17 	ldw	r2,52(sp)
 100b884:	d8c00e17 	ldw	r3,56(sp)
 100b888:	8029883a 	mov	r20,r16
 100b88c:	10bfffc4 	addi	r2,r2,-1
 100b890:	882b883a 	mov	r21,r17
 100b894:	d8800415 	stw	r2,16(sp)
 100b898:	d8c00315 	stw	r3,12(sp)
 100b89c:	003e8306 	br	100b2ac <_dtoa_r+0xf4c>
 100b8a0:	d8800117 	ldw	r2,4(sp)
 100b8a4:	dc001117 	ldw	r16,68(sp)
 100b8a8:	dc801017 	ldw	r18,64(sp)
 100b8ac:	00c00d84 	movi	r3,54
 100b8b0:	1887c83a 	sub	r3,r3,r2
 100b8b4:	003d6906 	br	100ae5c <_dtoa_r+0xafc>
 100b8b8:	01800044 	movi	r6,1
 100b8bc:	3021883a 	mov	r16,r6
 100b8c0:	d9800f15 	stw	r6,60(sp)
 100b8c4:	d9802615 	stw	r6,152(sp)
 100b8c8:	d9800e15 	stw	r6,56(sp)
 100b8cc:	003b9306 	br	100a71c <_dtoa_r+0x3bc>
 100b8d0:	b021883a 	mov	r16,r22
 100b8d4:	dd800f15 	stw	r22,60(sp)
 100b8d8:	003b9006 	br	100a71c <_dtoa_r+0x3bc>
 100b8dc:	103e221e 	bne	r2,zero,100b168 <_dtoa_r+0xe08>
 100b8e0:	b880004c 	andi	r2,r23,1
 100b8e4:	1005003a 	cmpeq	r2,r2,zero
 100b8e8:	103e1f1e 	bne	r2,zero,100b168 <_dtoa_r+0xe08>
 100b8ec:	003e1b06 	br	100b15c <_dtoa_r+0xdfc>
 100b8f0:	d9001617 	ldw	r4,88(sp)
 100b8f4:	980b883a 	mov	r5,r19
 100b8f8:	01800284 	movi	r6,10
 100b8fc:	000f883a 	mov	r7,zero
 100b900:	100de440 	call	100de44 <__multadd>
 100b904:	d8c00e17 	ldw	r3,56(sp)
 100b908:	1027883a 	mov	r19,r2
 100b90c:	d8c00f15 	stw	r3,60(sp)
 100b910:	003cd306 	br	100ac60 <_dtoa_r+0x900>

0100b914 <_fflush_r>:
 100b914:	defffb04 	addi	sp,sp,-20
 100b918:	dcc00315 	stw	r19,12(sp)
 100b91c:	dc800215 	stw	r18,8(sp)
 100b920:	dfc00415 	stw	ra,16(sp)
 100b924:	dc400115 	stw	r17,4(sp)
 100b928:	dc000015 	stw	r16,0(sp)
 100b92c:	2027883a 	mov	r19,r4
 100b930:	2825883a 	mov	r18,r5
 100b934:	20000226 	beq	r4,zero,100b940 <_fflush_r+0x2c>
 100b938:	20800e17 	ldw	r2,56(r4)
 100b93c:	10005626 	beq	r2,zero,100ba98 <_fflush_r+0x184>
 100b940:	9100030b 	ldhu	r4,12(r18)
 100b944:	20ffffcc 	andi	r3,r4,65535
 100b948:	18e0001c 	xori	r3,r3,32768
 100b94c:	18e00004 	addi	r3,r3,-32768
 100b950:	1880020c 	andi	r2,r3,8
 100b954:	1000261e 	bne	r2,zero,100b9f0 <_fflush_r+0xdc>
 100b958:	90c00117 	ldw	r3,4(r18)
 100b95c:	20820014 	ori	r2,r4,2048
 100b960:	9080030d 	sth	r2,12(r18)
 100b964:	1009883a 	mov	r4,r2
 100b968:	00c0400e 	bge	zero,r3,100ba6c <_fflush_r+0x158>
 100b96c:	92000a17 	ldw	r8,40(r18)
 100b970:	40004026 	beq	r8,zero,100ba74 <_fflush_r+0x160>
 100b974:	2084000c 	andi	r2,r4,4096
 100b978:	10005326 	beq	r2,zero,100bac8 <_fflush_r+0x1b4>
 100b97c:	94001417 	ldw	r16,80(r18)
 100b980:	9080030b 	ldhu	r2,12(r18)
 100b984:	1080010c 	andi	r2,r2,4
 100b988:	1000481e 	bne	r2,zero,100baac <_fflush_r+0x198>
 100b98c:	91400717 	ldw	r5,28(r18)
 100b990:	9809883a 	mov	r4,r19
 100b994:	800d883a 	mov	r6,r16
 100b998:	000f883a 	mov	r7,zero
 100b99c:	403ee83a 	callr	r8
 100b9a0:	8080261e 	bne	r16,r2,100ba3c <_fflush_r+0x128>
 100b9a4:	9080030b 	ldhu	r2,12(r18)
 100b9a8:	91000417 	ldw	r4,16(r18)
 100b9ac:	90000115 	stw	zero,4(r18)
 100b9b0:	10bdffcc 	andi	r2,r2,63487
 100b9b4:	10ffffcc 	andi	r3,r2,65535
 100b9b8:	18c4000c 	andi	r3,r3,4096
 100b9bc:	9080030d 	sth	r2,12(r18)
 100b9c0:	91000015 	stw	r4,0(r18)
 100b9c4:	18002b26 	beq	r3,zero,100ba74 <_fflush_r+0x160>
 100b9c8:	0007883a 	mov	r3,zero
 100b9cc:	1805883a 	mov	r2,r3
 100b9d0:	94001415 	stw	r16,80(r18)
 100b9d4:	dfc00417 	ldw	ra,16(sp)
 100b9d8:	dcc00317 	ldw	r19,12(sp)
 100b9dc:	dc800217 	ldw	r18,8(sp)
 100b9e0:	dc400117 	ldw	r17,4(sp)
 100b9e4:	dc000017 	ldw	r16,0(sp)
 100b9e8:	dec00504 	addi	sp,sp,20
 100b9ec:	f800283a 	ret
 100b9f0:	94400417 	ldw	r17,16(r18)
 100b9f4:	88001f26 	beq	r17,zero,100ba74 <_fflush_r+0x160>
 100b9f8:	90800017 	ldw	r2,0(r18)
 100b9fc:	18c000cc 	andi	r3,r3,3
 100ba00:	94400015 	stw	r17,0(r18)
 100ba04:	1461c83a 	sub	r16,r2,r17
 100ba08:	18002526 	beq	r3,zero,100baa0 <_fflush_r+0x18c>
 100ba0c:	0005883a 	mov	r2,zero
 100ba10:	90800215 	stw	r2,8(r18)
 100ba14:	0400170e 	bge	zero,r16,100ba74 <_fflush_r+0x160>
 100ba18:	90c00917 	ldw	r3,36(r18)
 100ba1c:	91400717 	ldw	r5,28(r18)
 100ba20:	880d883a 	mov	r6,r17
 100ba24:	800f883a 	mov	r7,r16
 100ba28:	9809883a 	mov	r4,r19
 100ba2c:	183ee83a 	callr	r3
 100ba30:	88a3883a 	add	r17,r17,r2
 100ba34:	80a1c83a 	sub	r16,r16,r2
 100ba38:	00bff616 	blt	zero,r2,100ba14 <_fflush_r+0x100>
 100ba3c:	9080030b 	ldhu	r2,12(r18)
 100ba40:	00ffffc4 	movi	r3,-1
 100ba44:	10801014 	ori	r2,r2,64
 100ba48:	9080030d 	sth	r2,12(r18)
 100ba4c:	1805883a 	mov	r2,r3
 100ba50:	dfc00417 	ldw	ra,16(sp)
 100ba54:	dcc00317 	ldw	r19,12(sp)
 100ba58:	dc800217 	ldw	r18,8(sp)
 100ba5c:	dc400117 	ldw	r17,4(sp)
 100ba60:	dc000017 	ldw	r16,0(sp)
 100ba64:	dec00504 	addi	sp,sp,20
 100ba68:	f800283a 	ret
 100ba6c:	90800f17 	ldw	r2,60(r18)
 100ba70:	00bfbe16 	blt	zero,r2,100b96c <_fflush_r+0x58>
 100ba74:	0007883a 	mov	r3,zero
 100ba78:	1805883a 	mov	r2,r3
 100ba7c:	dfc00417 	ldw	ra,16(sp)
 100ba80:	dcc00317 	ldw	r19,12(sp)
 100ba84:	dc800217 	ldw	r18,8(sp)
 100ba88:	dc400117 	ldw	r17,4(sp)
 100ba8c:	dc000017 	ldw	r16,0(sp)
 100ba90:	dec00504 	addi	sp,sp,20
 100ba94:	f800283a 	ret
 100ba98:	100bbac0 	call	100bbac <__sinit>
 100ba9c:	003fa806 	br	100b940 <_fflush_r+0x2c>
 100baa0:	90800517 	ldw	r2,20(r18)
 100baa4:	90800215 	stw	r2,8(r18)
 100baa8:	003fda06 	br	100ba14 <_fflush_r+0x100>
 100baac:	90800117 	ldw	r2,4(r18)
 100bab0:	90c00c17 	ldw	r3,48(r18)
 100bab4:	80a1c83a 	sub	r16,r16,r2
 100bab8:	183fb426 	beq	r3,zero,100b98c <_fflush_r+0x78>
 100babc:	90800f17 	ldw	r2,60(r18)
 100bac0:	80a1c83a 	sub	r16,r16,r2
 100bac4:	003fb106 	br	100b98c <_fflush_r+0x78>
 100bac8:	91400717 	ldw	r5,28(r18)
 100bacc:	9809883a 	mov	r4,r19
 100bad0:	000d883a 	mov	r6,zero
 100bad4:	01c00044 	movi	r7,1
 100bad8:	403ee83a 	callr	r8
 100badc:	1021883a 	mov	r16,r2
 100bae0:	00bfffc4 	movi	r2,-1
 100bae4:	80800226 	beq	r16,r2,100baf0 <_fflush_r+0x1dc>
 100bae8:	92000a17 	ldw	r8,40(r18)
 100baec:	003fa406 	br	100b980 <_fflush_r+0x6c>
 100baf0:	98c00017 	ldw	r3,0(r19)
 100baf4:	00800744 	movi	r2,29
 100baf8:	18bfde26 	beq	r3,r2,100ba74 <_fflush_r+0x160>
 100bafc:	9080030b 	ldhu	r2,12(r18)
 100bb00:	8007883a 	mov	r3,r16
 100bb04:	10801014 	ori	r2,r2,64
 100bb08:	9080030d 	sth	r2,12(r18)
 100bb0c:	003fcf06 	br	100ba4c <_fflush_r+0x138>

0100bb10 <fflush>:
 100bb10:	01404074 	movhi	r5,257
 100bb14:	296e4504 	addi	r5,r5,-18156
 100bb18:	2007883a 	mov	r3,r4
 100bb1c:	20000526 	beq	r4,zero,100bb34 <fflush+0x24>
 100bb20:	008040b4 	movhi	r2,258
 100bb24:	1086c504 	addi	r2,r2,6932
 100bb28:	11000017 	ldw	r4,0(r2)
 100bb2c:	180b883a 	mov	r5,r3
 100bb30:	100b9141 	jmpi	100b914 <_fflush_r>
 100bb34:	008040b4 	movhi	r2,258
 100bb38:	1086c604 	addi	r2,r2,6936
 100bb3c:	11000017 	ldw	r4,0(r2)
 100bb40:	100c91c1 	jmpi	100c91c <_fwalk_reent>

0100bb44 <std>:
 100bb44:	00804074 	movhi	r2,257
 100bb48:	10baa404 	addi	r2,r2,-5488
 100bb4c:	20800b15 	stw	r2,44(r4)
 100bb50:	00804074 	movhi	r2,257
 100bb54:	10badf04 	addi	r2,r2,-5252
 100bb58:	20800815 	stw	r2,32(r4)
 100bb5c:	00c04074 	movhi	r3,257
 100bb60:	18fac004 	addi	r3,r3,-5376
 100bb64:	00804074 	movhi	r2,257
 100bb68:	10baa604 	addi	r2,r2,-5480
 100bb6c:	2140030d 	sth	r5,12(r4)
 100bb70:	2180038d 	sth	r6,14(r4)
 100bb74:	20c00915 	stw	r3,36(r4)
 100bb78:	20800a15 	stw	r2,40(r4)
 100bb7c:	20000015 	stw	zero,0(r4)
 100bb80:	20000115 	stw	zero,4(r4)
 100bb84:	20000215 	stw	zero,8(r4)
 100bb88:	20000415 	stw	zero,16(r4)
 100bb8c:	20000515 	stw	zero,20(r4)
 100bb90:	20000615 	stw	zero,24(r4)
 100bb94:	21000715 	stw	r4,28(r4)
 100bb98:	f800283a 	ret

0100bb9c <__sfp_lock_acquire>:
 100bb9c:	f800283a 	ret

0100bba0 <__sfp_lock_release>:
 100bba0:	f800283a 	ret

0100bba4 <__sinit_lock_acquire>:
 100bba4:	f800283a 	ret

0100bba8 <__sinit_lock_release>:
 100bba8:	f800283a 	ret

0100bbac <__sinit>:
 100bbac:	20800e17 	ldw	r2,56(r4)
 100bbb0:	defffd04 	addi	sp,sp,-12
 100bbb4:	dc400115 	stw	r17,4(sp)
 100bbb8:	dc000015 	stw	r16,0(sp)
 100bbbc:	dfc00215 	stw	ra,8(sp)
 100bbc0:	04400044 	movi	r17,1
 100bbc4:	01400104 	movi	r5,4
 100bbc8:	000d883a 	mov	r6,zero
 100bbcc:	2021883a 	mov	r16,r4
 100bbd0:	2200bb04 	addi	r8,r4,748
 100bbd4:	200f883a 	mov	r7,r4
 100bbd8:	10000526 	beq	r2,zero,100bbf0 <__sinit+0x44>
 100bbdc:	dfc00217 	ldw	ra,8(sp)
 100bbe0:	dc400117 	ldw	r17,4(sp)
 100bbe4:	dc000017 	ldw	r16,0(sp)
 100bbe8:	dec00304 	addi	sp,sp,12
 100bbec:	f800283a 	ret
 100bbf0:	21000117 	ldw	r4,4(r4)
 100bbf4:	00804074 	movhi	r2,257
 100bbf8:	10af2404 	addi	r2,r2,-17264
 100bbfc:	00c000c4 	movi	r3,3
 100bc00:	80800f15 	stw	r2,60(r16)
 100bc04:	80c0b915 	stw	r3,740(r16)
 100bc08:	8200ba15 	stw	r8,744(r16)
 100bc0c:	84400e15 	stw	r17,56(r16)
 100bc10:	8000b815 	stw	zero,736(r16)
 100bc14:	100bb440 	call	100bb44 <std>
 100bc18:	81000217 	ldw	r4,8(r16)
 100bc1c:	880d883a 	mov	r6,r17
 100bc20:	800f883a 	mov	r7,r16
 100bc24:	01400284 	movi	r5,10
 100bc28:	100bb440 	call	100bb44 <std>
 100bc2c:	81000317 	ldw	r4,12(r16)
 100bc30:	800f883a 	mov	r7,r16
 100bc34:	01400484 	movi	r5,18
 100bc38:	01800084 	movi	r6,2
 100bc3c:	dfc00217 	ldw	ra,8(sp)
 100bc40:	dc400117 	ldw	r17,4(sp)
 100bc44:	dc000017 	ldw	r16,0(sp)
 100bc48:	dec00304 	addi	sp,sp,12
 100bc4c:	100bb441 	jmpi	100bb44 <std>

0100bc50 <__fp_lock>:
 100bc50:	0005883a 	mov	r2,zero
 100bc54:	f800283a 	ret

0100bc58 <__fp_unlock>:
 100bc58:	0005883a 	mov	r2,zero
 100bc5c:	f800283a 	ret

0100bc60 <__fp_unlock_all>:
 100bc60:	008040b4 	movhi	r2,258
 100bc64:	1086c504 	addi	r2,r2,6932
 100bc68:	11000017 	ldw	r4,0(r2)
 100bc6c:	01404074 	movhi	r5,257
 100bc70:	296f1604 	addi	r5,r5,-17320
 100bc74:	100c9e41 	jmpi	100c9e4 <_fwalk>

0100bc78 <__fp_lock_all>:
 100bc78:	008040b4 	movhi	r2,258
 100bc7c:	1086c504 	addi	r2,r2,6932
 100bc80:	11000017 	ldw	r4,0(r2)
 100bc84:	01404074 	movhi	r5,257
 100bc88:	296f1404 	addi	r5,r5,-17328
 100bc8c:	100c9e41 	jmpi	100c9e4 <_fwalk>

0100bc90 <_cleanup_r>:
 100bc90:	01404074 	movhi	r5,257
 100bc94:	2944c204 	addi	r5,r5,4872
 100bc98:	100c9e41 	jmpi	100c9e4 <_fwalk>

0100bc9c <_cleanup>:
 100bc9c:	008040b4 	movhi	r2,258
 100bca0:	1086c604 	addi	r2,r2,6936
 100bca4:	11000017 	ldw	r4,0(r2)
 100bca8:	100bc901 	jmpi	100bc90 <_cleanup_r>

0100bcac <__sfmoreglue>:
 100bcac:	defffc04 	addi	sp,sp,-16
 100bcb0:	dc400115 	stw	r17,4(sp)
 100bcb4:	2c401724 	muli	r17,r5,92
 100bcb8:	dc800215 	stw	r18,8(sp)
 100bcbc:	2825883a 	mov	r18,r5
 100bcc0:	89400304 	addi	r5,r17,12
 100bcc4:	dc000015 	stw	r16,0(sp)
 100bcc8:	dfc00315 	stw	ra,12(sp)
 100bccc:	1005dd40 	call	1005dd4 <_malloc_r>
 100bcd0:	0021883a 	mov	r16,zero
 100bcd4:	880d883a 	mov	r6,r17
 100bcd8:	000b883a 	mov	r5,zero
 100bcdc:	10000626 	beq	r2,zero,100bcf8 <__sfmoreglue+0x4c>
 100bce0:	11000304 	addi	r4,r2,12
 100bce4:	14800115 	stw	r18,4(r2)
 100bce8:	10000015 	stw	zero,0(r2)
 100bcec:	11000215 	stw	r4,8(r2)
 100bcf0:	1021883a 	mov	r16,r2
 100bcf4:	100d0f80 	call	100d0f8 <memset>
 100bcf8:	8005883a 	mov	r2,r16
 100bcfc:	dfc00317 	ldw	ra,12(sp)
 100bd00:	dc800217 	ldw	r18,8(sp)
 100bd04:	dc400117 	ldw	r17,4(sp)
 100bd08:	dc000017 	ldw	r16,0(sp)
 100bd0c:	dec00404 	addi	sp,sp,16
 100bd10:	f800283a 	ret

0100bd14 <__sfp>:
 100bd14:	defffd04 	addi	sp,sp,-12
 100bd18:	008040b4 	movhi	r2,258
 100bd1c:	1086c604 	addi	r2,r2,6936
 100bd20:	dc000015 	stw	r16,0(sp)
 100bd24:	14000017 	ldw	r16,0(r2)
 100bd28:	dc400115 	stw	r17,4(sp)
 100bd2c:	dfc00215 	stw	ra,8(sp)
 100bd30:	80800e17 	ldw	r2,56(r16)
 100bd34:	2023883a 	mov	r17,r4
 100bd38:	10002626 	beq	r2,zero,100bdd4 <__sfp+0xc0>
 100bd3c:	8400b804 	addi	r16,r16,736
 100bd40:	80800117 	ldw	r2,4(r16)
 100bd44:	81000217 	ldw	r4,8(r16)
 100bd48:	10ffffc4 	addi	r3,r2,-1
 100bd4c:	18000916 	blt	r3,zero,100bd74 <__sfp+0x60>
 100bd50:	2080030f 	ldh	r2,12(r4)
 100bd54:	10000b26 	beq	r2,zero,100bd84 <__sfp+0x70>
 100bd58:	017fffc4 	movi	r5,-1
 100bd5c:	00000206 	br	100bd68 <__sfp+0x54>
 100bd60:	2080030f 	ldh	r2,12(r4)
 100bd64:	10000726 	beq	r2,zero,100bd84 <__sfp+0x70>
 100bd68:	18ffffc4 	addi	r3,r3,-1
 100bd6c:	21001704 	addi	r4,r4,92
 100bd70:	197ffb1e 	bne	r3,r5,100bd60 <__sfp+0x4c>
 100bd74:	80800017 	ldw	r2,0(r16)
 100bd78:	10001926 	beq	r2,zero,100bde0 <__sfp+0xcc>
 100bd7c:	1021883a 	mov	r16,r2
 100bd80:	003fef06 	br	100bd40 <__sfp+0x2c>
 100bd84:	00bfffc4 	movi	r2,-1
 100bd88:	00c00044 	movi	r3,1
 100bd8c:	2080038d 	sth	r2,14(r4)
 100bd90:	20c0030d 	sth	r3,12(r4)
 100bd94:	20000015 	stw	zero,0(r4)
 100bd98:	20000215 	stw	zero,8(r4)
 100bd9c:	20000115 	stw	zero,4(r4)
 100bda0:	20000415 	stw	zero,16(r4)
 100bda4:	20000515 	stw	zero,20(r4)
 100bda8:	20000615 	stw	zero,24(r4)
 100bdac:	20000c15 	stw	zero,48(r4)
 100bdb0:	20000d15 	stw	zero,52(r4)
 100bdb4:	20001115 	stw	zero,68(r4)
 100bdb8:	20001215 	stw	zero,72(r4)
 100bdbc:	2005883a 	mov	r2,r4
 100bdc0:	dfc00217 	ldw	ra,8(sp)
 100bdc4:	dc400117 	ldw	r17,4(sp)
 100bdc8:	dc000017 	ldw	r16,0(sp)
 100bdcc:	dec00304 	addi	sp,sp,12
 100bdd0:	f800283a 	ret
 100bdd4:	8009883a 	mov	r4,r16
 100bdd8:	100bbac0 	call	100bbac <__sinit>
 100bddc:	003fd706 	br	100bd3c <__sfp+0x28>
 100bde0:	8809883a 	mov	r4,r17
 100bde4:	01400104 	movi	r5,4
 100bde8:	100bcac0 	call	100bcac <__sfmoreglue>
 100bdec:	80800015 	stw	r2,0(r16)
 100bdf0:	103fe21e 	bne	r2,zero,100bd7c <__sfp+0x68>
 100bdf4:	00800304 	movi	r2,12
 100bdf8:	0009883a 	mov	r4,zero
 100bdfc:	88800015 	stw	r2,0(r17)
 100be00:	003fee06 	br	100bdbc <__sfp+0xa8>

0100be04 <_fread_r>:
 100be04:	defff504 	addi	sp,sp,-44
 100be08:	ddc00815 	stw	r23,32(sp)
 100be0c:	39af383a 	mul	r23,r7,r6
 100be10:	df000915 	stw	fp,36(sp)
 100be14:	dd800715 	stw	r22,28(sp)
 100be18:	dcc00415 	stw	r19,16(sp)
 100be1c:	dc000115 	stw	r16,4(sp)
 100be20:	dfc00a15 	stw	ra,40(sp)
 100be24:	dd400615 	stw	r21,24(sp)
 100be28:	dd000515 	stw	r20,20(sp)
 100be2c:	dc800315 	stw	r18,12(sp)
 100be30:	dc400215 	stw	r17,8(sp)
 100be34:	d9800015 	stw	r6,0(sp)
 100be38:	3839883a 	mov	fp,r7
 100be3c:	2821883a 	mov	r16,r5
 100be40:	202d883a 	mov	r22,r4
 100be44:	dcc00b17 	ldw	r19,44(sp)
 100be48:	b8005926 	beq	r23,zero,100bfb0 <_fread_r+0x1ac>
 100be4c:	20000226 	beq	r4,zero,100be58 <_fread_r+0x54>
 100be50:	20800e17 	ldw	r2,56(r4)
 100be54:	10005826 	beq	r2,zero,100bfb8 <_fread_r+0x1b4>
 100be58:	9c400117 	ldw	r17,4(r19)
 100be5c:	88005916 	blt	r17,zero,100bfc4 <_fread_r+0x1c0>
 100be60:	9880030b 	ldhu	r2,12(r19)
 100be64:	8029883a 	mov	r20,r16
 100be68:	1080008c 	andi	r2,r2,2
 100be6c:	1000221e 	bne	r2,zero,100bef8 <_fread_r+0xf4>
 100be70:	b825883a 	mov	r18,r23
 100be74:	00000106 	br	100be7c <_fread_r+0x78>
 100be78:	9c400117 	ldw	r17,4(r19)
 100be7c:	a009883a 	mov	r4,r20
 100be80:	880d883a 	mov	r6,r17
 100be84:	8c80542e 	bgeu	r17,r18,100bfd8 <_fread_r+0x1d4>
 100be88:	99400017 	ldw	r5,0(r19)
 100be8c:	a469883a 	add	r20,r20,r17
 100be90:	9465c83a 	sub	r18,r18,r17
 100be94:	100cf780 	call	100cf78 <memcpy>
 100be98:	98800017 	ldw	r2,0(r19)
 100be9c:	b009883a 	mov	r4,r22
 100bea0:	980b883a 	mov	r5,r19
 100bea4:	1461883a 	add	r16,r2,r17
 100bea8:	9c000015 	stw	r16,0(r19)
 100beac:	100e7780 	call	100e778 <__srefill_r>
 100beb0:	103ff126 	beq	r2,zero,100be78 <_fread_r+0x74>
 100beb4:	d9400017 	ldw	r5,0(sp)
 100beb8:	bc89c83a 	sub	r4,r23,r18
 100bebc:	10057700 	call	1005770 <__udivsi3>
 100bec0:	1039883a 	mov	fp,r2
 100bec4:	e005883a 	mov	r2,fp
 100bec8:	dfc00a17 	ldw	ra,40(sp)
 100becc:	df000917 	ldw	fp,36(sp)
 100bed0:	ddc00817 	ldw	r23,32(sp)
 100bed4:	dd800717 	ldw	r22,28(sp)
 100bed8:	dd400617 	ldw	r21,24(sp)
 100bedc:	dd000517 	ldw	r20,20(sp)
 100bee0:	dcc00417 	ldw	r19,16(sp)
 100bee4:	dc800317 	ldw	r18,12(sp)
 100bee8:	dc400217 	ldw	r17,8(sp)
 100beec:	dc000117 	ldw	r16,4(sp)
 100bef0:	dec00b04 	addi	sp,sp,44
 100bef4:	f800283a 	ret
 100bef8:	b825883a 	mov	r18,r23
 100befc:	8dc03436 	bltu	r17,r23,100bfd0 <_fread_r+0x1cc>
 100bf00:	99400017 	ldw	r5,0(r19)
 100bf04:	a009883a 	mov	r4,r20
 100bf08:	900d883a 	mov	r6,r18
 100bf0c:	100cf780 	call	100cf78 <memcpy>
 100bf10:	9c000017 	ldw	r16,0(r19)
 100bf14:	98800117 	ldw	r2,4(r19)
 100bf18:	99400c17 	ldw	r5,48(r19)
 100bf1c:	84a1883a 	add	r16,r16,r18
 100bf20:	14a3c83a 	sub	r17,r2,r18
 100bf24:	a4ab883a 	add	r21,r20,r18
 100bf28:	9c400115 	stw	r17,4(r19)
 100bf2c:	9c000015 	stw	r16,0(r19)
 100bf30:	bca9c83a 	sub	r20,r23,r18
 100bf34:	28000826 	beq	r5,zero,100bf58 <_fread_r+0x154>
 100bf38:	a03fe226 	beq	r20,zero,100bec4 <_fread_r+0xc0>
 100bf3c:	98801004 	addi	r2,r19,64
 100bf40:	28800326 	beq	r5,r2,100bf50 <_fread_r+0x14c>
 100bf44:	b009883a 	mov	r4,r22
 100bf48:	100c16c0 	call	100c16c <_free_r>
 100bf4c:	9c000017 	ldw	r16,0(r19)
 100bf50:	98000c15 	stw	zero,48(r19)
 100bf54:	00000106 	br	100bf5c <_fread_r+0x158>
 100bf58:	a03fda26 	beq	r20,zero,100bec4 <_fread_r+0xc0>
 100bf5c:	9c800417 	ldw	r18,16(r19)
 100bf60:	9c400517 	ldw	r17,20(r19)
 100bf64:	9d400015 	stw	r21,0(r19)
 100bf68:	9d400415 	stw	r21,16(r19)
 100bf6c:	9d000515 	stw	r20,20(r19)
 100bf70:	b009883a 	mov	r4,r22
 100bf74:	980b883a 	mov	r5,r19
 100bf78:	100e7780 	call	100e778 <__srefill_r>
 100bf7c:	98c00117 	ldw	r3,4(r19)
 100bf80:	9c800415 	stw	r18,16(r19)
 100bf84:	9c400515 	stw	r17,20(r19)
 100bf88:	a8eb883a 	add	r21,r21,r3
 100bf8c:	9c000015 	stw	r16,0(r19)
 100bf90:	a0e9c83a 	sub	r20,r20,r3
 100bf94:	98000115 	stw	zero,4(r19)
 100bf98:	103fef26 	beq	r2,zero,100bf58 <_fread_r+0x154>
 100bf9c:	d9400017 	ldw	r5,0(sp)
 100bfa0:	bd09c83a 	sub	r4,r23,r20
 100bfa4:	10057700 	call	1005770 <__udivsi3>
 100bfa8:	1039883a 	mov	fp,r2
 100bfac:	003fc506 	br	100bec4 <_fread_r+0xc0>
 100bfb0:	0039883a 	mov	fp,zero
 100bfb4:	003fc306 	br	100bec4 <_fread_r+0xc0>
 100bfb8:	100bbac0 	call	100bbac <__sinit>
 100bfbc:	9c400117 	ldw	r17,4(r19)
 100bfc0:	883fa70e 	bge	r17,zero,100be60 <_fread_r+0x5c>
 100bfc4:	0023883a 	mov	r17,zero
 100bfc8:	98000115 	stw	zero,4(r19)
 100bfcc:	003fa406 	br	100be60 <_fread_r+0x5c>
 100bfd0:	8825883a 	mov	r18,r17
 100bfd4:	003fca06 	br	100bf00 <_fread_r+0xfc>
 100bfd8:	99400017 	ldw	r5,0(r19)
 100bfdc:	900d883a 	mov	r6,r18
 100bfe0:	100cf780 	call	100cf78 <memcpy>
 100bfe4:	98c00117 	ldw	r3,4(r19)
 100bfe8:	98800017 	ldw	r2,0(r19)
 100bfec:	1c87c83a 	sub	r3,r3,r18
 100bff0:	1485883a 	add	r2,r2,r18
 100bff4:	98800015 	stw	r2,0(r19)
 100bff8:	98c00115 	stw	r3,4(r19)
 100bffc:	003fb106 	br	100bec4 <_fread_r+0xc0>

0100c000 <fread>:
 100c000:	008040b4 	movhi	r2,258
 100c004:	1086c504 	addi	r2,r2,6932
 100c008:	2017883a 	mov	r11,r4
 100c00c:	11000017 	ldw	r4,0(r2)
 100c010:	defffe04 	addi	sp,sp,-8
 100c014:	3013883a 	mov	r9,r6
 100c018:	2805883a 	mov	r2,r5
 100c01c:	d9c00015 	stw	r7,0(sp)
 100c020:	580b883a 	mov	r5,r11
 100c024:	100d883a 	mov	r6,r2
 100c028:	480f883a 	mov	r7,r9
 100c02c:	dfc00115 	stw	ra,4(sp)
 100c030:	100be040 	call	100be04 <_fread_r>
 100c034:	dfc00117 	ldw	ra,4(sp)
 100c038:	dec00204 	addi	sp,sp,8
 100c03c:	f800283a 	ret

0100c040 <_malloc_trim_r>:
 100c040:	defffb04 	addi	sp,sp,-20
 100c044:	dcc00315 	stw	r19,12(sp)
 100c048:	04c040b4 	movhi	r19,258
 100c04c:	9cff2704 	addi	r19,r19,-868
 100c050:	dc800215 	stw	r18,8(sp)
 100c054:	dc400115 	stw	r17,4(sp)
 100c058:	dc000015 	stw	r16,0(sp)
 100c05c:	2823883a 	mov	r17,r5
 100c060:	2025883a 	mov	r18,r4
 100c064:	dfc00415 	stw	ra,16(sp)
 100c068:	1013cc40 	call	1013cc4 <__malloc_lock>
 100c06c:	98800217 	ldw	r2,8(r19)
 100c070:	9009883a 	mov	r4,r18
 100c074:	000b883a 	mov	r5,zero
 100c078:	10c00117 	ldw	r3,4(r2)
 100c07c:	00bfff04 	movi	r2,-4
 100c080:	18a0703a 	and	r16,r3,r2
 100c084:	8463c83a 	sub	r17,r16,r17
 100c088:	8c43fbc4 	addi	r17,r17,4079
 100c08c:	8822d33a 	srli	r17,r17,12
 100c090:	0083ffc4 	movi	r2,4095
 100c094:	8c7fffc4 	addi	r17,r17,-1
 100c098:	8822933a 	slli	r17,r17,12
 100c09c:	1440060e 	bge	r2,r17,100c0b8 <_malloc_trim_r+0x78>
 100c0a0:	10066d40 	call	10066d4 <_sbrk_r>
 100c0a4:	98c00217 	ldw	r3,8(r19)
 100c0a8:	9009883a 	mov	r4,r18
 100c0ac:	044bc83a 	sub	r5,zero,r17
 100c0b0:	80c7883a 	add	r3,r16,r3
 100c0b4:	10c00926 	beq	r2,r3,100c0dc <_malloc_trim_r+0x9c>
 100c0b8:	1013ce40 	call	1013ce4 <__malloc_unlock>
 100c0bc:	0005883a 	mov	r2,zero
 100c0c0:	dfc00417 	ldw	ra,16(sp)
 100c0c4:	dcc00317 	ldw	r19,12(sp)
 100c0c8:	dc800217 	ldw	r18,8(sp)
 100c0cc:	dc400117 	ldw	r17,4(sp)
 100c0d0:	dc000017 	ldw	r16,0(sp)
 100c0d4:	dec00504 	addi	sp,sp,20
 100c0d8:	f800283a 	ret
 100c0dc:	9009883a 	mov	r4,r18
 100c0e0:	10066d40 	call	10066d4 <_sbrk_r>
 100c0e4:	844dc83a 	sub	r6,r16,r17
 100c0e8:	00ffffc4 	movi	r3,-1
 100c0ec:	9009883a 	mov	r4,r18
 100c0f0:	000b883a 	mov	r5,zero
 100c0f4:	01c040b4 	movhi	r7,258
 100c0f8:	39cea004 	addi	r7,r7,14976
 100c0fc:	31800054 	ori	r6,r6,1
 100c100:	10c00926 	beq	r2,r3,100c128 <_malloc_trim_r+0xe8>
 100c104:	38800017 	ldw	r2,0(r7)
 100c108:	98c00217 	ldw	r3,8(r19)
 100c10c:	9009883a 	mov	r4,r18
 100c110:	1445c83a 	sub	r2,r2,r17
 100c114:	38800015 	stw	r2,0(r7)
 100c118:	19800115 	stw	r6,4(r3)
 100c11c:	1013ce40 	call	1013ce4 <__malloc_unlock>
 100c120:	00800044 	movi	r2,1
 100c124:	003fe606 	br	100c0c0 <_malloc_trim_r+0x80>
 100c128:	10066d40 	call	10066d4 <_sbrk_r>
 100c12c:	99800217 	ldw	r6,8(r19)
 100c130:	100f883a 	mov	r7,r2
 100c134:	9009883a 	mov	r4,r18
 100c138:	1187c83a 	sub	r3,r2,r6
 100c13c:	008003c4 	movi	r2,15
 100c140:	19400054 	ori	r5,r3,1
 100c144:	10ffdc0e 	bge	r2,r3,100c0b8 <_malloc_trim_r+0x78>
 100c148:	008040b4 	movhi	r2,258
 100c14c:	1086c304 	addi	r2,r2,6924
 100c150:	10c00017 	ldw	r3,0(r2)
 100c154:	008040b4 	movhi	r2,258
 100c158:	108ea004 	addi	r2,r2,14976
 100c15c:	31400115 	stw	r5,4(r6)
 100c160:	38c7c83a 	sub	r3,r7,r3
 100c164:	10c00015 	stw	r3,0(r2)
 100c168:	003fd306 	br	100c0b8 <_malloc_trim_r+0x78>

0100c16c <_free_r>:
 100c16c:	defffd04 	addi	sp,sp,-12
 100c170:	dc400115 	stw	r17,4(sp)
 100c174:	dc000015 	stw	r16,0(sp)
 100c178:	dfc00215 	stw	ra,8(sp)
 100c17c:	2821883a 	mov	r16,r5
 100c180:	2023883a 	mov	r17,r4
 100c184:	28005a26 	beq	r5,zero,100c2f0 <_free_r+0x184>
 100c188:	1013cc40 	call	1013cc4 <__malloc_lock>
 100c18c:	823ffe04 	addi	r8,r16,-8
 100c190:	41400117 	ldw	r5,4(r8)
 100c194:	00bfff84 	movi	r2,-2
 100c198:	028040b4 	movhi	r10,258
 100c19c:	52bf2704 	addi	r10,r10,-868
 100c1a0:	288e703a 	and	r7,r5,r2
 100c1a4:	41cd883a 	add	r6,r8,r7
 100c1a8:	30c00117 	ldw	r3,4(r6)
 100c1ac:	51000217 	ldw	r4,8(r10)
 100c1b0:	00bfff04 	movi	r2,-4
 100c1b4:	1892703a 	and	r9,r3,r2
 100c1b8:	5017883a 	mov	r11,r10
 100c1bc:	31006726 	beq	r6,r4,100c35c <_free_r+0x1f0>
 100c1c0:	2880004c 	andi	r2,r5,1
 100c1c4:	1005003a 	cmpeq	r2,r2,zero
 100c1c8:	32400115 	stw	r9,4(r6)
 100c1cc:	10001a1e 	bne	r2,zero,100c238 <_free_r+0xcc>
 100c1d0:	000b883a 	mov	r5,zero
 100c1d4:	3247883a 	add	r3,r6,r9
 100c1d8:	18800117 	ldw	r2,4(r3)
 100c1dc:	1080004c 	andi	r2,r2,1
 100c1e0:	1000231e 	bne	r2,zero,100c270 <_free_r+0x104>
 100c1e4:	280ac03a 	cmpne	r5,r5,zero
 100c1e8:	3a4f883a 	add	r7,r7,r9
 100c1ec:	2800451e 	bne	r5,zero,100c304 <_free_r+0x198>
 100c1f0:	31000217 	ldw	r4,8(r6)
 100c1f4:	008040b4 	movhi	r2,258
 100c1f8:	10bf2904 	addi	r2,r2,-860
 100c1fc:	20807b26 	beq	r4,r2,100c3ec <_free_r+0x280>
 100c200:	30800317 	ldw	r2,12(r6)
 100c204:	3a07883a 	add	r3,r7,r8
 100c208:	19c00015 	stw	r7,0(r3)
 100c20c:	11000215 	stw	r4,8(r2)
 100c210:	20800315 	stw	r2,12(r4)
 100c214:	38800054 	ori	r2,r7,1
 100c218:	40800115 	stw	r2,4(r8)
 100c21c:	28001a26 	beq	r5,zero,100c288 <_free_r+0x11c>
 100c220:	8809883a 	mov	r4,r17
 100c224:	dfc00217 	ldw	ra,8(sp)
 100c228:	dc400117 	ldw	r17,4(sp)
 100c22c:	dc000017 	ldw	r16,0(sp)
 100c230:	dec00304 	addi	sp,sp,12
 100c234:	1013ce41 	jmpi	1013ce4 <__malloc_unlock>
 100c238:	80bffe17 	ldw	r2,-8(r16)
 100c23c:	50c00204 	addi	r3,r10,8
 100c240:	4091c83a 	sub	r8,r8,r2
 100c244:	41000217 	ldw	r4,8(r8)
 100c248:	388f883a 	add	r7,r7,r2
 100c24c:	20c06126 	beq	r4,r3,100c3d4 <_free_r+0x268>
 100c250:	40800317 	ldw	r2,12(r8)
 100c254:	3247883a 	add	r3,r6,r9
 100c258:	000b883a 	mov	r5,zero
 100c25c:	11000215 	stw	r4,8(r2)
 100c260:	20800315 	stw	r2,12(r4)
 100c264:	18800117 	ldw	r2,4(r3)
 100c268:	1080004c 	andi	r2,r2,1
 100c26c:	103fdd26 	beq	r2,zero,100c1e4 <_free_r+0x78>
 100c270:	38800054 	ori	r2,r7,1
 100c274:	3a07883a 	add	r3,r7,r8
 100c278:	280ac03a 	cmpne	r5,r5,zero
 100c27c:	40800115 	stw	r2,4(r8)
 100c280:	19c00015 	stw	r7,0(r3)
 100c284:	283fe61e 	bne	r5,zero,100c220 <_free_r+0xb4>
 100c288:	00807fc4 	movi	r2,511
 100c28c:	11c01f2e 	bgeu	r2,r7,100c30c <_free_r+0x1a0>
 100c290:	3806d27a 	srli	r3,r7,9
 100c294:	1800481e 	bne	r3,zero,100c3b8 <_free_r+0x24c>
 100c298:	3804d0fa 	srli	r2,r7,3
 100c29c:	100690fa 	slli	r3,r2,3
 100c2a0:	1acd883a 	add	r6,r3,r11
 100c2a4:	31400217 	ldw	r5,8(r6)
 100c2a8:	31405926 	beq	r6,r5,100c410 <_free_r+0x2a4>
 100c2ac:	28800117 	ldw	r2,4(r5)
 100c2b0:	00ffff04 	movi	r3,-4
 100c2b4:	10c4703a 	and	r2,r2,r3
 100c2b8:	3880022e 	bgeu	r7,r2,100c2c4 <_free_r+0x158>
 100c2bc:	29400217 	ldw	r5,8(r5)
 100c2c0:	317ffa1e 	bne	r6,r5,100c2ac <_free_r+0x140>
 100c2c4:	29800317 	ldw	r6,12(r5)
 100c2c8:	41800315 	stw	r6,12(r8)
 100c2cc:	41400215 	stw	r5,8(r8)
 100c2d0:	8809883a 	mov	r4,r17
 100c2d4:	2a000315 	stw	r8,12(r5)
 100c2d8:	32000215 	stw	r8,8(r6)
 100c2dc:	dfc00217 	ldw	ra,8(sp)
 100c2e0:	dc400117 	ldw	r17,4(sp)
 100c2e4:	dc000017 	ldw	r16,0(sp)
 100c2e8:	dec00304 	addi	sp,sp,12
 100c2ec:	1013ce41 	jmpi	1013ce4 <__malloc_unlock>
 100c2f0:	dfc00217 	ldw	ra,8(sp)
 100c2f4:	dc400117 	ldw	r17,4(sp)
 100c2f8:	dc000017 	ldw	r16,0(sp)
 100c2fc:	dec00304 	addi	sp,sp,12
 100c300:	f800283a 	ret
 100c304:	31000217 	ldw	r4,8(r6)
 100c308:	003fbd06 	br	100c200 <_free_r+0x94>
 100c30c:	3806d0fa 	srli	r3,r7,3
 100c310:	00800044 	movi	r2,1
 100c314:	51400117 	ldw	r5,4(r10)
 100c318:	180890fa 	slli	r4,r3,3
 100c31c:	1807d0ba 	srai	r3,r3,2
 100c320:	22c9883a 	add	r4,r4,r11
 100c324:	21800217 	ldw	r6,8(r4)
 100c328:	10c4983a 	sll	r2,r2,r3
 100c32c:	41000315 	stw	r4,12(r8)
 100c330:	41800215 	stw	r6,8(r8)
 100c334:	288ab03a 	or	r5,r5,r2
 100c338:	22000215 	stw	r8,8(r4)
 100c33c:	8809883a 	mov	r4,r17
 100c340:	51400115 	stw	r5,4(r10)
 100c344:	32000315 	stw	r8,12(r6)
 100c348:	dfc00217 	ldw	ra,8(sp)
 100c34c:	dc400117 	ldw	r17,4(sp)
 100c350:	dc000017 	ldw	r16,0(sp)
 100c354:	dec00304 	addi	sp,sp,12
 100c358:	1013ce41 	jmpi	1013ce4 <__malloc_unlock>
 100c35c:	2880004c 	andi	r2,r5,1
 100c360:	3a4d883a 	add	r6,r7,r9
 100c364:	1000071e 	bne	r2,zero,100c384 <_free_r+0x218>
 100c368:	80bffe17 	ldw	r2,-8(r16)
 100c36c:	4091c83a 	sub	r8,r8,r2
 100c370:	41000317 	ldw	r4,12(r8)
 100c374:	40c00217 	ldw	r3,8(r8)
 100c378:	308d883a 	add	r6,r6,r2
 100c37c:	20c00215 	stw	r3,8(r4)
 100c380:	19000315 	stw	r4,12(r3)
 100c384:	008040b4 	movhi	r2,258
 100c388:	1086c204 	addi	r2,r2,6920
 100c38c:	11000017 	ldw	r4,0(r2)
 100c390:	30c00054 	ori	r3,r6,1
 100c394:	52000215 	stw	r8,8(r10)
 100c398:	40c00115 	stw	r3,4(r8)
 100c39c:	313fa036 	bltu	r6,r4,100c220 <_free_r+0xb4>
 100c3a0:	008040b4 	movhi	r2,258
 100c3a4:	108e8004 	addi	r2,r2,14848
 100c3a8:	11400017 	ldw	r5,0(r2)
 100c3ac:	8809883a 	mov	r4,r17
 100c3b0:	100c0400 	call	100c040 <_malloc_trim_r>
 100c3b4:	003f9a06 	br	100c220 <_free_r+0xb4>
 100c3b8:	00800104 	movi	r2,4
 100c3bc:	10c0072e 	bgeu	r2,r3,100c3dc <_free_r+0x270>
 100c3c0:	00800504 	movi	r2,20
 100c3c4:	10c01936 	bltu	r2,r3,100c42c <_free_r+0x2c0>
 100c3c8:	188016c4 	addi	r2,r3,91
 100c3cc:	100690fa 	slli	r3,r2,3
 100c3d0:	003fb306 	br	100c2a0 <_free_r+0x134>
 100c3d4:	01400044 	movi	r5,1
 100c3d8:	003f7e06 	br	100c1d4 <_free_r+0x68>
 100c3dc:	3804d1ba 	srli	r2,r7,6
 100c3e0:	10800e04 	addi	r2,r2,56
 100c3e4:	100690fa 	slli	r3,r2,3
 100c3e8:	003fad06 	br	100c2a0 <_free_r+0x134>
 100c3ec:	22000315 	stw	r8,12(r4)
 100c3f0:	22000215 	stw	r8,8(r4)
 100c3f4:	3a05883a 	add	r2,r7,r8
 100c3f8:	38c00054 	ori	r3,r7,1
 100c3fc:	11c00015 	stw	r7,0(r2)
 100c400:	41000215 	stw	r4,8(r8)
 100c404:	40c00115 	stw	r3,4(r8)
 100c408:	41000315 	stw	r4,12(r8)
 100c40c:	003f8406 	br	100c220 <_free_r+0xb4>
 100c410:	1005d0ba 	srai	r2,r2,2
 100c414:	00c00044 	movi	r3,1
 100c418:	51000117 	ldw	r4,4(r10)
 100c41c:	1886983a 	sll	r3,r3,r2
 100c420:	20c8b03a 	or	r4,r4,r3
 100c424:	51000115 	stw	r4,4(r10)
 100c428:	003fa706 	br	100c2c8 <_free_r+0x15c>
 100c42c:	00801504 	movi	r2,84
 100c430:	10c00436 	bltu	r2,r3,100c444 <_free_r+0x2d8>
 100c434:	3804d33a 	srli	r2,r7,12
 100c438:	10801b84 	addi	r2,r2,110
 100c43c:	100690fa 	slli	r3,r2,3
 100c440:	003f9706 	br	100c2a0 <_free_r+0x134>
 100c444:	00805504 	movi	r2,340
 100c448:	10c00436 	bltu	r2,r3,100c45c <_free_r+0x2f0>
 100c44c:	3804d3fa 	srli	r2,r7,15
 100c450:	10801dc4 	addi	r2,r2,119
 100c454:	100690fa 	slli	r3,r2,3
 100c458:	003f9106 	br	100c2a0 <_free_r+0x134>
 100c45c:	00815504 	movi	r2,1364
 100c460:	10c0032e 	bgeu	r2,r3,100c470 <_free_r+0x304>
 100c464:	00801f84 	movi	r2,126
 100c468:	00c0fc04 	movi	r3,1008
 100c46c:	003f8c06 	br	100c2a0 <_free_r+0x134>
 100c470:	3804d4ba 	srli	r2,r7,18
 100c474:	10801f04 	addi	r2,r2,124
 100c478:	100690fa 	slli	r3,r2,3
 100c47c:	003f8806 	br	100c2a0 <_free_r+0x134>

0100c480 <__sfvwrite_r>:
 100c480:	30800217 	ldw	r2,8(r6)
 100c484:	defff504 	addi	sp,sp,-44
 100c488:	df000915 	stw	fp,36(sp)
 100c48c:	dd800715 	stw	r22,28(sp)
 100c490:	dc800315 	stw	r18,12(sp)
 100c494:	dfc00a15 	stw	ra,40(sp)
 100c498:	ddc00815 	stw	r23,32(sp)
 100c49c:	dd400615 	stw	r21,24(sp)
 100c4a0:	dd000515 	stw	r20,20(sp)
 100c4a4:	dcc00415 	stw	r19,16(sp)
 100c4a8:	dc400215 	stw	r17,8(sp)
 100c4ac:	dc000115 	stw	r16,4(sp)
 100c4b0:	302d883a 	mov	r22,r6
 100c4b4:	2039883a 	mov	fp,r4
 100c4b8:	2825883a 	mov	r18,r5
 100c4bc:	10001c26 	beq	r2,zero,100c530 <__sfvwrite_r+0xb0>
 100c4c0:	29c0030b 	ldhu	r7,12(r5)
 100c4c4:	3880020c 	andi	r2,r7,8
 100c4c8:	10002726 	beq	r2,zero,100c568 <__sfvwrite_r+0xe8>
 100c4cc:	28800417 	ldw	r2,16(r5)
 100c4d0:	10002526 	beq	r2,zero,100c568 <__sfvwrite_r+0xe8>
 100c4d4:	3880008c 	andi	r2,r7,2
 100c4d8:	b5400017 	ldw	r21,0(r22)
 100c4dc:	10002826 	beq	r2,zero,100c580 <__sfvwrite_r+0x100>
 100c4e0:	0021883a 	mov	r16,zero
 100c4e4:	0023883a 	mov	r17,zero
 100c4e8:	880d883a 	mov	r6,r17
 100c4ec:	e009883a 	mov	r4,fp
 100c4f0:	00810004 	movi	r2,1024
 100c4f4:	80006e26 	beq	r16,zero,100c6b0 <__sfvwrite_r+0x230>
 100c4f8:	800f883a 	mov	r7,r16
 100c4fc:	91400717 	ldw	r5,28(r18)
 100c500:	1400012e 	bgeu	r2,r16,100c508 <__sfvwrite_r+0x88>
 100c504:	100f883a 	mov	r7,r2
 100c508:	90c00917 	ldw	r3,36(r18)
 100c50c:	183ee83a 	callr	r3
 100c510:	1007883a 	mov	r3,r2
 100c514:	80a1c83a 	sub	r16,r16,r2
 100c518:	88a3883a 	add	r17,r17,r2
 100c51c:	00806d0e 	bge	zero,r2,100c6d4 <__sfvwrite_r+0x254>
 100c520:	b0800217 	ldw	r2,8(r22)
 100c524:	10c5c83a 	sub	r2,r2,r3
 100c528:	b0800215 	stw	r2,8(r22)
 100c52c:	103fee1e 	bne	r2,zero,100c4e8 <__sfvwrite_r+0x68>
 100c530:	0009883a 	mov	r4,zero
 100c534:	2005883a 	mov	r2,r4
 100c538:	dfc00a17 	ldw	ra,40(sp)
 100c53c:	df000917 	ldw	fp,36(sp)
 100c540:	ddc00817 	ldw	r23,32(sp)
 100c544:	dd800717 	ldw	r22,28(sp)
 100c548:	dd400617 	ldw	r21,24(sp)
 100c54c:	dd000517 	ldw	r20,20(sp)
 100c550:	dcc00417 	ldw	r19,16(sp)
 100c554:	dc800317 	ldw	r18,12(sp)
 100c558:	dc400217 	ldw	r17,8(sp)
 100c55c:	dc000117 	ldw	r16,4(sp)
 100c560:	dec00b04 	addi	sp,sp,44
 100c564:	f800283a 	ret
 100c568:	100a00c0 	call	100a00c <__swsetup_r>
 100c56c:	1000e41e 	bne	r2,zero,100c900 <__sfvwrite_r+0x480>
 100c570:	91c0030b 	ldhu	r7,12(r18)
 100c574:	b5400017 	ldw	r21,0(r22)
 100c578:	3880008c 	andi	r2,r7,2
 100c57c:	103fd81e 	bne	r2,zero,100c4e0 <__sfvwrite_r+0x60>
 100c580:	3880004c 	andi	r2,r7,1
 100c584:	1005003a 	cmpeq	r2,r2,zero
 100c588:	10005726 	beq	r2,zero,100c6e8 <__sfvwrite_r+0x268>
 100c58c:	0029883a 	mov	r20,zero
 100c590:	002f883a 	mov	r23,zero
 100c594:	a0004226 	beq	r20,zero,100c6a0 <__sfvwrite_r+0x220>
 100c598:	3880800c 	andi	r2,r7,512
 100c59c:	94000217 	ldw	r16,8(r18)
 100c5a0:	10008b26 	beq	r2,zero,100c7d0 <__sfvwrite_r+0x350>
 100c5a4:	800d883a 	mov	r6,r16
 100c5a8:	a400a536 	bltu	r20,r16,100c840 <__sfvwrite_r+0x3c0>
 100c5ac:	3881200c 	andi	r2,r7,1152
 100c5b0:	10002726 	beq	r2,zero,100c650 <__sfvwrite_r+0x1d0>
 100c5b4:	90800517 	ldw	r2,20(r18)
 100c5b8:	92000417 	ldw	r8,16(r18)
 100c5bc:	91400017 	ldw	r5,0(r18)
 100c5c0:	1087883a 	add	r3,r2,r2
 100c5c4:	1887883a 	add	r3,r3,r2
 100c5c8:	1808d7fa 	srli	r4,r3,31
 100c5cc:	2a21c83a 	sub	r16,r5,r8
 100c5d0:	80800044 	addi	r2,r16,1
 100c5d4:	20c9883a 	add	r4,r4,r3
 100c5d8:	2027d07a 	srai	r19,r4,1
 100c5dc:	a085883a 	add	r2,r20,r2
 100c5e0:	980d883a 	mov	r6,r19
 100c5e4:	9880022e 	bgeu	r19,r2,100c5f0 <__sfvwrite_r+0x170>
 100c5e8:	1027883a 	mov	r19,r2
 100c5ec:	100d883a 	mov	r6,r2
 100c5f0:	3881000c 	andi	r2,r7,1024
 100c5f4:	1000b826 	beq	r2,zero,100c8d8 <__sfvwrite_r+0x458>
 100c5f8:	300b883a 	mov	r5,r6
 100c5fc:	e009883a 	mov	r4,fp
 100c600:	1005dd40 	call	1005dd4 <_malloc_r>
 100c604:	10003126 	beq	r2,zero,100c6cc <__sfvwrite_r+0x24c>
 100c608:	91400417 	ldw	r5,16(r18)
 100c60c:	1009883a 	mov	r4,r2
 100c610:	800d883a 	mov	r6,r16
 100c614:	1023883a 	mov	r17,r2
 100c618:	100cf780 	call	100cf78 <memcpy>
 100c61c:	90c0030b 	ldhu	r3,12(r18)
 100c620:	00beffc4 	movi	r2,-1025
 100c624:	1886703a 	and	r3,r3,r2
 100c628:	18c02014 	ori	r3,r3,128
 100c62c:	90c0030d 	sth	r3,12(r18)
 100c630:	9c07c83a 	sub	r3,r19,r16
 100c634:	8c05883a 	add	r2,r17,r16
 100c638:	a00d883a 	mov	r6,r20
 100c63c:	a021883a 	mov	r16,r20
 100c640:	90800015 	stw	r2,0(r18)
 100c644:	90c00215 	stw	r3,8(r18)
 100c648:	94400415 	stw	r17,16(r18)
 100c64c:	94c00515 	stw	r19,20(r18)
 100c650:	91000017 	ldw	r4,0(r18)
 100c654:	b80b883a 	mov	r5,r23
 100c658:	a023883a 	mov	r17,r20
 100c65c:	100d0180 	call	100d018 <memmove>
 100c660:	90c00217 	ldw	r3,8(r18)
 100c664:	90800017 	ldw	r2,0(r18)
 100c668:	a027883a 	mov	r19,r20
 100c66c:	1c07c83a 	sub	r3,r3,r16
 100c670:	1405883a 	add	r2,r2,r16
 100c674:	90c00215 	stw	r3,8(r18)
 100c678:	a021883a 	mov	r16,r20
 100c67c:	90800015 	stw	r2,0(r18)
 100c680:	b0800217 	ldw	r2,8(r22)
 100c684:	1405c83a 	sub	r2,r2,r16
 100c688:	b0800215 	stw	r2,8(r22)
 100c68c:	103fa826 	beq	r2,zero,100c530 <__sfvwrite_r+0xb0>
 100c690:	a469c83a 	sub	r20,r20,r17
 100c694:	91c0030b 	ldhu	r7,12(r18)
 100c698:	bcef883a 	add	r23,r23,r19
 100c69c:	a03fbe1e 	bne	r20,zero,100c598 <__sfvwrite_r+0x118>
 100c6a0:	adc00017 	ldw	r23,0(r21)
 100c6a4:	ad000117 	ldw	r20,4(r21)
 100c6a8:	ad400204 	addi	r21,r21,8
 100c6ac:	003fb906 	br	100c594 <__sfvwrite_r+0x114>
 100c6b0:	ac400017 	ldw	r17,0(r21)
 100c6b4:	ac000117 	ldw	r16,4(r21)
 100c6b8:	ad400204 	addi	r21,r21,8
 100c6bc:	003f8a06 	br	100c4e8 <__sfvwrite_r+0x68>
 100c6c0:	91400417 	ldw	r5,16(r18)
 100c6c4:	e009883a 	mov	r4,fp
 100c6c8:	100c16c0 	call	100c16c <_free_r>
 100c6cc:	00800304 	movi	r2,12
 100c6d0:	e0800015 	stw	r2,0(fp)
 100c6d4:	9080030b 	ldhu	r2,12(r18)
 100c6d8:	013fffc4 	movi	r4,-1
 100c6dc:	10801014 	ori	r2,r2,64
 100c6e0:	9080030d 	sth	r2,12(r18)
 100c6e4:	003f9306 	br	100c534 <__sfvwrite_r+0xb4>
 100c6e8:	0027883a 	mov	r19,zero
 100c6ec:	002f883a 	mov	r23,zero
 100c6f0:	d8000015 	stw	zero,0(sp)
 100c6f4:	0029883a 	mov	r20,zero
 100c6f8:	98001e26 	beq	r19,zero,100c774 <__sfvwrite_r+0x2f4>
 100c6fc:	d8c00017 	ldw	r3,0(sp)
 100c700:	1804c03a 	cmpne	r2,r3,zero
 100c704:	10005e26 	beq	r2,zero,100c880 <__sfvwrite_r+0x400>
 100c708:	9821883a 	mov	r16,r19
 100c70c:	a4c0012e 	bgeu	r20,r19,100c714 <__sfvwrite_r+0x294>
 100c710:	a021883a 	mov	r16,r20
 100c714:	91000017 	ldw	r4,0(r18)
 100c718:	90800417 	ldw	r2,16(r18)
 100c71c:	91800217 	ldw	r6,8(r18)
 100c720:	91c00517 	ldw	r7,20(r18)
 100c724:	1100022e 	bgeu	r2,r4,100c730 <__sfvwrite_r+0x2b0>
 100c728:	31e3883a 	add	r17,r6,r7
 100c72c:	8c001616 	blt	r17,r16,100c788 <__sfvwrite_r+0x308>
 100c730:	81c03816 	blt	r16,r7,100c814 <__sfvwrite_r+0x394>
 100c734:	90c00917 	ldw	r3,36(r18)
 100c738:	91400717 	ldw	r5,28(r18)
 100c73c:	e009883a 	mov	r4,fp
 100c740:	b80d883a 	mov	r6,r23
 100c744:	183ee83a 	callr	r3
 100c748:	1023883a 	mov	r17,r2
 100c74c:	00bfe10e 	bge	zero,r2,100c6d4 <__sfvwrite_r+0x254>
 100c750:	a469c83a 	sub	r20,r20,r17
 100c754:	a0001826 	beq	r20,zero,100c7b8 <__sfvwrite_r+0x338>
 100c758:	b0800217 	ldw	r2,8(r22)
 100c75c:	1445c83a 	sub	r2,r2,r17
 100c760:	b0800215 	stw	r2,8(r22)
 100c764:	103f7226 	beq	r2,zero,100c530 <__sfvwrite_r+0xb0>
 100c768:	9c67c83a 	sub	r19,r19,r17
 100c76c:	bc6f883a 	add	r23,r23,r17
 100c770:	983fe21e 	bne	r19,zero,100c6fc <__sfvwrite_r+0x27c>
 100c774:	adc00017 	ldw	r23,0(r21)
 100c778:	acc00117 	ldw	r19,4(r21)
 100c77c:	ad400204 	addi	r21,r21,8
 100c780:	d8000015 	stw	zero,0(sp)
 100c784:	003fdc06 	br	100c6f8 <__sfvwrite_r+0x278>
 100c788:	b80b883a 	mov	r5,r23
 100c78c:	880d883a 	mov	r6,r17
 100c790:	100d0180 	call	100d018 <memmove>
 100c794:	90c00017 	ldw	r3,0(r18)
 100c798:	e009883a 	mov	r4,fp
 100c79c:	900b883a 	mov	r5,r18
 100c7a0:	1c47883a 	add	r3,r3,r17
 100c7a4:	90c00015 	stw	r3,0(r18)
 100c7a8:	100b9140 	call	100b914 <_fflush_r>
 100c7ac:	103fc91e 	bne	r2,zero,100c6d4 <__sfvwrite_r+0x254>
 100c7b0:	a469c83a 	sub	r20,r20,r17
 100c7b4:	a03fe81e 	bne	r20,zero,100c758 <__sfvwrite_r+0x2d8>
 100c7b8:	e009883a 	mov	r4,fp
 100c7bc:	900b883a 	mov	r5,r18
 100c7c0:	100b9140 	call	100b914 <_fflush_r>
 100c7c4:	103fc31e 	bne	r2,zero,100c6d4 <__sfvwrite_r+0x254>
 100c7c8:	d8000015 	stw	zero,0(sp)
 100c7cc:	003fe206 	br	100c758 <__sfvwrite_r+0x2d8>
 100c7d0:	91000017 	ldw	r4,0(r18)
 100c7d4:	90800417 	ldw	r2,16(r18)
 100c7d8:	1100022e 	bgeu	r2,r4,100c7e4 <__sfvwrite_r+0x364>
 100c7dc:	8023883a 	mov	r17,r16
 100c7e0:	85003136 	bltu	r16,r20,100c8a8 <__sfvwrite_r+0x428>
 100c7e4:	91c00517 	ldw	r7,20(r18)
 100c7e8:	a1c01836 	bltu	r20,r7,100c84c <__sfvwrite_r+0x3cc>
 100c7ec:	90c00917 	ldw	r3,36(r18)
 100c7f0:	91400717 	ldw	r5,28(r18)
 100c7f4:	e009883a 	mov	r4,fp
 100c7f8:	b80d883a 	mov	r6,r23
 100c7fc:	183ee83a 	callr	r3
 100c800:	1021883a 	mov	r16,r2
 100c804:	00bfb30e 	bge	zero,r2,100c6d4 <__sfvwrite_r+0x254>
 100c808:	1023883a 	mov	r17,r2
 100c80c:	1027883a 	mov	r19,r2
 100c810:	003f9b06 	br	100c680 <__sfvwrite_r+0x200>
 100c814:	b80b883a 	mov	r5,r23
 100c818:	800d883a 	mov	r6,r16
 100c81c:	100d0180 	call	100d018 <memmove>
 100c820:	90c00217 	ldw	r3,8(r18)
 100c824:	90800017 	ldw	r2,0(r18)
 100c828:	8023883a 	mov	r17,r16
 100c82c:	1c07c83a 	sub	r3,r3,r16
 100c830:	1405883a 	add	r2,r2,r16
 100c834:	90c00215 	stw	r3,8(r18)
 100c838:	90800015 	stw	r2,0(r18)
 100c83c:	003fc406 	br	100c750 <__sfvwrite_r+0x2d0>
 100c840:	a00d883a 	mov	r6,r20
 100c844:	a021883a 	mov	r16,r20
 100c848:	003f8106 	br	100c650 <__sfvwrite_r+0x1d0>
 100c84c:	b80b883a 	mov	r5,r23
 100c850:	a00d883a 	mov	r6,r20
 100c854:	100d0180 	call	100d018 <memmove>
 100c858:	90c00217 	ldw	r3,8(r18)
 100c85c:	90800017 	ldw	r2,0(r18)
 100c860:	a021883a 	mov	r16,r20
 100c864:	1d07c83a 	sub	r3,r3,r20
 100c868:	1505883a 	add	r2,r2,r20
 100c86c:	a023883a 	mov	r17,r20
 100c870:	a027883a 	mov	r19,r20
 100c874:	90c00215 	stw	r3,8(r18)
 100c878:	90800015 	stw	r2,0(r18)
 100c87c:	003f8006 	br	100c680 <__sfvwrite_r+0x200>
 100c880:	b809883a 	mov	r4,r23
 100c884:	01400284 	movi	r5,10
 100c888:	980d883a 	mov	r6,r19
 100c88c:	100ce940 	call	100ce94 <memchr>
 100c890:	10001726 	beq	r2,zero,100c8f0 <__sfvwrite_r+0x470>
 100c894:	15c5c83a 	sub	r2,r2,r23
 100c898:	15000044 	addi	r20,r2,1
 100c89c:	00800044 	movi	r2,1
 100c8a0:	d8800015 	stw	r2,0(sp)
 100c8a4:	003f9806 	br	100c708 <__sfvwrite_r+0x288>
 100c8a8:	b80b883a 	mov	r5,r23
 100c8ac:	800d883a 	mov	r6,r16
 100c8b0:	100d0180 	call	100d018 <memmove>
 100c8b4:	90c00017 	ldw	r3,0(r18)
 100c8b8:	e009883a 	mov	r4,fp
 100c8bc:	900b883a 	mov	r5,r18
 100c8c0:	1c07883a 	add	r3,r3,r16
 100c8c4:	90c00015 	stw	r3,0(r18)
 100c8c8:	8027883a 	mov	r19,r16
 100c8cc:	100b9140 	call	100b914 <_fflush_r>
 100c8d0:	103f6b26 	beq	r2,zero,100c680 <__sfvwrite_r+0x200>
 100c8d4:	003f7f06 	br	100c6d4 <__sfvwrite_r+0x254>
 100c8d8:	400b883a 	mov	r5,r8
 100c8dc:	e009883a 	mov	r4,fp
 100c8e0:	100e1840 	call	100e184 <_realloc_r>
 100c8e4:	103f7626 	beq	r2,zero,100c6c0 <__sfvwrite_r+0x240>
 100c8e8:	1023883a 	mov	r17,r2
 100c8ec:	003f5006 	br	100c630 <__sfvwrite_r+0x1b0>
 100c8f0:	00c00044 	movi	r3,1
 100c8f4:	9d000044 	addi	r20,r19,1
 100c8f8:	d8c00015 	stw	r3,0(sp)
 100c8fc:	003f8206 	br	100c708 <__sfvwrite_r+0x288>
 100c900:	9080030b 	ldhu	r2,12(r18)
 100c904:	00c00244 	movi	r3,9
 100c908:	013fffc4 	movi	r4,-1
 100c90c:	10801014 	ori	r2,r2,64
 100c910:	9080030d 	sth	r2,12(r18)
 100c914:	e0c00015 	stw	r3,0(fp)
 100c918:	003f0606 	br	100c534 <__sfvwrite_r+0xb4>

0100c91c <_fwalk_reent>:
 100c91c:	defff704 	addi	sp,sp,-36
 100c920:	dcc00315 	stw	r19,12(sp)
 100c924:	24c0b804 	addi	r19,r4,736
 100c928:	dd800615 	stw	r22,24(sp)
 100c92c:	dd400515 	stw	r21,20(sp)
 100c930:	dfc00815 	stw	ra,32(sp)
 100c934:	ddc00715 	stw	r23,28(sp)
 100c938:	dd000415 	stw	r20,16(sp)
 100c93c:	dc800215 	stw	r18,8(sp)
 100c940:	dc400115 	stw	r17,4(sp)
 100c944:	dc000015 	stw	r16,0(sp)
 100c948:	202b883a 	mov	r21,r4
 100c94c:	282d883a 	mov	r22,r5
 100c950:	100bb9c0 	call	100bb9c <__sfp_lock_acquire>
 100c954:	98002126 	beq	r19,zero,100c9dc <_fwalk_reent+0xc0>
 100c958:	002f883a 	mov	r23,zero
 100c95c:	9c800117 	ldw	r18,4(r19)
 100c960:	9c000217 	ldw	r16,8(r19)
 100c964:	90bfffc4 	addi	r2,r18,-1
 100c968:	10000d16 	blt	r2,zero,100c9a0 <_fwalk_reent+0x84>
 100c96c:	0023883a 	mov	r17,zero
 100c970:	053fffc4 	movi	r20,-1
 100c974:	8080030f 	ldh	r2,12(r16)
 100c978:	8c400044 	addi	r17,r17,1
 100c97c:	10000626 	beq	r2,zero,100c998 <_fwalk_reent+0x7c>
 100c980:	8080038f 	ldh	r2,14(r16)
 100c984:	800b883a 	mov	r5,r16
 100c988:	a809883a 	mov	r4,r21
 100c98c:	15000226 	beq	r2,r20,100c998 <_fwalk_reent+0x7c>
 100c990:	b03ee83a 	callr	r22
 100c994:	b8aeb03a 	or	r23,r23,r2
 100c998:	84001704 	addi	r16,r16,92
 100c99c:	947ff51e 	bne	r18,r17,100c974 <_fwalk_reent+0x58>
 100c9a0:	9cc00017 	ldw	r19,0(r19)
 100c9a4:	983fed1e 	bne	r19,zero,100c95c <_fwalk_reent+0x40>
 100c9a8:	100bba00 	call	100bba0 <__sfp_lock_release>
 100c9ac:	b805883a 	mov	r2,r23
 100c9b0:	dfc00817 	ldw	ra,32(sp)
 100c9b4:	ddc00717 	ldw	r23,28(sp)
 100c9b8:	dd800617 	ldw	r22,24(sp)
 100c9bc:	dd400517 	ldw	r21,20(sp)
 100c9c0:	dd000417 	ldw	r20,16(sp)
 100c9c4:	dcc00317 	ldw	r19,12(sp)
 100c9c8:	dc800217 	ldw	r18,8(sp)
 100c9cc:	dc400117 	ldw	r17,4(sp)
 100c9d0:	dc000017 	ldw	r16,0(sp)
 100c9d4:	dec00904 	addi	sp,sp,36
 100c9d8:	f800283a 	ret
 100c9dc:	002f883a 	mov	r23,zero
 100c9e0:	003ff106 	br	100c9a8 <_fwalk_reent+0x8c>

0100c9e4 <_fwalk>:
 100c9e4:	defff804 	addi	sp,sp,-32
 100c9e8:	dcc00315 	stw	r19,12(sp)
 100c9ec:	24c0b804 	addi	r19,r4,736
 100c9f0:	dd400515 	stw	r21,20(sp)
 100c9f4:	dfc00715 	stw	ra,28(sp)
 100c9f8:	dd800615 	stw	r22,24(sp)
 100c9fc:	dd000415 	stw	r20,16(sp)
 100ca00:	dc800215 	stw	r18,8(sp)
 100ca04:	dc400115 	stw	r17,4(sp)
 100ca08:	dc000015 	stw	r16,0(sp)
 100ca0c:	282b883a 	mov	r21,r5
 100ca10:	100bb9c0 	call	100bb9c <__sfp_lock_acquire>
 100ca14:	98001f26 	beq	r19,zero,100ca94 <_fwalk+0xb0>
 100ca18:	002d883a 	mov	r22,zero
 100ca1c:	9c800117 	ldw	r18,4(r19)
 100ca20:	9c000217 	ldw	r16,8(r19)
 100ca24:	90bfffc4 	addi	r2,r18,-1
 100ca28:	10000c16 	blt	r2,zero,100ca5c <_fwalk+0x78>
 100ca2c:	0023883a 	mov	r17,zero
 100ca30:	053fffc4 	movi	r20,-1
 100ca34:	8080030f 	ldh	r2,12(r16)
 100ca38:	8c400044 	addi	r17,r17,1
 100ca3c:	10000526 	beq	r2,zero,100ca54 <_fwalk+0x70>
 100ca40:	8080038f 	ldh	r2,14(r16)
 100ca44:	8009883a 	mov	r4,r16
 100ca48:	15000226 	beq	r2,r20,100ca54 <_fwalk+0x70>
 100ca4c:	a83ee83a 	callr	r21
 100ca50:	b0acb03a 	or	r22,r22,r2
 100ca54:	84001704 	addi	r16,r16,92
 100ca58:	947ff61e 	bne	r18,r17,100ca34 <_fwalk+0x50>
 100ca5c:	9cc00017 	ldw	r19,0(r19)
 100ca60:	983fee1e 	bne	r19,zero,100ca1c <_fwalk+0x38>
 100ca64:	100bba00 	call	100bba0 <__sfp_lock_release>
 100ca68:	b005883a 	mov	r2,r22
 100ca6c:	dfc00717 	ldw	ra,28(sp)
 100ca70:	dd800617 	ldw	r22,24(sp)
 100ca74:	dd400517 	ldw	r21,20(sp)
 100ca78:	dd000417 	ldw	r20,16(sp)
 100ca7c:	dcc00317 	ldw	r19,12(sp)
 100ca80:	dc800217 	ldw	r18,8(sp)
 100ca84:	dc400117 	ldw	r17,4(sp)
 100ca88:	dc000017 	ldw	r16,0(sp)
 100ca8c:	dec00804 	addi	sp,sp,32
 100ca90:	f800283a 	ret
 100ca94:	002d883a 	mov	r22,zero
 100ca98:	003ff206 	br	100ca64 <_fwalk+0x80>

0100ca9c <_gettimeofday_r>:
 100ca9c:	defffd04 	addi	sp,sp,-12
 100caa0:	dc000015 	stw	r16,0(sp)
 100caa4:	040040b4 	movhi	r16,258
 100caa8:	840e8304 	addi	r16,r16,14860
 100caac:	dc400115 	stw	r17,4(sp)
 100cab0:	80000015 	stw	zero,0(r16)
 100cab4:	2023883a 	mov	r17,r4
 100cab8:	2809883a 	mov	r4,r5
 100cabc:	300b883a 	mov	r5,r6
 100cac0:	dfc00215 	stw	ra,8(sp)
 100cac4:	10136e00 	call	10136e0 <gettimeofday>
 100cac8:	1007883a 	mov	r3,r2
 100cacc:	00bfffc4 	movi	r2,-1
 100cad0:	18800626 	beq	r3,r2,100caec <_gettimeofday_r+0x50>
 100cad4:	1805883a 	mov	r2,r3
 100cad8:	dfc00217 	ldw	ra,8(sp)
 100cadc:	dc400117 	ldw	r17,4(sp)
 100cae0:	dc000017 	ldw	r16,0(sp)
 100cae4:	dec00304 	addi	sp,sp,12
 100cae8:	f800283a 	ret
 100caec:	80800017 	ldw	r2,0(r16)
 100caf0:	103ff826 	beq	r2,zero,100cad4 <_gettimeofday_r+0x38>
 100caf4:	88800015 	stw	r2,0(r17)
 100caf8:	1805883a 	mov	r2,r3
 100cafc:	dfc00217 	ldw	ra,8(sp)
 100cb00:	dc400117 	ldw	r17,4(sp)
 100cb04:	dc000017 	ldw	r16,0(sp)
 100cb08:	dec00304 	addi	sp,sp,12
 100cb0c:	f800283a 	ret

0100cb10 <iswspace>:
 100cb10:	00803fc4 	movi	r2,255
 100cb14:	0007883a 	mov	r3,zero
 100cb18:	11000636 	bltu	r2,r4,100cb34 <iswspace+0x24>
 100cb1c:	008040b4 	movhi	r2,258
 100cb20:	1086c404 	addi	r2,r2,6928
 100cb24:	10c00017 	ldw	r3,0(r2)
 100cb28:	1907883a 	add	r3,r3,r4
 100cb2c:	18800003 	ldbu	r2,0(r3)
 100cb30:	10c0020c 	andi	r3,r2,8
 100cb34:	1805883a 	mov	r2,r3
 100cb38:	f800283a 	ret

0100cb3c <__locale_charset>:
 100cb3c:	d0a00617 	ldw	r2,-32744(gp)
 100cb40:	f800283a 	ret

0100cb44 <_localeconv_r>:
 100cb44:	008040b4 	movhi	r2,258
 100cb48:	10bdbf04 	addi	r2,r2,-2308
 100cb4c:	f800283a 	ret

0100cb50 <localeconv>:
 100cb50:	008040b4 	movhi	r2,258
 100cb54:	1086c504 	addi	r2,r2,6932
 100cb58:	11000017 	ldw	r4,0(r2)
 100cb5c:	100cb441 	jmpi	100cb44 <_localeconv_r>

0100cb60 <_setlocale_r>:
 100cb60:	defffc04 	addi	sp,sp,-16
 100cb64:	00c040b4 	movhi	r3,258
 100cb68:	18fdba04 	addi	r3,r3,-2328
 100cb6c:	dc800215 	stw	r18,8(sp)
 100cb70:	dc400115 	stw	r17,4(sp)
 100cb74:	dc000015 	stw	r16,0(sp)
 100cb78:	2023883a 	mov	r17,r4
 100cb7c:	2825883a 	mov	r18,r5
 100cb80:	dfc00315 	stw	ra,12(sp)
 100cb84:	3021883a 	mov	r16,r6
 100cb88:	3009883a 	mov	r4,r6
 100cb8c:	180b883a 	mov	r5,r3
 100cb90:	30000926 	beq	r6,zero,100cbb8 <_setlocale_r+0x58>
 100cb94:	100ebdc0 	call	100ebdc <strcmp>
 100cb98:	8009883a 	mov	r4,r16
 100cb9c:	014040b4 	movhi	r5,258
 100cba0:	297f1e04 	addi	r5,r5,-904
 100cba4:	10000b1e 	bne	r2,zero,100cbd4 <_setlocale_r+0x74>
 100cba8:	8c000d15 	stw	r16,52(r17)
 100cbac:	8c800c15 	stw	r18,48(r17)
 100cbb0:	00c040b4 	movhi	r3,258
 100cbb4:	18fdba04 	addi	r3,r3,-2328
 100cbb8:	1805883a 	mov	r2,r3
 100cbbc:	dfc00317 	ldw	ra,12(sp)
 100cbc0:	dc800217 	ldw	r18,8(sp)
 100cbc4:	dc400117 	ldw	r17,4(sp)
 100cbc8:	dc000017 	ldw	r16,0(sp)
 100cbcc:	dec00404 	addi	sp,sp,16
 100cbd0:	f800283a 	ret
 100cbd4:	100ebdc0 	call	100ebdc <strcmp>
 100cbd8:	0007883a 	mov	r3,zero
 100cbdc:	103ff226 	beq	r2,zero,100cba8 <_setlocale_r+0x48>
 100cbe0:	003ff506 	br	100cbb8 <_setlocale_r+0x58>

0100cbe4 <setlocale>:
 100cbe4:	018040b4 	movhi	r6,258
 100cbe8:	3186c504 	addi	r6,r6,6932
 100cbec:	2007883a 	mov	r3,r4
 100cbf0:	31000017 	ldw	r4,0(r6)
 100cbf4:	280d883a 	mov	r6,r5
 100cbf8:	180b883a 	mov	r5,r3
 100cbfc:	100cb601 	jmpi	100cb60 <_setlocale_r>

0100cc00 <__smakebuf_r>:
 100cc00:	2880030b 	ldhu	r2,12(r5)
 100cc04:	deffed04 	addi	sp,sp,-76
 100cc08:	dc401015 	stw	r17,64(sp)
 100cc0c:	1080008c 	andi	r2,r2,2
 100cc10:	dc000f15 	stw	r16,60(sp)
 100cc14:	dfc01215 	stw	ra,72(sp)
 100cc18:	dc801115 	stw	r18,68(sp)
 100cc1c:	2821883a 	mov	r16,r5
 100cc20:	2023883a 	mov	r17,r4
 100cc24:	10000b26 	beq	r2,zero,100cc54 <__smakebuf_r+0x54>
 100cc28:	28c010c4 	addi	r3,r5,67
 100cc2c:	00800044 	movi	r2,1
 100cc30:	28800515 	stw	r2,20(r5)
 100cc34:	28c00415 	stw	r3,16(r5)
 100cc38:	28c00015 	stw	r3,0(r5)
 100cc3c:	dfc01217 	ldw	ra,72(sp)
 100cc40:	dc801117 	ldw	r18,68(sp)
 100cc44:	dc401017 	ldw	r17,64(sp)
 100cc48:	dc000f17 	ldw	r16,60(sp)
 100cc4c:	dec01304 	addi	sp,sp,76
 100cc50:	f800283a 	ret
 100cc54:	2940038f 	ldh	r5,14(r5)
 100cc58:	28002116 	blt	r5,zero,100cce0 <__smakebuf_r+0xe0>
 100cc5c:	d80d883a 	mov	r6,sp
 100cc60:	101131c0 	call	101131c <_fstat_r>
 100cc64:	10001e16 	blt	r2,zero,100cce0 <__smakebuf_r+0xe0>
 100cc68:	d8800117 	ldw	r2,4(sp)
 100cc6c:	00e00014 	movui	r3,32768
 100cc70:	113c000c 	andi	r4,r2,61440
 100cc74:	20c03126 	beq	r4,r3,100cd3c <__smakebuf_r+0x13c>
 100cc78:	8080030b 	ldhu	r2,12(r16)
 100cc7c:	00c80004 	movi	r3,8192
 100cc80:	10820014 	ori	r2,r2,2048
 100cc84:	8080030d 	sth	r2,12(r16)
 100cc88:	20c01e26 	beq	r4,r3,100cd04 <__smakebuf_r+0x104>
 100cc8c:	04810004 	movi	r18,1024
 100cc90:	8809883a 	mov	r4,r17
 100cc94:	900b883a 	mov	r5,r18
 100cc98:	1005dd40 	call	1005dd4 <_malloc_r>
 100cc9c:	1009883a 	mov	r4,r2
 100cca0:	10003126 	beq	r2,zero,100cd68 <__smakebuf_r+0x168>
 100cca4:	80c0030b 	ldhu	r3,12(r16)
 100cca8:	00804074 	movhi	r2,257
 100ccac:	10af2404 	addi	r2,r2,-17264
 100ccb0:	88800f15 	stw	r2,60(r17)
 100ccb4:	18c02014 	ori	r3,r3,128
 100ccb8:	84800515 	stw	r18,20(r16)
 100ccbc:	80c0030d 	sth	r3,12(r16)
 100ccc0:	81000415 	stw	r4,16(r16)
 100ccc4:	81000015 	stw	r4,0(r16)
 100ccc8:	dfc01217 	ldw	ra,72(sp)
 100cccc:	dc801117 	ldw	r18,68(sp)
 100ccd0:	dc401017 	ldw	r17,64(sp)
 100ccd4:	dc000f17 	ldw	r16,60(sp)
 100ccd8:	dec01304 	addi	sp,sp,76
 100ccdc:	f800283a 	ret
 100cce0:	80c0030b 	ldhu	r3,12(r16)
 100cce4:	1880200c 	andi	r2,r3,128
 100cce8:	10000426 	beq	r2,zero,100ccfc <__smakebuf_r+0xfc>
 100ccec:	04801004 	movi	r18,64
 100ccf0:	18820014 	ori	r2,r3,2048
 100ccf4:	8080030d 	sth	r2,12(r16)
 100ccf8:	003fe506 	br	100cc90 <__smakebuf_r+0x90>
 100ccfc:	04810004 	movi	r18,1024
 100cd00:	003ffb06 	br	100ccf0 <__smakebuf_r+0xf0>
 100cd04:	8140038f 	ldh	r5,14(r16)
 100cd08:	8809883a 	mov	r4,r17
 100cd0c:	1011f180 	call	1011f18 <_isatty_r>
 100cd10:	103fde26 	beq	r2,zero,100cc8c <__smakebuf_r+0x8c>
 100cd14:	8080030b 	ldhu	r2,12(r16)
 100cd18:	80c010c4 	addi	r3,r16,67
 100cd1c:	04810004 	movi	r18,1024
 100cd20:	10800054 	ori	r2,r2,1
 100cd24:	8080030d 	sth	r2,12(r16)
 100cd28:	00800044 	movi	r2,1
 100cd2c:	80c00415 	stw	r3,16(r16)
 100cd30:	80800515 	stw	r2,20(r16)
 100cd34:	80c00015 	stw	r3,0(r16)
 100cd38:	003fd506 	br	100cc90 <__smakebuf_r+0x90>
 100cd3c:	80c00a17 	ldw	r3,40(r16)
 100cd40:	00804074 	movhi	r2,257
 100cd44:	10baa604 	addi	r2,r2,-5480
 100cd48:	18bfcb1e 	bne	r3,r2,100cc78 <__smakebuf_r+0x78>
 100cd4c:	8080030b 	ldhu	r2,12(r16)
 100cd50:	00c10004 	movi	r3,1024
 100cd54:	1825883a 	mov	r18,r3
 100cd58:	10c4b03a 	or	r2,r2,r3
 100cd5c:	8080030d 	sth	r2,12(r16)
 100cd60:	80c01315 	stw	r3,76(r16)
 100cd64:	003fca06 	br	100cc90 <__smakebuf_r+0x90>
 100cd68:	8100030b 	ldhu	r4,12(r16)
 100cd6c:	2080800c 	andi	r2,r4,512
 100cd70:	103fb21e 	bne	r2,zero,100cc3c <__smakebuf_r+0x3c>
 100cd74:	80c010c4 	addi	r3,r16,67
 100cd78:	21000094 	ori	r4,r4,2
 100cd7c:	00800044 	movi	r2,1
 100cd80:	80800515 	stw	r2,20(r16)
 100cd84:	8100030d 	sth	r4,12(r16)
 100cd88:	80c00415 	stw	r3,16(r16)
 100cd8c:	80c00015 	stw	r3,0(r16)
 100cd90:	003faa06 	br	100cc3c <__smakebuf_r+0x3c>

0100cd94 <_mbrtowc_r>:
 100cd94:	defffc04 	addi	sp,sp,-16
 100cd98:	dc400215 	stw	r17,8(sp)
 100cd9c:	dc000115 	stw	r16,4(sp)
 100cda0:	dfc00315 	stw	ra,12(sp)
 100cda4:	dc000417 	ldw	r16,16(sp)
 100cda8:	2023883a 	mov	r17,r4
 100cdac:	30000f26 	beq	r6,zero,100cdec <_mbrtowc_r+0x58>
 100cdb0:	dc000015 	stw	r16,0(sp)
 100cdb4:	100ce540 	call	100ce54 <_mbtowc_r>
 100cdb8:	1007883a 	mov	r3,r2
 100cdbc:	00bfffc4 	movi	r2,-1
 100cdc0:	1809883a 	mov	r4,r3
 100cdc4:	1880111e 	bne	r3,r2,100ce0c <_mbrtowc_r+0x78>
 100cdc8:	80000015 	stw	zero,0(r16)
 100cdcc:	00802284 	movi	r2,138
 100cdd0:	88800015 	stw	r2,0(r17)
 100cdd4:	2005883a 	mov	r2,r4
 100cdd8:	dfc00317 	ldw	ra,12(sp)
 100cddc:	dc400217 	ldw	r17,8(sp)
 100cde0:	dc000117 	ldw	r16,4(sp)
 100cde4:	dec00404 	addi	sp,sp,16
 100cde8:	f800283a 	ret
 100cdec:	000b883a 	mov	r5,zero
 100cdf0:	018040b4 	movhi	r6,258
 100cdf4:	31bf1e04 	addi	r6,r6,-904
 100cdf8:	01c00044 	movi	r7,1
 100cdfc:	dc000015 	stw	r16,0(sp)
 100ce00:	100ce540 	call	100ce54 <_mbtowc_r>
 100ce04:	1007883a 	mov	r3,r2
 100ce08:	003fec06 	br	100cdbc <_mbrtowc_r+0x28>
 100ce0c:	1809883a 	mov	r4,r3
 100ce10:	003ff006 	br	100cdd4 <_mbrtowc_r+0x40>

0100ce14 <mbrtowc>:
 100ce14:	008040b4 	movhi	r2,258
 100ce18:	1086c504 	addi	r2,r2,6932
 100ce1c:	2017883a 	mov	r11,r4
 100ce20:	11000017 	ldw	r4,0(r2)
 100ce24:	defffe04 	addi	sp,sp,-8
 100ce28:	3013883a 	mov	r9,r6
 100ce2c:	2805883a 	mov	r2,r5
 100ce30:	d9c00015 	stw	r7,0(sp)
 100ce34:	580b883a 	mov	r5,r11
 100ce38:	100d883a 	mov	r6,r2
 100ce3c:	480f883a 	mov	r7,r9
 100ce40:	dfc00115 	stw	ra,4(sp)
 100ce44:	100cd940 	call	100cd94 <_mbrtowc_r>
 100ce48:	dfc00117 	ldw	ra,4(sp)
 100ce4c:	dec00204 	addi	sp,sp,8
 100ce50:	f800283a 	ret

0100ce54 <_mbtowc_r>:
 100ce54:	deffff04 	addi	sp,sp,-4
 100ce58:	0005883a 	mov	r2,zero
 100ce5c:	28000326 	beq	r5,zero,100ce6c <_mbtowc_r+0x18>
 100ce60:	3000041e 	bne	r6,zero,100ce74 <_mbtowc_r+0x20>
 100ce64:	dec00104 	addi	sp,sp,4
 100ce68:	f800283a 	ret
 100ce6c:	d80b883a 	mov	r5,sp
 100ce70:	303ffc26 	beq	r6,zero,100ce64 <_mbtowc_r+0x10>
 100ce74:	00bfff84 	movi	r2,-2
 100ce78:	383ffa26 	beq	r7,zero,100ce64 <_mbtowc_r+0x10>
 100ce7c:	30800003 	ldbu	r2,0(r6)
 100ce80:	28800015 	stw	r2,0(r5)
 100ce84:	30c00003 	ldbu	r3,0(r6)
 100ce88:	1804c03a 	cmpne	r2,r3,zero
 100ce8c:	dec00104 	addi	sp,sp,4
 100ce90:	f800283a 	ret

0100ce94 <memchr>:
 100ce94:	008000c4 	movi	r2,3
 100ce98:	29403fcc 	andi	r5,r5,255
 100ce9c:	2007883a 	mov	r3,r4
 100cea0:	1180022e 	bgeu	r2,r6,100ceac <memchr+0x18>
 100cea4:	2084703a 	and	r2,r4,r2
 100cea8:	10000b26 	beq	r2,zero,100ced8 <memchr+0x44>
 100ceac:	313fffc4 	addi	r4,r6,-1
 100ceb0:	3000051e 	bne	r6,zero,100cec8 <memchr+0x34>
 100ceb4:	00002c06 	br	100cf68 <memchr+0xd4>
 100ceb8:	213fffc4 	addi	r4,r4,-1
 100cebc:	00bfffc4 	movi	r2,-1
 100cec0:	18c00044 	addi	r3,r3,1
 100cec4:	20802826 	beq	r4,r2,100cf68 <memchr+0xd4>
 100cec8:	18800003 	ldbu	r2,0(r3)
 100cecc:	28bffa1e 	bne	r5,r2,100ceb8 <memchr+0x24>
 100ced0:	1805883a 	mov	r2,r3
 100ced4:	f800283a 	ret
 100ced8:	0011883a 	mov	r8,zero
 100cedc:	0007883a 	mov	r3,zero
 100cee0:	01c00104 	movi	r7,4
 100cee4:	4004923a 	slli	r2,r8,8
 100cee8:	18c00044 	addi	r3,r3,1
 100ceec:	1151883a 	add	r8,r2,r5
 100cef0:	19fffc1e 	bne	r3,r7,100cee4 <memchr+0x50>
 100cef4:	02bfbff4 	movhi	r10,65279
 100cef8:	52bfbfc4 	addi	r10,r10,-257
 100cefc:	02602074 	movhi	r9,32897
 100cf00:	4a602004 	addi	r9,r9,-32640
 100cf04:	02c000c4 	movi	r11,3
 100cf08:	20800017 	ldw	r2,0(r4)
 100cf0c:	31bfff04 	addi	r6,r6,-4
 100cf10:	200f883a 	mov	r7,r4
 100cf14:	1204f03a 	xor	r2,r2,r8
 100cf18:	1287883a 	add	r3,r2,r10
 100cf1c:	1a46703a 	and	r3,r3,r9
 100cf20:	0084303a 	nor	r2,zero,r2
 100cf24:	10c4703a 	and	r2,r2,r3
 100cf28:	10000b26 	beq	r2,zero,100cf58 <memchr+0xc4>
 100cf2c:	20800003 	ldbu	r2,0(r4)
 100cf30:	28800f26 	beq	r5,r2,100cf70 <memchr+0xdc>
 100cf34:	20800043 	ldbu	r2,1(r4)
 100cf38:	21c00044 	addi	r7,r4,1
 100cf3c:	28800c26 	beq	r5,r2,100cf70 <memchr+0xdc>
 100cf40:	20800083 	ldbu	r2,2(r4)
 100cf44:	21c00084 	addi	r7,r4,2
 100cf48:	28800926 	beq	r5,r2,100cf70 <memchr+0xdc>
 100cf4c:	208000c3 	ldbu	r2,3(r4)
 100cf50:	21c000c4 	addi	r7,r4,3
 100cf54:	28800626 	beq	r5,r2,100cf70 <memchr+0xdc>
 100cf58:	21000104 	addi	r4,r4,4
 100cf5c:	59bfea36 	bltu	r11,r6,100cf08 <memchr+0x74>
 100cf60:	2007883a 	mov	r3,r4
 100cf64:	003fd106 	br	100ceac <memchr+0x18>
 100cf68:	0005883a 	mov	r2,zero
 100cf6c:	f800283a 	ret
 100cf70:	3805883a 	mov	r2,r7
 100cf74:	f800283a 	ret

0100cf78 <memcpy>:
 100cf78:	01c003c4 	movi	r7,15
 100cf7c:	2007883a 	mov	r3,r4
 100cf80:	3980032e 	bgeu	r7,r6,100cf90 <memcpy+0x18>
 100cf84:	2904b03a 	or	r2,r5,r4
 100cf88:	108000cc 	andi	r2,r2,3
 100cf8c:	10000926 	beq	r2,zero,100cfb4 <memcpy+0x3c>
 100cf90:	30000626 	beq	r6,zero,100cfac <memcpy+0x34>
 100cf94:	30cd883a 	add	r6,r6,r3
 100cf98:	28800003 	ldbu	r2,0(r5)
 100cf9c:	29400044 	addi	r5,r5,1
 100cfa0:	18800005 	stb	r2,0(r3)
 100cfa4:	18c00044 	addi	r3,r3,1
 100cfa8:	30fffb1e 	bne	r6,r3,100cf98 <memcpy+0x20>
 100cfac:	2005883a 	mov	r2,r4
 100cfb0:	f800283a 	ret
 100cfb4:	3811883a 	mov	r8,r7
 100cfb8:	200f883a 	mov	r7,r4
 100cfbc:	28c00017 	ldw	r3,0(r5)
 100cfc0:	31bffc04 	addi	r6,r6,-16
 100cfc4:	38c00015 	stw	r3,0(r7)
 100cfc8:	28800117 	ldw	r2,4(r5)
 100cfcc:	38800115 	stw	r2,4(r7)
 100cfd0:	28c00217 	ldw	r3,8(r5)
 100cfd4:	38c00215 	stw	r3,8(r7)
 100cfd8:	28800317 	ldw	r2,12(r5)
 100cfdc:	29400404 	addi	r5,r5,16
 100cfe0:	38800315 	stw	r2,12(r7)
 100cfe4:	39c00404 	addi	r7,r7,16
 100cfe8:	41bff436 	bltu	r8,r6,100cfbc <memcpy+0x44>
 100cfec:	008000c4 	movi	r2,3
 100cff0:	1180072e 	bgeu	r2,r6,100d010 <memcpy+0x98>
 100cff4:	1007883a 	mov	r3,r2
 100cff8:	28800017 	ldw	r2,0(r5)
 100cffc:	31bfff04 	addi	r6,r6,-4
 100d000:	29400104 	addi	r5,r5,4
 100d004:	38800015 	stw	r2,0(r7)
 100d008:	39c00104 	addi	r7,r7,4
 100d00c:	19bffa36 	bltu	r3,r6,100cff8 <memcpy+0x80>
 100d010:	3807883a 	mov	r3,r7
 100d014:	003fde06 	br	100cf90 <memcpy+0x18>

0100d018 <memmove>:
 100d018:	2807883a 	mov	r3,r5
 100d01c:	2011883a 	mov	r8,r4
 100d020:	29000c2e 	bgeu	r5,r4,100d054 <memmove+0x3c>
 100d024:	298f883a 	add	r7,r5,r6
 100d028:	21c00a2e 	bgeu	r4,r7,100d054 <memmove+0x3c>
 100d02c:	30000726 	beq	r6,zero,100d04c <memmove+0x34>
 100d030:	2187883a 	add	r3,r4,r6
 100d034:	198dc83a 	sub	r6,r3,r6
 100d038:	39ffffc4 	addi	r7,r7,-1
 100d03c:	38800003 	ldbu	r2,0(r7)
 100d040:	18ffffc4 	addi	r3,r3,-1
 100d044:	18800005 	stb	r2,0(r3)
 100d048:	19bffb1e 	bne	r3,r6,100d038 <memmove+0x20>
 100d04c:	2005883a 	mov	r2,r4
 100d050:	f800283a 	ret
 100d054:	01c003c4 	movi	r7,15
 100d058:	39800a36 	bltu	r7,r6,100d084 <memmove+0x6c>
 100d05c:	303ffb26 	beq	r6,zero,100d04c <memmove+0x34>
 100d060:	400f883a 	mov	r7,r8
 100d064:	320d883a 	add	r6,r6,r8
 100d068:	28800003 	ldbu	r2,0(r5)
 100d06c:	29400044 	addi	r5,r5,1
 100d070:	38800005 	stb	r2,0(r7)
 100d074:	39c00044 	addi	r7,r7,1
 100d078:	39bffb1e 	bne	r7,r6,100d068 <memmove+0x50>
 100d07c:	2005883a 	mov	r2,r4
 100d080:	f800283a 	ret
 100d084:	1904b03a 	or	r2,r3,r4
 100d088:	108000cc 	andi	r2,r2,3
 100d08c:	103ff31e 	bne	r2,zero,100d05c <memmove+0x44>
 100d090:	3811883a 	mov	r8,r7
 100d094:	180b883a 	mov	r5,r3
 100d098:	200f883a 	mov	r7,r4
 100d09c:	28c00017 	ldw	r3,0(r5)
 100d0a0:	31bffc04 	addi	r6,r6,-16
 100d0a4:	38c00015 	stw	r3,0(r7)
 100d0a8:	28800117 	ldw	r2,4(r5)
 100d0ac:	38800115 	stw	r2,4(r7)
 100d0b0:	28c00217 	ldw	r3,8(r5)
 100d0b4:	38c00215 	stw	r3,8(r7)
 100d0b8:	28800317 	ldw	r2,12(r5)
 100d0bc:	29400404 	addi	r5,r5,16
 100d0c0:	38800315 	stw	r2,12(r7)
 100d0c4:	39c00404 	addi	r7,r7,16
 100d0c8:	41bff436 	bltu	r8,r6,100d09c <memmove+0x84>
 100d0cc:	008000c4 	movi	r2,3
 100d0d0:	1180072e 	bgeu	r2,r6,100d0f0 <memmove+0xd8>
 100d0d4:	1007883a 	mov	r3,r2
 100d0d8:	28800017 	ldw	r2,0(r5)
 100d0dc:	31bfff04 	addi	r6,r6,-4
 100d0e0:	29400104 	addi	r5,r5,4
 100d0e4:	38800015 	stw	r2,0(r7)
 100d0e8:	39c00104 	addi	r7,r7,4
 100d0ec:	19bffa36 	bltu	r3,r6,100d0d8 <memmove+0xc0>
 100d0f0:	3811883a 	mov	r8,r7
 100d0f4:	003fd906 	br	100d05c <memmove+0x44>

0100d0f8 <memset>:
 100d0f8:	008000c4 	movi	r2,3
 100d0fc:	29403fcc 	andi	r5,r5,255
 100d100:	2007883a 	mov	r3,r4
 100d104:	1180022e 	bgeu	r2,r6,100d110 <memset+0x18>
 100d108:	2084703a 	and	r2,r4,r2
 100d10c:	10000826 	beq	r2,zero,100d130 <memset+0x38>
 100d110:	30000526 	beq	r6,zero,100d128 <memset+0x30>
 100d114:	2805883a 	mov	r2,r5
 100d118:	30cd883a 	add	r6,r6,r3
 100d11c:	18800005 	stb	r2,0(r3)
 100d120:	18c00044 	addi	r3,r3,1
 100d124:	19bffd1e 	bne	r3,r6,100d11c <memset+0x24>
 100d128:	2005883a 	mov	r2,r4
 100d12c:	f800283a 	ret
 100d130:	2804923a 	slli	r2,r5,8
 100d134:	020003c4 	movi	r8,15
 100d138:	200f883a 	mov	r7,r4
 100d13c:	2884b03a 	or	r2,r5,r2
 100d140:	1006943a 	slli	r3,r2,16
 100d144:	10c6b03a 	or	r3,r2,r3
 100d148:	41800a2e 	bgeu	r8,r6,100d174 <memset+0x7c>
 100d14c:	4005883a 	mov	r2,r8
 100d150:	31bffc04 	addi	r6,r6,-16
 100d154:	38c00015 	stw	r3,0(r7)
 100d158:	38c00115 	stw	r3,4(r7)
 100d15c:	38c00215 	stw	r3,8(r7)
 100d160:	38c00315 	stw	r3,12(r7)
 100d164:	39c00404 	addi	r7,r7,16
 100d168:	11bff936 	bltu	r2,r6,100d150 <memset+0x58>
 100d16c:	008000c4 	movi	r2,3
 100d170:	1180052e 	bgeu	r2,r6,100d188 <memset+0x90>
 100d174:	31bfff04 	addi	r6,r6,-4
 100d178:	008000c4 	movi	r2,3
 100d17c:	38c00015 	stw	r3,0(r7)
 100d180:	39c00104 	addi	r7,r7,4
 100d184:	11bffb36 	bltu	r2,r6,100d174 <memset+0x7c>
 100d188:	3807883a 	mov	r3,r7
 100d18c:	003fe006 	br	100d110 <memset+0x18>

0100d190 <_Bfree>:
 100d190:	28000826 	beq	r5,zero,100d1b4 <_Bfree+0x24>
 100d194:	28800117 	ldw	r2,4(r5)
 100d198:	21001317 	ldw	r4,76(r4)
 100d19c:	1085883a 	add	r2,r2,r2
 100d1a0:	1085883a 	add	r2,r2,r2
 100d1a4:	1105883a 	add	r2,r2,r4
 100d1a8:	10c00017 	ldw	r3,0(r2)
 100d1ac:	28c00015 	stw	r3,0(r5)
 100d1b0:	11400015 	stw	r5,0(r2)
 100d1b4:	f800283a 	ret

0100d1b8 <__hi0bits>:
 100d1b8:	20bfffec 	andhi	r2,r4,65535
 100d1bc:	10001426 	beq	r2,zero,100d210 <__hi0bits+0x58>
 100d1c0:	0007883a 	mov	r3,zero
 100d1c4:	20bfc02c 	andhi	r2,r4,65280
 100d1c8:	1000021e 	bne	r2,zero,100d1d4 <__hi0bits+0x1c>
 100d1cc:	2008923a 	slli	r4,r4,8
 100d1d0:	18c00204 	addi	r3,r3,8
 100d1d4:	20bc002c 	andhi	r2,r4,61440
 100d1d8:	1000021e 	bne	r2,zero,100d1e4 <__hi0bits+0x2c>
 100d1dc:	2008913a 	slli	r4,r4,4
 100d1e0:	18c00104 	addi	r3,r3,4
 100d1e4:	20b0002c 	andhi	r2,r4,49152
 100d1e8:	1000031e 	bne	r2,zero,100d1f8 <__hi0bits+0x40>
 100d1ec:	2105883a 	add	r2,r4,r4
 100d1f0:	18c00084 	addi	r3,r3,2
 100d1f4:	1089883a 	add	r4,r2,r2
 100d1f8:	20000316 	blt	r4,zero,100d208 <__hi0bits+0x50>
 100d1fc:	2090002c 	andhi	r2,r4,16384
 100d200:	10000626 	beq	r2,zero,100d21c <__hi0bits+0x64>
 100d204:	18c00044 	addi	r3,r3,1
 100d208:	1805883a 	mov	r2,r3
 100d20c:	f800283a 	ret
 100d210:	2008943a 	slli	r4,r4,16
 100d214:	00c00404 	movi	r3,16
 100d218:	003fea06 	br	100d1c4 <__hi0bits+0xc>
 100d21c:	00c00804 	movi	r3,32
 100d220:	1805883a 	mov	r2,r3
 100d224:	f800283a 	ret

0100d228 <__lo0bits>:
 100d228:	20c00017 	ldw	r3,0(r4)
 100d22c:	188001cc 	andi	r2,r3,7
 100d230:	10000a26 	beq	r2,zero,100d25c <__lo0bits+0x34>
 100d234:	1880004c 	andi	r2,r3,1
 100d238:	1005003a 	cmpeq	r2,r2,zero
 100d23c:	10002126 	beq	r2,zero,100d2c4 <__lo0bits+0x9c>
 100d240:	1880008c 	andi	r2,r3,2
 100d244:	1000251e 	bne	r2,zero,100d2dc <__lo0bits+0xb4>
 100d248:	1804d0ba 	srli	r2,r3,2
 100d24c:	01400084 	movi	r5,2
 100d250:	20800015 	stw	r2,0(r4)
 100d254:	2805883a 	mov	r2,r5
 100d258:	f800283a 	ret
 100d25c:	18bfffcc 	andi	r2,r3,65535
 100d260:	10001526 	beq	r2,zero,100d2b8 <__lo0bits+0x90>
 100d264:	000b883a 	mov	r5,zero
 100d268:	18803fcc 	andi	r2,r3,255
 100d26c:	1000021e 	bne	r2,zero,100d278 <__lo0bits+0x50>
 100d270:	1806d23a 	srli	r3,r3,8
 100d274:	29400204 	addi	r5,r5,8
 100d278:	188003cc 	andi	r2,r3,15
 100d27c:	1000021e 	bne	r2,zero,100d288 <__lo0bits+0x60>
 100d280:	1806d13a 	srli	r3,r3,4
 100d284:	29400104 	addi	r5,r5,4
 100d288:	188000cc 	andi	r2,r3,3
 100d28c:	1000021e 	bne	r2,zero,100d298 <__lo0bits+0x70>
 100d290:	1806d0ba 	srli	r3,r3,2
 100d294:	29400084 	addi	r5,r5,2
 100d298:	1880004c 	andi	r2,r3,1
 100d29c:	1000031e 	bne	r2,zero,100d2ac <__lo0bits+0x84>
 100d2a0:	1806d07a 	srli	r3,r3,1
 100d2a4:	18000a26 	beq	r3,zero,100d2d0 <__lo0bits+0xa8>
 100d2a8:	29400044 	addi	r5,r5,1
 100d2ac:	2805883a 	mov	r2,r5
 100d2b0:	20c00015 	stw	r3,0(r4)
 100d2b4:	f800283a 	ret
 100d2b8:	1806d43a 	srli	r3,r3,16
 100d2bc:	01400404 	movi	r5,16
 100d2c0:	003fe906 	br	100d268 <__lo0bits+0x40>
 100d2c4:	000b883a 	mov	r5,zero
 100d2c8:	2805883a 	mov	r2,r5
 100d2cc:	f800283a 	ret
 100d2d0:	01400804 	movi	r5,32
 100d2d4:	2805883a 	mov	r2,r5
 100d2d8:	f800283a 	ret
 100d2dc:	1804d07a 	srli	r2,r3,1
 100d2e0:	01400044 	movi	r5,1
 100d2e4:	20800015 	stw	r2,0(r4)
 100d2e8:	003fda06 	br	100d254 <__lo0bits+0x2c>

0100d2ec <__mcmp>:
 100d2ec:	20800417 	ldw	r2,16(r4)
 100d2f0:	28c00417 	ldw	r3,16(r5)
 100d2f4:	10cfc83a 	sub	r7,r2,r3
 100d2f8:	38000c1e 	bne	r7,zero,100d32c <__mcmp+0x40>
 100d2fc:	18c5883a 	add	r2,r3,r3
 100d300:	1085883a 	add	r2,r2,r2
 100d304:	10c00504 	addi	r3,r2,20
 100d308:	21000504 	addi	r4,r4,20
 100d30c:	28cb883a 	add	r5,r5,r3
 100d310:	2085883a 	add	r2,r4,r2
 100d314:	10bfff04 	addi	r2,r2,-4
 100d318:	297fff04 	addi	r5,r5,-4
 100d31c:	11800017 	ldw	r6,0(r2)
 100d320:	28c00017 	ldw	r3,0(r5)
 100d324:	30c0031e 	bne	r6,r3,100d334 <__mcmp+0x48>
 100d328:	20bffa36 	bltu	r4,r2,100d314 <__mcmp+0x28>
 100d32c:	3805883a 	mov	r2,r7
 100d330:	f800283a 	ret
 100d334:	30c00336 	bltu	r6,r3,100d344 <__mcmp+0x58>
 100d338:	01c00044 	movi	r7,1
 100d33c:	3805883a 	mov	r2,r7
 100d340:	f800283a 	ret
 100d344:	01ffffc4 	movi	r7,-1
 100d348:	003ff806 	br	100d32c <__mcmp+0x40>

0100d34c <__ulp>:
 100d34c:	295ffc2c 	andhi	r5,r5,32752
 100d350:	013f3034 	movhi	r4,64704
 100d354:	290b883a 	add	r5,r5,r4
 100d358:	0145c83a 	sub	r2,zero,r5
 100d35c:	1007d53a 	srai	r3,r2,20
 100d360:	000d883a 	mov	r6,zero
 100d364:	0140040e 	bge	zero,r5,100d378 <__ulp+0x2c>
 100d368:	280f883a 	mov	r7,r5
 100d36c:	3807883a 	mov	r3,r7
 100d370:	3005883a 	mov	r2,r6
 100d374:	f800283a 	ret
 100d378:	008004c4 	movi	r2,19
 100d37c:	193ffb04 	addi	r4,r3,-20
 100d380:	10c00c0e 	bge	r2,r3,100d3b4 <__ulp+0x68>
 100d384:	008007c4 	movi	r2,31
 100d388:	1107c83a 	sub	r3,r2,r4
 100d38c:	00800784 	movi	r2,30
 100d390:	01400044 	movi	r5,1
 100d394:	11000216 	blt	r2,r4,100d3a0 <__ulp+0x54>
 100d398:	00800044 	movi	r2,1
 100d39c:	10ca983a 	sll	r5,r2,r3
 100d3a0:	000f883a 	mov	r7,zero
 100d3a4:	280d883a 	mov	r6,r5
 100d3a8:	3807883a 	mov	r3,r7
 100d3ac:	3005883a 	mov	r2,r6
 100d3b0:	f800283a 	ret
 100d3b4:	00800234 	movhi	r2,8
 100d3b8:	10cfd83a 	sra	r7,r2,r3
 100d3bc:	000d883a 	mov	r6,zero
 100d3c0:	3005883a 	mov	r2,r6
 100d3c4:	3807883a 	mov	r3,r7
 100d3c8:	f800283a 	ret

0100d3cc <__b2d>:
 100d3cc:	20800417 	ldw	r2,16(r4)
 100d3d0:	defff904 	addi	sp,sp,-28
 100d3d4:	dd000415 	stw	r20,16(sp)
 100d3d8:	1085883a 	add	r2,r2,r2
 100d3dc:	25000504 	addi	r20,r4,20
 100d3e0:	1085883a 	add	r2,r2,r2
 100d3e4:	dc000015 	stw	r16,0(sp)
 100d3e8:	a0a1883a 	add	r16,r20,r2
 100d3ec:	dd400515 	stw	r21,20(sp)
 100d3f0:	857fff17 	ldw	r21,-4(r16)
 100d3f4:	dc400115 	stw	r17,4(sp)
 100d3f8:	dfc00615 	stw	ra,24(sp)
 100d3fc:	a809883a 	mov	r4,r21
 100d400:	2823883a 	mov	r17,r5
 100d404:	dcc00315 	stw	r19,12(sp)
 100d408:	dc800215 	stw	r18,8(sp)
 100d40c:	100d1b80 	call	100d1b8 <__hi0bits>
 100d410:	100b883a 	mov	r5,r2
 100d414:	00800804 	movi	r2,32
 100d418:	1145c83a 	sub	r2,r2,r5
 100d41c:	88800015 	stw	r2,0(r17)
 100d420:	00800284 	movi	r2,10
 100d424:	80ffff04 	addi	r3,r16,-4
 100d428:	11401416 	blt	r2,r5,100d47c <__b2d+0xb0>
 100d42c:	008002c4 	movi	r2,11
 100d430:	1149c83a 	sub	r4,r2,r5
 100d434:	a0c02736 	bltu	r20,r3,100d4d4 <__b2d+0x108>
 100d438:	000d883a 	mov	r6,zero
 100d43c:	28800544 	addi	r2,r5,21
 100d440:	a906d83a 	srl	r3,r21,r4
 100d444:	a884983a 	sll	r2,r21,r2
 100d448:	1ccffc34 	orhi	r19,r3,16368
 100d44c:	11a4b03a 	or	r18,r2,r6
 100d450:	9005883a 	mov	r2,r18
 100d454:	9807883a 	mov	r3,r19
 100d458:	dfc00617 	ldw	ra,24(sp)
 100d45c:	dd400517 	ldw	r21,20(sp)
 100d460:	dd000417 	ldw	r20,16(sp)
 100d464:	dcc00317 	ldw	r19,12(sp)
 100d468:	dc800217 	ldw	r18,8(sp)
 100d46c:	dc400117 	ldw	r17,4(sp)
 100d470:	dc000017 	ldw	r16,0(sp)
 100d474:	dec00704 	addi	sp,sp,28
 100d478:	f800283a 	ret
 100d47c:	a0c00e36 	bltu	r20,r3,100d4b8 <__b2d+0xec>
 100d480:	293ffd44 	addi	r4,r5,-11
 100d484:	000d883a 	mov	r6,zero
 100d488:	20000f26 	beq	r4,zero,100d4c8 <__b2d+0xfc>
 100d48c:	00800804 	movi	r2,32
 100d490:	110bc83a 	sub	r5,r2,r4
 100d494:	a0c01236 	bltu	r20,r3,100d4e0 <__b2d+0x114>
 100d498:	000f883a 	mov	r7,zero
 100d49c:	a904983a 	sll	r2,r21,r4
 100d4a0:	3146d83a 	srl	r3,r6,r5
 100d4a4:	3108983a 	sll	r4,r6,r4
 100d4a8:	108ffc34 	orhi	r2,r2,16368
 100d4ac:	18a6b03a 	or	r19,r3,r2
 100d4b0:	3924b03a 	or	r18,r7,r4
 100d4b4:	003fe606 	br	100d450 <__b2d+0x84>
 100d4b8:	293ffd44 	addi	r4,r5,-11
 100d4bc:	81bffe17 	ldw	r6,-8(r16)
 100d4c0:	80fffe04 	addi	r3,r16,-8
 100d4c4:	203ff11e 	bne	r4,zero,100d48c <__b2d+0xc0>
 100d4c8:	accffc34 	orhi	r19,r21,16368
 100d4cc:	3025883a 	mov	r18,r6
 100d4d0:	003fdf06 	br	100d450 <__b2d+0x84>
 100d4d4:	18bfff17 	ldw	r2,-4(r3)
 100d4d8:	110cd83a 	srl	r6,r2,r4
 100d4dc:	003fd706 	br	100d43c <__b2d+0x70>
 100d4e0:	18bfff17 	ldw	r2,-4(r3)
 100d4e4:	114ed83a 	srl	r7,r2,r5
 100d4e8:	003fec06 	br	100d49c <__b2d+0xd0>

0100d4ec <__ratio>:
 100d4ec:	defff904 	addi	sp,sp,-28
 100d4f0:	dc400215 	stw	r17,8(sp)
 100d4f4:	2823883a 	mov	r17,r5
 100d4f8:	d80b883a 	mov	r5,sp
 100d4fc:	dfc00615 	stw	ra,24(sp)
 100d500:	dd000515 	stw	r20,20(sp)
 100d504:	dcc00415 	stw	r19,16(sp)
 100d508:	dc800315 	stw	r18,12(sp)
 100d50c:	2025883a 	mov	r18,r4
 100d510:	100d3cc0 	call	100d3cc <__b2d>
 100d514:	8809883a 	mov	r4,r17
 100d518:	d9400104 	addi	r5,sp,4
 100d51c:	1027883a 	mov	r19,r2
 100d520:	1829883a 	mov	r20,r3
 100d524:	100d3cc0 	call	100d3cc <__b2d>
 100d528:	89000417 	ldw	r4,16(r17)
 100d52c:	91c00417 	ldw	r7,16(r18)
 100d530:	d9800117 	ldw	r6,4(sp)
 100d534:	180b883a 	mov	r5,r3
 100d538:	390fc83a 	sub	r7,r7,r4
 100d53c:	1009883a 	mov	r4,r2
 100d540:	d8800017 	ldw	r2,0(sp)
 100d544:	380e917a 	slli	r7,r7,5
 100d548:	2011883a 	mov	r8,r4
 100d54c:	1185c83a 	sub	r2,r2,r6
 100d550:	11c5883a 	add	r2,r2,r7
 100d554:	1006953a 	slli	r3,r2,20
 100d558:	2813883a 	mov	r9,r5
 100d55c:	00800d0e 	bge	zero,r2,100d594 <__ratio+0xa8>
 100d560:	1d29883a 	add	r20,r3,r20
 100d564:	a00b883a 	mov	r5,r20
 100d568:	480f883a 	mov	r7,r9
 100d56c:	9809883a 	mov	r4,r19
 100d570:	400d883a 	mov	r6,r8
 100d574:	1004fec0 	call	1004fec <__divdf3>
 100d578:	dfc00617 	ldw	ra,24(sp)
 100d57c:	dd000517 	ldw	r20,20(sp)
 100d580:	dcc00417 	ldw	r19,16(sp)
 100d584:	dc800317 	ldw	r18,12(sp)
 100d588:	dc400217 	ldw	r17,8(sp)
 100d58c:	dec00704 	addi	sp,sp,28
 100d590:	f800283a 	ret
 100d594:	28d3c83a 	sub	r9,r5,r3
 100d598:	003ff206 	br	100d564 <__ratio+0x78>

0100d59c <_mprec_log10>:
 100d59c:	defffe04 	addi	sp,sp,-8
 100d5a0:	008005c4 	movi	r2,23
 100d5a4:	dc000015 	stw	r16,0(sp)
 100d5a8:	dfc00115 	stw	ra,4(sp)
 100d5ac:	2021883a 	mov	r16,r4
 100d5b0:	11000c16 	blt	r2,r4,100d5e4 <_mprec_log10+0x48>
 100d5b4:	200490fa 	slli	r2,r4,3
 100d5b8:	00c040b4 	movhi	r3,258
 100d5bc:	18fdcb04 	addi	r3,r3,-2260
 100d5c0:	10c5883a 	add	r2,r2,r3
 100d5c4:	12400117 	ldw	r9,4(r2)
 100d5c8:	12000017 	ldw	r8,0(r2)
 100d5cc:	4807883a 	mov	r3,r9
 100d5d0:	4005883a 	mov	r2,r8
 100d5d4:	dfc00117 	ldw	ra,4(sp)
 100d5d8:	dc000017 	ldw	r16,0(sp)
 100d5dc:	dec00204 	addi	sp,sp,8
 100d5e0:	f800283a 	ret
 100d5e4:	0011883a 	mov	r8,zero
 100d5e8:	024ffc34 	movhi	r9,16368
 100d5ec:	0005883a 	mov	r2,zero
 100d5f0:	00d00934 	movhi	r3,16420
 100d5f4:	480b883a 	mov	r5,r9
 100d5f8:	4009883a 	mov	r4,r8
 100d5fc:	180f883a 	mov	r7,r3
 100d600:	100d883a 	mov	r6,r2
 100d604:	1004c280 	call	1004c28 <__muldf3>
 100d608:	843fffc4 	addi	r16,r16,-1
 100d60c:	1011883a 	mov	r8,r2
 100d610:	1813883a 	mov	r9,r3
 100d614:	803ff51e 	bne	r16,zero,100d5ec <_mprec_log10+0x50>
 100d618:	4005883a 	mov	r2,r8
 100d61c:	4807883a 	mov	r3,r9
 100d620:	dfc00117 	ldw	ra,4(sp)
 100d624:	dc000017 	ldw	r16,0(sp)
 100d628:	dec00204 	addi	sp,sp,8
 100d62c:	f800283a 	ret

0100d630 <__copybits>:
 100d630:	297fffc4 	addi	r5,r5,-1
 100d634:	30800417 	ldw	r2,16(r6)
 100d638:	280bd17a 	srai	r5,r5,5
 100d63c:	31800504 	addi	r6,r6,20
 100d640:	1085883a 	add	r2,r2,r2
 100d644:	294b883a 	add	r5,r5,r5
 100d648:	294b883a 	add	r5,r5,r5
 100d64c:	1085883a 	add	r2,r2,r2
 100d650:	290b883a 	add	r5,r5,r4
 100d654:	3087883a 	add	r3,r6,r2
 100d658:	29400104 	addi	r5,r5,4
 100d65c:	30c0052e 	bgeu	r6,r3,100d674 <__copybits+0x44>
 100d660:	30800017 	ldw	r2,0(r6)
 100d664:	31800104 	addi	r6,r6,4
 100d668:	20800015 	stw	r2,0(r4)
 100d66c:	21000104 	addi	r4,r4,4
 100d670:	30fffb36 	bltu	r6,r3,100d660 <__copybits+0x30>
 100d674:	2140032e 	bgeu	r4,r5,100d684 <__copybits+0x54>
 100d678:	20000015 	stw	zero,0(r4)
 100d67c:	21000104 	addi	r4,r4,4
 100d680:	217ffd36 	bltu	r4,r5,100d678 <__copybits+0x48>
 100d684:	f800283a 	ret

0100d688 <__any_on>:
 100d688:	20800417 	ldw	r2,16(r4)
 100d68c:	2807d17a 	srai	r3,r5,5
 100d690:	21000504 	addi	r4,r4,20
 100d694:	10c00d0e 	bge	r2,r3,100d6cc <__any_on+0x44>
 100d698:	1085883a 	add	r2,r2,r2
 100d69c:	1085883a 	add	r2,r2,r2
 100d6a0:	208d883a 	add	r6,r4,r2
 100d6a4:	2180182e 	bgeu	r4,r6,100d708 <__any_on+0x80>
 100d6a8:	30bfff17 	ldw	r2,-4(r6)
 100d6ac:	30ffff04 	addi	r3,r6,-4
 100d6b0:	1000041e 	bne	r2,zero,100d6c4 <__any_on+0x3c>
 100d6b4:	20c0142e 	bgeu	r4,r3,100d708 <__any_on+0x80>
 100d6b8:	18ffff04 	addi	r3,r3,-4
 100d6bc:	18800017 	ldw	r2,0(r3)
 100d6c0:	103ffc26 	beq	r2,zero,100d6b4 <__any_on+0x2c>
 100d6c4:	00800044 	movi	r2,1
 100d6c8:	f800283a 	ret
 100d6cc:	18800a0e 	bge	r3,r2,100d6f8 <__any_on+0x70>
 100d6d0:	294007cc 	andi	r5,r5,31
 100d6d4:	28000826 	beq	r5,zero,100d6f8 <__any_on+0x70>
 100d6d8:	18c5883a 	add	r2,r3,r3
 100d6dc:	1085883a 	add	r2,r2,r2
 100d6e0:	208d883a 	add	r6,r4,r2
 100d6e4:	30c00017 	ldw	r3,0(r6)
 100d6e8:	1944d83a 	srl	r2,r3,r5
 100d6ec:	1144983a 	sll	r2,r2,r5
 100d6f0:	18bff41e 	bne	r3,r2,100d6c4 <__any_on+0x3c>
 100d6f4:	003feb06 	br	100d6a4 <__any_on+0x1c>
 100d6f8:	18c5883a 	add	r2,r3,r3
 100d6fc:	1085883a 	add	r2,r2,r2
 100d700:	208d883a 	add	r6,r4,r2
 100d704:	003fe706 	br	100d6a4 <__any_on+0x1c>
 100d708:	0005883a 	mov	r2,zero
 100d70c:	f800283a 	ret

0100d710 <_Balloc>:
 100d710:	20c01317 	ldw	r3,76(r4)
 100d714:	defffb04 	addi	sp,sp,-20
 100d718:	dcc00315 	stw	r19,12(sp)
 100d71c:	dc800215 	stw	r18,8(sp)
 100d720:	dfc00415 	stw	ra,16(sp)
 100d724:	2825883a 	mov	r18,r5
 100d728:	dc400115 	stw	r17,4(sp)
 100d72c:	dc000015 	stw	r16,0(sp)
 100d730:	2027883a 	mov	r19,r4
 100d734:	01800404 	movi	r6,16
 100d738:	01400104 	movi	r5,4
 100d73c:	18001726 	beq	r3,zero,100d79c <_Balloc+0x8c>
 100d740:	01400044 	movi	r5,1
 100d744:	9485883a 	add	r2,r18,r18
 100d748:	2ca2983a 	sll	r17,r5,r18
 100d74c:	1085883a 	add	r2,r2,r2
 100d750:	10c7883a 	add	r3,r2,r3
 100d754:	1c000017 	ldw	r16,0(r3)
 100d758:	8c4d883a 	add	r6,r17,r17
 100d75c:	318d883a 	add	r6,r6,r6
 100d760:	9809883a 	mov	r4,r19
 100d764:	31800504 	addi	r6,r6,20
 100d768:	80001226 	beq	r16,zero,100d7b4 <_Balloc+0xa4>
 100d76c:	80800017 	ldw	r2,0(r16)
 100d770:	18800015 	stw	r2,0(r3)
 100d774:	80000415 	stw	zero,16(r16)
 100d778:	80000315 	stw	zero,12(r16)
 100d77c:	8005883a 	mov	r2,r16
 100d780:	dfc00417 	ldw	ra,16(sp)
 100d784:	dcc00317 	ldw	r19,12(sp)
 100d788:	dc800217 	ldw	r18,8(sp)
 100d78c:	dc400117 	ldw	r17,4(sp)
 100d790:	dc000017 	ldw	r16,0(sp)
 100d794:	dec00504 	addi	sp,sp,20
 100d798:	f800283a 	ret
 100d79c:	10110d40 	call	10110d4 <_calloc_r>
 100d7a0:	1007883a 	mov	r3,r2
 100d7a4:	0021883a 	mov	r16,zero
 100d7a8:	98801315 	stw	r2,76(r19)
 100d7ac:	103fe41e 	bne	r2,zero,100d740 <_Balloc+0x30>
 100d7b0:	003ff206 	br	100d77c <_Balloc+0x6c>
 100d7b4:	10110d40 	call	10110d4 <_calloc_r>
 100d7b8:	103ff026 	beq	r2,zero,100d77c <_Balloc+0x6c>
 100d7bc:	1021883a 	mov	r16,r2
 100d7c0:	14800115 	stw	r18,4(r2)
 100d7c4:	14400215 	stw	r17,8(r2)
 100d7c8:	003fea06 	br	100d774 <_Balloc+0x64>

0100d7cc <__d2b>:
 100d7cc:	defff504 	addi	sp,sp,-44
 100d7d0:	dcc00515 	stw	r19,20(sp)
 100d7d4:	04c00044 	movi	r19,1
 100d7d8:	dc000215 	stw	r16,8(sp)
 100d7dc:	2821883a 	mov	r16,r5
 100d7e0:	980b883a 	mov	r5,r19
 100d7e4:	ddc00915 	stw	r23,36(sp)
 100d7e8:	dd800815 	stw	r22,32(sp)
 100d7ec:	dd400715 	stw	r21,28(sp)
 100d7f0:	dd000615 	stw	r20,24(sp)
 100d7f4:	dc800415 	stw	r18,16(sp)
 100d7f8:	dc400315 	stw	r17,12(sp)
 100d7fc:	dfc00a15 	stw	ra,40(sp)
 100d800:	3023883a 	mov	r17,r6
 100d804:	382d883a 	mov	r22,r7
 100d808:	ddc00b17 	ldw	r23,44(sp)
 100d80c:	100d7100 	call	100d710 <_Balloc>
 100d810:	1025883a 	mov	r18,r2
 100d814:	00a00034 	movhi	r2,32768
 100d818:	10bfffc4 	addi	r2,r2,-1
 100d81c:	8888703a 	and	r4,r17,r2
 100d820:	202ad53a 	srli	r21,r4,20
 100d824:	00800434 	movhi	r2,16
 100d828:	10bfffc4 	addi	r2,r2,-1
 100d82c:	8886703a 	and	r3,r17,r2
 100d830:	a829003a 	cmpeq	r20,r21,zero
 100d834:	800b883a 	mov	r5,r16
 100d838:	d8c00115 	stw	r3,4(sp)
 100d83c:	94000504 	addi	r16,r18,20
 100d840:	a000021e 	bne	r20,zero,100d84c <__d2b+0x80>
 100d844:	18c00434 	orhi	r3,r3,16
 100d848:	d8c00115 	stw	r3,4(sp)
 100d84c:	28002726 	beq	r5,zero,100d8ec <__d2b+0x120>
 100d850:	d809883a 	mov	r4,sp
 100d854:	d9400015 	stw	r5,0(sp)
 100d858:	100d2280 	call	100d228 <__lo0bits>
 100d85c:	100d883a 	mov	r6,r2
 100d860:	10003526 	beq	r2,zero,100d938 <__d2b+0x16c>
 100d864:	d8c00117 	ldw	r3,4(sp)
 100d868:	00800804 	movi	r2,32
 100d86c:	1185c83a 	sub	r2,r2,r6
 100d870:	d9000017 	ldw	r4,0(sp)
 100d874:	1886983a 	sll	r3,r3,r2
 100d878:	1906b03a 	or	r3,r3,r4
 100d87c:	90c00515 	stw	r3,20(r18)
 100d880:	d8c00117 	ldw	r3,4(sp)
 100d884:	1986d83a 	srl	r3,r3,r6
 100d888:	d8c00115 	stw	r3,4(sp)
 100d88c:	180b003a 	cmpeq	r5,r3,zero
 100d890:	00800084 	movi	r2,2
 100d894:	114bc83a 	sub	r5,r2,r5
 100d898:	80c00115 	stw	r3,4(r16)
 100d89c:	91400415 	stw	r5,16(r18)
 100d8a0:	a0001a1e 	bne	r20,zero,100d90c <__d2b+0x140>
 100d8a4:	3545883a 	add	r2,r6,r21
 100d8a8:	10bef344 	addi	r2,r2,-1075
 100d8ac:	00c00d44 	movi	r3,53
 100d8b0:	b0800015 	stw	r2,0(r22)
 100d8b4:	1987c83a 	sub	r3,r3,r6
 100d8b8:	b8c00015 	stw	r3,0(r23)
 100d8bc:	9005883a 	mov	r2,r18
 100d8c0:	dfc00a17 	ldw	ra,40(sp)
 100d8c4:	ddc00917 	ldw	r23,36(sp)
 100d8c8:	dd800817 	ldw	r22,32(sp)
 100d8cc:	dd400717 	ldw	r21,28(sp)
 100d8d0:	dd000617 	ldw	r20,24(sp)
 100d8d4:	dcc00517 	ldw	r19,20(sp)
 100d8d8:	dc800417 	ldw	r18,16(sp)
 100d8dc:	dc400317 	ldw	r17,12(sp)
 100d8e0:	dc000217 	ldw	r16,8(sp)
 100d8e4:	dec00b04 	addi	sp,sp,44
 100d8e8:	f800283a 	ret
 100d8ec:	d9000104 	addi	r4,sp,4
 100d8f0:	100d2280 	call	100d228 <__lo0bits>
 100d8f4:	11800804 	addi	r6,r2,32
 100d8f8:	d8800117 	ldw	r2,4(sp)
 100d8fc:	94c00415 	stw	r19,16(r18)
 100d900:	980b883a 	mov	r5,r19
 100d904:	90800515 	stw	r2,20(r18)
 100d908:	a03fe626 	beq	r20,zero,100d8a4 <__d2b+0xd8>
 100d90c:	2945883a 	add	r2,r5,r5
 100d910:	1085883a 	add	r2,r2,r2
 100d914:	1405883a 	add	r2,r2,r16
 100d918:	113fff17 	ldw	r4,-4(r2)
 100d91c:	30fef384 	addi	r3,r6,-1074
 100d920:	2820917a 	slli	r16,r5,5
 100d924:	b0c00015 	stw	r3,0(r22)
 100d928:	100d1b80 	call	100d1b8 <__hi0bits>
 100d92c:	80a1c83a 	sub	r16,r16,r2
 100d930:	bc000015 	stw	r16,0(r23)
 100d934:	003fe106 	br	100d8bc <__d2b+0xf0>
 100d938:	d8800017 	ldw	r2,0(sp)
 100d93c:	90800515 	stw	r2,20(r18)
 100d940:	d8c00117 	ldw	r3,4(sp)
 100d944:	003fd106 	br	100d88c <__d2b+0xc0>

0100d948 <__mdiff>:
 100d948:	defffb04 	addi	sp,sp,-20
 100d94c:	dc000015 	stw	r16,0(sp)
 100d950:	2821883a 	mov	r16,r5
 100d954:	dc800215 	stw	r18,8(sp)
 100d958:	300b883a 	mov	r5,r6
 100d95c:	2025883a 	mov	r18,r4
 100d960:	8009883a 	mov	r4,r16
 100d964:	dc400115 	stw	r17,4(sp)
 100d968:	dfc00415 	stw	ra,16(sp)
 100d96c:	dcc00315 	stw	r19,12(sp)
 100d970:	3023883a 	mov	r17,r6
 100d974:	100d2ec0 	call	100d2ec <__mcmp>
 100d978:	10004226 	beq	r2,zero,100da84 <__mdiff+0x13c>
 100d97c:	10005016 	blt	r2,zero,100dac0 <__mdiff+0x178>
 100d980:	0027883a 	mov	r19,zero
 100d984:	81400117 	ldw	r5,4(r16)
 100d988:	9009883a 	mov	r4,r18
 100d98c:	100d7100 	call	100d710 <_Balloc>
 100d990:	1019883a 	mov	r12,r2
 100d994:	82800417 	ldw	r10,16(r16)
 100d998:	88800417 	ldw	r2,16(r17)
 100d99c:	81800504 	addi	r6,r16,20
 100d9a0:	5287883a 	add	r3,r10,r10
 100d9a4:	1085883a 	add	r2,r2,r2
 100d9a8:	18c7883a 	add	r3,r3,r3
 100d9ac:	1085883a 	add	r2,r2,r2
 100d9b0:	8a000504 	addi	r8,r17,20
 100d9b4:	64c00315 	stw	r19,12(r12)
 100d9b8:	30db883a 	add	r13,r6,r3
 100d9bc:	4097883a 	add	r11,r8,r2
 100d9c0:	61c00504 	addi	r7,r12,20
 100d9c4:	0013883a 	mov	r9,zero
 100d9c8:	31000017 	ldw	r4,0(r6)
 100d9cc:	41400017 	ldw	r5,0(r8)
 100d9d0:	42000104 	addi	r8,r8,4
 100d9d4:	20bfffcc 	andi	r2,r4,65535
 100d9d8:	28ffffcc 	andi	r3,r5,65535
 100d9dc:	10c5c83a 	sub	r2,r2,r3
 100d9e0:	1245883a 	add	r2,r2,r9
 100d9e4:	2008d43a 	srli	r4,r4,16
 100d9e8:	280ad43a 	srli	r5,r5,16
 100d9ec:	1007d43a 	srai	r3,r2,16
 100d9f0:	3880000d 	sth	r2,0(r7)
 100d9f4:	2149c83a 	sub	r4,r4,r5
 100d9f8:	20c9883a 	add	r4,r4,r3
 100d9fc:	3900008d 	sth	r4,2(r7)
 100da00:	31800104 	addi	r6,r6,4
 100da04:	39c00104 	addi	r7,r7,4
 100da08:	2013d43a 	srai	r9,r4,16
 100da0c:	42ffee36 	bltu	r8,r11,100d9c8 <__mdiff+0x80>
 100da10:	33400c2e 	bgeu	r6,r13,100da44 <__mdiff+0xfc>
 100da14:	30800017 	ldw	r2,0(r6)
 100da18:	31800104 	addi	r6,r6,4
 100da1c:	10ffffcc 	andi	r3,r2,65535
 100da20:	1a47883a 	add	r3,r3,r9
 100da24:	1004d43a 	srli	r2,r2,16
 100da28:	1809d43a 	srai	r4,r3,16
 100da2c:	38c0000d 	sth	r3,0(r7)
 100da30:	1105883a 	add	r2,r2,r4
 100da34:	3880008d 	sth	r2,2(r7)
 100da38:	1013d43a 	srai	r9,r2,16
 100da3c:	39c00104 	addi	r7,r7,4
 100da40:	337ff436 	bltu	r6,r13,100da14 <__mdiff+0xcc>
 100da44:	38bfff17 	ldw	r2,-4(r7)
 100da48:	38ffff04 	addi	r3,r7,-4
 100da4c:	1000041e 	bne	r2,zero,100da60 <__mdiff+0x118>
 100da50:	18ffff04 	addi	r3,r3,-4
 100da54:	18800017 	ldw	r2,0(r3)
 100da58:	52bfffc4 	addi	r10,r10,-1
 100da5c:	103ffc26 	beq	r2,zero,100da50 <__mdiff+0x108>
 100da60:	6005883a 	mov	r2,r12
 100da64:	62800415 	stw	r10,16(r12)
 100da68:	dfc00417 	ldw	ra,16(sp)
 100da6c:	dcc00317 	ldw	r19,12(sp)
 100da70:	dc800217 	ldw	r18,8(sp)
 100da74:	dc400117 	ldw	r17,4(sp)
 100da78:	dc000017 	ldw	r16,0(sp)
 100da7c:	dec00504 	addi	sp,sp,20
 100da80:	f800283a 	ret
 100da84:	9009883a 	mov	r4,r18
 100da88:	000b883a 	mov	r5,zero
 100da8c:	100d7100 	call	100d710 <_Balloc>
 100da90:	1019883a 	mov	r12,r2
 100da94:	00800044 	movi	r2,1
 100da98:	60800415 	stw	r2,16(r12)
 100da9c:	6005883a 	mov	r2,r12
 100daa0:	60000515 	stw	zero,20(r12)
 100daa4:	dfc00417 	ldw	ra,16(sp)
 100daa8:	dcc00317 	ldw	r19,12(sp)
 100daac:	dc800217 	ldw	r18,8(sp)
 100dab0:	dc400117 	ldw	r17,4(sp)
 100dab4:	dc000017 	ldw	r16,0(sp)
 100dab8:	dec00504 	addi	sp,sp,20
 100dabc:	f800283a 	ret
 100dac0:	880d883a 	mov	r6,r17
 100dac4:	04c00044 	movi	r19,1
 100dac8:	8023883a 	mov	r17,r16
 100dacc:	3021883a 	mov	r16,r6
 100dad0:	003fac06 	br	100d984 <__mdiff+0x3c>

0100dad4 <__lshift>:
 100dad4:	defff904 	addi	sp,sp,-28
 100dad8:	28800417 	ldw	r2,16(r5)
 100dadc:	dc000015 	stw	r16,0(sp)
 100dae0:	3021d17a 	srai	r16,r6,5
 100dae4:	28c00217 	ldw	r3,8(r5)
 100dae8:	10800044 	addi	r2,r2,1
 100daec:	dc400115 	stw	r17,4(sp)
 100daf0:	80a3883a 	add	r17,r16,r2
 100daf4:	dd400515 	stw	r21,20(sp)
 100daf8:	dd000415 	stw	r20,16(sp)
 100dafc:	dc800215 	stw	r18,8(sp)
 100db00:	dfc00615 	stw	ra,24(sp)
 100db04:	2825883a 	mov	r18,r5
 100db08:	dcc00315 	stw	r19,12(sp)
 100db0c:	3029883a 	mov	r20,r6
 100db10:	202b883a 	mov	r21,r4
 100db14:	29400117 	ldw	r5,4(r5)
 100db18:	1c40030e 	bge	r3,r17,100db28 <__lshift+0x54>
 100db1c:	18c7883a 	add	r3,r3,r3
 100db20:	29400044 	addi	r5,r5,1
 100db24:	1c7ffd16 	blt	r3,r17,100db1c <__lshift+0x48>
 100db28:	a809883a 	mov	r4,r21
 100db2c:	100d7100 	call	100d710 <_Balloc>
 100db30:	1027883a 	mov	r19,r2
 100db34:	11400504 	addi	r5,r2,20
 100db38:	0400090e 	bge	zero,r16,100db60 <__lshift+0x8c>
 100db3c:	2805883a 	mov	r2,r5
 100db40:	0007883a 	mov	r3,zero
 100db44:	18c00044 	addi	r3,r3,1
 100db48:	10000015 	stw	zero,0(r2)
 100db4c:	10800104 	addi	r2,r2,4
 100db50:	80fffc1e 	bne	r16,r3,100db44 <__lshift+0x70>
 100db54:	8405883a 	add	r2,r16,r16
 100db58:	1085883a 	add	r2,r2,r2
 100db5c:	288b883a 	add	r5,r5,r2
 100db60:	90800417 	ldw	r2,16(r18)
 100db64:	91000504 	addi	r4,r18,20
 100db68:	a18007cc 	andi	r6,r20,31
 100db6c:	1085883a 	add	r2,r2,r2
 100db70:	1085883a 	add	r2,r2,r2
 100db74:	208f883a 	add	r7,r4,r2
 100db78:	30001e26 	beq	r6,zero,100dbf4 <__lshift+0x120>
 100db7c:	00800804 	movi	r2,32
 100db80:	1191c83a 	sub	r8,r2,r6
 100db84:	0007883a 	mov	r3,zero
 100db88:	20800017 	ldw	r2,0(r4)
 100db8c:	1184983a 	sll	r2,r2,r6
 100db90:	1884b03a 	or	r2,r3,r2
 100db94:	28800015 	stw	r2,0(r5)
 100db98:	20c00017 	ldw	r3,0(r4)
 100db9c:	21000104 	addi	r4,r4,4
 100dba0:	29400104 	addi	r5,r5,4
 100dba4:	1a06d83a 	srl	r3,r3,r8
 100dba8:	21fff736 	bltu	r4,r7,100db88 <__lshift+0xb4>
 100dbac:	28c00015 	stw	r3,0(r5)
 100dbb0:	18000126 	beq	r3,zero,100dbb8 <__lshift+0xe4>
 100dbb4:	8c400044 	addi	r17,r17,1
 100dbb8:	88bfffc4 	addi	r2,r17,-1
 100dbbc:	98800415 	stw	r2,16(r19)
 100dbc0:	a809883a 	mov	r4,r21
 100dbc4:	900b883a 	mov	r5,r18
 100dbc8:	100d1900 	call	100d190 <_Bfree>
 100dbcc:	9805883a 	mov	r2,r19
 100dbd0:	dfc00617 	ldw	ra,24(sp)
 100dbd4:	dd400517 	ldw	r21,20(sp)
 100dbd8:	dd000417 	ldw	r20,16(sp)
 100dbdc:	dcc00317 	ldw	r19,12(sp)
 100dbe0:	dc800217 	ldw	r18,8(sp)
 100dbe4:	dc400117 	ldw	r17,4(sp)
 100dbe8:	dc000017 	ldw	r16,0(sp)
 100dbec:	dec00704 	addi	sp,sp,28
 100dbf0:	f800283a 	ret
 100dbf4:	20800017 	ldw	r2,0(r4)
 100dbf8:	21000104 	addi	r4,r4,4
 100dbfc:	28800015 	stw	r2,0(r5)
 100dc00:	29400104 	addi	r5,r5,4
 100dc04:	21ffec2e 	bgeu	r4,r7,100dbb8 <__lshift+0xe4>
 100dc08:	20800017 	ldw	r2,0(r4)
 100dc0c:	21000104 	addi	r4,r4,4
 100dc10:	28800015 	stw	r2,0(r5)
 100dc14:	29400104 	addi	r5,r5,4
 100dc18:	21fff636 	bltu	r4,r7,100dbf4 <__lshift+0x120>
 100dc1c:	003fe606 	br	100dbb8 <__lshift+0xe4>

0100dc20 <__multiply>:
 100dc20:	defff904 	addi	sp,sp,-28
 100dc24:	dcc00315 	stw	r19,12(sp)
 100dc28:	dc800215 	stw	r18,8(sp)
 100dc2c:	2cc00417 	ldw	r19,16(r5)
 100dc30:	34800417 	ldw	r18,16(r6)
 100dc34:	dd000415 	stw	r20,16(sp)
 100dc38:	dc400115 	stw	r17,4(sp)
 100dc3c:	dfc00615 	stw	ra,24(sp)
 100dc40:	dd400515 	stw	r21,20(sp)
 100dc44:	dc000015 	stw	r16,0(sp)
 100dc48:	2823883a 	mov	r17,r5
 100dc4c:	3029883a 	mov	r20,r6
 100dc50:	9c80040e 	bge	r19,r18,100dc64 <__multiply+0x44>
 100dc54:	9027883a 	mov	r19,r18
 100dc58:	2c800417 	ldw	r18,16(r5)
 100dc5c:	2829883a 	mov	r20,r5
 100dc60:	3023883a 	mov	r17,r6
 100dc64:	88800217 	ldw	r2,8(r17)
 100dc68:	9ca1883a 	add	r16,r19,r18
 100dc6c:	89400117 	ldw	r5,4(r17)
 100dc70:	1400010e 	bge	r2,r16,100dc78 <__multiply+0x58>
 100dc74:	29400044 	addi	r5,r5,1
 100dc78:	100d7100 	call	100d710 <_Balloc>
 100dc7c:	102b883a 	mov	r21,r2
 100dc80:	8405883a 	add	r2,r16,r16
 100dc84:	1085883a 	add	r2,r2,r2
 100dc88:	a9000504 	addi	r4,r21,20
 100dc8c:	209d883a 	add	r14,r4,r2
 100dc90:	2380042e 	bgeu	r4,r14,100dca4 <__multiply+0x84>
 100dc94:	2005883a 	mov	r2,r4
 100dc98:	10000015 	stw	zero,0(r2)
 100dc9c:	10800104 	addi	r2,r2,4
 100dca0:	13bffd36 	bltu	r2,r14,100dc98 <__multiply+0x78>
 100dca4:	9485883a 	add	r2,r18,r18
 100dca8:	9cc7883a 	add	r3,r19,r19
 100dcac:	a1800504 	addi	r6,r20,20
 100dcb0:	1085883a 	add	r2,r2,r2
 100dcb4:	8b400504 	addi	r13,r17,20
 100dcb8:	18c7883a 	add	r3,r3,r3
 100dcbc:	309f883a 	add	r15,r6,r2
 100dcc0:	68d7883a 	add	r11,r13,r3
 100dcc4:	33c03b2e 	bgeu	r6,r15,100ddb4 <__multiply+0x194>
 100dcc8:	2019883a 	mov	r12,r4
 100dccc:	30800017 	ldw	r2,0(r6)
 100dcd0:	127fffcc 	andi	r9,r2,65535
 100dcd4:	48001826 	beq	r9,zero,100dd38 <__multiply+0x118>
 100dcd8:	6811883a 	mov	r8,r13
 100dcdc:	600f883a 	mov	r7,r12
 100dce0:	0015883a 	mov	r10,zero
 100dce4:	40c00017 	ldw	r3,0(r8)
 100dce8:	39400017 	ldw	r5,0(r7)
 100dcec:	42000104 	addi	r8,r8,4
 100dcf0:	193fffcc 	andi	r4,r3,65535
 100dcf4:	4909383a 	mul	r4,r9,r4
 100dcf8:	1806d43a 	srli	r3,r3,16
 100dcfc:	28bfffcc 	andi	r2,r5,65535
 100dd00:	5085883a 	add	r2,r10,r2
 100dd04:	2089883a 	add	r4,r4,r2
 100dd08:	48c7383a 	mul	r3,r9,r3
 100dd0c:	280ad43a 	srli	r5,r5,16
 100dd10:	2004d43a 	srli	r2,r4,16
 100dd14:	3900000d 	sth	r4,0(r7)
 100dd18:	1947883a 	add	r3,r3,r5
 100dd1c:	10c5883a 	add	r2,r2,r3
 100dd20:	3880008d 	sth	r2,2(r7)
 100dd24:	1014d43a 	srli	r10,r2,16
 100dd28:	39c00104 	addi	r7,r7,4
 100dd2c:	42ffed36 	bltu	r8,r11,100dce4 <__multiply+0xc4>
 100dd30:	3a800015 	stw	r10,0(r7)
 100dd34:	30800017 	ldw	r2,0(r6)
 100dd38:	1012d43a 	srli	r9,r2,16
 100dd3c:	48001926 	beq	r9,zero,100dda4 <__multiply+0x184>
 100dd40:	60800017 	ldw	r2,0(r12)
 100dd44:	6811883a 	mov	r8,r13
 100dd48:	600f883a 	mov	r7,r12
 100dd4c:	0015883a 	mov	r10,zero
 100dd50:	100b883a 	mov	r5,r2
 100dd54:	41000017 	ldw	r4,0(r8)
 100dd58:	2806d43a 	srli	r3,r5,16
 100dd5c:	3880000d 	sth	r2,0(r7)
 100dd60:	20bfffcc 	andi	r2,r4,65535
 100dd64:	4885383a 	mul	r2,r9,r2
 100dd68:	50c7883a 	add	r3,r10,r3
 100dd6c:	2008d43a 	srli	r4,r4,16
 100dd70:	10c5883a 	add	r2,r2,r3
 100dd74:	3880008d 	sth	r2,2(r7)
 100dd78:	39c00104 	addi	r7,r7,4
 100dd7c:	39400017 	ldw	r5,0(r7)
 100dd80:	4909383a 	mul	r4,r9,r4
 100dd84:	1004d43a 	srli	r2,r2,16
 100dd88:	28ffffcc 	andi	r3,r5,65535
 100dd8c:	20c9883a 	add	r4,r4,r3
 100dd90:	1105883a 	add	r2,r2,r4
 100dd94:	42000104 	addi	r8,r8,4
 100dd98:	1014d43a 	srli	r10,r2,16
 100dd9c:	42ffed36 	bltu	r8,r11,100dd54 <__multiply+0x134>
 100dda0:	38800015 	stw	r2,0(r7)
 100dda4:	31800104 	addi	r6,r6,4
 100dda8:	33c0022e 	bgeu	r6,r15,100ddb4 <__multiply+0x194>
 100ddac:	63000104 	addi	r12,r12,4
 100ddb0:	003fc606 	br	100dccc <__multiply+0xac>
 100ddb4:	0400090e 	bge	zero,r16,100dddc <__multiply+0x1bc>
 100ddb8:	70bfff17 	ldw	r2,-4(r14)
 100ddbc:	70ffff04 	addi	r3,r14,-4
 100ddc0:	10000326 	beq	r2,zero,100ddd0 <__multiply+0x1b0>
 100ddc4:	00000506 	br	100dddc <__multiply+0x1bc>
 100ddc8:	18800017 	ldw	r2,0(r3)
 100ddcc:	1000031e 	bne	r2,zero,100dddc <__multiply+0x1bc>
 100ddd0:	843fffc4 	addi	r16,r16,-1
 100ddd4:	18ffff04 	addi	r3,r3,-4
 100ddd8:	803ffb1e 	bne	r16,zero,100ddc8 <__multiply+0x1a8>
 100dddc:	a805883a 	mov	r2,r21
 100dde0:	ac000415 	stw	r16,16(r21)
 100dde4:	dfc00617 	ldw	ra,24(sp)
 100dde8:	dd400517 	ldw	r21,20(sp)
 100ddec:	dd000417 	ldw	r20,16(sp)
 100ddf0:	dcc00317 	ldw	r19,12(sp)
 100ddf4:	dc800217 	ldw	r18,8(sp)
 100ddf8:	dc400117 	ldw	r17,4(sp)
 100ddfc:	dc000017 	ldw	r16,0(sp)
 100de00:	dec00704 	addi	sp,sp,28
 100de04:	f800283a 	ret

0100de08 <__i2b>:
 100de08:	defffd04 	addi	sp,sp,-12
 100de0c:	dc000015 	stw	r16,0(sp)
 100de10:	04000044 	movi	r16,1
 100de14:	dc800115 	stw	r18,4(sp)
 100de18:	2825883a 	mov	r18,r5
 100de1c:	800b883a 	mov	r5,r16
 100de20:	dfc00215 	stw	ra,8(sp)
 100de24:	100d7100 	call	100d710 <_Balloc>
 100de28:	14000415 	stw	r16,16(r2)
 100de2c:	14800515 	stw	r18,20(r2)
 100de30:	dfc00217 	ldw	ra,8(sp)
 100de34:	dc800117 	ldw	r18,4(sp)
 100de38:	dc000017 	ldw	r16,0(sp)
 100de3c:	dec00304 	addi	sp,sp,12
 100de40:	f800283a 	ret

0100de44 <__multadd>:
 100de44:	defffa04 	addi	sp,sp,-24
 100de48:	dc800215 	stw	r18,8(sp)
 100de4c:	2c800417 	ldw	r18,16(r5)
 100de50:	dd000415 	stw	r20,16(sp)
 100de54:	dcc00315 	stw	r19,12(sp)
 100de58:	dc000015 	stw	r16,0(sp)
 100de5c:	dfc00515 	stw	ra,20(sp)
 100de60:	3821883a 	mov	r16,r7
 100de64:	dc400115 	stw	r17,4(sp)
 100de68:	2827883a 	mov	r19,r5
 100de6c:	2029883a 	mov	r20,r4
 100de70:	2a000504 	addi	r8,r5,20
 100de74:	000f883a 	mov	r7,zero
 100de78:	40800017 	ldw	r2,0(r8)
 100de7c:	39c00044 	addi	r7,r7,1
 100de80:	10ffffcc 	andi	r3,r2,65535
 100de84:	1987383a 	mul	r3,r3,r6
 100de88:	1004d43a 	srli	r2,r2,16
 100de8c:	1c07883a 	add	r3,r3,r16
 100de90:	180ad43a 	srli	r5,r3,16
 100de94:	1185383a 	mul	r2,r2,r6
 100de98:	18ffffcc 	andi	r3,r3,65535
 100de9c:	1145883a 	add	r2,r2,r5
 100dea0:	1008943a 	slli	r4,r2,16
 100dea4:	1020d43a 	srli	r16,r2,16
 100dea8:	20c9883a 	add	r4,r4,r3
 100deac:	41000015 	stw	r4,0(r8)
 100deb0:	42000104 	addi	r8,r8,4
 100deb4:	3cbff016 	blt	r7,r18,100de78 <__multadd+0x34>
 100deb8:	80000826 	beq	r16,zero,100dedc <__multadd+0x98>
 100debc:	98800217 	ldw	r2,8(r19)
 100dec0:	90800f0e 	bge	r18,r2,100df00 <__multadd+0xbc>
 100dec4:	9485883a 	add	r2,r18,r18
 100dec8:	1085883a 	add	r2,r2,r2
 100decc:	14c5883a 	add	r2,r2,r19
 100ded0:	90c00044 	addi	r3,r18,1
 100ded4:	14000515 	stw	r16,20(r2)
 100ded8:	98c00415 	stw	r3,16(r19)
 100dedc:	9805883a 	mov	r2,r19
 100dee0:	dfc00517 	ldw	ra,20(sp)
 100dee4:	dd000417 	ldw	r20,16(sp)
 100dee8:	dcc00317 	ldw	r19,12(sp)
 100deec:	dc800217 	ldw	r18,8(sp)
 100def0:	dc400117 	ldw	r17,4(sp)
 100def4:	dc000017 	ldw	r16,0(sp)
 100def8:	dec00604 	addi	sp,sp,24
 100defc:	f800283a 	ret
 100df00:	99400117 	ldw	r5,4(r19)
 100df04:	a009883a 	mov	r4,r20
 100df08:	29400044 	addi	r5,r5,1
 100df0c:	100d7100 	call	100d710 <_Balloc>
 100df10:	99800417 	ldw	r6,16(r19)
 100df14:	99400304 	addi	r5,r19,12
 100df18:	11000304 	addi	r4,r2,12
 100df1c:	318d883a 	add	r6,r6,r6
 100df20:	318d883a 	add	r6,r6,r6
 100df24:	31800204 	addi	r6,r6,8
 100df28:	1023883a 	mov	r17,r2
 100df2c:	100cf780 	call	100cf78 <memcpy>
 100df30:	980b883a 	mov	r5,r19
 100df34:	a009883a 	mov	r4,r20
 100df38:	100d1900 	call	100d190 <_Bfree>
 100df3c:	8827883a 	mov	r19,r17
 100df40:	003fe006 	br	100dec4 <__multadd+0x80>

0100df44 <__pow5mult>:
 100df44:	defffa04 	addi	sp,sp,-24
 100df48:	308000cc 	andi	r2,r6,3
 100df4c:	dd000415 	stw	r20,16(sp)
 100df50:	dcc00315 	stw	r19,12(sp)
 100df54:	dc000015 	stw	r16,0(sp)
 100df58:	dfc00515 	stw	ra,20(sp)
 100df5c:	dc800215 	stw	r18,8(sp)
 100df60:	dc400115 	stw	r17,4(sp)
 100df64:	3021883a 	mov	r16,r6
 100df68:	2027883a 	mov	r19,r4
 100df6c:	2829883a 	mov	r20,r5
 100df70:	10002b1e 	bne	r2,zero,100e020 <__pow5mult+0xdc>
 100df74:	8025d0ba 	srai	r18,r16,2
 100df78:	90001b26 	beq	r18,zero,100dfe8 <__pow5mult+0xa4>
 100df7c:	9c001217 	ldw	r16,72(r19)
 100df80:	8000081e 	bne	r16,zero,100dfa4 <__pow5mult+0x60>
 100df84:	00003006 	br	100e048 <__pow5mult+0x104>
 100df88:	800b883a 	mov	r5,r16
 100df8c:	800d883a 	mov	r6,r16
 100df90:	9809883a 	mov	r4,r19
 100df94:	90001426 	beq	r18,zero,100dfe8 <__pow5mult+0xa4>
 100df98:	80800017 	ldw	r2,0(r16)
 100df9c:	10001b26 	beq	r2,zero,100e00c <__pow5mult+0xc8>
 100dfa0:	1021883a 	mov	r16,r2
 100dfa4:	9080004c 	andi	r2,r18,1
 100dfa8:	1005003a 	cmpeq	r2,r2,zero
 100dfac:	9025d07a 	srai	r18,r18,1
 100dfb0:	800d883a 	mov	r6,r16
 100dfb4:	9809883a 	mov	r4,r19
 100dfb8:	a00b883a 	mov	r5,r20
 100dfbc:	103ff21e 	bne	r2,zero,100df88 <__pow5mult+0x44>
 100dfc0:	100dc200 	call	100dc20 <__multiply>
 100dfc4:	a00b883a 	mov	r5,r20
 100dfc8:	9809883a 	mov	r4,r19
 100dfcc:	1023883a 	mov	r17,r2
 100dfd0:	100d1900 	call	100d190 <_Bfree>
 100dfd4:	8829883a 	mov	r20,r17
 100dfd8:	800b883a 	mov	r5,r16
 100dfdc:	800d883a 	mov	r6,r16
 100dfe0:	9809883a 	mov	r4,r19
 100dfe4:	903fec1e 	bne	r18,zero,100df98 <__pow5mult+0x54>
 100dfe8:	a005883a 	mov	r2,r20
 100dfec:	dfc00517 	ldw	ra,20(sp)
 100dff0:	dd000417 	ldw	r20,16(sp)
 100dff4:	dcc00317 	ldw	r19,12(sp)
 100dff8:	dc800217 	ldw	r18,8(sp)
 100dffc:	dc400117 	ldw	r17,4(sp)
 100e000:	dc000017 	ldw	r16,0(sp)
 100e004:	dec00604 	addi	sp,sp,24
 100e008:	f800283a 	ret
 100e00c:	100dc200 	call	100dc20 <__multiply>
 100e010:	80800015 	stw	r2,0(r16)
 100e014:	1021883a 	mov	r16,r2
 100e018:	10000015 	stw	zero,0(r2)
 100e01c:	003fe106 	br	100dfa4 <__pow5mult+0x60>
 100e020:	1085883a 	add	r2,r2,r2
 100e024:	00c040b4 	movhi	r3,258
 100e028:	18fe1104 	addi	r3,r3,-1980
 100e02c:	1085883a 	add	r2,r2,r2
 100e030:	10c5883a 	add	r2,r2,r3
 100e034:	11bfff17 	ldw	r6,-4(r2)
 100e038:	000f883a 	mov	r7,zero
 100e03c:	100de440 	call	100de44 <__multadd>
 100e040:	1029883a 	mov	r20,r2
 100e044:	003fcb06 	br	100df74 <__pow5mult+0x30>
 100e048:	9809883a 	mov	r4,r19
 100e04c:	01409c44 	movi	r5,625
 100e050:	100de080 	call	100de08 <__i2b>
 100e054:	98801215 	stw	r2,72(r19)
 100e058:	1021883a 	mov	r16,r2
 100e05c:	10000015 	stw	zero,0(r2)
 100e060:	003fd006 	br	100dfa4 <__pow5mult+0x60>

0100e064 <__s2b>:
 100e064:	defff904 	addi	sp,sp,-28
 100e068:	dcc00315 	stw	r19,12(sp)
 100e06c:	dc800215 	stw	r18,8(sp)
 100e070:	2827883a 	mov	r19,r5
 100e074:	2025883a 	mov	r18,r4
 100e078:	01400244 	movi	r5,9
 100e07c:	39000204 	addi	r4,r7,8
 100e080:	dd000415 	stw	r20,16(sp)
 100e084:	dc400115 	stw	r17,4(sp)
 100e088:	dfc00615 	stw	ra,24(sp)
 100e08c:	dd400515 	stw	r21,20(sp)
 100e090:	dc000015 	stw	r16,0(sp)
 100e094:	3829883a 	mov	r20,r7
 100e098:	3023883a 	mov	r17,r6
 100e09c:	10056b00 	call	10056b0 <__divsi3>
 100e0a0:	00c00044 	movi	r3,1
 100e0a4:	1880350e 	bge	r3,r2,100e17c <__s2b+0x118>
 100e0a8:	000b883a 	mov	r5,zero
 100e0ac:	18c7883a 	add	r3,r3,r3
 100e0b0:	29400044 	addi	r5,r5,1
 100e0b4:	18bffd16 	blt	r3,r2,100e0ac <__s2b+0x48>
 100e0b8:	9009883a 	mov	r4,r18
 100e0bc:	100d7100 	call	100d710 <_Balloc>
 100e0c0:	1011883a 	mov	r8,r2
 100e0c4:	d8800717 	ldw	r2,28(sp)
 100e0c8:	00c00044 	movi	r3,1
 100e0cc:	01800244 	movi	r6,9
 100e0d0:	40800515 	stw	r2,20(r8)
 100e0d4:	40c00415 	stw	r3,16(r8)
 100e0d8:	3440260e 	bge	r6,r17,100e174 <__s2b+0x110>
 100e0dc:	3021883a 	mov	r16,r6
 100e0e0:	99ab883a 	add	r21,r19,r6
 100e0e4:	9c05883a 	add	r2,r19,r16
 100e0e8:	11c00007 	ldb	r7,0(r2)
 100e0ec:	400b883a 	mov	r5,r8
 100e0f0:	9009883a 	mov	r4,r18
 100e0f4:	39fff404 	addi	r7,r7,-48
 100e0f8:	01800284 	movi	r6,10
 100e0fc:	100de440 	call	100de44 <__multadd>
 100e100:	84000044 	addi	r16,r16,1
 100e104:	1011883a 	mov	r8,r2
 100e108:	8c3ff61e 	bne	r17,r16,100e0e4 <__s2b+0x80>
 100e10c:	ac45883a 	add	r2,r21,r17
 100e110:	117ffe04 	addi	r5,r2,-8
 100e114:	880d883a 	mov	r6,r17
 100e118:	35000c0e 	bge	r6,r20,100e14c <__s2b+0xe8>
 100e11c:	a185c83a 	sub	r2,r20,r6
 100e120:	2821883a 	mov	r16,r5
 100e124:	28a3883a 	add	r17,r5,r2
 100e128:	81c00007 	ldb	r7,0(r16)
 100e12c:	400b883a 	mov	r5,r8
 100e130:	9009883a 	mov	r4,r18
 100e134:	39fff404 	addi	r7,r7,-48
 100e138:	01800284 	movi	r6,10
 100e13c:	100de440 	call	100de44 <__multadd>
 100e140:	84000044 	addi	r16,r16,1
 100e144:	1011883a 	mov	r8,r2
 100e148:	847ff71e 	bne	r16,r17,100e128 <__s2b+0xc4>
 100e14c:	4005883a 	mov	r2,r8
 100e150:	dfc00617 	ldw	ra,24(sp)
 100e154:	dd400517 	ldw	r21,20(sp)
 100e158:	dd000417 	ldw	r20,16(sp)
 100e15c:	dcc00317 	ldw	r19,12(sp)
 100e160:	dc800217 	ldw	r18,8(sp)
 100e164:	dc400117 	ldw	r17,4(sp)
 100e168:	dc000017 	ldw	r16,0(sp)
 100e16c:	dec00704 	addi	sp,sp,28
 100e170:	f800283a 	ret
 100e174:	99400284 	addi	r5,r19,10
 100e178:	003fe706 	br	100e118 <__s2b+0xb4>
 100e17c:	000b883a 	mov	r5,zero
 100e180:	003fcd06 	br	100e0b8 <__s2b+0x54>

0100e184 <_realloc_r>:
 100e184:	defff404 	addi	sp,sp,-48
 100e188:	dd800815 	stw	r22,32(sp)
 100e18c:	dc800415 	stw	r18,16(sp)
 100e190:	dc400315 	stw	r17,12(sp)
 100e194:	dfc00b15 	stw	ra,44(sp)
 100e198:	df000a15 	stw	fp,40(sp)
 100e19c:	ddc00915 	stw	r23,36(sp)
 100e1a0:	dd400715 	stw	r21,28(sp)
 100e1a4:	dd000615 	stw	r20,24(sp)
 100e1a8:	dcc00515 	stw	r19,20(sp)
 100e1ac:	dc000215 	stw	r16,8(sp)
 100e1b0:	2825883a 	mov	r18,r5
 100e1b4:	3023883a 	mov	r17,r6
 100e1b8:	202d883a 	mov	r22,r4
 100e1bc:	2800c926 	beq	r5,zero,100e4e4 <_realloc_r+0x360>
 100e1c0:	1013cc40 	call	1013cc4 <__malloc_lock>
 100e1c4:	943ffe04 	addi	r16,r18,-8
 100e1c8:	88c002c4 	addi	r3,r17,11
 100e1cc:	00800584 	movi	r2,22
 100e1d0:	82000117 	ldw	r8,4(r16)
 100e1d4:	10c01b2e 	bgeu	r2,r3,100e244 <_realloc_r+0xc0>
 100e1d8:	00bffe04 	movi	r2,-8
 100e1dc:	188e703a 	and	r7,r3,r2
 100e1e0:	3839883a 	mov	fp,r7
 100e1e4:	38001a16 	blt	r7,zero,100e250 <_realloc_r+0xcc>
 100e1e8:	e4401936 	bltu	fp,r17,100e250 <_realloc_r+0xcc>
 100e1ec:	013fff04 	movi	r4,-4
 100e1f0:	4126703a 	and	r19,r8,r4
 100e1f4:	99c02616 	blt	r19,r7,100e290 <_realloc_r+0x10c>
 100e1f8:	802b883a 	mov	r21,r16
 100e1fc:	9829883a 	mov	r20,r19
 100e200:	84000204 	addi	r16,r16,8
 100e204:	a80f883a 	mov	r7,r21
 100e208:	a70dc83a 	sub	r6,r20,fp
 100e20c:	008003c4 	movi	r2,15
 100e210:	1180c136 	bltu	r2,r6,100e518 <_realloc_r+0x394>
 100e214:	38800117 	ldw	r2,4(r7)
 100e218:	a549883a 	add	r4,r20,r21
 100e21c:	1080004c 	andi	r2,r2,1
 100e220:	a084b03a 	or	r2,r20,r2
 100e224:	38800115 	stw	r2,4(r7)
 100e228:	20c00117 	ldw	r3,4(r4)
 100e22c:	18c00054 	ori	r3,r3,1
 100e230:	20c00115 	stw	r3,4(r4)
 100e234:	b009883a 	mov	r4,r22
 100e238:	1013ce40 	call	1013ce4 <__malloc_unlock>
 100e23c:	8023883a 	mov	r17,r16
 100e240:	00000606 	br	100e25c <_realloc_r+0xd8>
 100e244:	01c00404 	movi	r7,16
 100e248:	3839883a 	mov	fp,r7
 100e24c:	e47fe72e 	bgeu	fp,r17,100e1ec <_realloc_r+0x68>
 100e250:	00800304 	movi	r2,12
 100e254:	0023883a 	mov	r17,zero
 100e258:	b0800015 	stw	r2,0(r22)
 100e25c:	8805883a 	mov	r2,r17
 100e260:	dfc00b17 	ldw	ra,44(sp)
 100e264:	df000a17 	ldw	fp,40(sp)
 100e268:	ddc00917 	ldw	r23,36(sp)
 100e26c:	dd800817 	ldw	r22,32(sp)
 100e270:	dd400717 	ldw	r21,28(sp)
 100e274:	dd000617 	ldw	r20,24(sp)
 100e278:	dcc00517 	ldw	r19,20(sp)
 100e27c:	dc800417 	ldw	r18,16(sp)
 100e280:	dc400317 	ldw	r17,12(sp)
 100e284:	dc000217 	ldw	r16,8(sp)
 100e288:	dec00c04 	addi	sp,sp,48
 100e28c:	f800283a 	ret
 100e290:	008040b4 	movhi	r2,258
 100e294:	10bf2704 	addi	r2,r2,-868
 100e298:	12400217 	ldw	r9,8(r2)
 100e29c:	84cd883a 	add	r6,r16,r19
 100e2a0:	802b883a 	mov	r21,r16
 100e2a4:	3240b926 	beq	r6,r9,100e58c <_realloc_r+0x408>
 100e2a8:	31400117 	ldw	r5,4(r6)
 100e2ac:	00bfff84 	movi	r2,-2
 100e2b0:	2884703a 	and	r2,r5,r2
 100e2b4:	1185883a 	add	r2,r2,r6
 100e2b8:	10c00117 	ldw	r3,4(r2)
 100e2bc:	18c0004c 	andi	r3,r3,1
 100e2c0:	1807003a 	cmpeq	r3,r3,zero
 100e2c4:	1800a326 	beq	r3,zero,100e554 <_realloc_r+0x3d0>
 100e2c8:	2908703a 	and	r4,r5,r4
 100e2cc:	9929883a 	add	r20,r19,r4
 100e2d0:	a1c0a30e 	bge	r20,r7,100e560 <_realloc_r+0x3dc>
 100e2d4:	4080004c 	andi	r2,r8,1
 100e2d8:	1000551e 	bne	r2,zero,100e430 <_realloc_r+0x2ac>
 100e2dc:	80800017 	ldw	r2,0(r16)
 100e2e0:	80afc83a 	sub	r23,r16,r2
 100e2e4:	b8c00117 	ldw	r3,4(r23)
 100e2e8:	00bfff04 	movi	r2,-4
 100e2ec:	1884703a 	and	r2,r3,r2
 100e2f0:	30002e26 	beq	r6,zero,100e3ac <_realloc_r+0x228>
 100e2f4:	3240b926 	beq	r6,r9,100e5dc <_realloc_r+0x458>
 100e2f8:	98a9883a 	add	r20,r19,r2
 100e2fc:	2509883a 	add	r4,r4,r20
 100e300:	d9000015 	stw	r4,0(sp)
 100e304:	21c02a16 	blt	r4,r7,100e3b0 <_realloc_r+0x22c>
 100e308:	30800317 	ldw	r2,12(r6)
 100e30c:	30c00217 	ldw	r3,8(r6)
 100e310:	01400904 	movi	r5,36
 100e314:	99bfff04 	addi	r6,r19,-4
 100e318:	18800315 	stw	r2,12(r3)
 100e31c:	10c00215 	stw	r3,8(r2)
 100e320:	b9000317 	ldw	r4,12(r23)
 100e324:	b8800217 	ldw	r2,8(r23)
 100e328:	b82b883a 	mov	r21,r23
 100e32c:	bc000204 	addi	r16,r23,8
 100e330:	20800215 	stw	r2,8(r4)
 100e334:	11000315 	stw	r4,12(r2)
 100e338:	2980e436 	bltu	r5,r6,100e6cc <_realloc_r+0x548>
 100e33c:	008004c4 	movi	r2,19
 100e340:	9009883a 	mov	r4,r18
 100e344:	8011883a 	mov	r8,r16
 100e348:	11800f2e 	bgeu	r2,r6,100e388 <_realloc_r+0x204>
 100e34c:	90800017 	ldw	r2,0(r18)
 100e350:	ba000404 	addi	r8,r23,16
 100e354:	91000204 	addi	r4,r18,8
 100e358:	b8800215 	stw	r2,8(r23)
 100e35c:	90c00117 	ldw	r3,4(r18)
 100e360:	008006c4 	movi	r2,27
 100e364:	b8c00315 	stw	r3,12(r23)
 100e368:	1180072e 	bgeu	r2,r6,100e388 <_realloc_r+0x204>
 100e36c:	90c00217 	ldw	r3,8(r18)
 100e370:	ba000604 	addi	r8,r23,24
 100e374:	91000404 	addi	r4,r18,16
 100e378:	b8c00415 	stw	r3,16(r23)
 100e37c:	90800317 	ldw	r2,12(r18)
 100e380:	b8800515 	stw	r2,20(r23)
 100e384:	3140e726 	beq	r6,r5,100e724 <_realloc_r+0x5a0>
 100e388:	20800017 	ldw	r2,0(r4)
 100e38c:	dd000017 	ldw	r20,0(sp)
 100e390:	b80f883a 	mov	r7,r23
 100e394:	40800015 	stw	r2,0(r8)
 100e398:	20c00117 	ldw	r3,4(r4)
 100e39c:	40c00115 	stw	r3,4(r8)
 100e3a0:	20800217 	ldw	r2,8(r4)
 100e3a4:	40800215 	stw	r2,8(r8)
 100e3a8:	003f9706 	br	100e208 <_realloc_r+0x84>
 100e3ac:	98a9883a 	add	r20,r19,r2
 100e3b0:	a1c01f16 	blt	r20,r7,100e430 <_realloc_r+0x2ac>
 100e3b4:	b8c00317 	ldw	r3,12(r23)
 100e3b8:	b8800217 	ldw	r2,8(r23)
 100e3bc:	99bfff04 	addi	r6,r19,-4
 100e3c0:	01400904 	movi	r5,36
 100e3c4:	b82b883a 	mov	r21,r23
 100e3c8:	18800215 	stw	r2,8(r3)
 100e3cc:	10c00315 	stw	r3,12(r2)
 100e3d0:	bc000204 	addi	r16,r23,8
 100e3d4:	2980c336 	bltu	r5,r6,100e6e4 <_realloc_r+0x560>
 100e3d8:	008004c4 	movi	r2,19
 100e3dc:	9009883a 	mov	r4,r18
 100e3e0:	8011883a 	mov	r8,r16
 100e3e4:	11800f2e 	bgeu	r2,r6,100e424 <_realloc_r+0x2a0>
 100e3e8:	90800017 	ldw	r2,0(r18)
 100e3ec:	ba000404 	addi	r8,r23,16
 100e3f0:	91000204 	addi	r4,r18,8
 100e3f4:	b8800215 	stw	r2,8(r23)
 100e3f8:	90c00117 	ldw	r3,4(r18)
 100e3fc:	008006c4 	movi	r2,27
 100e400:	b8c00315 	stw	r3,12(r23)
 100e404:	1180072e 	bgeu	r2,r6,100e424 <_realloc_r+0x2a0>
 100e408:	90c00217 	ldw	r3,8(r18)
 100e40c:	ba000604 	addi	r8,r23,24
 100e410:	91000404 	addi	r4,r18,16
 100e414:	b8c00415 	stw	r3,16(r23)
 100e418:	90800317 	ldw	r2,12(r18)
 100e41c:	b8800515 	stw	r2,20(r23)
 100e420:	3140c726 	beq	r6,r5,100e740 <_realloc_r+0x5bc>
 100e424:	20800017 	ldw	r2,0(r4)
 100e428:	b80f883a 	mov	r7,r23
 100e42c:	003fd906 	br	100e394 <_realloc_r+0x210>
 100e430:	880b883a 	mov	r5,r17
 100e434:	b009883a 	mov	r4,r22
 100e438:	1005dd40 	call	1005dd4 <_malloc_r>
 100e43c:	1023883a 	mov	r17,r2
 100e440:	10002526 	beq	r2,zero,100e4d8 <_realloc_r+0x354>
 100e444:	80800117 	ldw	r2,4(r16)
 100e448:	00ffff84 	movi	r3,-2
 100e44c:	893ffe04 	addi	r4,r17,-8
 100e450:	10c4703a 	and	r2,r2,r3
 100e454:	8085883a 	add	r2,r16,r2
 100e458:	20809526 	beq	r4,r2,100e6b0 <_realloc_r+0x52c>
 100e45c:	99bfff04 	addi	r6,r19,-4
 100e460:	01c00904 	movi	r7,36
 100e464:	39804536 	bltu	r7,r6,100e57c <_realloc_r+0x3f8>
 100e468:	008004c4 	movi	r2,19
 100e46c:	9009883a 	mov	r4,r18
 100e470:	880b883a 	mov	r5,r17
 100e474:	11800f2e 	bgeu	r2,r6,100e4b4 <_realloc_r+0x330>
 100e478:	90800017 	ldw	r2,0(r18)
 100e47c:	89400204 	addi	r5,r17,8
 100e480:	91000204 	addi	r4,r18,8
 100e484:	88800015 	stw	r2,0(r17)
 100e488:	90c00117 	ldw	r3,4(r18)
 100e48c:	008006c4 	movi	r2,27
 100e490:	88c00115 	stw	r3,4(r17)
 100e494:	1180072e 	bgeu	r2,r6,100e4b4 <_realloc_r+0x330>
 100e498:	90c00217 	ldw	r3,8(r18)
 100e49c:	89400404 	addi	r5,r17,16
 100e4a0:	91000404 	addi	r4,r18,16
 100e4a4:	88c00215 	stw	r3,8(r17)
 100e4a8:	90800317 	ldw	r2,12(r18)
 100e4ac:	88800315 	stw	r2,12(r17)
 100e4b0:	31c09126 	beq	r6,r7,100e6f8 <_realloc_r+0x574>
 100e4b4:	20800017 	ldw	r2,0(r4)
 100e4b8:	28800015 	stw	r2,0(r5)
 100e4bc:	20c00117 	ldw	r3,4(r4)
 100e4c0:	28c00115 	stw	r3,4(r5)
 100e4c4:	20800217 	ldw	r2,8(r4)
 100e4c8:	28800215 	stw	r2,8(r5)
 100e4cc:	900b883a 	mov	r5,r18
 100e4d0:	b009883a 	mov	r4,r22
 100e4d4:	100c16c0 	call	100c16c <_free_r>
 100e4d8:	b009883a 	mov	r4,r22
 100e4dc:	1013ce40 	call	1013ce4 <__malloc_unlock>
 100e4e0:	003f5e06 	br	100e25c <_realloc_r+0xd8>
 100e4e4:	300b883a 	mov	r5,r6
 100e4e8:	dfc00b17 	ldw	ra,44(sp)
 100e4ec:	df000a17 	ldw	fp,40(sp)
 100e4f0:	ddc00917 	ldw	r23,36(sp)
 100e4f4:	dd800817 	ldw	r22,32(sp)
 100e4f8:	dd400717 	ldw	r21,28(sp)
 100e4fc:	dd000617 	ldw	r20,24(sp)
 100e500:	dcc00517 	ldw	r19,20(sp)
 100e504:	dc800417 	ldw	r18,16(sp)
 100e508:	dc400317 	ldw	r17,12(sp)
 100e50c:	dc000217 	ldw	r16,8(sp)
 100e510:	dec00c04 	addi	sp,sp,48
 100e514:	1005dd41 	jmpi	1005dd4 <_malloc_r>
 100e518:	38800117 	ldw	r2,4(r7)
 100e51c:	e54b883a 	add	r5,fp,r21
 100e520:	31000054 	ori	r4,r6,1
 100e524:	1080004c 	andi	r2,r2,1
 100e528:	1704b03a 	or	r2,r2,fp
 100e52c:	38800115 	stw	r2,4(r7)
 100e530:	29000115 	stw	r4,4(r5)
 100e534:	2987883a 	add	r3,r5,r6
 100e538:	18800117 	ldw	r2,4(r3)
 100e53c:	29400204 	addi	r5,r5,8
 100e540:	b009883a 	mov	r4,r22
 100e544:	10800054 	ori	r2,r2,1
 100e548:	18800115 	stw	r2,4(r3)
 100e54c:	100c16c0 	call	100c16c <_free_r>
 100e550:	003f3806 	br	100e234 <_realloc_r+0xb0>
 100e554:	000d883a 	mov	r6,zero
 100e558:	0009883a 	mov	r4,zero
 100e55c:	003f5d06 	br	100e2d4 <_realloc_r+0x150>
 100e560:	30c00217 	ldw	r3,8(r6)
 100e564:	30800317 	ldw	r2,12(r6)
 100e568:	800f883a 	mov	r7,r16
 100e56c:	84000204 	addi	r16,r16,8
 100e570:	10c00215 	stw	r3,8(r2)
 100e574:	18800315 	stw	r2,12(r3)
 100e578:	003f2306 	br	100e208 <_realloc_r+0x84>
 100e57c:	8809883a 	mov	r4,r17
 100e580:	900b883a 	mov	r5,r18
 100e584:	100d0180 	call	100d018 <memmove>
 100e588:	003fd006 	br	100e4cc <_realloc_r+0x348>
 100e58c:	30800117 	ldw	r2,4(r6)
 100e590:	e0c00404 	addi	r3,fp,16
 100e594:	1108703a 	and	r4,r2,r4
 100e598:	9905883a 	add	r2,r19,r4
 100e59c:	10ff4d16 	blt	r2,r3,100e2d4 <_realloc_r+0x150>
 100e5a0:	1705c83a 	sub	r2,r2,fp
 100e5a4:	870b883a 	add	r5,r16,fp
 100e5a8:	10800054 	ori	r2,r2,1
 100e5ac:	28800115 	stw	r2,4(r5)
 100e5b0:	80c00117 	ldw	r3,4(r16)
 100e5b4:	008040b4 	movhi	r2,258
 100e5b8:	10bf2704 	addi	r2,r2,-868
 100e5bc:	b009883a 	mov	r4,r22
 100e5c0:	18c0004c 	andi	r3,r3,1
 100e5c4:	e0c6b03a 	or	r3,fp,r3
 100e5c8:	11400215 	stw	r5,8(r2)
 100e5cc:	80c00115 	stw	r3,4(r16)
 100e5d0:	1013ce40 	call	1013ce4 <__malloc_unlock>
 100e5d4:	84400204 	addi	r17,r16,8
 100e5d8:	003f2006 	br	100e25c <_realloc_r+0xd8>
 100e5dc:	98a9883a 	add	r20,r19,r2
 100e5e0:	2509883a 	add	r4,r4,r20
 100e5e4:	e0800404 	addi	r2,fp,16
 100e5e8:	d9000115 	stw	r4,4(sp)
 100e5ec:	20bf7016 	blt	r4,r2,100e3b0 <_realloc_r+0x22c>
 100e5f0:	b8c00317 	ldw	r3,12(r23)
 100e5f4:	b8800217 	ldw	r2,8(r23)
 100e5f8:	99bfff04 	addi	r6,r19,-4
 100e5fc:	01400904 	movi	r5,36
 100e600:	18800215 	stw	r2,8(r3)
 100e604:	10c00315 	stw	r3,12(r2)
 100e608:	bc400204 	addi	r17,r23,8
 100e60c:	29804136 	bltu	r5,r6,100e714 <_realloc_r+0x590>
 100e610:	008004c4 	movi	r2,19
 100e614:	9009883a 	mov	r4,r18
 100e618:	880f883a 	mov	r7,r17
 100e61c:	11800f2e 	bgeu	r2,r6,100e65c <_realloc_r+0x4d8>
 100e620:	90800017 	ldw	r2,0(r18)
 100e624:	b9c00404 	addi	r7,r23,16
 100e628:	91000204 	addi	r4,r18,8
 100e62c:	b8800215 	stw	r2,8(r23)
 100e630:	90c00117 	ldw	r3,4(r18)
 100e634:	008006c4 	movi	r2,27
 100e638:	b8c00315 	stw	r3,12(r23)
 100e63c:	1180072e 	bgeu	r2,r6,100e65c <_realloc_r+0x4d8>
 100e640:	90c00217 	ldw	r3,8(r18)
 100e644:	b9c00604 	addi	r7,r23,24
 100e648:	91000404 	addi	r4,r18,16
 100e64c:	b8c00415 	stw	r3,16(r23)
 100e650:	90800317 	ldw	r2,12(r18)
 100e654:	b8800515 	stw	r2,20(r23)
 100e658:	31404026 	beq	r6,r5,100e75c <_realloc_r+0x5d8>
 100e65c:	20800017 	ldw	r2,0(r4)
 100e660:	38800015 	stw	r2,0(r7)
 100e664:	20c00117 	ldw	r3,4(r4)
 100e668:	38c00115 	stw	r3,4(r7)
 100e66c:	20800217 	ldw	r2,8(r4)
 100e670:	38800215 	stw	r2,8(r7)
 100e674:	d8c00117 	ldw	r3,4(sp)
 100e678:	bf0b883a 	add	r5,r23,fp
 100e67c:	b009883a 	mov	r4,r22
 100e680:	1f05c83a 	sub	r2,r3,fp
 100e684:	10800054 	ori	r2,r2,1
 100e688:	28800115 	stw	r2,4(r5)
 100e68c:	b8c00117 	ldw	r3,4(r23)
 100e690:	008040b4 	movhi	r2,258
 100e694:	10bf2704 	addi	r2,r2,-868
 100e698:	11400215 	stw	r5,8(r2)
 100e69c:	18c0004c 	andi	r3,r3,1
 100e6a0:	e0c6b03a 	or	r3,fp,r3
 100e6a4:	b8c00115 	stw	r3,4(r23)
 100e6a8:	1013ce40 	call	1013ce4 <__malloc_unlock>
 100e6ac:	003eeb06 	br	100e25c <_realloc_r+0xd8>
 100e6b0:	20800117 	ldw	r2,4(r4)
 100e6b4:	00ffff04 	movi	r3,-4
 100e6b8:	800f883a 	mov	r7,r16
 100e6bc:	10c4703a 	and	r2,r2,r3
 100e6c0:	98a9883a 	add	r20,r19,r2
 100e6c4:	84000204 	addi	r16,r16,8
 100e6c8:	003ecf06 	br	100e208 <_realloc_r+0x84>
 100e6cc:	900b883a 	mov	r5,r18
 100e6d0:	8009883a 	mov	r4,r16
 100e6d4:	100d0180 	call	100d018 <memmove>
 100e6d8:	dd000017 	ldw	r20,0(sp)
 100e6dc:	b80f883a 	mov	r7,r23
 100e6e0:	003ec906 	br	100e208 <_realloc_r+0x84>
 100e6e4:	900b883a 	mov	r5,r18
 100e6e8:	8009883a 	mov	r4,r16
 100e6ec:	100d0180 	call	100d018 <memmove>
 100e6f0:	b80f883a 	mov	r7,r23
 100e6f4:	003ec406 	br	100e208 <_realloc_r+0x84>
 100e6f8:	90c00417 	ldw	r3,16(r18)
 100e6fc:	89400604 	addi	r5,r17,24
 100e700:	91000604 	addi	r4,r18,24
 100e704:	88c00415 	stw	r3,16(r17)
 100e708:	90800517 	ldw	r2,20(r18)
 100e70c:	88800515 	stw	r2,20(r17)
 100e710:	003f6806 	br	100e4b4 <_realloc_r+0x330>
 100e714:	900b883a 	mov	r5,r18
 100e718:	8809883a 	mov	r4,r17
 100e71c:	100d0180 	call	100d018 <memmove>
 100e720:	003fd406 	br	100e674 <_realloc_r+0x4f0>
 100e724:	90c00417 	ldw	r3,16(r18)
 100e728:	91000604 	addi	r4,r18,24
 100e72c:	ba000804 	addi	r8,r23,32
 100e730:	b8c00615 	stw	r3,24(r23)
 100e734:	90800517 	ldw	r2,20(r18)
 100e738:	b8800715 	stw	r2,28(r23)
 100e73c:	003f1206 	br	100e388 <_realloc_r+0x204>
 100e740:	90c00417 	ldw	r3,16(r18)
 100e744:	91000604 	addi	r4,r18,24
 100e748:	ba000804 	addi	r8,r23,32
 100e74c:	b8c00615 	stw	r3,24(r23)
 100e750:	90800517 	ldw	r2,20(r18)
 100e754:	b8800715 	stw	r2,28(r23)
 100e758:	003f3206 	br	100e424 <_realloc_r+0x2a0>
 100e75c:	90c00417 	ldw	r3,16(r18)
 100e760:	91000604 	addi	r4,r18,24
 100e764:	b9c00804 	addi	r7,r23,32
 100e768:	b8c00615 	stw	r3,24(r23)
 100e76c:	90800517 	ldw	r2,20(r18)
 100e770:	b8800715 	stw	r2,28(r23)
 100e774:	003fb906 	br	100e65c <_realloc_r+0x4d8>

0100e778 <__srefill_r>:
 100e778:	defffd04 	addi	sp,sp,-12
 100e77c:	dc400115 	stw	r17,4(sp)
 100e780:	dc000015 	stw	r16,0(sp)
 100e784:	dfc00215 	stw	ra,8(sp)
 100e788:	2023883a 	mov	r17,r4
 100e78c:	2821883a 	mov	r16,r5
 100e790:	20000226 	beq	r4,zero,100e79c <__srefill_r+0x24>
 100e794:	20800e17 	ldw	r2,56(r4)
 100e798:	10004126 	beq	r2,zero,100e8a0 <__srefill_r+0x128>
 100e79c:	80c0030b 	ldhu	r3,12(r16)
 100e7a0:	80000115 	stw	zero,4(r16)
 100e7a4:	1880080c 	andi	r2,r3,32
 100e7a8:	1000361e 	bne	r2,zero,100e884 <__srefill_r+0x10c>
 100e7ac:	1880010c 	andi	r2,r3,4
 100e7b0:	1000211e 	bne	r2,zero,100e838 <__srefill_r+0xc0>
 100e7b4:	1880040c 	andi	r2,r3,16
 100e7b8:	10005026 	beq	r2,zero,100e8fc <__srefill_r+0x184>
 100e7bc:	1880020c 	andi	r2,r3,8
 100e7c0:	1000541e 	bne	r2,zero,100e914 <__srefill_r+0x19c>
 100e7c4:	8080030b 	ldhu	r2,12(r16)
 100e7c8:	10800114 	ori	r2,r2,4
 100e7cc:	8080030d 	sth	r2,12(r16)
 100e7d0:	80800417 	ldw	r2,16(r16)
 100e7d4:	10004526 	beq	r2,zero,100e8ec <__srefill_r+0x174>
 100e7d8:	8080030b 	ldhu	r2,12(r16)
 100e7dc:	108000cc 	andi	r2,r2,3
 100e7e0:	1000361e 	bne	r2,zero,100e8bc <__srefill_r+0x144>
 100e7e4:	81800417 	ldw	r6,16(r16)
 100e7e8:	80c00817 	ldw	r3,32(r16)
 100e7ec:	81400717 	ldw	r5,28(r16)
 100e7f0:	81c00517 	ldw	r7,20(r16)
 100e7f4:	8809883a 	mov	r4,r17
 100e7f8:	81800015 	stw	r6,0(r16)
 100e7fc:	183ee83a 	callr	r3
 100e800:	80c0030b 	ldhu	r3,12(r16)
 100e804:	1009883a 	mov	r4,r2
 100e808:	80800115 	stw	r2,4(r16)
 100e80c:	00b7ffc4 	movi	r2,-8193
 100e810:	1884703a 	and	r2,r3,r2
 100e814:	8080030d 	sth	r2,12(r16)
 100e818:	0100230e 	bge	zero,r4,100e8a8 <__srefill_r+0x130>
 100e81c:	0009883a 	mov	r4,zero
 100e820:	2005883a 	mov	r2,r4
 100e824:	dfc00217 	ldw	ra,8(sp)
 100e828:	dc400117 	ldw	r17,4(sp)
 100e82c:	dc000017 	ldw	r16,0(sp)
 100e830:	dec00304 	addi	sp,sp,12
 100e834:	f800283a 	ret
 100e838:	81400c17 	ldw	r5,48(r16)
 100e83c:	283fe426 	beq	r5,zero,100e7d0 <__srefill_r+0x58>
 100e840:	80801004 	addi	r2,r16,64
 100e844:	28800226 	beq	r5,r2,100e850 <__srefill_r+0xd8>
 100e848:	8809883a 	mov	r4,r17
 100e84c:	100c16c0 	call	100c16c <_free_r>
 100e850:	80800f17 	ldw	r2,60(r16)
 100e854:	80000c15 	stw	zero,48(r16)
 100e858:	80800115 	stw	r2,4(r16)
 100e85c:	103fdc26 	beq	r2,zero,100e7d0 <__srefill_r+0x58>
 100e860:	80800e17 	ldw	r2,56(r16)
 100e864:	0009883a 	mov	r4,zero
 100e868:	80800015 	stw	r2,0(r16)
 100e86c:	2005883a 	mov	r2,r4
 100e870:	dfc00217 	ldw	ra,8(sp)
 100e874:	dc400117 	ldw	r17,4(sp)
 100e878:	dc000017 	ldw	r16,0(sp)
 100e87c:	dec00304 	addi	sp,sp,12
 100e880:	f800283a 	ret
 100e884:	013fffc4 	movi	r4,-1
 100e888:	2005883a 	mov	r2,r4
 100e88c:	dfc00217 	ldw	ra,8(sp)
 100e890:	dc400117 	ldw	r17,4(sp)
 100e894:	dc000017 	ldw	r16,0(sp)
 100e898:	dec00304 	addi	sp,sp,12
 100e89c:	f800283a 	ret
 100e8a0:	100bbac0 	call	100bbac <__sinit>
 100e8a4:	003fbd06 	br	100e79c <__srefill_r+0x24>
 100e8a8:	20000b1e 	bne	r4,zero,100e8d8 <__srefill_r+0x160>
 100e8ac:	10800814 	ori	r2,r2,32
 100e8b0:	013fffc4 	movi	r4,-1
 100e8b4:	8080030d 	sth	r2,12(r16)
 100e8b8:	003fd906 	br	100e820 <__srefill_r+0xa8>
 100e8bc:	008040b4 	movhi	r2,258
 100e8c0:	1086c604 	addi	r2,r2,6936
 100e8c4:	11000017 	ldw	r4,0(r2)
 100e8c8:	01404074 	movhi	r5,257
 100e8cc:	297a4f04 	addi	r5,r5,-5828
 100e8d0:	100c9e40 	call	100c9e4 <_fwalk>
 100e8d4:	003fc306 	br	100e7e4 <__srefill_r+0x6c>
 100e8d8:	10801014 	ori	r2,r2,64
 100e8dc:	013fffc4 	movi	r4,-1
 100e8e0:	8080030d 	sth	r2,12(r16)
 100e8e4:	80000115 	stw	zero,4(r16)
 100e8e8:	003fcd06 	br	100e820 <__srefill_r+0xa8>
 100e8ec:	8809883a 	mov	r4,r17
 100e8f0:	800b883a 	mov	r5,r16
 100e8f4:	100cc000 	call	100cc00 <__smakebuf_r>
 100e8f8:	003fb706 	br	100e7d8 <__srefill_r+0x60>
 100e8fc:	18c01014 	ori	r3,r3,64
 100e900:	00800244 	movi	r2,9
 100e904:	013fffc4 	movi	r4,-1
 100e908:	88800015 	stw	r2,0(r17)
 100e90c:	80c0030d 	sth	r3,12(r16)
 100e910:	003fc306 	br	100e820 <__srefill_r+0xa8>
 100e914:	8809883a 	mov	r4,r17
 100e918:	800b883a 	mov	r5,r16
 100e91c:	100b9140 	call	100b914 <_fflush_r>
 100e920:	103fd81e 	bne	r2,zero,100e884 <__srefill_r+0x10c>
 100e924:	8080030b 	ldhu	r2,12(r16)
 100e928:	80000215 	stw	zero,8(r16)
 100e92c:	80000615 	stw	zero,24(r16)
 100e930:	10bffdcc 	andi	r2,r2,65527
 100e934:	8080030d 	sth	r2,12(r16)
 100e938:	003fa206 	br	100e7c4 <__srefill_r+0x4c>

0100e93c <lflush>:
 100e93c:	20c0030b 	ldhu	r3,12(r4)
 100e940:	01400244 	movi	r5,9
 100e944:	0005883a 	mov	r2,zero
 100e948:	18c0024c 	andi	r3,r3,9
 100e94c:	19400126 	beq	r3,r5,100e954 <lflush+0x18>
 100e950:	f800283a 	ret
 100e954:	100bb101 	jmpi	100bb10 <fflush>

0100e958 <__isinfd>:
 100e958:	200d883a 	mov	r6,r4
 100e95c:	0109c83a 	sub	r4,zero,r4
 100e960:	2188b03a 	or	r4,r4,r6
 100e964:	2008d7fa 	srli	r4,r4,31
 100e968:	00a00034 	movhi	r2,32768
 100e96c:	10bfffc4 	addi	r2,r2,-1
 100e970:	1144703a 	and	r2,r2,r5
 100e974:	2088b03a 	or	r4,r4,r2
 100e978:	009ffc34 	movhi	r2,32752
 100e97c:	1105c83a 	sub	r2,r2,r4
 100e980:	0087c83a 	sub	r3,zero,r2
 100e984:	10c4b03a 	or	r2,r2,r3
 100e988:	1004d7fa 	srli	r2,r2,31
 100e98c:	00c00044 	movi	r3,1
 100e990:	1885c83a 	sub	r2,r3,r2
 100e994:	f800283a 	ret

0100e998 <__isnand>:
 100e998:	200d883a 	mov	r6,r4
 100e99c:	0109c83a 	sub	r4,zero,r4
 100e9a0:	2188b03a 	or	r4,r4,r6
 100e9a4:	2008d7fa 	srli	r4,r4,31
 100e9a8:	00a00034 	movhi	r2,32768
 100e9ac:	10bfffc4 	addi	r2,r2,-1
 100e9b0:	1144703a 	and	r2,r2,r5
 100e9b4:	2088b03a 	or	r4,r4,r2
 100e9b8:	009ffc34 	movhi	r2,32752
 100e9bc:	1105c83a 	sub	r2,r2,r4
 100e9c0:	1004d7fa 	srli	r2,r2,31
 100e9c4:	f800283a 	ret

0100e9c8 <__sccl>:
 100e9c8:	28c00003 	ldbu	r3,0(r5)
 100e9cc:	00801784 	movi	r2,94
 100e9d0:	2a000044 	addi	r8,r5,1
 100e9d4:	18802526 	beq	r3,r2,100ea6c <__sccl+0xa4>
 100e9d8:	180f883a 	mov	r7,r3
 100e9dc:	0013883a 	mov	r9,zero
 100e9e0:	000d883a 	mov	r6,zero
 100e9e4:	0007883a 	mov	r3,zero
 100e9e8:	01404004 	movi	r5,256
 100e9ec:	1905883a 	add	r2,r3,r4
 100e9f0:	18c00044 	addi	r3,r3,1
 100e9f4:	11800005 	stb	r6,0(r2)
 100e9f8:	197ffc1e 	bne	r3,r5,100e9ec <__sccl+0x24>
 100e9fc:	38000c26 	beq	r7,zero,100ea30 <__sccl+0x68>
 100ea00:	00800044 	movi	r2,1
 100ea04:	124dc83a 	sub	r6,r2,r9
 100ea08:	3905883a 	add	r2,r7,r4
 100ea0c:	11800005 	stb	r6,0(r2)
 100ea10:	41400044 	addi	r5,r8,1
 100ea14:	02400b44 	movi	r9,45
 100ea18:	02801744 	movi	r10,93
 100ea1c:	28bfffc3 	ldbu	r2,-1(r5)
 100ea20:	2811883a 	mov	r8,r5
 100ea24:	12400726 	beq	r2,r9,100ea44 <__sccl+0x7c>
 100ea28:	12800226 	beq	r2,r10,100ea34 <__sccl+0x6c>
 100ea2c:	1000031e 	bne	r2,zero,100ea3c <__sccl+0x74>
 100ea30:	423fffc4 	addi	r8,r8,-1
 100ea34:	4005883a 	mov	r2,r8
 100ea38:	f800283a 	ret
 100ea3c:	100f883a 	mov	r7,r2
 100ea40:	003ff106 	br	100ea08 <__sccl+0x40>
 100ea44:	28c00003 	ldbu	r3,0(r5)
 100ea48:	1a800d26 	beq	r3,r10,100ea80 <__sccl+0xb8>
 100ea4c:	19c00c16 	blt	r3,r7,100ea80 <__sccl+0xb8>
 100ea50:	21c5883a 	add	r2,r4,r7
 100ea54:	39c00044 	addi	r7,r7,1
 100ea58:	11800045 	stb	r6,1(r2)
 100ea5c:	10800044 	addi	r2,r2,1
 100ea60:	38fffc16 	blt	r7,r3,100ea54 <__sccl+0x8c>
 100ea64:	29400084 	addi	r5,r5,2
 100ea68:	003fec06 	br	100ea1c <__sccl+0x54>
 100ea6c:	29c00043 	ldbu	r7,1(r5)
 100ea70:	02400044 	movi	r9,1
 100ea74:	2a000084 	addi	r8,r5,2
 100ea78:	480d883a 	mov	r6,r9
 100ea7c:	003fd906 	br	100e9e4 <__sccl+0x1c>
 100ea80:	01c00b44 	movi	r7,45
 100ea84:	003fe006 	br	100ea08 <__sccl+0x40>

0100ea88 <nanf>:
 100ea88:	009ff034 	movhi	r2,32704
 100ea8c:	f800283a 	ret

0100ea90 <__sclose>:
 100ea90:	2940038f 	ldh	r5,14(r5)
 100ea94:	10111881 	jmpi	1011188 <_close_r>

0100ea98 <__sseek>:
 100ea98:	defffe04 	addi	sp,sp,-8
 100ea9c:	dc000015 	stw	r16,0(sp)
 100eaa0:	2821883a 	mov	r16,r5
 100eaa4:	2940038f 	ldh	r5,14(r5)
 100eaa8:	dfc00115 	stw	ra,4(sp)
 100eaac:	1011f880 	call	1011f88 <_lseek_r>
 100eab0:	1007883a 	mov	r3,r2
 100eab4:	00bfffc4 	movi	r2,-1
 100eab8:	18800926 	beq	r3,r2,100eae0 <__sseek+0x48>
 100eabc:	8080030b 	ldhu	r2,12(r16)
 100eac0:	80c01415 	stw	r3,80(r16)
 100eac4:	10840014 	ori	r2,r2,4096
 100eac8:	8080030d 	sth	r2,12(r16)
 100eacc:	1805883a 	mov	r2,r3
 100ead0:	dfc00117 	ldw	ra,4(sp)
 100ead4:	dc000017 	ldw	r16,0(sp)
 100ead8:	dec00204 	addi	sp,sp,8
 100eadc:	f800283a 	ret
 100eae0:	8080030b 	ldhu	r2,12(r16)
 100eae4:	10bbffcc 	andi	r2,r2,61439
 100eae8:	8080030d 	sth	r2,12(r16)
 100eaec:	1805883a 	mov	r2,r3
 100eaf0:	dfc00117 	ldw	ra,4(sp)
 100eaf4:	dc000017 	ldw	r16,0(sp)
 100eaf8:	dec00204 	addi	sp,sp,8
 100eafc:	f800283a 	ret

0100eb00 <__swrite>:
 100eb00:	2880030b 	ldhu	r2,12(r5)
 100eb04:	defffb04 	addi	sp,sp,-20
 100eb08:	dcc00315 	stw	r19,12(sp)
 100eb0c:	1080400c 	andi	r2,r2,256
 100eb10:	dc800215 	stw	r18,8(sp)
 100eb14:	dc400115 	stw	r17,4(sp)
 100eb18:	dc000015 	stw	r16,0(sp)
 100eb1c:	3027883a 	mov	r19,r6
 100eb20:	3825883a 	mov	r18,r7
 100eb24:	dfc00415 	stw	ra,16(sp)
 100eb28:	2821883a 	mov	r16,r5
 100eb2c:	000d883a 	mov	r6,zero
 100eb30:	01c00084 	movi	r7,2
 100eb34:	2023883a 	mov	r17,r4
 100eb38:	10000226 	beq	r2,zero,100eb44 <__swrite+0x44>
 100eb3c:	2940038f 	ldh	r5,14(r5)
 100eb40:	1011f880 	call	1011f88 <_lseek_r>
 100eb44:	8080030b 	ldhu	r2,12(r16)
 100eb48:	8140038f 	ldh	r5,14(r16)
 100eb4c:	8809883a 	mov	r4,r17
 100eb50:	10bbffcc 	andi	r2,r2,61439
 100eb54:	980d883a 	mov	r6,r19
 100eb58:	900f883a 	mov	r7,r18
 100eb5c:	8080030d 	sth	r2,12(r16)
 100eb60:	dfc00417 	ldw	ra,16(sp)
 100eb64:	dcc00317 	ldw	r19,12(sp)
 100eb68:	dc800217 	ldw	r18,8(sp)
 100eb6c:	dc400117 	ldw	r17,4(sp)
 100eb70:	dc000017 	ldw	r16,0(sp)
 100eb74:	dec00504 	addi	sp,sp,20
 100eb78:	101105c1 	jmpi	101105c <_write_r>

0100eb7c <__sread>:
 100eb7c:	defffe04 	addi	sp,sp,-8
 100eb80:	dc000015 	stw	r16,0(sp)
 100eb84:	2821883a 	mov	r16,r5
 100eb88:	2940038f 	ldh	r5,14(r5)
 100eb8c:	dfc00115 	stw	ra,4(sp)
 100eb90:	10120000 	call	1012000 <_read_r>
 100eb94:	1007883a 	mov	r3,r2
 100eb98:	10000816 	blt	r2,zero,100ebbc <__sread+0x40>
 100eb9c:	80801417 	ldw	r2,80(r16)
 100eba0:	10c5883a 	add	r2,r2,r3
 100eba4:	80801415 	stw	r2,80(r16)
 100eba8:	1805883a 	mov	r2,r3
 100ebac:	dfc00117 	ldw	ra,4(sp)
 100ebb0:	dc000017 	ldw	r16,0(sp)
 100ebb4:	dec00204 	addi	sp,sp,8
 100ebb8:	f800283a 	ret
 100ebbc:	8080030b 	ldhu	r2,12(r16)
 100ebc0:	10bbffcc 	andi	r2,r2,61439
 100ebc4:	8080030d 	sth	r2,12(r16)
 100ebc8:	1805883a 	mov	r2,r3
 100ebcc:	dfc00117 	ldw	ra,4(sp)
 100ebd0:	dc000017 	ldw	r16,0(sp)
 100ebd4:	dec00204 	addi	sp,sp,8
 100ebd8:	f800283a 	ret

0100ebdc <strcmp>:
 100ebdc:	2144b03a 	or	r2,r4,r5
 100ebe0:	108000cc 	andi	r2,r2,3
 100ebe4:	10001d1e 	bne	r2,zero,100ec5c <strcmp+0x80>
 100ebe8:	200f883a 	mov	r7,r4
 100ebec:	28800017 	ldw	r2,0(r5)
 100ebf0:	21000017 	ldw	r4,0(r4)
 100ebf4:	280d883a 	mov	r6,r5
 100ebf8:	2080161e 	bne	r4,r2,100ec54 <strcmp+0x78>
 100ebfc:	023fbff4 	movhi	r8,65279
 100ec00:	423fbfc4 	addi	r8,r8,-257
 100ec04:	2207883a 	add	r3,r4,r8
 100ec08:	01602074 	movhi	r5,32897
 100ec0c:	29602004 	addi	r5,r5,-32640
 100ec10:	1946703a 	and	r3,r3,r5
 100ec14:	0104303a 	nor	r2,zero,r4
 100ec18:	10c4703a 	and	r2,r2,r3
 100ec1c:	10001c1e 	bne	r2,zero,100ec90 <strcmp+0xb4>
 100ec20:	4013883a 	mov	r9,r8
 100ec24:	2811883a 	mov	r8,r5
 100ec28:	00000106 	br	100ec30 <strcmp+0x54>
 100ec2c:	1800181e 	bne	r3,zero,100ec90 <strcmp+0xb4>
 100ec30:	39c00104 	addi	r7,r7,4
 100ec34:	39000017 	ldw	r4,0(r7)
 100ec38:	31800104 	addi	r6,r6,4
 100ec3c:	31400017 	ldw	r5,0(r6)
 100ec40:	2245883a 	add	r2,r4,r9
 100ec44:	1204703a 	and	r2,r2,r8
 100ec48:	0106303a 	nor	r3,zero,r4
 100ec4c:	1886703a 	and	r3,r3,r2
 100ec50:	217ff626 	beq	r4,r5,100ec2c <strcmp+0x50>
 100ec54:	3809883a 	mov	r4,r7
 100ec58:	300b883a 	mov	r5,r6
 100ec5c:	20c00007 	ldb	r3,0(r4)
 100ec60:	1800051e 	bne	r3,zero,100ec78 <strcmp+0x9c>
 100ec64:	00000606 	br	100ec80 <strcmp+0xa4>
 100ec68:	21000044 	addi	r4,r4,1
 100ec6c:	20c00007 	ldb	r3,0(r4)
 100ec70:	29400044 	addi	r5,r5,1
 100ec74:	18000226 	beq	r3,zero,100ec80 <strcmp+0xa4>
 100ec78:	28800007 	ldb	r2,0(r5)
 100ec7c:	18bffa26 	beq	r3,r2,100ec68 <strcmp+0x8c>
 100ec80:	20c00003 	ldbu	r3,0(r4)
 100ec84:	28800003 	ldbu	r2,0(r5)
 100ec88:	1885c83a 	sub	r2,r3,r2
 100ec8c:	f800283a 	ret
 100ec90:	0005883a 	mov	r2,zero
 100ec94:	f800283a 	ret

0100ec98 <match>:
 100ec98:	21800017 	ldw	r6,0(r4)
 100ec9c:	01c01004 	movi	r7,64
 100eca0:	02001684 	movi	r8,90
 100eca4:	28800007 	ldb	r2,0(r5)
 100eca8:	29400044 	addi	r5,r5,1
 100ecac:	10000826 	beq	r2,zero,100ecd0 <match+0x38>
 100ecb0:	31800044 	addi	r6,r6,1
 100ecb4:	30c00007 	ldb	r3,0(r6)
 100ecb8:	38c0020e 	bge	r7,r3,100ecc4 <match+0x2c>
 100ecbc:	40c00116 	blt	r8,r3,100ecc4 <match+0x2c>
 100ecc0:	18c00804 	addi	r3,r3,32
 100ecc4:	18bff726 	beq	r3,r2,100eca4 <match+0xc>
 100ecc8:	0005883a 	mov	r2,zero
 100eccc:	f800283a 	ret
 100ecd0:	30800044 	addi	r2,r6,1
 100ecd4:	20800015 	stw	r2,0(r4)
 100ecd8:	00800044 	movi	r2,1
 100ecdc:	f800283a 	ret

0100ece0 <_strtod_r>:
 100ece0:	deffde04 	addi	sp,sp,-136
 100ece4:	df002015 	stw	fp,128(sp)
 100ece8:	dd401d15 	stw	r21,116(sp)
 100ecec:	dc401915 	stw	r17,100(sp)
 100ecf0:	dfc02115 	stw	ra,132(sp)
 100ecf4:	ddc01f15 	stw	r23,124(sp)
 100ecf8:	dd801e15 	stw	r22,120(sp)
 100ecfc:	dd001c15 	stw	r20,112(sp)
 100ed00:	dcc01b15 	stw	r19,108(sp)
 100ed04:	dc801a15 	stw	r18,104(sp)
 100ed08:	dc001815 	stw	r16,96(sp)
 100ed0c:	2823883a 	mov	r17,r5
 100ed10:	202b883a 	mov	r21,r4
 100ed14:	d9801515 	stw	r6,84(sp)
 100ed18:	d8000915 	stw	zero,36(sp)
 100ed1c:	d8000a15 	stw	zero,40(sp)
 100ed20:	d9400415 	stw	r5,16(sp)
 100ed24:	df000904 	addi	fp,sp,36
 100ed28:	da000417 	ldw	r8,16(sp)
 100ed2c:	00800b44 	movi	r2,45
 100ed30:	40c00003 	ldbu	r3,0(r8)
 100ed34:	10c03536 	bltu	r2,r3,100ee0c <_strtod_r+0x12c>
 100ed38:	18c5883a 	add	r2,r3,r3
 100ed3c:	1085883a 	add	r2,r2,r2
 100ed40:	00c04074 	movhi	r3,257
 100ed44:	18fb5504 	addi	r3,r3,-4780
 100ed48:	10c5883a 	add	r2,r2,r3
 100ed4c:	11000017 	ldw	r4,0(r2)
 100ed50:	2000683a 	jmp	r4
 100ed54:	0100ef48 	cmpgei	r4,zero,957
 100ed58:	0100ee0c 	andi	r4,zero,952
 100ed5c:	0100ee0c 	andi	r4,zero,952
 100ed60:	0100ee0c 	andi	r4,zero,952
 100ed64:	0100ee0c 	andi	r4,zero,952
 100ed68:	0100ee0c 	andi	r4,zero,952
 100ed6c:	0100ee0c 	andi	r4,zero,952
 100ed70:	0100ee0c 	andi	r4,zero,952
 100ed74:	0100ee0c 	andi	r4,zero,952
 100ed78:	0100f260 	cmpeqi	r4,zero,969
 100ed7c:	0100f260 	cmpeqi	r4,zero,969
 100ed80:	0100f260 	cmpeqi	r4,zero,969
 100ed84:	0100f260 	cmpeqi	r4,zero,969
 100ed88:	0100f260 	cmpeqi	r4,zero,969
 100ed8c:	0100ee0c 	andi	r4,zero,952
 100ed90:	0100ee0c 	andi	r4,zero,952
 100ed94:	0100ee0c 	andi	r4,zero,952
 100ed98:	0100ee0c 	andi	r4,zero,952
 100ed9c:	0100ee0c 	andi	r4,zero,952
 100eda0:	0100ee0c 	andi	r4,zero,952
 100eda4:	0100ee0c 	andi	r4,zero,952
 100eda8:	0100ee0c 	andi	r4,zero,952
 100edac:	0100ee0c 	andi	r4,zero,952
 100edb0:	0100ee0c 	andi	r4,zero,952
 100edb4:	0100ee0c 	andi	r4,zero,952
 100edb8:	0100ee0c 	andi	r4,zero,952
 100edbc:	0100ee0c 	andi	r4,zero,952
 100edc0:	0100ee0c 	andi	r4,zero,952
 100edc4:	0100ee0c 	andi	r4,zero,952
 100edc8:	0100ee0c 	andi	r4,zero,952
 100edcc:	0100ee0c 	andi	r4,zero,952
 100edd0:	0100ee0c 	andi	r4,zero,952
 100edd4:	0100f260 	cmpeqi	r4,zero,969
 100edd8:	0100ee0c 	andi	r4,zero,952
 100eddc:	0100ee0c 	andi	r4,zero,952
 100ede0:	0100ee0c 	andi	r4,zero,952
 100ede4:	0100ee0c 	andi	r4,zero,952
 100ede8:	0100ee0c 	andi	r4,zero,952
 100edec:	0100ee0c 	andi	r4,zero,952
 100edf0:	0100ee0c 	andi	r4,zero,952
 100edf4:	0100ee0c 	andi	r4,zero,952
 100edf8:	0100ee0c 	andi	r4,zero,952
 100edfc:	0100ee0c 	andi	r4,zero,952
 100ee00:	0100f240 	call	100f24 <__alt_mem_onchip+0x100f24>
 100ee04:	0100ee0c 	andi	r4,zero,952
 100ee08:	0100f26c 	andhi	r4,zero,969
 100ee0c:	d8001115 	stw	zero,68(sp)
 100ee10:	40c00007 	ldb	r3,0(r8)
 100ee14:	00800c04 	movi	r2,48
 100ee18:	1880d026 	beq	r3,r2,100f15c <_strtod_r+0x47c>
 100ee1c:	001f883a 	mov	r15,zero
 100ee20:	41000007 	ldb	r4,0(r8)
 100ee24:	00c00bc4 	movi	r3,47
 100ee28:	402d883a 	mov	r22,r8
 100ee2c:	1903470e 	bge	r3,r4,100fb4c <_strtod_r+0xe6c>
 100ee30:	00800e44 	movi	r2,57
 100ee34:	11034516 	blt	r2,r4,100fb4c <_strtod_r+0xe6c>
 100ee38:	180f883a 	mov	r7,r3
 100ee3c:	1013883a 	mov	r9,r2
 100ee40:	4007883a 	mov	r3,r8
 100ee44:	000d883a 	mov	r6,zero
 100ee48:	0029883a 	mov	r20,zero
 100ee4c:	0021883a 	mov	r16,zero
 100ee50:	01400204 	movi	r5,8
 100ee54:	028003c4 	movi	r10,15
 100ee58:	29803116 	blt	r5,r6,100ef20 <_strtod_r+0x240>
 100ee5c:	a08002a4 	muli	r2,r20,10
 100ee60:	1105883a 	add	r2,r2,r4
 100ee64:	153ff404 	addi	r20,r2,-48
 100ee68:	1a000044 	addi	r8,r3,1
 100ee6c:	da000415 	stw	r8,16(sp)
 100ee70:	41000007 	ldb	r4,0(r8)
 100ee74:	31800044 	addi	r6,r6,1
 100ee78:	4007883a 	mov	r3,r8
 100ee7c:	3900010e 	bge	r7,r4,100ee84 <_strtod_r+0x1a4>
 100ee80:	493ff50e 	bge	r9,r4,100ee58 <_strtod_r+0x178>
 100ee84:	00800b84 	movi	r2,46
 100ee88:	2080c126 	beq	r4,r2,100f190 <_strtod_r+0x4b0>
 100ee8c:	3027883a 	mov	r19,r6
 100ee90:	0025883a 	mov	r18,zero
 100ee94:	0015883a 	mov	r10,zero
 100ee98:	000f883a 	mov	r7,zero
 100ee9c:	00801944 	movi	r2,101
 100eea0:	20802426 	beq	r4,r2,100ef34 <_strtod_r+0x254>
 100eea4:	00801144 	movi	r2,69
 100eea8:	20802226 	beq	r4,r2,100ef34 <_strtod_r+0x254>
 100eeac:	9816c03a 	cmpne	r11,r19,zero
 100eeb0:	000b883a 	mov	r5,zero
 100eeb4:	5800631e 	bne	r11,zero,100f044 <_strtod_r+0x364>
 100eeb8:	3800c126 	beq	r7,zero,100f1c0 <_strtod_r+0x4e0>
 100eebc:	d8c01517 	ldw	r3,84(sp)
 100eec0:	18000226 	beq	r3,zero,100eecc <_strtod_r+0x1ec>
 100eec4:	d8800417 	ldw	r2,16(sp)
 100eec8:	18800015 	stw	r2,0(r3)
 100eecc:	d9001117 	ldw	r4,68(sp)
 100eed0:	2005003a 	cmpeq	r2,r4,zero
 100eed4:	10001f1e 	bne	r2,zero,100ef54 <_strtod_r+0x274>
 100eed8:	e0800017 	ldw	r2,0(fp)
 100eedc:	e0c00117 	ldw	r3,4(fp)
 100eee0:	1009883a 	mov	r4,r2
 100eee4:	1960003c 	xorhi	r5,r3,32768
 100eee8:	2005883a 	mov	r2,r4
 100eeec:	2807883a 	mov	r3,r5
 100eef0:	dfc02117 	ldw	ra,132(sp)
 100eef4:	df002017 	ldw	fp,128(sp)
 100eef8:	ddc01f17 	ldw	r23,124(sp)
 100eefc:	dd801e17 	ldw	r22,120(sp)
 100ef00:	dd401d17 	ldw	r21,116(sp)
 100ef04:	dd001c17 	ldw	r20,112(sp)
 100ef08:	dcc01b17 	ldw	r19,108(sp)
 100ef0c:	dc801a17 	ldw	r18,104(sp)
 100ef10:	dc401917 	ldw	r17,100(sp)
 100ef14:	dc001817 	ldw	r16,96(sp)
 100ef18:	dec02204 	addi	sp,sp,136
 100ef1c:	f800283a 	ret
 100ef20:	51bfd116 	blt	r10,r6,100ee68 <_strtod_r+0x188>
 100ef24:	808002a4 	muli	r2,r16,10
 100ef28:	1105883a 	add	r2,r2,r4
 100ef2c:	143ff404 	addi	r16,r2,-48
 100ef30:	003fcd06 	br	100ee68 <_strtod_r+0x188>
 100ef34:	9816c03a 	cmpne	r11,r19,zero
 100ef38:	5800091e 	bne	r11,zero,100ef60 <_strtod_r+0x280>
 100ef3c:	3800081e 	bne	r7,zero,100ef60 <_strtod_r+0x280>
 100ef40:	7805003a 	cmpeq	r2,r15,zero
 100ef44:	10000626 	beq	r2,zero,100ef60 <_strtod_r+0x280>
 100ef48:	d8001115 	stw	zero,68(sp)
 100ef4c:	dc400415 	stw	r17,16(sp)
 100ef50:	003fda06 	br	100eebc <_strtod_r+0x1dc>
 100ef54:	e1000017 	ldw	r4,0(fp)
 100ef58:	e1400117 	ldw	r5,4(fp)
 100ef5c:	003fe206 	br	100eee8 <_strtod_r+0x208>
 100ef60:	dc400417 	ldw	r17,16(sp)
 100ef64:	00800ac4 	movi	r2,43
 100ef68:	8a000044 	addi	r8,r17,1
 100ef6c:	da000415 	stw	r8,16(sp)
 100ef70:	88c00047 	ldb	r3,1(r17)
 100ef74:	4009883a 	mov	r4,r8
 100ef78:	1880bf26 	beq	r3,r2,100f278 <_strtod_r+0x598>
 100ef7c:	00800b44 	movi	r2,45
 100ef80:	18834526 	beq	r3,r2,100fc98 <_strtod_r+0xfb8>
 100ef84:	1809883a 	mov	r4,r3
 100ef88:	20fff404 	addi	r3,r4,-48
 100ef8c:	00800244 	movi	r2,9
 100ef90:	001d883a 	mov	r14,zero
 100ef94:	10c0bf36 	bltu	r2,r3,100f294 <_strtod_r+0x5b4>
 100ef98:	00800c04 	movi	r2,48
 100ef9c:	2080061e 	bne	r4,r2,100efb8 <_strtod_r+0x2d8>
 100efa0:	da000417 	ldw	r8,16(sp)
 100efa4:	2005883a 	mov	r2,r4
 100efa8:	42000044 	addi	r8,r8,1
 100efac:	da000415 	stw	r8,16(sp)
 100efb0:	41000007 	ldb	r4,0(r8)
 100efb4:	20bffc26 	beq	r4,r2,100efa8 <_strtod_r+0x2c8>
 100efb8:	20fff3c4 	addi	r3,r4,-49
 100efbc:	00800204 	movi	r2,8
 100efc0:	10ffbb36 	bltu	r2,r3,100eeb0 <_strtod_r+0x1d0>
 100efc4:	da000417 	ldw	r8,16(sp)
 100efc8:	227ff404 	addi	r9,r4,-48
 100efcc:	03000bc4 	movi	r12,47
 100efd0:	4007883a 	mov	r3,r8
 100efd4:	42000044 	addi	r8,r8,1
 100efd8:	da000415 	stw	r8,16(sp)
 100efdc:	41000007 	ldb	r4,0(r8)
 100efe0:	61000d0e 	bge	r12,r4,100f018 <_strtod_r+0x338>
 100efe4:	00800e44 	movi	r2,57
 100efe8:	11000b16 	blt	r2,r4,100f018 <_strtod_r+0x338>
 100efec:	601b883a 	mov	r13,r12
 100eff0:	1019883a 	mov	r12,r2
 100eff4:	00000106 	br	100effc <_strtod_r+0x31c>
 100eff8:	61000716 	blt	r12,r4,100f018 <_strtod_r+0x338>
 100effc:	488002a4 	muli	r2,r9,10
 100f000:	42000044 	addi	r8,r8,1
 100f004:	da000415 	stw	r8,16(sp)
 100f008:	2085883a 	add	r2,r4,r2
 100f00c:	41000007 	ldb	r4,0(r8)
 100f010:	127ff404 	addi	r9,r2,-48
 100f014:	693ff816 	blt	r13,r4,100eff8 <_strtod_r+0x318>
 100f018:	40c7c83a 	sub	r3,r8,r3
 100f01c:	00800204 	movi	r2,8
 100f020:	10c2e416 	blt	r2,r3,100fbb4 <_strtod_r+0xed4>
 100f024:	009387c4 	movi	r2,19999
 100f028:	480b883a 	mov	r5,r9
 100f02c:	1240010e 	bge	r2,r9,100f034 <_strtod_r+0x354>
 100f030:	100b883a 	mov	r5,r2
 100f034:	7005003a 	cmpeq	r2,r14,zero
 100f038:	103f9e1e 	bne	r2,zero,100eeb4 <_strtod_r+0x1d4>
 100f03c:	014bc83a 	sub	r5,zero,r5
 100f040:	583f9d26 	beq	r11,zero,100eeb8 <_strtod_r+0x1d8>
 100f044:	2a8bc83a 	sub	r5,r5,r10
 100f048:	d9400f15 	stw	r5,60(sp)
 100f04c:	30007a1e 	bne	r6,zero,100f238 <_strtod_r+0x558>
 100f050:	dcc01215 	stw	r19,72(sp)
 100f054:	00800404 	movi	r2,16
 100f058:	9825883a 	mov	r18,r19
 100f05c:	14c0010e 	bge	r2,r19,100f064 <_strtod_r+0x384>
 100f060:	1025883a 	mov	r18,r2
 100f064:	a009883a 	mov	r4,r20
 100f068:	1012f940 	call	1012f94 <__floatunsidf>
 100f06c:	100f883a 	mov	r7,r2
 100f070:	e0800015 	stw	r2,0(fp)
 100f074:	00800244 	movi	r2,9
 100f078:	e0c00115 	stw	r3,4(fp)
 100f07c:	1480160e 	bge	r2,r18,100f0d8 <_strtod_r+0x3f8>
 100f080:	900c90fa 	slli	r6,r18,3
 100f084:	010040b4 	movhi	r4,258
 100f088:	213dcb04 	addi	r4,r4,-2260
 100f08c:	180b883a 	mov	r5,r3
 100f090:	310d883a 	add	r6,r6,r4
 100f094:	30ffef17 	ldw	r3,-68(r6)
 100f098:	30bfee17 	ldw	r2,-72(r6)
 100f09c:	3809883a 	mov	r4,r7
 100f0a0:	180f883a 	mov	r7,r3
 100f0a4:	100d883a 	mov	r6,r2
 100f0a8:	1004c280 	call	1004c28 <__muldf3>
 100f0ac:	8009883a 	mov	r4,r16
 100f0b0:	1823883a 	mov	r17,r3
 100f0b4:	1021883a 	mov	r16,r2
 100f0b8:	1012f940 	call	1012f94 <__floatunsidf>
 100f0bc:	880b883a 	mov	r5,r17
 100f0c0:	180f883a 	mov	r7,r3
 100f0c4:	8009883a 	mov	r4,r16
 100f0c8:	100d883a 	mov	r6,r2
 100f0cc:	1004bb40 	call	1004bb4 <__adddf3>
 100f0d0:	e0c00115 	stw	r3,4(fp)
 100f0d4:	e0800015 	stw	r2,0(fp)
 100f0d8:	010003c4 	movi	r4,15
 100f0dc:	24c09816 	blt	r4,r19,100f340 <_strtod_r+0x660>
 100f0e0:	d9800f17 	ldw	r6,60(sp)
 100f0e4:	303f7526 	beq	r6,zero,100eebc <_strtod_r+0x1dc>
 100f0e8:	0183be0e 	bge	zero,r6,100ffe4 <_strtod_r+0x1304>
 100f0ec:	00800584 	movi	r2,22
 100f0f0:	1182b20e 	bge	r2,r6,100fbbc <_strtod_r+0xedc>
 100f0f4:	d8c00f17 	ldw	r3,60(sp)
 100f0f8:	24e3c83a 	sub	r17,r4,r19
 100f0fc:	88800584 	addi	r2,r17,22
 100f100:	10c08f16 	blt	r2,r3,100f340 <_strtod_r+0x660>
 100f104:	880890fa 	slli	r4,r17,3
 100f108:	040040b4 	movhi	r16,258
 100f10c:	843dcb04 	addi	r16,r16,-2260
 100f110:	e0800017 	ldw	r2,0(fp)
 100f114:	2409883a 	add	r4,r4,r16
 100f118:	22000017 	ldw	r8,0(r4)
 100f11c:	22400117 	ldw	r9,4(r4)
 100f120:	e0c00117 	ldw	r3,4(fp)
 100f124:	1009883a 	mov	r4,r2
 100f128:	480f883a 	mov	r7,r9
 100f12c:	180b883a 	mov	r5,r3
 100f130:	400d883a 	mov	r6,r8
 100f134:	1004c280 	call	1004c28 <__muldf3>
 100f138:	d9000f17 	ldw	r4,60(sp)
 100f13c:	180b883a 	mov	r5,r3
 100f140:	2455c83a 	sub	r10,r4,r17
 100f144:	501490fa 	slli	r10,r10,3
 100f148:	1009883a 	mov	r4,r2
 100f14c:	5415883a 	add	r10,r10,r16
 100f150:	52000017 	ldw	r8,0(r10)
 100f154:	52400117 	ldw	r9,4(r10)
 100f158:	0002a206 	br	100fbe4 <_strtod_r+0xf04>
 100f15c:	40c00047 	ldb	r3,1(r8)
 100f160:	00801604 	movi	r2,88
 100f164:	18804e26 	beq	r3,r2,100f2a0 <_strtod_r+0x5c0>
 100f168:	00801e04 	movi	r2,120
 100f16c:	18804c26 	beq	r3,r2,100f2a0 <_strtod_r+0x5c0>
 100f170:	42000044 	addi	r8,r8,1
 100f174:	da000415 	stw	r8,16(sp)
 100f178:	40c00007 	ldb	r3,0(r8)
 100f17c:	00800c04 	movi	r2,48
 100f180:	18bffb26 	beq	r3,r2,100f170 <_strtod_r+0x490>
 100f184:	183f4d26 	beq	r3,zero,100eebc <_strtod_r+0x1dc>
 100f188:	03c00044 	movi	r15,1
 100f18c:	003f2406 	br	100ee20 <_strtod_r+0x140>
 100f190:	42000044 	addi	r8,r8,1
 100f194:	da000415 	stw	r8,16(sp)
 100f198:	19000047 	ldb	r4,1(r3)
 100f19c:	3000b726 	beq	r6,zero,100f47c <_strtod_r+0x79c>
 100f1a0:	3027883a 	mov	r19,r6
 100f1a4:	0015883a 	mov	r10,zero
 100f1a8:	000f883a 	mov	r7,zero
 100f1ac:	227ff404 	addi	r9,r4,-48
 100f1b0:	00800244 	movi	r2,9
 100f1b4:	1242592e 	bgeu	r2,r9,100fb1c <_strtod_r+0xe3c>
 100f1b8:	04800044 	movi	r18,1
 100f1bc:	003f3706 	br	100ee9c <_strtod_r+0x1bc>
 100f1c0:	7804c03a 	cmpne	r2,r15,zero
 100f1c4:	103f3d1e 	bne	r2,zero,100eebc <_strtod_r+0x1dc>
 100f1c8:	9004c03a 	cmpne	r2,r18,zero
 100f1cc:	103f5e1e 	bne	r2,zero,100ef48 <_strtod_r+0x268>
 100f1d0:	00801384 	movi	r2,78
 100f1d4:	2083a226 	beq	r4,r2,1010060 <_strtod_r+0x1380>
 100f1d8:	11039d16 	blt	r2,r4,1010050 <_strtod_r+0x1370>
 100f1dc:	00801244 	movi	r2,73
 100f1e0:	20bf591e 	bne	r4,r2,100ef48 <_strtod_r+0x268>
 100f1e4:	dc000404 	addi	r16,sp,16
 100f1e8:	8009883a 	mov	r4,r16
 100f1ec:	014040b4 	movhi	r5,258
 100f1f0:	297e1404 	addi	r5,r5,-1968
 100f1f4:	100ec980 	call	100ec98 <match>
 100f1f8:	103f5326 	beq	r2,zero,100ef48 <_strtod_r+0x268>
 100f1fc:	d8800417 	ldw	r2,16(sp)
 100f200:	8009883a 	mov	r4,r16
 100f204:	014040b4 	movhi	r5,258
 100f208:	297e1504 	addi	r5,r5,-1964
 100f20c:	123fffc4 	addi	r8,r2,-1
 100f210:	da000415 	stw	r8,16(sp)
 100f214:	100ec980 	call	100ec98 <match>
 100f218:	1000031e 	bne	r2,zero,100f228 <_strtod_r+0x548>
 100f21c:	d8800417 	ldw	r2,16(sp)
 100f220:	12000044 	addi	r8,r2,1
 100f224:	da000415 	stw	r8,16(sp)
 100f228:	019ffc34 	movhi	r6,32752
 100f22c:	e1800115 	stw	r6,4(fp)
 100f230:	e0000015 	stw	zero,0(fp)
 100f234:	003f2106 	br	100eebc <_strtod_r+0x1dc>
 100f238:	d9801215 	stw	r6,72(sp)
 100f23c:	003f8506 	br	100f054 <_strtod_r+0x374>
 100f240:	d8001115 	stw	zero,68(sp)
 100f244:	42000044 	addi	r8,r8,1
 100f248:	da000415 	stw	r8,16(sp)
 100f24c:	40800007 	ldb	r2,0(r8)
 100f250:	103eef1e 	bne	r2,zero,100ee10 <_strtod_r+0x130>
 100f254:	d8001115 	stw	zero,68(sp)
 100f258:	dc400415 	stw	r17,16(sp)
 100f25c:	003f1706 	br	100eebc <_strtod_r+0x1dc>
 100f260:	42000044 	addi	r8,r8,1
 100f264:	da000415 	stw	r8,16(sp)
 100f268:	003eaf06 	br	100ed28 <_strtod_r+0x48>
 100f26c:	00800044 	movi	r2,1
 100f270:	d8801115 	stw	r2,68(sp)
 100f274:	003ff306 	br	100f244 <_strtod_r+0x564>
 100f278:	001d883a 	mov	r14,zero
 100f27c:	42000044 	addi	r8,r8,1
 100f280:	da000415 	stw	r8,16(sp)
 100f284:	21000047 	ldb	r4,1(r4)
 100f288:	00800244 	movi	r2,9
 100f28c:	20fff404 	addi	r3,r4,-48
 100f290:	10ff412e 	bgeu	r2,r3,100ef98 <_strtod_r+0x2b8>
 100f294:	000b883a 	mov	r5,zero
 100f298:	dc400415 	stw	r17,16(sp)
 100f29c:	003f0506 	br	100eeb4 <_strtod_r+0x1d4>
 100f2a0:	d8c01117 	ldw	r3,68(sp)
 100f2a4:	048040b4 	movhi	r18,258
 100f2a8:	94813104 	addi	r18,r18,1220
 100f2ac:	d8800504 	addi	r2,sp,20
 100f2b0:	a809883a 	mov	r4,r21
 100f2b4:	d9400404 	addi	r5,sp,16
 100f2b8:	900d883a 	mov	r6,r18
 100f2bc:	d9c00604 	addi	r7,sp,24
 100f2c0:	d8800015 	stw	r2,0(sp)
 100f2c4:	d8c00115 	stw	r3,4(sp)
 100f2c8:	10114cc0 	call	10114cc <__gethex>
 100f2cc:	140001cc 	andi	r16,r2,7
 100f2d0:	1027883a 	mov	r19,r2
 100f2d4:	803ef926 	beq	r16,zero,100eebc <_strtod_r+0x1dc>
 100f2d8:	05000184 	movi	r20,6
 100f2dc:	853f1a26 	beq	r16,r20,100ef48 <_strtod_r+0x268>
 100f2e0:	d9800517 	ldw	r6,20(sp)
 100f2e4:	30000626 	beq	r6,zero,100f300 <_strtod_r+0x620>
 100f2e8:	91400017 	ldw	r5,0(r18)
 100f2ec:	d9000d04 	addi	r4,sp,52
 100f2f0:	100d6300 	call	100d630 <__copybits>
 100f2f4:	d9400517 	ldw	r5,20(sp)
 100f2f8:	a809883a 	mov	r4,r21
 100f2fc:	100d1900 	call	100d190 <_Bfree>
 100f300:	d9400617 	ldw	r5,24(sp)
 100f304:	a4024136 	bltu	r20,r16,100fc0c <_strtod_r+0xf2c>
 100f308:	8405883a 	add	r2,r16,r16
 100f30c:	1085883a 	add	r2,r2,r2
 100f310:	00c04074 	movhi	r3,257
 100f314:	18fcc904 	addi	r3,r3,-3292
 100f318:	10c5883a 	add	r2,r2,r3
 100f31c:	11000017 	ldw	r4,0(r2)
 100f320:	2000683a 	jmp	r4
 100f324:	0100fc4c 	andi	r4,zero,1009
 100f328:	0100fc58 	cmpnei	r4,zero,1009
 100f32c:	0100fbfc 	xorhi	r4,zero,1007
 100f330:	0100fc24 	muli	r4,zero,1008
 100f334:	0100fc34 	movhi	r4,1008
 100f338:	0100fc58 	cmpnei	r4,zero,1009
 100f33c:	0100fc4c 	andi	r4,zero,1009
 100f340:	d8c00f17 	ldw	r3,60(sp)
 100f344:	9c85c83a 	sub	r2,r19,r18
 100f348:	18a1883a 	add	r16,r3,r2
 100f34c:	0402d00e 	bge	zero,r16,100fe90 <_strtod_r+0x11b0>
 100f350:	814003cc 	andi	r5,r16,15
 100f354:	28000f26 	beq	r5,zero,100f394 <_strtod_r+0x6b4>
 100f358:	280a90fa 	slli	r5,r5,3
 100f35c:	010040b4 	movhi	r4,258
 100f360:	213dcb04 	addi	r4,r4,-2260
 100f364:	e0800017 	ldw	r2,0(fp)
 100f368:	290b883a 	add	r5,r5,r4
 100f36c:	2a000017 	ldw	r8,0(r5)
 100f370:	e0c00117 	ldw	r3,4(fp)
 100f374:	2a400117 	ldw	r9,4(r5)
 100f378:	1009883a 	mov	r4,r2
 100f37c:	180b883a 	mov	r5,r3
 100f380:	480f883a 	mov	r7,r9
 100f384:	400d883a 	mov	r6,r8
 100f388:	1004c280 	call	1004c28 <__muldf3>
 100f38c:	e0c00115 	stw	r3,4(fp)
 100f390:	e0800015 	stw	r2,0(fp)
 100f394:	00bffc04 	movi	r2,-16
 100f398:	808c703a 	and	r6,r16,r2
 100f39c:	30005b26 	beq	r6,zero,100f50c <_strtod_r+0x82c>
 100f3a0:	00804d04 	movi	r2,308
 100f3a4:	1181fd16 	blt	r2,r6,100fb9c <_strtod_r+0xebc>
 100f3a8:	3021d13a 	srai	r16,r6,4
 100f3ac:	00800044 	movi	r2,1
 100f3b0:	1403610e 	bge	r2,r16,1010138 <_strtod_r+0x1458>
 100f3b4:	102f883a 	mov	r23,r2
 100f3b8:	0025883a 	mov	r18,zero
 100f3bc:	044040b4 	movhi	r17,258
 100f3c0:	8c7dfd04 	addi	r17,r17,-2060
 100f3c4:	8080004c 	andi	r2,r16,1
 100f3c8:	1005003a 	cmpeq	r2,r2,zero
 100f3cc:	1000091e 	bne	r2,zero,100f3f4 <_strtod_r+0x714>
 100f3d0:	e0800017 	ldw	r2,0(fp)
 100f3d4:	e0c00117 	ldw	r3,4(fp)
 100f3d8:	89800017 	ldw	r6,0(r17)
 100f3dc:	89c00117 	ldw	r7,4(r17)
 100f3e0:	180b883a 	mov	r5,r3
 100f3e4:	1009883a 	mov	r4,r2
 100f3e8:	1004c280 	call	1004c28 <__muldf3>
 100f3ec:	e0c00115 	stw	r3,4(fp)
 100f3f0:	e0800015 	stw	r2,0(fp)
 100f3f4:	8021d07a 	srai	r16,r16,1
 100f3f8:	94800044 	addi	r18,r18,1
 100f3fc:	8c400204 	addi	r17,r17,8
 100f400:	bc3ff016 	blt	r23,r16,100f3c4 <_strtod_r+0x6e4>
 100f404:	900e90fa 	slli	r7,r18,3
 100f408:	018040b4 	movhi	r6,258
 100f40c:	31bdfd04 	addi	r6,r6,-2060
 100f410:	e2000117 	ldw	r8,4(fp)
 100f414:	398f883a 	add	r7,r7,r6
 100f418:	38800017 	ldw	r2,0(r7)
 100f41c:	38c00117 	ldw	r3,4(r7)
 100f420:	e1000017 	ldw	r4,0(fp)
 100f424:	01bf2c34 	movhi	r6,64688
 100f428:	418d883a 	add	r6,r8,r6
 100f42c:	300b883a 	mov	r5,r6
 100f430:	180f883a 	mov	r7,r3
 100f434:	100d883a 	mov	r6,r2
 100f438:	1004c280 	call	1004c28 <__muldf3>
 100f43c:	1009883a 	mov	r4,r2
 100f440:	180b883a 	mov	r5,r3
 100f444:	199ffc2c 	andhi	r6,r3,32752
 100f448:	009f2834 	movhi	r2,31904
 100f44c:	e1000015 	stw	r4,0(fp)
 100f450:	e1400115 	stw	r5,4(fp)
 100f454:	1181d136 	bltu	r2,r6,100fb9c <_strtod_r+0xebc>
 100f458:	009f2434 	movhi	r2,31888
 100f45c:	1183202e 	bgeu	r2,r6,10100e0 <_strtod_r+0x1400>
 100f460:	d8001415 	stw	zero,80(sp)
 100f464:	019ffc34 	movhi	r6,32752
 100f468:	31bfffc4 	addi	r6,r6,-1
 100f46c:	01ffffc4 	movi	r7,-1
 100f470:	e1800115 	stw	r6,4(fp)
 100f474:	e1c00015 	stw	r7,0(fp)
 100f478:	00002506 	br	100f510 <_strtod_r+0x830>
 100f47c:	00800c04 	movi	r2,48
 100f480:	2083151e 	bne	r4,r2,10100d8 <_strtod_r+0x13f8>
 100f484:	2005883a 	mov	r2,r4
 100f488:	000f883a 	mov	r7,zero
 100f48c:	42000044 	addi	r8,r8,1
 100f490:	da000415 	stw	r8,16(sp)
 100f494:	41000007 	ldb	r4,0(r8)
 100f498:	39c00044 	addi	r7,r7,1
 100f49c:	20bffb26 	beq	r4,r2,100f48c <_strtod_r+0x7ac>
 100f4a0:	20fff3c4 	addi	r3,r4,-49
 100f4a4:	00800204 	movi	r2,8
 100f4a8:	10c1b836 	bltu	r2,r3,100fb8c <_strtod_r+0xeac>
 100f4ac:	dd800417 	ldw	r22,16(sp)
 100f4b0:	3815883a 	mov	r10,r7
 100f4b4:	227ff404 	addi	r9,r4,-48
 100f4b8:	b011883a 	mov	r8,r22
 100f4bc:	0027883a 	mov	r19,zero
 100f4c0:	01c00044 	movi	r7,1
 100f4c4:	4801fe26 	beq	r9,zero,100fcc0 <_strtod_r+0xfe0>
 100f4c8:	00800044 	movi	r2,1
 100f4cc:	51d5883a 	add	r10,r10,r7
 100f4d0:	11c31f0e 	bge	r2,r7,1010150 <_strtod_r+0x1470>
 100f4d4:	1009883a 	mov	r4,r2
 100f4d8:	9807883a 	mov	r3,r19
 100f4dc:	02c00204 	movi	r11,8
 100f4e0:	03000404 	movi	r12,16
 100f4e4:	00000306 	br	100f4f4 <_strtod_r+0x814>
 100f4e8:	a50002a4 	muli	r20,r20,10
 100f4ec:	21000044 	addi	r4,r4,1
 100f4f0:	21c1eb26 	beq	r4,r7,100fca0 <_strtod_r+0xfc0>
 100f4f4:	18c00044 	addi	r3,r3,1
 100f4f8:	18bfffc4 	addi	r2,r3,-1
 100f4fc:	58bffa0e 	bge	r11,r2,100f4e8 <_strtod_r+0x808>
 100f500:	60fffa16 	blt	r12,r3,100f4ec <_strtod_r+0x80c>
 100f504:	840002a4 	muli	r16,r16,10
 100f508:	003ff806 	br	100f4ec <_strtod_r+0x80c>
 100f50c:	d8001415 	stw	zero,80(sp)
 100f510:	d9801217 	ldw	r6,72(sp)
 100f514:	a809883a 	mov	r4,r21
 100f518:	b00b883a 	mov	r5,r22
 100f51c:	980f883a 	mov	r7,r19
 100f520:	dd000015 	stw	r20,0(sp)
 100f524:	100e0640 	call	100e064 <__s2b>
 100f528:	d9800f17 	ldw	r6,60(sp)
 100f52c:	11000304 	addi	r4,r2,12
 100f530:	d8801015 	stw	r2,64(sp)
 100f534:	300c803a 	cmplt	r6,r6,zero
 100f538:	d9001715 	stw	r4,92(sp)
 100f53c:	d9801615 	stw	r6,88(sp)
 100f540:	d8801017 	ldw	r2,64(sp)
 100f544:	a809883a 	mov	r4,r21
 100f548:	11400117 	ldw	r5,4(r2)
 100f54c:	100d7100 	call	100d710 <_Balloc>
 100f550:	d8c01017 	ldw	r3,64(sp)
 100f554:	d9401717 	ldw	r5,92(sp)
 100f558:	11000304 	addi	r4,r2,12
 100f55c:	19800417 	ldw	r6,16(r3)
 100f560:	102f883a 	mov	r23,r2
 100f564:	318d883a 	add	r6,r6,r6
 100f568:	318d883a 	add	r6,r6,r6
 100f56c:	31800204 	addi	r6,r6,8
 100f570:	100cf780 	call	100cf78 <memcpy>
 100f574:	e2000017 	ldw	r8,0(fp)
 100f578:	e2400117 	ldw	r9,4(fp)
 100f57c:	d9800304 	addi	r6,sp,12
 100f580:	400b883a 	mov	r5,r8
 100f584:	a809883a 	mov	r4,r21
 100f588:	d9c00204 	addi	r7,sp,8
 100f58c:	d9800015 	stw	r6,0(sp)
 100f590:	480d883a 	mov	r6,r9
 100f594:	100d7cc0 	call	100d7cc <__d2b>
 100f598:	a809883a 	mov	r4,r21
 100f59c:	01400044 	movi	r5,1
 100f5a0:	d8800515 	stw	r2,20(sp)
 100f5a4:	100de080 	call	100de08 <__i2b>
 100f5a8:	102d883a 	mov	r22,r2
 100f5ac:	d8801617 	ldw	r2,88(sp)
 100f5b0:	1001051e 	bne	r2,zero,100f9c8 <_strtod_r+0xce8>
 100f5b4:	dd000f17 	ldw	r20,60(sp)
 100f5b8:	000f883a 	mov	r7,zero
 100f5bc:	0013883a 	mov	r9,zero
 100f5c0:	a011883a 	mov	r8,r20
 100f5c4:	d8800217 	ldw	r2,8(sp)
 100f5c8:	1000fd16 	blt	r2,zero,100f9c0 <_strtod_r+0xce0>
 100f5cc:	388f883a 	add	r7,r7,r2
 100f5d0:	d9801417 	ldw	r6,80(sp)
 100f5d4:	d9400317 	ldw	r5,12(sp)
 100f5d8:	00ff0084 	movi	r3,-1022
 100f5dc:	1189c83a 	sub	r4,r2,r6
 100f5e0:	2145883a 	add	r2,r4,r5
 100f5e4:	10bfffc4 	addi	r2,r2,-1
 100f5e8:	10c09f0e 	bge	r2,r3,100f868 <_strtod_r+0xb88>
 100f5ec:	21810cc4 	addi	r6,r4,1075
 100f5f0:	d8c01417 	ldw	r3,80(sp)
 100f5f4:	4185883a 	add	r2,r8,r6
 100f5f8:	39a1883a 	add	r16,r7,r6
 100f5fc:	18a5883a 	add	r18,r3,r2
 100f600:	3807883a 	mov	r3,r7
 100f604:	81c0010e 	bge	r16,r7,100f60c <_strtod_r+0x92c>
 100f608:	8007883a 	mov	r3,r16
 100f60c:	9005883a 	mov	r2,r18
 100f610:	1c80010e 	bge	r3,r18,100f618 <_strtod_r+0x938>
 100f614:	1805883a 	mov	r2,r3
 100f618:	0080e70e 	bge	zero,r2,100f9b8 <_strtod_r+0xcd8>
 100f61c:	38a7c83a 	sub	r19,r7,r2
 100f620:	80a1c83a 	sub	r16,r16,r2
 100f624:	90a5c83a 	sub	r18,r18,r2
 100f628:	02400e0e 	bge	zero,r9,100f664 <_strtod_r+0x984>
 100f62c:	480d883a 	mov	r6,r9
 100f630:	b00b883a 	mov	r5,r22
 100f634:	a809883a 	mov	r4,r21
 100f638:	100df440 	call	100df44 <__pow5mult>
 100f63c:	d9800517 	ldw	r6,20(sp)
 100f640:	a809883a 	mov	r4,r21
 100f644:	100b883a 	mov	r5,r2
 100f648:	102d883a 	mov	r22,r2
 100f64c:	100dc200 	call	100dc20 <__multiply>
 100f650:	d9400517 	ldw	r5,20(sp)
 100f654:	1023883a 	mov	r17,r2
 100f658:	a809883a 	mov	r4,r21
 100f65c:	100d1900 	call	100d190 <_Bfree>
 100f660:	dc400515 	stw	r17,20(sp)
 100f664:	0400050e 	bge	zero,r16,100f67c <_strtod_r+0x99c>
 100f668:	d9400517 	ldw	r5,20(sp)
 100f66c:	800d883a 	mov	r6,r16
 100f670:	a809883a 	mov	r4,r21
 100f674:	100dad40 	call	100dad4 <__lshift>
 100f678:	d8800515 	stw	r2,20(sp)
 100f67c:	a000741e 	bne	r20,zero,100f850 <_strtod_r+0xb70>
 100f680:	0480050e 	bge	zero,r18,100f698 <_strtod_r+0x9b8>
 100f684:	b80b883a 	mov	r5,r23
 100f688:	900d883a 	mov	r6,r18
 100f68c:	a809883a 	mov	r4,r21
 100f690:	100dad40 	call	100dad4 <__lshift>
 100f694:	102f883a 	mov	r23,r2
 100f698:	04c0050e 	bge	zero,r19,100f6b0 <_strtod_r+0x9d0>
 100f69c:	b00b883a 	mov	r5,r22
 100f6a0:	980d883a 	mov	r6,r19
 100f6a4:	a809883a 	mov	r4,r21
 100f6a8:	100dad40 	call	100dad4 <__lshift>
 100f6ac:	102d883a 	mov	r22,r2
 100f6b0:	d9400517 	ldw	r5,20(sp)
 100f6b4:	a809883a 	mov	r4,r21
 100f6b8:	b80d883a 	mov	r6,r23
 100f6bc:	100d9480 	call	100d948 <__mdiff>
 100f6c0:	11000317 	ldw	r4,12(r2)
 100f6c4:	b00b883a 	mov	r5,r22
 100f6c8:	10000315 	stw	zero,12(r2)
 100f6cc:	d9001315 	stw	r4,76(sp)
 100f6d0:	1009883a 	mov	r4,r2
 100f6d4:	1029883a 	mov	r20,r2
 100f6d8:	100d2ec0 	call	100d2ec <__mcmp>
 100f6dc:	10017c16 	blt	r2,zero,100fcd0 <_strtod_r+0xff0>
 100f6e0:	1001af26 	beq	r2,zero,100fda0 <_strtod_r+0x10c0>
 100f6e4:	a009883a 	mov	r4,r20
 100f6e8:	b00b883a 	mov	r5,r22
 100f6ec:	100d4ec0 	call	100d4ec <__ratio>
 100f6f0:	0011883a 	mov	r8,zero
 100f6f4:	02500034 	movhi	r9,16384
 100f6f8:	480f883a 	mov	r7,r9
 100f6fc:	1009883a 	mov	r4,r2
 100f700:	180b883a 	mov	r5,r3
 100f704:	400d883a 	mov	r6,r8
 100f708:	1021883a 	mov	r16,r2
 100f70c:	1823883a 	mov	r17,r3
 100f710:	1012e980 	call	1012e98 <__ledf2>
 100f714:	00805716 	blt	zero,r2,100f874 <_strtod_r+0xb94>
 100f718:	d9801317 	ldw	r6,76(sp)
 100f71c:	3025003a 	cmpeq	r18,r6,zero
 100f720:	90008b1e 	bne	r18,zero,100f950 <_strtod_r+0xc70>
 100f724:	008ffc34 	movhi	r2,16368
 100f728:	0021883a 	mov	r16,zero
 100f72c:	1023883a 	mov	r17,r2
 100f730:	d8000715 	stw	zero,28(sp)
 100f734:	d8800815 	stw	r2,32(sp)
 100f738:	e1c00117 	ldw	r7,4(fp)
 100f73c:	009ff834 	movhi	r2,32736
 100f740:	3cdffc2c 	andhi	r19,r7,32752
 100f744:	98805e26 	beq	r19,r2,100f8c0 <_strtod_r+0xbe0>
 100f748:	d8801417 	ldw	r2,80(sp)
 100f74c:	10001b26 	beq	r2,zero,100f7bc <_strtod_r+0xadc>
 100f750:	0081a834 	movhi	r2,1696
 100f754:	14c01936 	bltu	r2,r19,100f7bc <_strtod_r+0xadc>
 100f758:	00bff034 	movhi	r2,65472
 100f75c:	00d07834 	movhi	r3,16864
 100f760:	18ffffc4 	addi	r3,r3,-1
 100f764:	180f883a 	mov	r7,r3
 100f768:	8009883a 	mov	r4,r16
 100f76c:	880b883a 	mov	r5,r17
 100f770:	100d883a 	mov	r6,r2
 100f774:	1012e980 	call	1012e98 <__ledf2>
 100f778:	00800b16 	blt	zero,r2,100f7a8 <_strtod_r+0xac8>
 100f77c:	880b883a 	mov	r5,r17
 100f780:	8009883a 	mov	r4,r16
 100f784:	10120780 	call	1012078 <__fixunsdfsi>
 100f788:	1000df1e 	bne	r2,zero,100fb08 <_strtod_r+0xe28>
 100f78c:	0021883a 	mov	r16,zero
 100f790:	044ffc34 	movhi	r17,16368
 100f794:	9000d91e 	bne	r18,zero,100fafc <_strtod_r+0xe1c>
 100f798:	8005883a 	mov	r2,r16
 100f79c:	8807883a 	mov	r3,r17
 100f7a0:	d8c00815 	stw	r3,32(sp)
 100f7a4:	d8800715 	stw	r2,28(sp)
 100f7a8:	d8800817 	ldw	r2,32(sp)
 100f7ac:	00c1ac34 	movhi	r3,1712
 100f7b0:	14c5c83a 	sub	r2,r2,r19
 100f7b4:	10c5883a 	add	r2,r2,r3
 100f7b8:	d8800815 	stw	r2,32(sp)
 100f7bc:	e0800017 	ldw	r2,0(fp)
 100f7c0:	e0c00117 	ldw	r3,4(fp)
 100f7c4:	1009883a 	mov	r4,r2
 100f7c8:	180b883a 	mov	r5,r3
 100f7cc:	100d34c0 	call	100d34c <__ulp>
 100f7d0:	d9800717 	ldw	r6,28(sp)
 100f7d4:	d9c00817 	ldw	r7,32(sp)
 100f7d8:	180b883a 	mov	r5,r3
 100f7dc:	1009883a 	mov	r4,r2
 100f7e0:	1004c280 	call	1004c28 <__muldf3>
 100f7e4:	e2000017 	ldw	r8,0(fp)
 100f7e8:	e2400117 	ldw	r9,4(fp)
 100f7ec:	180b883a 	mov	r5,r3
 100f7f0:	1009883a 	mov	r4,r2
 100f7f4:	480f883a 	mov	r7,r9
 100f7f8:	400d883a 	mov	r6,r8
 100f7fc:	1004bb40 	call	1004bb4 <__adddf3>
 100f800:	e0c00115 	stw	r3,4(fp)
 100f804:	e0800015 	stw	r2,0(fp)
 100f808:	d8c01417 	ldw	r3,80(sp)
 100f80c:	e4800117 	ldw	r18,4(fp)
 100f810:	1800021e 	bne	r3,zero,100f81c <_strtod_r+0xb3c>
 100f814:	909ffc2c 	andhi	r2,r18,32752
 100f818:	98807b26 	beq	r19,r2,100fa08 <_strtod_r+0xd28>
 100f81c:	d9400517 	ldw	r5,20(sp)
 100f820:	a809883a 	mov	r4,r21
 100f824:	100d1900 	call	100d190 <_Bfree>
 100f828:	a809883a 	mov	r4,r21
 100f82c:	b80b883a 	mov	r5,r23
 100f830:	100d1900 	call	100d190 <_Bfree>
 100f834:	a809883a 	mov	r4,r21
 100f838:	b00b883a 	mov	r5,r22
 100f83c:	100d1900 	call	100d190 <_Bfree>
 100f840:	a809883a 	mov	r4,r21
 100f844:	a00b883a 	mov	r5,r20
 100f848:	100d1900 	call	100d190 <_Bfree>
 100f84c:	003f3c06 	br	100f540 <_strtod_r+0x860>
 100f850:	b80b883a 	mov	r5,r23
 100f854:	a00d883a 	mov	r6,r20
 100f858:	a809883a 	mov	r4,r21
 100f85c:	100df440 	call	100df44 <__pow5mult>
 100f860:	102f883a 	mov	r23,r2
 100f864:	003f8606 	br	100f680 <_strtod_r+0x9a0>
 100f868:	00800d84 	movi	r2,54
 100f86c:	114dc83a 	sub	r6,r2,r5
 100f870:	003f5f06 	br	100f5f0 <_strtod_r+0x910>
 100f874:	0005883a 	mov	r2,zero
 100f878:	00cff834 	movhi	r3,16352
 100f87c:	880b883a 	mov	r5,r17
 100f880:	8009883a 	mov	r4,r16
 100f884:	100d883a 	mov	r6,r2
 100f888:	180f883a 	mov	r7,r3
 100f88c:	1004c280 	call	1004c28 <__muldf3>
 100f890:	d9801317 	ldw	r6,76(sp)
 100f894:	1021883a 	mov	r16,r2
 100f898:	1823883a 	mov	r17,r3
 100f89c:	3025003a 	cmpeq	r18,r6,zero
 100f8a0:	90000126 	beq	r18,zero,100f8a8 <_strtod_r+0xbc8>
 100f8a4:	18e0003c 	xorhi	r3,r3,32768
 100f8a8:	d8800715 	stw	r2,28(sp)
 100f8ac:	d8c00815 	stw	r3,32(sp)
 100f8b0:	e1c00117 	ldw	r7,4(fp)
 100f8b4:	009ff834 	movhi	r2,32736
 100f8b8:	3cdffc2c 	andhi	r19,r7,32752
 100f8bc:	98bfa21e 	bne	r19,r2,100f748 <_strtod_r+0xa68>
 100f8c0:	e1000017 	ldw	r4,0(fp)
 100f8c4:	01bf2c34 	movhi	r6,64688
 100f8c8:	398d883a 	add	r6,r7,r6
 100f8cc:	d9000b15 	stw	r4,44(sp)
 100f8d0:	d9c00c15 	stw	r7,48(sp)
 100f8d4:	300b883a 	mov	r5,r6
 100f8d8:	e1800115 	stw	r6,4(fp)
 100f8dc:	100d34c0 	call	100d34c <__ulp>
 100f8e0:	d9800717 	ldw	r6,28(sp)
 100f8e4:	d9c00817 	ldw	r7,32(sp)
 100f8e8:	180b883a 	mov	r5,r3
 100f8ec:	1009883a 	mov	r4,r2
 100f8f0:	1004c280 	call	1004c28 <__muldf3>
 100f8f4:	e2000017 	ldw	r8,0(fp)
 100f8f8:	e2400117 	ldw	r9,4(fp)
 100f8fc:	180b883a 	mov	r5,r3
 100f900:	1009883a 	mov	r4,r2
 100f904:	480f883a 	mov	r7,r9
 100f908:	400d883a 	mov	r6,r8
 100f90c:	1004bb40 	call	1004bb4 <__adddf3>
 100f910:	1009883a 	mov	r4,r2
 100f914:	180b883a 	mov	r5,r3
 100f918:	009f2834 	movhi	r2,31904
 100f91c:	10bfffc4 	addi	r2,r2,-1
 100f920:	18dffc2c 	andhi	r3,r3,32752
 100f924:	e1000015 	stw	r4,0(fp)
 100f928:	e1400115 	stw	r5,4(fp)
 100f92c:	10c06f2e 	bgeu	r2,r3,100faec <_strtod_r+0xe0c>
 100f930:	d8800c17 	ldw	r2,48(sp)
 100f934:	011ffc34 	movhi	r4,32752
 100f938:	213fffc4 	addi	r4,r4,-1
 100f93c:	11007a26 	beq	r2,r4,100fb28 <_strtod_r+0xe48>
 100f940:	01ffffc4 	movi	r7,-1
 100f944:	e1000115 	stw	r4,4(fp)
 100f948:	e1c00015 	stw	r7,0(fp)
 100f94c:	003fb306 	br	100f81c <_strtod_r+0xb3c>
 100f950:	e0c00017 	ldw	r3,0(fp)
 100f954:	1800221e 	bne	r3,zero,100f9e0 <_strtod_r+0xd00>
 100f958:	e0800117 	ldw	r2,4(fp)
 100f95c:	00c00434 	movhi	r3,16
 100f960:	18ffffc4 	addi	r3,r3,-1
 100f964:	10c4703a 	and	r2,r2,r3
 100f968:	1000211e 	bne	r2,zero,100f9f0 <_strtod_r+0xd10>
 100f96c:	0005883a 	mov	r2,zero
 100f970:	00cffc34 	movhi	r3,16368
 100f974:	180f883a 	mov	r7,r3
 100f978:	8009883a 	mov	r4,r16
 100f97c:	880b883a 	mov	r5,r17
 100f980:	100d883a 	mov	r6,r2
 100f984:	1012e100 	call	1012e10 <__ltdf2>
 100f988:	10013c16 	blt	r2,zero,100fe7c <_strtod_r+0x119c>
 100f98c:	0005883a 	mov	r2,zero
 100f990:	00cff834 	movhi	r3,16352
 100f994:	880b883a 	mov	r5,r17
 100f998:	8009883a 	mov	r4,r16
 100f99c:	180f883a 	mov	r7,r3
 100f9a0:	100d883a 	mov	r6,r2
 100f9a4:	1004c280 	call	1004c28 <__muldf3>
 100f9a8:	1823883a 	mov	r17,r3
 100f9ac:	1021883a 	mov	r16,r2
 100f9b0:	18e0003c 	xorhi	r3,r3,32768
 100f9b4:	003fbc06 	br	100f8a8 <_strtod_r+0xbc8>
 100f9b8:	3827883a 	mov	r19,r7
 100f9bc:	003f1a06 	br	100f628 <_strtod_r+0x948>
 100f9c0:	4091c83a 	sub	r8,r8,r2
 100f9c4:	003f0206 	br	100f5d0 <_strtod_r+0x8f0>
 100f9c8:	d8c00f17 	ldw	r3,60(sp)
 100f9cc:	0011883a 	mov	r8,zero
 100f9d0:	0029883a 	mov	r20,zero
 100f9d4:	00d3c83a 	sub	r9,zero,r3
 100f9d8:	480f883a 	mov	r7,r9
 100f9dc:	003ef906 	br	100f5c4 <_strtod_r+0x8e4>
 100f9e0:	00800044 	movi	r2,1
 100f9e4:	1880021e 	bne	r3,r2,100f9f0 <_strtod_r+0xd10>
 100f9e8:	e0800117 	ldw	r2,4(fp)
 100f9ec:	1000a526 	beq	r2,zero,100fc84 <_strtod_r+0xfa4>
 100f9f0:	00affc34 	movhi	r2,49136
 100f9f4:	0021883a 	mov	r16,zero
 100f9f8:	044ffc34 	movhi	r17,16368
 100f9fc:	d8800815 	stw	r2,32(sp)
 100fa00:	d8000715 	stw	zero,28(sp)
 100fa04:	003f4c06 	br	100f738 <_strtod_r+0xa58>
 100fa08:	880b883a 	mov	r5,r17
 100fa0c:	8009883a 	mov	r4,r16
 100fa10:	100555c0 	call	100555c <__fixdfsi>
 100fa14:	1009883a 	mov	r4,r2
 100fa18:	10054640 	call	1005464 <__floatsidf>
 100fa1c:	880b883a 	mov	r5,r17
 100fa20:	8009883a 	mov	r4,r16
 100fa24:	100d883a 	mov	r6,r2
 100fa28:	180f883a 	mov	r7,r3
 100fa2c:	1004b340 	call	1004b34 <__subdf3>
 100fa30:	d9001317 	ldw	r4,76(sp)
 100fa34:	100b883a 	mov	r5,r2
 100fa38:	180d883a 	mov	r6,r3
 100fa3c:	1021883a 	mov	r16,r2
 100fa40:	1823883a 	mov	r17,r3
 100fa44:	2000061e 	bne	r4,zero,100fa60 <_strtod_r+0xd80>
 100fa48:	e0800017 	ldw	r2,0(fp)
 100fa4c:	1000041e 	bne	r2,zero,100fa60 <_strtod_r+0xd80>
 100fa50:	00c00434 	movhi	r3,16
 100fa54:	18ffffc4 	addi	r3,r3,-1
 100fa58:	90c4703a 	and	r2,r18,r3
 100fa5c:	10004026 	beq	r2,zero,100fb60 <_strtod_r+0xe80>
 100fa60:	00a52834 	movhi	r2,38048
 100fa64:	108d6544 	addi	r2,r2,13717
 100fa68:	00cff834 	movhi	r3,16352
 100fa6c:	18ffffc4 	addi	r3,r3,-1
 100fa70:	180f883a 	mov	r7,r3
 100fa74:	8009883a 	mov	r4,r16
 100fa78:	880b883a 	mov	r5,r17
 100fa7c:	100d883a 	mov	r6,r2
 100fa80:	1012e100 	call	1012e10 <__ltdf2>
 100fa84:	10000916 	blt	r2,zero,100faac <_strtod_r+0xdcc>
 100fa88:	008d6c34 	movhi	r2,13744
 100fa8c:	10b94d44 	addi	r2,r2,-6859
 100fa90:	00cff834 	movhi	r3,16352
 100fa94:	880b883a 	mov	r5,r17
 100fa98:	180f883a 	mov	r7,r3
 100fa9c:	8009883a 	mov	r4,r16
 100faa0:	100d883a 	mov	r6,r2
 100faa4:	10053540 	call	1005354 <__gtdf2>
 100faa8:	00bf5c0e 	bge	zero,r2,100f81c <_strtod_r+0xb3c>
 100faac:	d9400517 	ldw	r5,20(sp)
 100fab0:	a809883a 	mov	r4,r21
 100fab4:	100d1900 	call	100d190 <_Bfree>
 100fab8:	a809883a 	mov	r4,r21
 100fabc:	b80b883a 	mov	r5,r23
 100fac0:	100d1900 	call	100d190 <_Bfree>
 100fac4:	a809883a 	mov	r4,r21
 100fac8:	b00b883a 	mov	r5,r22
 100facc:	100d1900 	call	100d190 <_Bfree>
 100fad0:	d9401017 	ldw	r5,64(sp)
 100fad4:	a809883a 	mov	r4,r21
 100fad8:	100d1900 	call	100d190 <_Bfree>
 100fadc:	a809883a 	mov	r4,r21
 100fae0:	a00b883a 	mov	r5,r20
 100fae4:	100d1900 	call	100d190 <_Bfree>
 100fae8:	003cf406 	br	100eebc <_strtod_r+0x1dc>
 100faec:	0080d434 	movhi	r2,848
 100faf0:	288d883a 	add	r6,r5,r2
 100faf4:	e1800115 	stw	r6,4(fp)
 100faf8:	003f4306 	br	100f808 <_strtod_r+0xb28>
 100fafc:	8005883a 	mov	r2,r16
 100fb00:	88e0003c 	xorhi	r3,r17,32768
 100fb04:	003f2606 	br	100f7a0 <_strtod_r+0xac0>
 100fb08:	1009883a 	mov	r4,r2
 100fb0c:	1012f940 	call	1012f94 <__floatunsidf>
 100fb10:	1021883a 	mov	r16,r2
 100fb14:	1823883a 	mov	r17,r3
 100fb18:	003f1e06 	br	100f794 <_strtod_r+0xab4>
 100fb1c:	da000417 	ldw	r8,16(sp)
 100fb20:	39c00044 	addi	r7,r7,1
 100fb24:	003e6706 	br	100f4c4 <_strtod_r+0x7e4>
 100fb28:	d8c00b17 	ldw	r3,44(sp)
 100fb2c:	00bfffc4 	movi	r2,-1
 100fb30:	18bf831e 	bne	r3,r2,100f940 <_strtod_r+0xc60>
 100fb34:	00c00884 	movi	r3,34
 100fb38:	a8c00015 	stw	r3,0(r21)
 100fb3c:	009ffc34 	movhi	r2,32752
 100fb40:	e0800115 	stw	r2,4(fp)
 100fb44:	e0000015 	stw	zero,0(fp)
 100fb48:	003fd806 	br	100faac <_strtod_r+0xdcc>
 100fb4c:	4007883a 	mov	r3,r8
 100fb50:	000d883a 	mov	r6,zero
 100fb54:	0029883a 	mov	r20,zero
 100fb58:	0021883a 	mov	r16,zero
 100fb5c:	003cc906 	br	100ee84 <_strtod_r+0x1a4>
 100fb60:	00a52834 	movhi	r2,38048
 100fb64:	108d6544 	addi	r2,r2,13717
 100fb68:	00cff434 	movhi	r3,16336
 100fb6c:	18ffffc4 	addi	r3,r3,-1
 100fb70:	2809883a 	mov	r4,r5
 100fb74:	180f883a 	mov	r7,r3
 100fb78:	300b883a 	mov	r5,r6
 100fb7c:	100d883a 	mov	r6,r2
 100fb80:	1012e100 	call	1012e10 <__ltdf2>
 100fb84:	103f250e 	bge	r2,zero,100f81c <_strtod_r+0xb3c>
 100fb88:	003fc806 	br	100faac <_strtod_r+0xdcc>
 100fb8c:	0027883a 	mov	r19,zero
 100fb90:	04800044 	movi	r18,1
 100fb94:	0015883a 	mov	r10,zero
 100fb98:	003cc006 	br	100ee9c <_strtod_r+0x1bc>
 100fb9c:	00800884 	movi	r2,34
 100fba0:	a8800015 	stw	r2,0(r21)
 100fba4:	019ffc34 	movhi	r6,32752
 100fba8:	e1800115 	stw	r6,4(fp)
 100fbac:	e0000015 	stw	zero,0(fp)
 100fbb0:	003cc206 	br	100eebc <_strtod_r+0x1dc>
 100fbb4:	015387c4 	movi	r5,19999
 100fbb8:	003d1e06 	br	100f034 <_strtod_r+0x354>
 100fbbc:	300a90fa 	slli	r5,r6,3
 100fbc0:	e0800017 	ldw	r2,0(fp)
 100fbc4:	e0c00117 	ldw	r3,4(fp)
 100fbc8:	010040b4 	movhi	r4,258
 100fbcc:	213dcb04 	addi	r4,r4,-2260
 100fbd0:	290b883a 	add	r5,r5,r4
 100fbd4:	2a000017 	ldw	r8,0(r5)
 100fbd8:	2a400117 	ldw	r9,4(r5)
 100fbdc:	1009883a 	mov	r4,r2
 100fbe0:	180b883a 	mov	r5,r3
 100fbe4:	480f883a 	mov	r7,r9
 100fbe8:	400d883a 	mov	r6,r8
 100fbec:	1004c280 	call	1004c28 <__muldf3>
 100fbf0:	e0c00115 	stw	r3,4(fp)
 100fbf4:	e0800015 	stw	r2,0(fp)
 100fbf8:	003cb006 	br	100eebc <_strtod_r+0x1dc>
 100fbfc:	d8800d17 	ldw	r2,52(sp)
 100fc00:	e0800015 	stw	r2,0(fp)
 100fc04:	d8c00e17 	ldw	r3,56(sp)
 100fc08:	e0c00115 	stw	r3,4(fp)
 100fc0c:	9880020c 	andi	r2,r19,8
 100fc10:	103caa26 	beq	r2,zero,100eebc <_strtod_r+0x1dc>
 100fc14:	e0800117 	ldw	r2,4(fp)
 100fc18:	10a00034 	orhi	r2,r2,32768
 100fc1c:	e0800115 	stw	r2,4(fp)
 100fc20:	003ca606 	br	100eebc <_strtod_r+0x1dc>
 100fc24:	009ffc34 	movhi	r2,32752
 100fc28:	e0800115 	stw	r2,4(fp)
 100fc2c:	e0000015 	stw	zero,0(fp)
 100fc30:	003ff606 	br	100fc0c <_strtod_r+0xf2c>
 100fc34:	00a00034 	movhi	r2,32768
 100fc38:	10bfffc4 	addi	r2,r2,-1
 100fc3c:	00ffffc4 	movi	r3,-1
 100fc40:	e0800115 	stw	r2,4(fp)
 100fc44:	e0c00015 	stw	r3,0(fp)
 100fc48:	003ff006 	br	100fc0c <_strtod_r+0xf2c>
 100fc4c:	e0000115 	stw	zero,4(fp)
 100fc50:	e0000015 	stw	zero,0(fp)
 100fc54:	003fed06 	br	100fc0c <_strtod_r+0xf2c>
 100fc58:	d8800e17 	ldw	r2,56(sp)
 100fc5c:	29010cc4 	addi	r4,r5,1075
 100fc60:	00fffc34 	movhi	r3,65520
 100fc64:	18ffffc4 	addi	r3,r3,-1
 100fc68:	2008953a 	slli	r4,r4,20
 100fc6c:	10c4703a 	and	r2,r2,r3
 100fc70:	d8c00d17 	ldw	r3,52(sp)
 100fc74:	1104b03a 	or	r2,r2,r4
 100fc78:	e0800115 	stw	r2,4(fp)
 100fc7c:	e0c00015 	stw	r3,0(fp)
 100fc80:	003fe206 	br	100fc0c <_strtod_r+0xf2c>
 100fc84:	00800884 	movi	r2,34
 100fc88:	a8800015 	stw	r2,0(r21)
 100fc8c:	e0000015 	stw	zero,0(fp)
 100fc90:	e0000115 	stw	zero,4(fp)
 100fc94:	003f8506 	br	100faac <_strtod_r+0xdcc>
 100fc98:	03800044 	movi	r14,1
 100fc9c:	003d7706 	br	100f27c <_strtod_r+0x59c>
 100fca0:	99c5883a 	add	r2,r19,r7
 100fca4:	11ffffc4 	addi	r7,r2,-1
 100fca8:	00800204 	movi	r2,8
 100fcac:	3cc00044 	addi	r19,r7,1
 100fcb0:	11c0df16 	blt	r2,r7,1010030 <_strtod_r+0x1350>
 100fcb4:	a08002a4 	muli	r2,r20,10
 100fcb8:	000f883a 	mov	r7,zero
 100fcbc:	1269883a 	add	r20,r2,r9
 100fcc0:	42000044 	addi	r8,r8,1
 100fcc4:	da000415 	stw	r8,16(sp)
 100fcc8:	41000007 	ldb	r4,0(r8)
 100fccc:	003d3706 	br	100f1ac <_strtod_r+0x4cc>
 100fcd0:	d9801317 	ldw	r6,76(sp)
 100fcd4:	3000511e 	bne	r6,zero,100fe1c <_strtod_r+0x113c>
 100fcd8:	e0800017 	ldw	r2,0(fp)
 100fcdc:	1000d81e 	bne	r2,zero,1010040 <_strtod_r+0x1360>
 100fce0:	e0c00117 	ldw	r3,4(fp)
 100fce4:	01000434 	movhi	r4,16
 100fce8:	213fffc4 	addi	r4,r4,-1
 100fcec:	1904703a 	and	r2,r3,r4
 100fcf0:	1000b01e 	bne	r2,zero,100ffb4 <_strtod_r+0x12d4>
 100fcf4:	18dffc2c 	andhi	r3,r3,32752
 100fcf8:	0081ac34 	movhi	r2,1712
 100fcfc:	10c1102e 	bgeu	r2,r3,1010140 <_strtod_r+0x1460>
 100fd00:	a0800517 	ldw	r2,20(r20)
 100fd04:	1000031e 	bne	r2,zero,100fd14 <_strtod_r+0x1034>
 100fd08:	a0c00417 	ldw	r3,16(r20)
 100fd0c:	00800044 	movi	r2,1
 100fd10:	10c0420e 	bge	r2,r3,100fe1c <_strtod_r+0x113c>
 100fd14:	a00b883a 	mov	r5,r20
 100fd18:	a809883a 	mov	r4,r21
 100fd1c:	01800044 	movi	r6,1
 100fd20:	100dad40 	call	100dad4 <__lshift>
 100fd24:	1009883a 	mov	r4,r2
 100fd28:	b00b883a 	mov	r5,r22
 100fd2c:	1029883a 	mov	r20,r2
 100fd30:	100d2ec0 	call	100d2ec <__mcmp>
 100fd34:	0080c20e 	bge	zero,r2,1010040 <_strtod_r+0x1360>
 100fd38:	e1800117 	ldw	r6,4(fp)
 100fd3c:	d9001417 	ldw	r4,80(sp)
 100fd40:	2013003a 	cmpeq	r9,r4,zero
 100fd44:	4800ef1e 	bne	r9,zero,1010104 <_strtod_r+0x1424>
 100fd48:	30dffc2c 	andhi	r3,r6,32752
 100fd4c:	0081ac34 	movhi	r2,1712
 100fd50:	10c0ec36 	bltu	r2,r3,1010104 <_strtod_r+0x1424>
 100fd54:	0080dc34 	movhi	r2,880
 100fd58:	10ffca2e 	bgeu	r2,r3,100fc84 <_strtod_r+0xfa4>
 100fd5c:	e0800017 	ldw	r2,0(fp)
 100fd60:	e0c00117 	ldw	r3,4(fp)
 100fd64:	020e5434 	movhi	r8,14672
 100fd68:	000d883a 	mov	r6,zero
 100fd6c:	400f883a 	mov	r7,r8
 100fd70:	180b883a 	mov	r5,r3
 100fd74:	1009883a 	mov	r4,r2
 100fd78:	da000c15 	stw	r8,48(sp)
 100fd7c:	d8000b15 	stw	zero,44(sp)
 100fd80:	1004c280 	call	1004c28 <__muldf3>
 100fd84:	e0800015 	stw	r2,0(fp)
 100fd88:	e0c00115 	stw	r3,4(fp)
 100fd8c:	183f471e 	bne	r3,zero,100faac <_strtod_r+0xdcc>
 100fd90:	103f461e 	bne	r2,zero,100faac <_strtod_r+0xdcc>
 100fd94:	00800884 	movi	r2,34
 100fd98:	a8800015 	stw	r2,0(r21)
 100fd9c:	003f4306 	br	100faac <_strtod_r+0xdcc>
 100fda0:	d8801317 	ldw	r2,76(sp)
 100fda4:	1025003a 	cmpeq	r18,r2,zero
 100fda8:	9000861e 	bne	r18,zero,100ffc4 <_strtod_r+0x12e4>
 100fdac:	e1400117 	ldw	r5,4(fp)
 100fdb0:	00c00434 	movhi	r3,16
 100fdb4:	18ffffc4 	addi	r3,r3,-1
 100fdb8:	28c4703a 	and	r2,r5,r3
 100fdbc:	10c01b26 	beq	r2,r3,100fe2c <_strtod_r+0x114c>
 100fdc0:	e1c00017 	ldw	r7,0(fp)
 100fdc4:	3880004c 	andi	r2,r7,1
 100fdc8:	1005003a 	cmpeq	r2,r2,zero
 100fdcc:	1000791e 	bne	r2,zero,100ffb4 <_strtod_r+0x12d4>
 100fdd0:	9000b126 	beq	r18,zero,1010098 <_strtod_r+0x13b8>
 100fdd4:	e4400117 	ldw	r17,4(fp)
 100fdd8:	3809883a 	mov	r4,r7
 100fddc:	3821883a 	mov	r16,r7
 100fde0:	880b883a 	mov	r5,r17
 100fde4:	100d34c0 	call	100d34c <__ulp>
 100fde8:	180f883a 	mov	r7,r3
 100fdec:	880b883a 	mov	r5,r17
 100fdf0:	8009883a 	mov	r4,r16
 100fdf4:	100d883a 	mov	r6,r2
 100fdf8:	1004b340 	call	1004b34 <__subdf3>
 100fdfc:	1009883a 	mov	r4,r2
 100fe00:	000d883a 	mov	r6,zero
 100fe04:	000f883a 	mov	r7,zero
 100fe08:	180b883a 	mov	r5,r3
 100fe0c:	e0800015 	stw	r2,0(fp)
 100fe10:	e0c00115 	stw	r3,4(fp)
 100fe14:	10052cc0 	call	10052cc <__nedf2>
 100fe18:	103f9a26 	beq	r2,zero,100fc84 <_strtod_r+0xfa4>
 100fe1c:	d9001417 	ldw	r4,80(sp)
 100fe20:	2013003a 	cmpeq	r9,r4,zero
 100fe24:	483f211e 	bne	r9,zero,100faac <_strtod_r+0xdcc>
 100fe28:	003fcc06 	br	100fd5c <_strtod_r+0x107c>
 100fe2c:	d9001417 	ldw	r4,80(sp)
 100fe30:	e1c00017 	ldw	r7,0(fp)
 100fe34:	2013003a 	cmpeq	r9,r4,zero
 100fe38:	4800bd1e 	bne	r9,zero,1010130 <_strtod_r+0x1450>
 100fe3c:	28dffc2c 	andhi	r3,r5,32752
 100fe40:	0081a834 	movhi	r2,1696
 100fe44:	10c0ba36 	bltu	r2,r3,1010130 <_strtod_r+0x1450>
 100fe48:	1804d53a 	srli	r2,r3,20
 100fe4c:	00c01ac4 	movi	r3,107
 100fe50:	013fffc4 	movi	r4,-1
 100fe54:	1887c83a 	sub	r3,r3,r2
 100fe58:	20c4983a 	sll	r2,r4,r3
 100fe5c:	11ffd91e 	bne	r2,r7,100fdc4 <_strtod_r+0x10e4>
 100fe60:	28dffc2c 	andhi	r3,r5,32752
 100fe64:	00800434 	movhi	r2,16
 100fe68:	188d883a 	add	r6,r3,r2
 100fe6c:	e1800115 	stw	r6,4(fp)
 100fe70:	e0000015 	stw	zero,0(fp)
 100fe74:	483f0d1e 	bne	r9,zero,100faac <_strtod_r+0xdcc>
 100fe78:	003fb806 	br	100fd5c <_strtod_r+0x107c>
 100fe7c:	0021883a 	mov	r16,zero
 100fe80:	0005883a 	mov	r2,zero
 100fe84:	044ff834 	movhi	r17,16352
 100fe88:	00eff834 	movhi	r3,49120
 100fe8c:	003e8606 	br	100f8a8 <_strtod_r+0xbc8>
 100fe90:	803d9e26 	beq	r16,zero,100f50c <_strtod_r+0x82c>
 100fe94:	0421c83a 	sub	r16,zero,r16
 100fe98:	814003cc 	andi	r5,r16,15
 100fe9c:	28000f26 	beq	r5,zero,100fedc <_strtod_r+0x11fc>
 100fea0:	280a90fa 	slli	r5,r5,3
 100fea4:	010040b4 	movhi	r4,258
 100fea8:	213dcb04 	addi	r4,r4,-2260
 100feac:	e0800017 	ldw	r2,0(fp)
 100feb0:	290b883a 	add	r5,r5,r4
 100feb4:	2a000017 	ldw	r8,0(r5)
 100feb8:	e0c00117 	ldw	r3,4(fp)
 100febc:	2a400117 	ldw	r9,4(r5)
 100fec0:	1009883a 	mov	r4,r2
 100fec4:	180b883a 	mov	r5,r3
 100fec8:	480f883a 	mov	r7,r9
 100fecc:	400d883a 	mov	r6,r8
 100fed0:	1004fec0 	call	1004fec <__divdf3>
 100fed4:	e0c00115 	stw	r3,4(fp)
 100fed8:	e0800015 	stw	r2,0(fp)
 100fedc:	8021d13a 	srai	r16,r16,4
 100fee0:	803d8a26 	beq	r16,zero,100f50c <_strtod_r+0x82c>
 100fee4:	008007c4 	movi	r2,31
 100fee8:	14002d16 	blt	r2,r16,100ffa0 <_strtod_r+0x12c0>
 100feec:	8080040c 	andi	r2,r16,16
 100fef0:	10009926 	beq	r2,zero,1010158 <_strtod_r+0x1478>
 100fef4:	00801a84 	movi	r2,106
 100fef8:	d8801415 	stw	r2,80(sp)
 100fefc:	0400110e 	bge	zero,r16,100ff44 <_strtod_r+0x1264>
 100ff00:	044040b4 	movhi	r17,258
 100ff04:	8c7e1804 	addi	r17,r17,-1952
 100ff08:	8080004c 	andi	r2,r16,1
 100ff0c:	1005003a 	cmpeq	r2,r2,zero
 100ff10:	1000091e 	bne	r2,zero,100ff38 <_strtod_r+0x1258>
 100ff14:	e0800017 	ldw	r2,0(fp)
 100ff18:	e0c00117 	ldw	r3,4(fp)
 100ff1c:	89800017 	ldw	r6,0(r17)
 100ff20:	89c00117 	ldw	r7,4(r17)
 100ff24:	180b883a 	mov	r5,r3
 100ff28:	1009883a 	mov	r4,r2
 100ff2c:	1004c280 	call	1004c28 <__muldf3>
 100ff30:	e0c00115 	stw	r3,4(fp)
 100ff34:	e0800015 	stw	r2,0(fp)
 100ff38:	8021d07a 	srai	r16,r16,1
 100ff3c:	8c400204 	addi	r17,r17,8
 100ff40:	043ff116 	blt	zero,r16,100ff08 <_strtod_r+0x1228>
 100ff44:	d8c01417 	ldw	r3,80(sp)
 100ff48:	18000d26 	beq	r3,zero,100ff80 <_strtod_r+0x12a0>
 100ff4c:	e1000117 	ldw	r4,4(fp)
 100ff50:	00c01ac4 	movi	r3,107
 100ff54:	209ffc2c 	andhi	r2,r4,32752
 100ff58:	1004d53a 	srli	r2,r2,20
 100ff5c:	1887c83a 	sub	r3,r3,r2
 100ff60:	00c0070e 	bge	zero,r3,100ff80 <_strtod_r+0x12a0>
 100ff64:	008007c4 	movi	r2,31
 100ff68:	10c0900e 	bge	r2,r3,10101ac <_strtod_r+0x14cc>
 100ff6c:	00800d04 	movi	r2,52
 100ff70:	e0000015 	stw	zero,0(fp)
 100ff74:	10c0870e 	bge	r2,r3,1010194 <_strtod_r+0x14b4>
 100ff78:	0180dc34 	movhi	r6,880
 100ff7c:	e1800115 	stw	r6,4(fp)
 100ff80:	e0800017 	ldw	r2,0(fp)
 100ff84:	e0c00117 	ldw	r3,4(fp)
 100ff88:	000d883a 	mov	r6,zero
 100ff8c:	000f883a 	mov	r7,zero
 100ff90:	180b883a 	mov	r5,r3
 100ff94:	1009883a 	mov	r4,r2
 100ff98:	10052cc0 	call	10052cc <__nedf2>
 100ff9c:	103d5c1e 	bne	r2,zero,100f510 <_strtod_r+0x830>
 100ffa0:	00800884 	movi	r2,34
 100ffa4:	a8800015 	stw	r2,0(r21)
 100ffa8:	e0000015 	stw	zero,0(fp)
 100ffac:	e0000115 	stw	zero,4(fp)
 100ffb0:	003bc206 	br	100eebc <_strtod_r+0x1dc>
 100ffb4:	d8801417 	ldw	r2,80(sp)
 100ffb8:	1013003a 	cmpeq	r9,r2,zero
 100ffbc:	483ebb1e 	bne	r9,zero,100faac <_strtod_r+0xdcc>
 100ffc0:	003f6606 	br	100fd5c <_strtod_r+0x107c>
 100ffc4:	e1800117 	ldw	r6,4(fp)
 100ffc8:	00c00434 	movhi	r3,16
 100ffcc:	18ffffc4 	addi	r3,r3,-1
 100ffd0:	30c4703a 	and	r2,r6,r3
 100ffd4:	103f7a1e 	bne	r2,zero,100fdc0 <_strtod_r+0x10e0>
 100ffd8:	e1c00017 	ldw	r7,0(fp)
 100ffdc:	383f791e 	bne	r7,zero,100fdc4 <_strtod_r+0x10e4>
 100ffe0:	003f5606 	br	100fd3c <_strtod_r+0x105c>
 100ffe4:	d9800f17 	ldw	r6,60(sp)
 100ffe8:	00bffa84 	movi	r2,-22
 100ffec:	30bcd416 	blt	r6,r2,100f340 <_strtod_r+0x660>
 100fff0:	317ffe24 	muli	r5,r6,-8
 100fff4:	010040b4 	movhi	r4,258
 100fff8:	213dcb04 	addi	r4,r4,-2260
 100fffc:	e0800017 	ldw	r2,0(fp)
 1010000:	290b883a 	add	r5,r5,r4
 1010004:	2a000017 	ldw	r8,0(r5)
 1010008:	e0c00117 	ldw	r3,4(fp)
 101000c:	2a400117 	ldw	r9,4(r5)
 1010010:	1009883a 	mov	r4,r2
 1010014:	180b883a 	mov	r5,r3
 1010018:	480f883a 	mov	r7,r9
 101001c:	400d883a 	mov	r6,r8
 1010020:	1004fec0 	call	1004fec <__divdf3>
 1010024:	e0c00115 	stw	r3,4(fp)
 1010028:	e0800015 	stw	r2,0(fp)
 101002c:	003ba306 	br	100eebc <_strtod_r+0x1dc>
 1010030:	00800404 	movi	r2,16
 1010034:	14c02f0e 	bge	r2,r19,10100f4 <_strtod_r+0x1414>
 1010038:	000f883a 	mov	r7,zero
 101003c:	003f2006 	br	100fcc0 <_strtod_r+0xfe0>
 1010040:	d9801417 	ldw	r6,80(sp)
 1010044:	3013003a 	cmpeq	r9,r6,zero
 1010048:	483e981e 	bne	r9,zero,100faac <_strtod_r+0xdcc>
 101004c:	003f4306 	br	100fd5c <_strtod_r+0x107c>
 1010050:	00801a44 	movi	r2,105
 1010054:	20bc6326 	beq	r4,r2,100f1e4 <_strtod_r+0x504>
 1010058:	00801b84 	movi	r2,110
 101005c:	20bbba1e 	bne	r4,r2,100ef48 <_strtod_r+0x268>
 1010060:	dc000404 	addi	r16,sp,16
 1010064:	8009883a 	mov	r4,r16
 1010068:	014040b4 	movhi	r5,258
 101006c:	297e1704 	addi	r5,r5,-1956
 1010070:	100ec980 	call	100ec98 <match>
 1010074:	103bb426 	beq	r2,zero,100ef48 <_strtod_r+0x268>
 1010078:	d8800417 	ldw	r2,16(sp)
 101007c:	00c00a04 	movi	r3,40
 1010080:	11000007 	ldb	r4,0(r2)
 1010084:	20c03626 	beq	r4,r3,1010160 <_strtod_r+0x1480>
 1010088:	01bffe34 	movhi	r6,65528
 101008c:	e1800115 	stw	r6,4(fp)
 1010090:	e0000015 	stw	zero,0(fp)
 1010094:	003b8906 	br	100eebc <_strtod_r+0x1dc>
 1010098:	e4400117 	ldw	r17,4(fp)
 101009c:	3809883a 	mov	r4,r7
 10100a0:	3821883a 	mov	r16,r7
 10100a4:	880b883a 	mov	r5,r17
 10100a8:	100d34c0 	call	100d34c <__ulp>
 10100ac:	100d883a 	mov	r6,r2
 10100b0:	880b883a 	mov	r5,r17
 10100b4:	180f883a 	mov	r7,r3
 10100b8:	8009883a 	mov	r4,r16
 10100bc:	1004bb40 	call	1004bb4 <__adddf3>
 10100c0:	d9801417 	ldw	r6,80(sp)
 10100c4:	e0c00115 	stw	r3,4(fp)
 10100c8:	e0800015 	stw	r2,0(fp)
 10100cc:	3013003a 	cmpeq	r9,r6,zero
 10100d0:	483e761e 	bne	r9,zero,100faac <_strtod_r+0xdcc>
 10100d4:	003f2106 	br	100fd5c <_strtod_r+0x107c>
 10100d8:	000f883a 	mov	r7,zero
 10100dc:	003cf006 	br	100f4a0 <_strtod_r+0x7c0>
 10100e0:	0080d434 	movhi	r2,848
 10100e4:	188d883a 	add	r6,r3,r2
 10100e8:	d8001415 	stw	zero,80(sp)
 10100ec:	e1800115 	stw	r6,4(fp)
 10100f0:	003d0706 	br	100f510 <_strtod_r+0x830>
 10100f4:	808002a4 	muli	r2,r16,10
 10100f8:	000f883a 	mov	r7,zero
 10100fc:	1261883a 	add	r16,r2,r9
 1010100:	003eef06 	br	100fcc0 <_strtod_r+0xfe0>
 1010104:	309ffc2c 	andhi	r2,r6,32752
 1010108:	00fffc34 	movhi	r3,65520
 101010c:	10c5883a 	add	r2,r2,r3
 1010110:	00c00434 	movhi	r3,16
 1010114:	18ffffc4 	addi	r3,r3,-1
 1010118:	10ccb03a 	or	r6,r2,r3
 101011c:	01ffffc4 	movi	r7,-1
 1010120:	e1800115 	stw	r6,4(fp)
 1010124:	e1c00015 	stw	r7,0(fp)
 1010128:	483e601e 	bne	r9,zero,100faac <_strtod_r+0xdcc>
 101012c:	003f0b06 	br	100fd5c <_strtod_r+0x107c>
 1010130:	00bfffc4 	movi	r2,-1
 1010134:	003f4906 	br	100fe5c <_strtod_r+0x117c>
 1010138:	0025883a 	mov	r18,zero
 101013c:	003cb106 	br	100f404 <_strtod_r+0x724>
 1010140:	d8c01417 	ldw	r3,80(sp)
 1010144:	1813003a 	cmpeq	r9,r3,zero
 1010148:	483e581e 	bne	r9,zero,100faac <_strtod_r+0xdcc>
 101014c:	003f0306 	br	100fd5c <_strtod_r+0x107c>
 1010150:	980f883a 	mov	r7,r19
 1010154:	003ed406 	br	100fca8 <_strtod_r+0xfc8>
 1010158:	d8001415 	stw	zero,80(sp)
 101015c:	003f6706 	br	100fefc <_strtod_r+0x121c>
 1010160:	8009883a 	mov	r4,r16
 1010164:	014040b4 	movhi	r5,258
 1010168:	29412c04 	addi	r5,r5,1200
 101016c:	d9800d04 	addi	r6,sp,52
 1010170:	1011cd00 	call	1011cd0 <__hexnan>
 1010174:	00c00144 	movi	r3,5
 1010178:	10ffc31e 	bne	r2,r3,1010088 <_strtod_r+0x13a8>
 101017c:	d8800e17 	ldw	r2,56(sp)
 1010180:	d9c00d17 	ldw	r7,52(sp)
 1010184:	119ffc34 	orhi	r6,r2,32752
 1010188:	e1800115 	stw	r6,4(fp)
 101018c:	e1c00015 	stw	r7,0(fp)
 1010190:	003b4a06 	br	100eebc <_strtod_r+0x1dc>
 1010194:	18fff804 	addi	r3,r3,-32
 1010198:	00bfffc4 	movi	r2,-1
 101019c:	10c4983a 	sll	r2,r2,r3
 10101a0:	208c703a 	and	r6,r4,r2
 10101a4:	e1800115 	stw	r6,4(fp)
 10101a8:	003f7506 	br	100ff80 <_strtod_r+0x12a0>
 10101ac:	00bfffc4 	movi	r2,-1
 10101b0:	10c4983a 	sll	r2,r2,r3
 10101b4:	e0c00017 	ldw	r3,0(fp)
 10101b8:	188e703a 	and	r7,r3,r2
 10101bc:	e1c00015 	stw	r7,0(fp)
 10101c0:	003f6f06 	br	100ff80 <_strtod_r+0x12a0>

010101c4 <strtof>:
 10101c4:	defffa04 	addi	sp,sp,-24
 10101c8:	dd000415 	stw	r20,16(sp)
 10101cc:	050040b4 	movhi	r20,258
 10101d0:	a506c504 	addi	r20,r20,6932
 10101d4:	2007883a 	mov	r3,r4
 10101d8:	a1000017 	ldw	r4,0(r20)
 10101dc:	280d883a 	mov	r6,r5
 10101e0:	180b883a 	mov	r5,r3
 10101e4:	dfc00515 	stw	ra,20(sp)
 10101e8:	dcc00315 	stw	r19,12(sp)
 10101ec:	dc800215 	stw	r18,8(sp)
 10101f0:	dc400115 	stw	r17,4(sp)
 10101f4:	dc000015 	stw	r16,0(sp)
 10101f8:	100ece00 	call	100ece0 <_strtod_r>
 10101fc:	180b883a 	mov	r5,r3
 1010200:	1009883a 	mov	r4,r2
 1010204:	1823883a 	mov	r17,r3
 1010208:	1021883a 	mov	r16,r2
 101020c:	1012f200 	call	1012f20 <__truncdfsf2>
 1010210:	1009883a 	mov	r4,r2
 1010214:	000b883a 	mov	r5,zero
 1010218:	1025883a 	mov	r18,r2
 101021c:	1027883a 	mov	r19,r2
 1010220:	1012ca80 	call	1012ca8 <__nesf2>
 1010224:	000d883a 	mov	r6,zero
 1010228:	000f883a 	mov	r7,zero
 101022c:	8009883a 	mov	r4,r16
 1010230:	880b883a 	mov	r5,r17
 1010234:	10000e1e 	bne	r2,zero,1010270 <strtof+0xac>
 1010238:	10052cc0 	call	10052cc <__nedf2>
 101023c:	10000c26 	beq	r2,zero,1010270 <strtof+0xac>
 1010240:	a0c00017 	ldw	r3,0(r20)
 1010244:	00800884 	movi	r2,34
 1010248:	18800015 	stw	r2,0(r3)
 101024c:	9805883a 	mov	r2,r19
 1010250:	dfc00517 	ldw	ra,20(sp)
 1010254:	dd000417 	ldw	r20,16(sp)
 1010258:	dcc00317 	ldw	r19,12(sp)
 101025c:	dc800217 	ldw	r18,8(sp)
 1010260:	dc400117 	ldw	r17,4(sp)
 1010264:	dc000017 	ldw	r16,0(sp)
 1010268:	dec00604 	addi	sp,sp,24
 101026c:	f800283a 	ret
 1010270:	9009883a 	mov	r4,r18
 1010274:	015fe034 	movhi	r5,32640
 1010278:	297fffc4 	addi	r5,r5,-1
 101027c:	1012d200 	call	1012d20 <__gtsf2>
 1010280:	00ffffc4 	movi	r3,-1
 1010284:	011ffc34 	movhi	r4,32752
 1010288:	213fffc4 	addi	r4,r4,-1
 101028c:	200f883a 	mov	r7,r4
 1010290:	180d883a 	mov	r6,r3
 1010294:	8009883a 	mov	r4,r16
 1010298:	880b883a 	mov	r5,r17
 101029c:	00800f16 	blt	zero,r2,10102dc <strtof+0x118>
 10102a0:	9009883a 	mov	r4,r18
 10102a4:	017fe034 	movhi	r5,65408
 10102a8:	297fffc4 	addi	r5,r5,-1
 10102ac:	1012d980 	call	1012d98 <__ltsf2>
 10102b0:	023fffc4 	movi	r8,-1
 10102b4:	027ffc34 	movhi	r9,65520
 10102b8:	4a7fffc4 	addi	r9,r9,-1
 10102bc:	880b883a 	mov	r5,r17
 10102c0:	480f883a 	mov	r7,r9
 10102c4:	8009883a 	mov	r4,r16
 10102c8:	400d883a 	mov	r6,r8
 10102cc:	103fdf0e 	bge	r2,zero,101024c <strtof+0x88>
 10102d0:	1012e100 	call	1012e10 <__ltdf2>
 10102d4:	103fda0e 	bge	r2,zero,1010240 <strtof+0x7c>
 10102d8:	003fdc06 	br	101024c <strtof+0x88>
 10102dc:	10053540 	call	1005354 <__gtdf2>
 10102e0:	00bfd70e 	bge	zero,r2,1010240 <strtof+0x7c>
 10102e4:	003fee06 	br	10102a0 <strtof+0xdc>

010102e8 <strtod>:
 10102e8:	018040b4 	movhi	r6,258
 10102ec:	3186c504 	addi	r6,r6,6932
 10102f0:	2007883a 	mov	r3,r4
 10102f4:	31000017 	ldw	r4,0(r6)
 10102f8:	280d883a 	mov	r6,r5
 10102fc:	180b883a 	mov	r5,r3
 1010300:	100ece01 	jmpi	100ece0 <_strtod_r>

01010304 <_strtol_r>:
 1010304:	defff304 	addi	sp,sp,-52
 1010308:	008040b4 	movhi	r2,258
 101030c:	1086c404 	addi	r2,r2,6928
 1010310:	dcc00615 	stw	r19,24(sp)
 1010314:	14c00017 	ldw	r19,0(r2)
 1010318:	ddc00a15 	stw	r23,40(sp)
 101031c:	dc000315 	stw	r16,12(sp)
 1010320:	dfc00c15 	stw	ra,48(sp)
 1010324:	df000b15 	stw	fp,44(sp)
 1010328:	dd800915 	stw	r22,36(sp)
 101032c:	dd400815 	stw	r21,32(sp)
 1010330:	dd000715 	stw	r20,28(sp)
 1010334:	dc800515 	stw	r18,20(sp)
 1010338:	dc400415 	stw	r17,16(sp)
 101033c:	282f883a 	mov	r23,r5
 1010340:	d9000015 	stw	r4,0(sp)
 1010344:	d9800115 	stw	r6,4(sp)
 1010348:	2821883a 	mov	r16,r5
 101034c:	84400007 	ldb	r17,0(r16)
 1010350:	84000044 	addi	r16,r16,1
 1010354:	9c47883a 	add	r3,r19,r17
 1010358:	18800003 	ldbu	r2,0(r3)
 101035c:	1080020c 	andi	r2,r2,8
 1010360:	103ffa1e 	bne	r2,zero,101034c <_strtol_r+0x48>
 1010364:	00800b44 	movi	r2,45
 1010368:	88805c26 	beq	r17,r2,10104dc <_strtol_r+0x1d8>
 101036c:	00800ac4 	movi	r2,43
 1010370:	88805726 	beq	r17,r2,10104d0 <_strtol_r+0x1cc>
 1010374:	0039883a 	mov	fp,zero
 1010378:	3807003a 	cmpeq	r3,r7,zero
 101037c:	1800431e 	bne	r3,zero,101048c <_strtol_r+0x188>
 1010380:	00800404 	movi	r2,16
 1010384:	38804126 	beq	r7,r2,101048c <_strtol_r+0x188>
 1010388:	3829883a 	mov	r20,r7
 101038c:	e02cc03a 	cmpne	r22,fp,zero
 1010390:	b0004b1e 	bne	r22,zero,10104c0 <_strtol_r+0x1bc>
 1010394:	04a00034 	movhi	r18,32768
 1010398:	94bfffc4 	addi	r18,r18,-1
 101039c:	9009883a 	mov	r4,r18
 10103a0:	a00b883a 	mov	r5,r20
 10103a4:	d9c00215 	stw	r7,8(sp)
 10103a8:	10057780 	call	1005778 <__umodsi3>
 10103ac:	9009883a 	mov	r4,r18
 10103b0:	a00b883a 	mov	r5,r20
 10103b4:	102b883a 	mov	r21,r2
 10103b8:	10057700 	call	1005770 <__udivsi3>
 10103bc:	1011883a 	mov	r8,r2
 10103c0:	9c45883a 	add	r2,r19,r17
 10103c4:	11000003 	ldbu	r4,0(r2)
 10103c8:	000b883a 	mov	r5,zero
 10103cc:	000d883a 	mov	r6,zero
 10103d0:	20c0010c 	andi	r3,r4,4
 10103d4:	d9c00217 	ldw	r7,8(sp)
 10103d8:	18000e26 	beq	r3,zero,1010414 <_strtol_r+0x110>
 10103dc:	88fff404 	addi	r3,r17,-48
 10103e0:	19c0140e 	bge	r3,r7,1010434 <_strtol_r+0x130>
 10103e4:	30003116 	blt	r6,zero,10104ac <_strtol_r+0x1a8>
 10103e8:	41403036 	bltu	r8,r5,10104ac <_strtol_r+0x1a8>
 10103ec:	2a002e26 	beq	r5,r8,10104a8 <_strtol_r+0x1a4>
 10103f0:	2d05383a 	mul	r2,r5,r20
 10103f4:	01800044 	movi	r6,1
 10103f8:	10cb883a 	add	r5,r2,r3
 10103fc:	84400007 	ldb	r17,0(r16)
 1010400:	84000044 	addi	r16,r16,1
 1010404:	9c45883a 	add	r2,r19,r17
 1010408:	11000003 	ldbu	r4,0(r2)
 101040c:	20c0010c 	andi	r3,r4,4
 1010410:	183ff21e 	bne	r3,zero,10103dc <_strtol_r+0xd8>
 1010414:	208000cc 	andi	r2,r4,3
 1010418:	10000626 	beq	r2,zero,1010434 <_strtol_r+0x130>
 101041c:	2080004c 	andi	r2,r4,1
 1010420:	1005003a 	cmpeq	r2,r2,zero
 1010424:	1000231e 	bne	r2,zero,10104b4 <_strtol_r+0x1b0>
 1010428:	00800dc4 	movi	r2,55
 101042c:	8887c83a 	sub	r3,r17,r2
 1010430:	19ffec16 	blt	r3,r7,10103e4 <_strtol_r+0xe0>
 1010434:	30002d16 	blt	r6,zero,10104ec <_strtol_r+0x1e8>
 1010438:	b000231e 	bne	r22,zero,10104c8 <_strtol_r+0x1c4>
 101043c:	2807883a 	mov	r3,r5
 1010440:	d8800117 	ldw	r2,4(sp)
 1010444:	10000426 	beq	r2,zero,1010458 <_strtol_r+0x154>
 1010448:	30000126 	beq	r6,zero,1010450 <_strtol_r+0x14c>
 101044c:	85ffffc4 	addi	r23,r16,-1
 1010450:	d9000117 	ldw	r4,4(sp)
 1010454:	25c00015 	stw	r23,0(r4)
 1010458:	1805883a 	mov	r2,r3
 101045c:	dfc00c17 	ldw	ra,48(sp)
 1010460:	df000b17 	ldw	fp,44(sp)
 1010464:	ddc00a17 	ldw	r23,40(sp)
 1010468:	dd800917 	ldw	r22,36(sp)
 101046c:	dd400817 	ldw	r21,32(sp)
 1010470:	dd000717 	ldw	r20,28(sp)
 1010474:	dcc00617 	ldw	r19,24(sp)
 1010478:	dc800517 	ldw	r18,20(sp)
 101047c:	dc400417 	ldw	r17,16(sp)
 1010480:	dc000317 	ldw	r16,12(sp)
 1010484:	dec00d04 	addi	sp,sp,52
 1010488:	f800283a 	ret
 101048c:	00800c04 	movi	r2,48
 1010490:	88801d26 	beq	r17,r2,1010508 <_strtol_r+0x204>
 1010494:	183fbc26 	beq	r3,zero,1010388 <_strtol_r+0x84>
 1010498:	00800c04 	movi	r2,48
 101049c:	88802726 	beq	r17,r2,101053c <_strtol_r+0x238>
 10104a0:	01c00284 	movi	r7,10
 10104a4:	003fb806 	br	1010388 <_strtol_r+0x84>
 10104a8:	a8ffd10e 	bge	r21,r3,10103f0 <_strtol_r+0xec>
 10104ac:	01bfffc4 	movi	r6,-1
 10104b0:	003fd206 	br	10103fc <_strtol_r+0xf8>
 10104b4:	008015c4 	movi	r2,87
 10104b8:	8887c83a 	sub	r3,r17,r2
 10104bc:	003fdc06 	br	1010430 <_strtol_r+0x12c>
 10104c0:	04a00034 	movhi	r18,32768
 10104c4:	003fb506 	br	101039c <_strtol_r+0x98>
 10104c8:	0147c83a 	sub	r3,zero,r5
 10104cc:	003fdc06 	br	1010440 <_strtol_r+0x13c>
 10104d0:	84400007 	ldb	r17,0(r16)
 10104d4:	84000044 	addi	r16,r16,1
 10104d8:	003fa606 	br	1010374 <_strtol_r+0x70>
 10104dc:	84400007 	ldb	r17,0(r16)
 10104e0:	07000044 	movi	fp,1
 10104e4:	84000044 	addi	r16,r16,1
 10104e8:	003fa306 	br	1010378 <_strtol_r+0x74>
 10104ec:	e005003a 	cmpeq	r2,fp,zero
 10104f0:	10000f1e 	bne	r2,zero,1010530 <_strtol_r+0x22c>
 10104f4:	00e00034 	movhi	r3,32768
 10104f8:	d9000017 	ldw	r4,0(sp)
 10104fc:	00800884 	movi	r2,34
 1010500:	20800015 	stw	r2,0(r4)
 1010504:	003fce06 	br	1010440 <_strtol_r+0x13c>
 1010508:	81000007 	ldb	r4,0(r16)
 101050c:	00801e04 	movi	r2,120
 1010510:	20800226 	beq	r4,r2,101051c <_strtol_r+0x218>
 1010514:	00801604 	movi	r2,88
 1010518:	20bfde1e 	bne	r4,r2,1010494 <_strtol_r+0x190>
 101051c:	84400047 	ldb	r17,1(r16)
 1010520:	01c00404 	movi	r7,16
 1010524:	84000084 	addi	r16,r16,2
 1010528:	3829883a 	mov	r20,r7
 101052c:	003f9706 	br	101038c <_strtol_r+0x88>
 1010530:	00e00034 	movhi	r3,32768
 1010534:	18ffffc4 	addi	r3,r3,-1
 1010538:	003fef06 	br	10104f8 <_strtol_r+0x1f4>
 101053c:	01c00204 	movi	r7,8
 1010540:	3829883a 	mov	r20,r7
 1010544:	003f9106 	br	101038c <_strtol_r+0x88>

01010548 <strtol>:
 1010548:	008040b4 	movhi	r2,258
 101054c:	1086c504 	addi	r2,r2,6932
 1010550:	2013883a 	mov	r9,r4
 1010554:	11000017 	ldw	r4,0(r2)
 1010558:	2805883a 	mov	r2,r5
 101055c:	300f883a 	mov	r7,r6
 1010560:	480b883a 	mov	r5,r9
 1010564:	100d883a 	mov	r6,r2
 1010568:	10103041 	jmpi	1010304 <_strtol_r>

0101056c <_strtoll_r>:
 101056c:	defff004 	addi	sp,sp,-64
 1010570:	008040b4 	movhi	r2,258
 1010574:	1086c404 	addi	r2,r2,6928
 1010578:	df000e15 	stw	fp,56(sp)
 101057c:	17000017 	ldw	fp,0(r2)
 1010580:	ddc00d15 	stw	r23,52(sp)
 1010584:	dd000a15 	stw	r20,40(sp)
 1010588:	dfc00f15 	stw	ra,60(sp)
 101058c:	dd800c15 	stw	r22,48(sp)
 1010590:	dd400b15 	stw	r21,44(sp)
 1010594:	dcc00915 	stw	r19,36(sp)
 1010598:	dc800815 	stw	r18,32(sp)
 101059c:	dc400715 	stw	r17,28(sp)
 10105a0:	dc000615 	stw	r16,24(sp)
 10105a4:	d9400315 	stw	r5,12(sp)
 10105a8:	d9000215 	stw	r4,8(sp)
 10105ac:	d9800415 	stw	r6,16(sp)
 10105b0:	382f883a 	mov	r23,r7
 10105b4:	2829883a 	mov	r20,r5
 10105b8:	a4c00007 	ldb	r19,0(r20)
 10105bc:	a5000044 	addi	r20,r20,1
 10105c0:	e4c7883a 	add	r3,fp,r19
 10105c4:	18800003 	ldbu	r2,0(r3)
 10105c8:	1080020c 	andi	r2,r2,8
 10105cc:	103ffa1e 	bne	r2,zero,10105b8 <_strtoll_r+0x4c>
 10105d0:	00800b44 	movi	r2,45
 10105d4:	98808826 	beq	r19,r2,10107f8 <_strtoll_r+0x28c>
 10105d8:	00800ac4 	movi	r2,43
 10105dc:	98808326 	beq	r19,r2,10107ec <_strtoll_r+0x280>
 10105e0:	d8000115 	stw	zero,4(sp)
 10105e4:	b807003a 	cmpeq	r3,r23,zero
 10105e8:	18005f1e 	bne	r3,zero,1010768 <_strtoll_r+0x1fc>
 10105ec:	00800404 	movi	r2,16
 10105f0:	b8805d26 	beq	r23,r2,1010768 <_strtoll_r+0x1fc>
 10105f4:	b82dd7fa 	srai	r22,r23,31
 10105f8:	b82b883a 	mov	r21,r23
 10105fc:	d8c00117 	ldw	r3,4(sp)
 1010600:	1806c03a 	cmpne	r3,r3,zero
 1010604:	d8c00515 	stw	r3,20(sp)
 1010608:	1800631e 	bne	r3,zero,1010798 <_strtoll_r+0x22c>
 101060c:	043fffc4 	movi	r16,-1
 1010610:	04600034 	movhi	r17,32768
 1010614:	8c7fffc4 	addi	r17,r17,-1
 1010618:	880b883a 	mov	r5,r17
 101061c:	8009883a 	mov	r4,r16
 1010620:	a80d883a 	mov	r6,r21
 1010624:	b00f883a 	mov	r7,r22
 1010628:	10126f80 	call	10126f8 <__umoddi3>
 101062c:	880b883a 	mov	r5,r17
 1010630:	8009883a 	mov	r4,r16
 1010634:	b00f883a 	mov	r7,r22
 1010638:	a80d883a 	mov	r6,r21
 101063c:	d8800015 	stw	r2,0(sp)
 1010640:	101211c0 	call	101211c <__udivdi3>
 1010644:	1023883a 	mov	r17,r2
 1010648:	e4c5883a 	add	r2,fp,r19
 101064c:	11000003 	ldbu	r4,0(r2)
 1010650:	1825883a 	mov	r18,r3
 1010654:	0015883a 	mov	r10,zero
 1010658:	20c0010c 	andi	r3,r4,4
 101065c:	0017883a 	mov	r11,zero
 1010660:	000f883a 	mov	r7,zero
 1010664:	18001a26 	beq	r3,zero,10106d0 <_strtoll_r+0x164>
 1010668:	9c3ff404 	addi	r16,r19,-48
 101066c:	85c0200e 	bge	r16,r23,10106f0 <_strtoll_r+0x184>
 1010670:	38003b16 	blt	r7,zero,1010760 <_strtoll_r+0x1f4>
 1010674:	92c03a36 	bltu	r18,r11,1010760 <_strtoll_r+0x1f4>
 1010678:	5c803826 	beq	r11,r18,101075c <_strtoll_r+0x1f0>
 101067c:	54404c26 	beq	r10,r17,10107b0 <_strtoll_r+0x244>
 1010680:	580b883a 	mov	r5,r11
 1010684:	5009883a 	mov	r4,r10
 1010688:	a80d883a 	mov	r6,r21
 101068c:	b00f883a 	mov	r7,r22
 1010690:	10057800 	call	1005780 <__muldi3>
 1010694:	8013d7fa 	srai	r9,r16,31
 1010698:	100d883a 	mov	r6,r2
 101069c:	1405883a 	add	r2,r2,r16
 10106a0:	118d803a 	cmpltu	r6,r2,r6
 10106a4:	1a47883a 	add	r3,r3,r9
 10106a8:	30cd883a 	add	r6,r6,r3
 10106ac:	1015883a 	mov	r10,r2
 10106b0:	3017883a 	mov	r11,r6
 10106b4:	01c00044 	movi	r7,1
 10106b8:	a4c00007 	ldb	r19,0(r20)
 10106bc:	a5000044 	addi	r20,r20,1
 10106c0:	e4c5883a 	add	r2,fp,r19
 10106c4:	11000003 	ldbu	r4,0(r2)
 10106c8:	20c0010c 	andi	r3,r4,4
 10106cc:	183fe61e 	bne	r3,zero,1010668 <_strtoll_r+0xfc>
 10106d0:	208000cc 	andi	r2,r4,3
 10106d4:	10000626 	beq	r2,zero,10106f0 <_strtoll_r+0x184>
 10106d8:	2080004c 	andi	r2,r4,1
 10106dc:	1005003a 	cmpeq	r2,r2,zero
 10106e0:	1000301e 	bne	r2,zero,10107a4 <_strtoll_r+0x238>
 10106e4:	02000dc4 	movi	r8,55
 10106e8:	9a21c83a 	sub	r16,r19,r8
 10106ec:	85ffe016 	blt	r16,r23,1010670 <_strtoll_r+0x104>
 10106f0:	38004616 	blt	r7,zero,101080c <_strtoll_r+0x2a0>
 10106f4:	d8800517 	ldw	r2,20(sp)
 10106f8:	1000341e 	bne	r2,zero,10107cc <_strtoll_r+0x260>
 10106fc:	500b883a 	mov	r5,r10
 1010700:	580d883a 	mov	r6,r11
 1010704:	d8c00417 	ldw	r3,16(sp)
 1010708:	18000626 	beq	r3,zero,1010724 <_strtoll_r+0x1b8>
 101070c:	38000226 	beq	r7,zero,1010718 <_strtoll_r+0x1ac>
 1010710:	a53fffc4 	addi	r20,r20,-1
 1010714:	dd000315 	stw	r20,12(sp)
 1010718:	d8c00317 	ldw	r3,12(sp)
 101071c:	d8800417 	ldw	r2,16(sp)
 1010720:	10c00015 	stw	r3,0(r2)
 1010724:	2805883a 	mov	r2,r5
 1010728:	3007883a 	mov	r3,r6
 101072c:	dfc00f17 	ldw	ra,60(sp)
 1010730:	df000e17 	ldw	fp,56(sp)
 1010734:	ddc00d17 	ldw	r23,52(sp)
 1010738:	dd800c17 	ldw	r22,48(sp)
 101073c:	dd400b17 	ldw	r21,44(sp)
 1010740:	dd000a17 	ldw	r20,40(sp)
 1010744:	dcc00917 	ldw	r19,36(sp)
 1010748:	dc800817 	ldw	r18,32(sp)
 101074c:	dc400717 	ldw	r17,28(sp)
 1010750:	dc000617 	ldw	r16,24(sp)
 1010754:	dec01004 	addi	sp,sp,64
 1010758:	f800283a 	ret
 101075c:	8abfc72e 	bgeu	r17,r10,101067c <_strtoll_r+0x110>
 1010760:	01ffffc4 	movi	r7,-1
 1010764:	003fd406 	br	10106b8 <_strtoll_r+0x14c>
 1010768:	00800c04 	movi	r2,48
 101076c:	98803226 	beq	r19,r2,1010838 <_strtoll_r+0x2cc>
 1010770:	183fa026 	beq	r3,zero,10105f4 <_strtoll_r+0x88>
 1010774:	00800c04 	movi	r2,48
 1010778:	98803e26 	beq	r19,r2,1010874 <_strtoll_r+0x308>
 101077c:	d8c00117 	ldw	r3,4(sp)
 1010780:	05c00284 	movi	r23,10
 1010784:	b82b883a 	mov	r21,r23
 1010788:	1806c03a 	cmpne	r3,r3,zero
 101078c:	002d883a 	mov	r22,zero
 1010790:	d8c00515 	stw	r3,20(sp)
 1010794:	183f9d26 	beq	r3,zero,101060c <_strtoll_r+0xa0>
 1010798:	0021883a 	mov	r16,zero
 101079c:	04600034 	movhi	r17,32768
 10107a0:	003f9d06 	br	1010618 <_strtoll_r+0xac>
 10107a4:	020015c4 	movi	r8,87
 10107a8:	9a21c83a 	sub	r16,r19,r8
 10107ac:	003fcf06 	br	10106ec <_strtoll_r+0x180>
 10107b0:	5cbfb31e 	bne	r11,r18,1010680 <_strtoll_r+0x114>
 10107b4:	d8800017 	ldw	r2,0(sp)
 10107b8:	143fb10e 	bge	r2,r16,1010680 <_strtoll_r+0x114>
 10107bc:	8815883a 	mov	r10,r17
 10107c0:	9017883a 	mov	r11,r18
 10107c4:	01ffffc4 	movi	r7,-1
 10107c8:	003fbb06 	br	10106b8 <_strtoll_r+0x14c>
 10107cc:	0009883a 	mov	r4,zero
 10107d0:	2285c83a 	sub	r2,r4,r10
 10107d4:	2089803a 	cmpltu	r4,r4,r2
 10107d8:	02c7c83a 	sub	r3,zero,r11
 10107dc:	1909c83a 	sub	r4,r3,r4
 10107e0:	100b883a 	mov	r5,r2
 10107e4:	200d883a 	mov	r6,r4
 10107e8:	003fc606 	br	1010704 <_strtoll_r+0x198>
 10107ec:	a4c00007 	ldb	r19,0(r20)
 10107f0:	a5000044 	addi	r20,r20,1
 10107f4:	003f7a06 	br	10105e0 <_strtoll_r+0x74>
 10107f8:	a4c00007 	ldb	r19,0(r20)
 10107fc:	00800044 	movi	r2,1
 1010800:	a5000044 	addi	r20,r20,1
 1010804:	d8800115 	stw	r2,4(sp)
 1010808:	003f7606 	br	10105e4 <_strtoll_r+0x78>
 101080c:	d8c00117 	ldw	r3,4(sp)
 1010810:	1805003a 	cmpeq	r2,r3,zero
 1010814:	1000131e 	bne	r2,zero,1010864 <_strtoll_r+0x2f8>
 1010818:	0005883a 	mov	r2,zero
 101081c:	00e00034 	movhi	r3,32768
 1010820:	100b883a 	mov	r5,r2
 1010824:	180d883a 	mov	r6,r3
 1010828:	d8c00217 	ldw	r3,8(sp)
 101082c:	00800884 	movi	r2,34
 1010830:	18800015 	stw	r2,0(r3)
 1010834:	003fb306 	br	1010704 <_strtoll_r+0x198>
 1010838:	a1000007 	ldb	r4,0(r20)
 101083c:	00801e04 	movi	r2,120
 1010840:	20800226 	beq	r4,r2,101084c <_strtoll_r+0x2e0>
 1010844:	00801604 	movi	r2,88
 1010848:	20bfc91e 	bne	r4,r2,1010770 <_strtoll_r+0x204>
 101084c:	a4c00047 	ldb	r19,1(r20)
 1010850:	05c00404 	movi	r23,16
 1010854:	b82b883a 	mov	r21,r23
 1010858:	a5000084 	addi	r20,r20,2
 101085c:	002d883a 	mov	r22,zero
 1010860:	003f6606 	br	10105fc <_strtoll_r+0x90>
 1010864:	017fffc4 	movi	r5,-1
 1010868:	01a00034 	movhi	r6,32768
 101086c:	31bfffc4 	addi	r6,r6,-1
 1010870:	003fed06 	br	1010828 <_strtoll_r+0x2bc>
 1010874:	05c00204 	movi	r23,8
 1010878:	b82b883a 	mov	r21,r23
 101087c:	002d883a 	mov	r22,zero
 1010880:	003f5e06 	br	10105fc <_strtoll_r+0x90>

01010884 <_strtoul_r>:
 1010884:	defff604 	addi	sp,sp,-40
 1010888:	008040b4 	movhi	r2,258
 101088c:	1086c404 	addi	r2,r2,6928
 1010890:	dd000415 	stw	r20,16(sp)
 1010894:	15000017 	ldw	r20,0(r2)
 1010898:	ddc00715 	stw	r23,28(sp)
 101089c:	dd800615 	stw	r22,24(sp)
 10108a0:	dd400515 	stw	r21,20(sp)
 10108a4:	dc800215 	stw	r18,8(sp)
 10108a8:	dc000015 	stw	r16,0(sp)
 10108ac:	dfc00915 	stw	ra,36(sp)
 10108b0:	df000815 	stw	fp,32(sp)
 10108b4:	dcc00315 	stw	r19,12(sp)
 10108b8:	dc400115 	stw	r17,4(sp)
 10108bc:	282b883a 	mov	r21,r5
 10108c0:	202f883a 	mov	r23,r4
 10108c4:	302d883a 	mov	r22,r6
 10108c8:	3825883a 	mov	r18,r7
 10108cc:	2821883a 	mov	r16,r5
 10108d0:	84400007 	ldb	r17,0(r16)
 10108d4:	84000044 	addi	r16,r16,1
 10108d8:	a447883a 	add	r3,r20,r17
 10108dc:	18800003 	ldbu	r2,0(r3)
 10108e0:	1080020c 	andi	r2,r2,8
 10108e4:	103ffa1e 	bne	r2,zero,10108d0 <_strtoul_r+0x4c>
 10108e8:	00800b44 	movi	r2,45
 10108ec:	88805626 	beq	r17,r2,1010a48 <_strtoul_r+0x1c4>
 10108f0:	00800ac4 	movi	r2,43
 10108f4:	88805126 	beq	r17,r2,1010a3c <_strtoul_r+0x1b8>
 10108f8:	0039883a 	mov	fp,zero
 10108fc:	9007003a 	cmpeq	r3,r18,zero
 1010900:	18003b1e 	bne	r3,zero,10109f0 <_strtoul_r+0x16c>
 1010904:	00800404 	movi	r2,16
 1010908:	90803926 	beq	r18,r2,10109f0 <_strtoul_r+0x16c>
 101090c:	013fffc4 	movi	r4,-1
 1010910:	900b883a 	mov	r5,r18
 1010914:	10057700 	call	1005770 <__udivsi3>
 1010918:	013fffc4 	movi	r4,-1
 101091c:	900b883a 	mov	r5,r18
 1010920:	1027883a 	mov	r19,r2
 1010924:	10057780 	call	1005778 <__umodsi3>
 1010928:	1011883a 	mov	r8,r2
 101092c:	900f883a 	mov	r7,r18
 1010930:	a445883a 	add	r2,r20,r17
 1010934:	11000003 	ldbu	r4,0(r2)
 1010938:	000b883a 	mov	r5,zero
 101093c:	000d883a 	mov	r6,zero
 1010940:	20c0010c 	andi	r3,r4,4
 1010944:	18000e26 	beq	r3,zero,1010980 <_strtoul_r+0xfc>
 1010948:	88fff404 	addi	r3,r17,-48
 101094c:	1c80140e 	bge	r3,r18,10109a0 <_strtoul_r+0x11c>
 1010950:	30003316 	blt	r6,zero,1010a20 <_strtoul_r+0x19c>
 1010954:	99403236 	bltu	r19,r5,1010a20 <_strtoul_r+0x19c>
 1010958:	2cc03026 	beq	r5,r19,1010a1c <_strtoul_r+0x198>
 101095c:	29c5383a 	mul	r2,r5,r7
 1010960:	01800044 	movi	r6,1
 1010964:	10cb883a 	add	r5,r2,r3
 1010968:	84400007 	ldb	r17,0(r16)
 101096c:	84000044 	addi	r16,r16,1
 1010970:	a445883a 	add	r2,r20,r17
 1010974:	11000003 	ldbu	r4,0(r2)
 1010978:	20c0010c 	andi	r3,r4,4
 101097c:	183ff21e 	bne	r3,zero,1010948 <_strtoul_r+0xc4>
 1010980:	208000cc 	andi	r2,r4,3
 1010984:	10000626 	beq	r2,zero,10109a0 <_strtoul_r+0x11c>
 1010988:	2080004c 	andi	r2,r4,1
 101098c:	1005003a 	cmpeq	r2,r2,zero
 1010990:	1000251e 	bne	r2,zero,1010a28 <_strtoul_r+0x1a4>
 1010994:	00800dc4 	movi	r2,55
 1010998:	8887c83a 	sub	r3,r17,r2
 101099c:	1cbfec16 	blt	r3,r18,1010950 <_strtoul_r+0xcc>
 10109a0:	3000400e 	bge	r6,zero,1010aa4 <_strtoul_r+0x220>
 10109a4:	00800884 	movi	r2,34
 10109a8:	017fffc4 	movi	r5,-1
 10109ac:	b8800015 	stw	r2,0(r23)
 10109b0:	b0000226 	beq	r22,zero,10109bc <_strtoul_r+0x138>
 10109b4:	30001f1e 	bne	r6,zero,1010a34 <_strtoul_r+0x1b0>
 10109b8:	b5400015 	stw	r21,0(r22)
 10109bc:	2805883a 	mov	r2,r5
 10109c0:	dfc00917 	ldw	ra,36(sp)
 10109c4:	df000817 	ldw	fp,32(sp)
 10109c8:	ddc00717 	ldw	r23,28(sp)
 10109cc:	dd800617 	ldw	r22,24(sp)
 10109d0:	dd400517 	ldw	r21,20(sp)
 10109d4:	dd000417 	ldw	r20,16(sp)
 10109d8:	dcc00317 	ldw	r19,12(sp)
 10109dc:	dc800217 	ldw	r18,8(sp)
 10109e0:	dc400117 	ldw	r17,4(sp)
 10109e4:	dc000017 	ldw	r16,0(sp)
 10109e8:	dec00a04 	addi	sp,sp,40
 10109ec:	f800283a 	ret
 10109f0:	00800c04 	movi	r2,48
 10109f4:	88801826 	beq	r17,r2,1010a58 <_strtoul_r+0x1d4>
 10109f8:	183fc426 	beq	r3,zero,101090c <_strtoul_r+0x88>
 10109fc:	00800c04 	movi	r2,48
 1010a00:	88802226 	beq	r17,r2,1010a8c <_strtoul_r+0x208>
 1010a04:	04800284 	movi	r18,10
 1010a08:	900f883a 	mov	r7,r18
 1010a0c:	04c666b4 	movhi	r19,6554
 1010a10:	9ce66644 	addi	r19,r19,-26215
 1010a14:	02000144 	movi	r8,5
 1010a18:	003fc506 	br	1010930 <_strtoul_r+0xac>
 1010a1c:	40ffcf0e 	bge	r8,r3,101095c <_strtoul_r+0xd8>
 1010a20:	01bfffc4 	movi	r6,-1
 1010a24:	003fd006 	br	1010968 <_strtoul_r+0xe4>
 1010a28:	008015c4 	movi	r2,87
 1010a2c:	8887c83a 	sub	r3,r17,r2
 1010a30:	003fda06 	br	101099c <_strtoul_r+0x118>
 1010a34:	857fffc4 	addi	r21,r16,-1
 1010a38:	003fdf06 	br	10109b8 <_strtoul_r+0x134>
 1010a3c:	84400007 	ldb	r17,0(r16)
 1010a40:	84000044 	addi	r16,r16,1
 1010a44:	003fac06 	br	10108f8 <_strtoul_r+0x74>
 1010a48:	84400007 	ldb	r17,0(r16)
 1010a4c:	07000044 	movi	fp,1
 1010a50:	84000044 	addi	r16,r16,1
 1010a54:	003fa906 	br	10108fc <_strtoul_r+0x78>
 1010a58:	81000007 	ldb	r4,0(r16)
 1010a5c:	00801e04 	movi	r2,120
 1010a60:	20800226 	beq	r4,r2,1010a6c <_strtoul_r+0x1e8>
 1010a64:	00801604 	movi	r2,88
 1010a68:	20bfe31e 	bne	r4,r2,10109f8 <_strtoul_r+0x174>
 1010a6c:	84400047 	ldb	r17,1(r16)
 1010a70:	04800404 	movi	r18,16
 1010a74:	84000084 	addi	r16,r16,2
 1010a78:	900f883a 	mov	r7,r18
 1010a7c:	04c40034 	movhi	r19,4096
 1010a80:	9cffffc4 	addi	r19,r19,-1
 1010a84:	020003c4 	movi	r8,15
 1010a88:	003fa906 	br	1010930 <_strtoul_r+0xac>
 1010a8c:	04800204 	movi	r18,8
 1010a90:	900f883a 	mov	r7,r18
 1010a94:	04c80034 	movhi	r19,8192
 1010a98:	9cffffc4 	addi	r19,r19,-1
 1010a9c:	020001c4 	movi	r8,7
 1010aa0:	003fa306 	br	1010930 <_strtoul_r+0xac>
 1010aa4:	e005003a 	cmpeq	r2,fp,zero
 1010aa8:	103fc11e 	bne	r2,zero,10109b0 <_strtoul_r+0x12c>
 1010aac:	014bc83a 	sub	r5,zero,r5
 1010ab0:	003fbf06 	br	10109b0 <_strtoul_r+0x12c>

01010ab4 <strtoul>:
 1010ab4:	008040b4 	movhi	r2,258
 1010ab8:	1086c504 	addi	r2,r2,6932
 1010abc:	2013883a 	mov	r9,r4
 1010ac0:	11000017 	ldw	r4,0(r2)
 1010ac4:	2805883a 	mov	r2,r5
 1010ac8:	300f883a 	mov	r7,r6
 1010acc:	480b883a 	mov	r5,r9
 1010ad0:	100d883a 	mov	r6,r2
 1010ad4:	10108841 	jmpi	1010884 <_strtoul_r>

01010ad8 <_strtoull_r>:
 1010ad8:	defff104 	addi	sp,sp,-60
 1010adc:	008040b4 	movhi	r2,258
 1010ae0:	1086c404 	addi	r2,r2,6928
 1010ae4:	df000d15 	stw	fp,52(sp)
 1010ae8:	17000017 	ldw	fp,0(r2)
 1010aec:	ddc00c15 	stw	r23,48(sp)
 1010af0:	dcc00815 	stw	r19,32(sp)
 1010af4:	dfc00e15 	stw	ra,56(sp)
 1010af8:	dd800b15 	stw	r22,44(sp)
 1010afc:	dd400a15 	stw	r21,40(sp)
 1010b00:	dd000915 	stw	r20,36(sp)
 1010b04:	dc800715 	stw	r18,28(sp)
 1010b08:	dc400615 	stw	r17,24(sp)
 1010b0c:	dc000515 	stw	r16,20(sp)
 1010b10:	d9400215 	stw	r5,8(sp)
 1010b14:	d9000115 	stw	r4,4(sp)
 1010b18:	d9800315 	stw	r6,12(sp)
 1010b1c:	382f883a 	mov	r23,r7
 1010b20:	2827883a 	mov	r19,r5
 1010b24:	9d000007 	ldb	r20,0(r19)
 1010b28:	9cc00044 	addi	r19,r19,1
 1010b2c:	e507883a 	add	r3,fp,r20
 1010b30:	18800003 	ldbu	r2,0(r3)
 1010b34:	1080020c 	andi	r2,r2,8
 1010b38:	103ffa1e 	bne	r2,zero,1010b24 <_strtoull_r+0x4c>
 1010b3c:	00800b44 	movi	r2,45
 1010b40:	a0807a26 	beq	r20,r2,1010d2c <_strtoull_r+0x254>
 1010b44:	00800ac4 	movi	r2,43
 1010b48:	a0807526 	beq	r20,r2,1010d20 <_strtoull_r+0x248>
 1010b4c:	d8000015 	stw	zero,0(sp)
 1010b50:	b807003a 	cmpeq	r3,r23,zero
 1010b54:	18005a1e 	bne	r3,zero,1010cc0 <_strtoull_r+0x1e8>
 1010b58:	00800404 	movi	r2,16
 1010b5c:	b8805826 	beq	r23,r2,1010cc0 <_strtoull_r+0x1e8>
 1010b60:	b82dd7fa 	srai	r22,r23,31
 1010b64:	043fffc4 	movi	r16,-1
 1010b68:	8009883a 	mov	r4,r16
 1010b6c:	800b883a 	mov	r5,r16
 1010b70:	b80d883a 	mov	r6,r23
 1010b74:	b00f883a 	mov	r7,r22
 1010b78:	101211c0 	call	101211c <__udivdi3>
 1010b7c:	8009883a 	mov	r4,r16
 1010b80:	800b883a 	mov	r5,r16
 1010b84:	b80d883a 	mov	r6,r23
 1010b88:	b00f883a 	mov	r7,r22
 1010b8c:	1023883a 	mov	r17,r2
 1010b90:	1825883a 	mov	r18,r3
 1010b94:	10126f80 	call	10126f8 <__umoddi3>
 1010b98:	b82b883a 	mov	r21,r23
 1010b9c:	1019883a 	mov	r12,r2
 1010ba0:	e505883a 	add	r2,fp,r20
 1010ba4:	11000003 	ldbu	r4,0(r2)
 1010ba8:	0015883a 	mov	r10,zero
 1010bac:	0017883a 	mov	r11,zero
 1010bb0:	20c0010c 	andi	r3,r4,4
 1010bb4:	000d883a 	mov	r6,zero
 1010bb8:	18001c26 	beq	r3,zero,1010c2c <_strtoull_r+0x154>
 1010bbc:	a43ff404 	addi	r16,r20,-48
 1010bc0:	85c0220e 	bge	r16,r23,1010c4c <_strtoull_r+0x174>
 1010bc4:	30003c16 	blt	r6,zero,1010cb8 <_strtoull_r+0x1e0>
 1010bc8:	92c03b36 	bltu	r18,r11,1010cb8 <_strtoull_r+0x1e0>
 1010bcc:	5c803926 	beq	r11,r18,1010cb4 <_strtoull_r+0x1dc>
 1010bd0:	54404c26 	beq	r10,r17,1010d04 <_strtoull_r+0x22c>
 1010bd4:	580b883a 	mov	r5,r11
 1010bd8:	5009883a 	mov	r4,r10
 1010bdc:	a80d883a 	mov	r6,r21
 1010be0:	b00f883a 	mov	r7,r22
 1010be4:	db000415 	stw	r12,16(sp)
 1010be8:	10057800 	call	1005780 <__muldi3>
 1010bec:	8013d7fa 	srai	r9,r16,31
 1010bf0:	100d883a 	mov	r6,r2
 1010bf4:	1405883a 	add	r2,r2,r16
 1010bf8:	118d803a 	cmpltu	r6,r2,r6
 1010bfc:	1a47883a 	add	r3,r3,r9
 1010c00:	db000417 	ldw	r12,16(sp)
 1010c04:	30cd883a 	add	r6,r6,r3
 1010c08:	3017883a 	mov	r11,r6
 1010c0c:	1015883a 	mov	r10,r2
 1010c10:	01800044 	movi	r6,1
 1010c14:	9d000007 	ldb	r20,0(r19)
 1010c18:	9cc00044 	addi	r19,r19,1
 1010c1c:	e505883a 	add	r2,fp,r20
 1010c20:	11000003 	ldbu	r4,0(r2)
 1010c24:	20c0010c 	andi	r3,r4,4
 1010c28:	183fe41e 	bne	r3,zero,1010bbc <_strtoull_r+0xe4>
 1010c2c:	208000cc 	andi	r2,r4,3
 1010c30:	10000626 	beq	r2,zero,1010c4c <_strtoull_r+0x174>
 1010c34:	2080004c 	andi	r2,r4,1
 1010c38:	1005003a 	cmpeq	r2,r2,zero
 1010c3c:	10002e1e 	bne	r2,zero,1010cf8 <_strtoull_r+0x220>
 1010c40:	02000dc4 	movi	r8,55
 1010c44:	a221c83a 	sub	r16,r20,r8
 1010c48:	85ffde16 	blt	r16,r23,1010bc4 <_strtoull_r+0xec>
 1010c4c:	3000530e 	bge	r6,zero,1010d9c <_strtoull_r+0x2c4>
 1010c50:	d8c00117 	ldw	r3,4(sp)
 1010c54:	02bfffc4 	movi	r10,-1
 1010c58:	00800884 	movi	r2,34
 1010c5c:	5017883a 	mov	r11,r10
 1010c60:	18800015 	stw	r2,0(r3)
 1010c64:	d8800317 	ldw	r2,12(sp)
 1010c68:	10000426 	beq	r2,zero,1010c7c <_strtoull_r+0x1a4>
 1010c6c:	3000291e 	bne	r6,zero,1010d14 <_strtoull_r+0x23c>
 1010c70:	d8800217 	ldw	r2,8(sp)
 1010c74:	d8c00317 	ldw	r3,12(sp)
 1010c78:	18800015 	stw	r2,0(r3)
 1010c7c:	5005883a 	mov	r2,r10
 1010c80:	5807883a 	mov	r3,r11
 1010c84:	dfc00e17 	ldw	ra,56(sp)
 1010c88:	df000d17 	ldw	fp,52(sp)
 1010c8c:	ddc00c17 	ldw	r23,48(sp)
 1010c90:	dd800b17 	ldw	r22,44(sp)
 1010c94:	dd400a17 	ldw	r21,40(sp)
 1010c98:	dd000917 	ldw	r20,36(sp)
 1010c9c:	dcc00817 	ldw	r19,32(sp)
 1010ca0:	dc800717 	ldw	r18,28(sp)
 1010ca4:	dc400617 	ldw	r17,24(sp)
 1010ca8:	dc000517 	ldw	r16,20(sp)
 1010cac:	dec00f04 	addi	sp,sp,60
 1010cb0:	f800283a 	ret
 1010cb4:	8abfc62e 	bgeu	r17,r10,1010bd0 <_strtoull_r+0xf8>
 1010cb8:	01bfffc4 	movi	r6,-1
 1010cbc:	003fd506 	br	1010c14 <_strtoull_r+0x13c>
 1010cc0:	00800c04 	movi	r2,48
 1010cc4:	a0801e26 	beq	r20,r2,1010d40 <_strtoull_r+0x268>
 1010cc8:	183fa526 	beq	r3,zero,1010b60 <_strtoull_r+0x88>
 1010ccc:	00800c04 	movi	r2,48
 1010cd0:	a0802a26 	beq	r20,r2,1010d7c <_strtoull_r+0x2a4>
 1010cd4:	05c00284 	movi	r23,10
 1010cd8:	b82b883a 	mov	r21,r23
 1010cdc:	046666b4 	movhi	r17,39322
 1010ce0:	8c666644 	addi	r17,r17,-26215
 1010ce4:	002d883a 	mov	r22,zero
 1010ce8:	048666b4 	movhi	r18,6554
 1010cec:	94a66644 	addi	r18,r18,-26215
 1010cf0:	03000144 	movi	r12,5
 1010cf4:	003faa06 	br	1010ba0 <_strtoull_r+0xc8>
 1010cf8:	020015c4 	movi	r8,87
 1010cfc:	a221c83a 	sub	r16,r20,r8
 1010d00:	003fd106 	br	1010c48 <_strtoull_r+0x170>
 1010d04:	5cbfb31e 	bne	r11,r18,1010bd4 <_strtoull_r+0xfc>
 1010d08:	643fb20e 	bge	r12,r16,1010bd4 <_strtoull_r+0xfc>
 1010d0c:	01bfffc4 	movi	r6,-1
 1010d10:	003fc006 	br	1010c14 <_strtoull_r+0x13c>
 1010d14:	9cffffc4 	addi	r19,r19,-1
 1010d18:	dcc00215 	stw	r19,8(sp)
 1010d1c:	003fd406 	br	1010c70 <_strtoull_r+0x198>
 1010d20:	9d000007 	ldb	r20,0(r19)
 1010d24:	9cc00044 	addi	r19,r19,1
 1010d28:	003f8806 	br	1010b4c <_strtoull_r+0x74>
 1010d2c:	9d000007 	ldb	r20,0(r19)
 1010d30:	00800044 	movi	r2,1
 1010d34:	9cc00044 	addi	r19,r19,1
 1010d38:	d8800015 	stw	r2,0(sp)
 1010d3c:	003f8406 	br	1010b50 <_strtoull_r+0x78>
 1010d40:	99000007 	ldb	r4,0(r19)
 1010d44:	00801e04 	movi	r2,120
 1010d48:	20800226 	beq	r4,r2,1010d54 <_strtoull_r+0x27c>
 1010d4c:	00801604 	movi	r2,88
 1010d50:	20bfdd1e 	bne	r4,r2,1010cc8 <_strtoull_r+0x1f0>
 1010d54:	9d000047 	ldb	r20,1(r19)
 1010d58:	05c00404 	movi	r23,16
 1010d5c:	b82b883a 	mov	r21,r23
 1010d60:	047fffc4 	movi	r17,-1
 1010d64:	9cc00084 	addi	r19,r19,2
 1010d68:	002d883a 	mov	r22,zero
 1010d6c:	04840034 	movhi	r18,4096
 1010d70:	94bfffc4 	addi	r18,r18,-1
 1010d74:	030003c4 	movi	r12,15
 1010d78:	003f8906 	br	1010ba0 <_strtoull_r+0xc8>
 1010d7c:	05c00204 	movi	r23,8
 1010d80:	b82b883a 	mov	r21,r23
 1010d84:	047fffc4 	movi	r17,-1
 1010d88:	002d883a 	mov	r22,zero
 1010d8c:	04880034 	movhi	r18,8192
 1010d90:	94bfffc4 	addi	r18,r18,-1
 1010d94:	030001c4 	movi	r12,7
 1010d98:	003f8106 	br	1010ba0 <_strtoull_r+0xc8>
 1010d9c:	d8c00017 	ldw	r3,0(sp)
 1010da0:	1805003a 	cmpeq	r2,r3,zero
 1010da4:	103faf1e 	bne	r2,zero,1010c64 <_strtoull_r+0x18c>
 1010da8:	0009883a 	mov	r4,zero
 1010dac:	2285c83a 	sub	r2,r4,r10
 1010db0:	02c7c83a 	sub	r3,zero,r11
 1010db4:	2089803a 	cmpltu	r4,r4,r2
 1010db8:	1909c83a 	sub	r4,r3,r4
 1010dbc:	1015883a 	mov	r10,r2
 1010dc0:	2017883a 	mov	r11,r4
 1010dc4:	003fa706 	br	1010c64 <_strtoull_r+0x18c>

01010dc8 <__submore>:
 1010dc8:	defffa04 	addi	sp,sp,-24
 1010dcc:	28c00c17 	ldw	r3,48(r5)
 1010dd0:	dc800215 	stw	r18,8(sp)
 1010dd4:	2825883a 	mov	r18,r5
 1010dd8:	dc000015 	stw	r16,0(sp)
 1010ddc:	90801004 	addi	r2,r18,64
 1010de0:	04010004 	movi	r16,1024
 1010de4:	dfc00515 	stw	ra,20(sp)
 1010de8:	dd000415 	stw	r20,16(sp)
 1010dec:	dcc00315 	stw	r19,12(sp)
 1010df0:	dc400115 	stw	r17,4(sp)
 1010df4:	800b883a 	mov	r5,r16
 1010df8:	18801b26 	beq	r3,r2,1010e68 <__submore+0xa0>
 1010dfc:	94400d17 	ldw	r17,52(r18)
 1010e00:	180b883a 	mov	r5,r3
 1010e04:	8c69883a 	add	r20,r17,r17
 1010e08:	a00d883a 	mov	r6,r20
 1010e0c:	100e1840 	call	100e184 <_realloc_r>
 1010e10:	1467883a 	add	r19,r2,r17
 1010e14:	1021883a 	mov	r16,r2
 1010e18:	880d883a 	mov	r6,r17
 1010e1c:	9809883a 	mov	r4,r19
 1010e20:	100b883a 	mov	r5,r2
 1010e24:	10000e26 	beq	r2,zero,1010e60 <__submore+0x98>
 1010e28:	100cf780 	call	100cf78 <memcpy>
 1010e2c:	000d883a 	mov	r6,zero
 1010e30:	95000d15 	stw	r20,52(r18)
 1010e34:	94c00015 	stw	r19,0(r18)
 1010e38:	94000c15 	stw	r16,48(r18)
 1010e3c:	3005883a 	mov	r2,r6
 1010e40:	dfc00517 	ldw	ra,20(sp)
 1010e44:	dd000417 	ldw	r20,16(sp)
 1010e48:	dcc00317 	ldw	r19,12(sp)
 1010e4c:	dc800217 	ldw	r18,8(sp)
 1010e50:	dc400117 	ldw	r17,4(sp)
 1010e54:	dc000017 	ldw	r16,0(sp)
 1010e58:	dec00604 	addi	sp,sp,24
 1010e5c:	f800283a 	ret
 1010e60:	01bfffc4 	movi	r6,-1
 1010e64:	003ff506 	br	1010e3c <__submore+0x74>
 1010e68:	1005dd40 	call	1005dd4 <_malloc_r>
 1010e6c:	1009883a 	mov	r4,r2
 1010e70:	1140ff44 	addi	r5,r2,1021
 1010e74:	000d883a 	mov	r6,zero
 1010e78:	103ff926 	beq	r2,zero,1010e60 <__submore+0x98>
 1010e7c:	90801083 	ldbu	r2,66(r18)
 1010e80:	94000d15 	stw	r16,52(r18)
 1010e84:	91000c15 	stw	r4,48(r18)
 1010e88:	28800085 	stb	r2,2(r5)
 1010e8c:	90c01043 	ldbu	r3,65(r18)
 1010e90:	28c00045 	stb	r3,1(r5)
 1010e94:	90801003 	ldbu	r2,64(r18)
 1010e98:	2080ff45 	stb	r2,1021(r4)
 1010e9c:	91400015 	stw	r5,0(r18)
 1010ea0:	003fe606 	br	1010e3c <__submore+0x74>

01010ea4 <_ungetc_r>:
 1010ea4:	defffc04 	addi	sp,sp,-16
 1010ea8:	00bfffc4 	movi	r2,-1
 1010eac:	dc400215 	stw	r17,8(sp)
 1010eb0:	dc000115 	stw	r16,4(sp)
 1010eb4:	dfc00315 	stw	ra,12(sp)
 1010eb8:	2821883a 	mov	r16,r5
 1010ebc:	2023883a 	mov	r17,r4
 1010ec0:	28801826 	beq	r5,r2,1010f24 <_ungetc_r+0x80>
 1010ec4:	20000226 	beq	r4,zero,1010ed0 <_ungetc_r+0x2c>
 1010ec8:	20800e17 	ldw	r2,56(r4)
 1010ecc:	10001b26 	beq	r2,zero,1010f3c <_ungetc_r+0x98>
 1010ed0:	3100030b 	ldhu	r4,12(r6)
 1010ed4:	00bff7c4 	movi	r2,-33
 1010ed8:	2084703a 	and	r2,r4,r2
 1010edc:	117fffcc 	andi	r5,r2,65535
 1010ee0:	28c0010c 	andi	r3,r5,4
 1010ee4:	1009883a 	mov	r4,r2
 1010ee8:	3080030d 	sth	r2,12(r6)
 1010eec:	18003526 	beq	r3,zero,1010fc4 <_ungetc_r+0x120>
 1010ef0:	30800c17 	ldw	r2,48(r6)
 1010ef4:	84003fcc 	andi	r16,r16,255
 1010ef8:	10001426 	beq	r2,zero,1010f4c <_ungetc_r+0xa8>
 1010efc:	30c00117 	ldw	r3,4(r6)
 1010f00:	30800d17 	ldw	r2,52(r6)
 1010f04:	1880380e 	bge	r3,r2,1010fe8 <_ungetc_r+0x144>
 1010f08:	30c00017 	ldw	r3,0(r6)
 1010f0c:	19ffffc4 	addi	r7,r3,-1
 1010f10:	31c00015 	stw	r7,0(r6)
 1010f14:	1c3fffc5 	stb	r16,-1(r3)
 1010f18:	30800117 	ldw	r2,4(r6)
 1010f1c:	10800044 	addi	r2,r2,1
 1010f20:	30800115 	stw	r2,4(r6)
 1010f24:	8005883a 	mov	r2,r16
 1010f28:	dfc00317 	ldw	ra,12(sp)
 1010f2c:	dc400217 	ldw	r17,8(sp)
 1010f30:	dc000117 	ldw	r16,4(sp)
 1010f34:	dec00404 	addi	sp,sp,16
 1010f38:	f800283a 	ret
 1010f3c:	d9800015 	stw	r6,0(sp)
 1010f40:	100bbac0 	call	100bbac <__sinit>
 1010f44:	d9800017 	ldw	r6,0(sp)
 1010f48:	003fe106 	br	1010ed0 <_ungetc_r+0x2c>
 1010f4c:	30800417 	ldw	r2,16(r6)
 1010f50:	10002326 	beq	r2,zero,1010fe0 <_ungetc_r+0x13c>
 1010f54:	31c00017 	ldw	r7,0(r6)
 1010f58:	11c0022e 	bgeu	r2,r7,1010f64 <_ungetc_r+0xc0>
 1010f5c:	38bfffc3 	ldbu	r2,-1(r7)
 1010f60:	80801226 	beq	r16,r2,1010fac <_ungetc_r+0x108>
 1010f64:	30c00117 	ldw	r3,4(r6)
 1010f68:	00800044 	movi	r2,1
 1010f6c:	30800115 	stw	r2,4(r6)
 1010f70:	008000c4 	movi	r2,3
 1010f74:	31001004 	addi	r4,r6,64
 1010f78:	31401084 	addi	r5,r6,66
 1010f7c:	30800d15 	stw	r2,52(r6)
 1010f80:	8005883a 	mov	r2,r16
 1010f84:	30c00f15 	stw	r3,60(r6)
 1010f88:	31c00e15 	stw	r7,56(r6)
 1010f8c:	31000c15 	stw	r4,48(r6)
 1010f90:	31400015 	stw	r5,0(r6)
 1010f94:	34001085 	stb	r16,66(r6)
 1010f98:	dfc00317 	ldw	ra,12(sp)
 1010f9c:	dc400217 	ldw	r17,8(sp)
 1010fa0:	dc000117 	ldw	r16,4(sp)
 1010fa4:	dec00404 	addi	sp,sp,16
 1010fa8:	f800283a 	ret
 1010fac:	30800117 	ldw	r2,4(r6)
 1010fb0:	39ffffc4 	addi	r7,r7,-1
 1010fb4:	31c00015 	stw	r7,0(r6)
 1010fb8:	10800044 	addi	r2,r2,1
 1010fbc:	30800115 	stw	r2,4(r6)
 1010fc0:	003fd806 	br	1010f24 <_ungetc_r+0x80>
 1010fc4:	2880040c 	andi	r2,r5,16
 1010fc8:	10000d26 	beq	r2,zero,1011000 <_ungetc_r+0x15c>
 1010fcc:	2880020c 	andi	r2,r5,8
 1010fd0:	10000d1e 	bne	r2,zero,1011008 <_ungetc_r+0x164>
 1010fd4:	20800114 	ori	r2,r4,4
 1010fd8:	3080030d 	sth	r2,12(r6)
 1010fdc:	003fc406 	br	1010ef0 <_ungetc_r+0x4c>
 1010fe0:	31c00017 	ldw	r7,0(r6)
 1010fe4:	003fdf06 	br	1010f64 <_ungetc_r+0xc0>
 1010fe8:	300b883a 	mov	r5,r6
 1010fec:	8809883a 	mov	r4,r17
 1010ff0:	d9800015 	stw	r6,0(sp)
 1010ff4:	1010dc80 	call	1010dc8 <__submore>
 1010ff8:	d9800017 	ldw	r6,0(sp)
 1010ffc:	103fc226 	beq	r2,zero,1010f08 <_ungetc_r+0x64>
 1011000:	043fffc4 	movi	r16,-1
 1011004:	003fc706 	br	1010f24 <_ungetc_r+0x80>
 1011008:	300b883a 	mov	r5,r6
 101100c:	8809883a 	mov	r4,r17
 1011010:	d9800015 	stw	r6,0(sp)
 1011014:	100b9140 	call	100b914 <_fflush_r>
 1011018:	d9800017 	ldw	r6,0(sp)
 101101c:	103ff81e 	bne	r2,zero,1011000 <_ungetc_r+0x15c>
 1011020:	3100030b 	ldhu	r4,12(r6)
 1011024:	00bffdc4 	movi	r2,-9
 1011028:	30000215 	stw	zero,8(r6)
 101102c:	2084703a 	and	r2,r4,r2
 1011030:	1009883a 	mov	r4,r2
 1011034:	3080030d 	sth	r2,12(r6)
 1011038:	30000615 	stw	zero,24(r6)
 101103c:	003fe506 	br	1010fd4 <_ungetc_r+0x130>

01011040 <ungetc>:
 1011040:	018040b4 	movhi	r6,258
 1011044:	3186c504 	addi	r6,r6,6932
 1011048:	2007883a 	mov	r3,r4
 101104c:	31000017 	ldw	r4,0(r6)
 1011050:	280d883a 	mov	r6,r5
 1011054:	180b883a 	mov	r5,r3
 1011058:	1010ea41 	jmpi	1010ea4 <_ungetc_r>

0101105c <_write_r>:
 101105c:	defffd04 	addi	sp,sp,-12
 1011060:	dc000015 	stw	r16,0(sp)
 1011064:	040040b4 	movhi	r16,258
 1011068:	840e8304 	addi	r16,r16,14860
 101106c:	dc400115 	stw	r17,4(sp)
 1011070:	80000015 	stw	zero,0(r16)
 1011074:	2023883a 	mov	r17,r4
 1011078:	2809883a 	mov	r4,r5
 101107c:	300b883a 	mov	r5,r6
 1011080:	380d883a 	mov	r6,r7
 1011084:	dfc00215 	stw	ra,8(sp)
 1011088:	10141740 	call	1014174 <write>
 101108c:	1007883a 	mov	r3,r2
 1011090:	00bfffc4 	movi	r2,-1
 1011094:	18800626 	beq	r3,r2,10110b0 <_write_r+0x54>
 1011098:	1805883a 	mov	r2,r3
 101109c:	dfc00217 	ldw	ra,8(sp)
 10110a0:	dc400117 	ldw	r17,4(sp)
 10110a4:	dc000017 	ldw	r16,0(sp)
 10110a8:	dec00304 	addi	sp,sp,12
 10110ac:	f800283a 	ret
 10110b0:	80800017 	ldw	r2,0(r16)
 10110b4:	103ff826 	beq	r2,zero,1011098 <_write_r+0x3c>
 10110b8:	88800015 	stw	r2,0(r17)
 10110bc:	1805883a 	mov	r2,r3
 10110c0:	dfc00217 	ldw	ra,8(sp)
 10110c4:	dc400117 	ldw	r17,4(sp)
 10110c8:	dc000017 	ldw	r16,0(sp)
 10110cc:	dec00304 	addi	sp,sp,12
 10110d0:	f800283a 	ret

010110d4 <_calloc_r>:
 10110d4:	298b383a 	mul	r5,r5,r6
 10110d8:	defffe04 	addi	sp,sp,-8
 10110dc:	dc000015 	stw	r16,0(sp)
 10110e0:	dfc00115 	stw	ra,4(sp)
 10110e4:	1005dd40 	call	1005dd4 <_malloc_r>
 10110e8:	1021883a 	mov	r16,r2
 10110ec:	01c00904 	movi	r7,36
 10110f0:	10000d26 	beq	r2,zero,1011128 <_calloc_r+0x54>
 10110f4:	10ffff17 	ldw	r3,-4(r2)
 10110f8:	1009883a 	mov	r4,r2
 10110fc:	00bfff04 	movi	r2,-4
 1011100:	1886703a 	and	r3,r3,r2
 1011104:	1887883a 	add	r3,r3,r2
 1011108:	180d883a 	mov	r6,r3
 101110c:	000b883a 	mov	r5,zero
 1011110:	38c01736 	bltu	r7,r3,1011170 <_calloc_r+0x9c>
 1011114:	008004c4 	movi	r2,19
 1011118:	10c00836 	bltu	r2,r3,101113c <_calloc_r+0x68>
 101111c:	20000215 	stw	zero,8(r4)
 1011120:	20000015 	stw	zero,0(r4)
 1011124:	20000115 	stw	zero,4(r4)
 1011128:	8005883a 	mov	r2,r16
 101112c:	dfc00117 	ldw	ra,4(sp)
 1011130:	dc000017 	ldw	r16,0(sp)
 1011134:	dec00204 	addi	sp,sp,8
 1011138:	f800283a 	ret
 101113c:	008006c4 	movi	r2,27
 1011140:	80000015 	stw	zero,0(r16)
 1011144:	80000115 	stw	zero,4(r16)
 1011148:	81000204 	addi	r4,r16,8
 101114c:	10fff32e 	bgeu	r2,r3,101111c <_calloc_r+0x48>
 1011150:	80000215 	stw	zero,8(r16)
 1011154:	80000315 	stw	zero,12(r16)
 1011158:	81000404 	addi	r4,r16,16
 101115c:	19ffef1e 	bne	r3,r7,101111c <_calloc_r+0x48>
 1011160:	81000604 	addi	r4,r16,24
 1011164:	80000415 	stw	zero,16(r16)
 1011168:	80000515 	stw	zero,20(r16)
 101116c:	003feb06 	br	101111c <_calloc_r+0x48>
 1011170:	100d0f80 	call	100d0f8 <memset>
 1011174:	8005883a 	mov	r2,r16
 1011178:	dfc00117 	ldw	ra,4(sp)
 101117c:	dc000017 	ldw	r16,0(sp)
 1011180:	dec00204 	addi	sp,sp,8
 1011184:	f800283a 	ret

01011188 <_close_r>:
 1011188:	defffd04 	addi	sp,sp,-12
 101118c:	dc000015 	stw	r16,0(sp)
 1011190:	040040b4 	movhi	r16,258
 1011194:	840e8304 	addi	r16,r16,14860
 1011198:	dc400115 	stw	r17,4(sp)
 101119c:	80000015 	stw	zero,0(r16)
 10111a0:	2023883a 	mov	r17,r4
 10111a4:	2809883a 	mov	r4,r5
 10111a8:	dfc00215 	stw	ra,8(sp)
 10111ac:	10134240 	call	1013424 <close>
 10111b0:	1007883a 	mov	r3,r2
 10111b4:	00bfffc4 	movi	r2,-1
 10111b8:	18800626 	beq	r3,r2,10111d4 <_close_r+0x4c>
 10111bc:	1805883a 	mov	r2,r3
 10111c0:	dfc00217 	ldw	ra,8(sp)
 10111c4:	dc400117 	ldw	r17,4(sp)
 10111c8:	dc000017 	ldw	r16,0(sp)
 10111cc:	dec00304 	addi	sp,sp,12
 10111d0:	f800283a 	ret
 10111d4:	80800017 	ldw	r2,0(r16)
 10111d8:	103ff826 	beq	r2,zero,10111bc <_close_r+0x34>
 10111dc:	88800015 	stw	r2,0(r17)
 10111e0:	1805883a 	mov	r2,r3
 10111e4:	dfc00217 	ldw	ra,8(sp)
 10111e8:	dc400117 	ldw	r17,4(sp)
 10111ec:	dc000017 	ldw	r16,0(sp)
 10111f0:	dec00304 	addi	sp,sp,12
 10111f4:	f800283a 	ret

010111f8 <_fclose_r>:
 10111f8:	defffc04 	addi	sp,sp,-16
 10111fc:	dc400115 	stw	r17,4(sp)
 1011200:	dc000015 	stw	r16,0(sp)
 1011204:	dfc00315 	stw	ra,12(sp)
 1011208:	dc800215 	stw	r18,8(sp)
 101120c:	2821883a 	mov	r16,r5
 1011210:	2023883a 	mov	r17,r4
 1011214:	28002926 	beq	r5,zero,10112bc <_fclose_r+0xc4>
 1011218:	100bb9c0 	call	100bb9c <__sfp_lock_acquire>
 101121c:	88000226 	beq	r17,zero,1011228 <_fclose_r+0x30>
 1011220:	88800e17 	ldw	r2,56(r17)
 1011224:	10002d26 	beq	r2,zero,10112dc <_fclose_r+0xe4>
 1011228:	8080030f 	ldh	r2,12(r16)
 101122c:	10002226 	beq	r2,zero,10112b8 <_fclose_r+0xc0>
 1011230:	8809883a 	mov	r4,r17
 1011234:	800b883a 	mov	r5,r16
 1011238:	100b9140 	call	100b914 <_fflush_r>
 101123c:	1025883a 	mov	r18,r2
 1011240:	80800b17 	ldw	r2,44(r16)
 1011244:	10000426 	beq	r2,zero,1011258 <_fclose_r+0x60>
 1011248:	81400717 	ldw	r5,28(r16)
 101124c:	8809883a 	mov	r4,r17
 1011250:	103ee83a 	callr	r2
 1011254:	10002a16 	blt	r2,zero,1011300 <_fclose_r+0x108>
 1011258:	8080030b 	ldhu	r2,12(r16)
 101125c:	1080200c 	andi	r2,r2,128
 1011260:	1000231e 	bne	r2,zero,10112f0 <_fclose_r+0xf8>
 1011264:	81400c17 	ldw	r5,48(r16)
 1011268:	28000526 	beq	r5,zero,1011280 <_fclose_r+0x88>
 101126c:	80801004 	addi	r2,r16,64
 1011270:	28800226 	beq	r5,r2,101127c <_fclose_r+0x84>
 1011274:	8809883a 	mov	r4,r17
 1011278:	100c16c0 	call	100c16c <_free_r>
 101127c:	80000c15 	stw	zero,48(r16)
 1011280:	81401117 	ldw	r5,68(r16)
 1011284:	28000326 	beq	r5,zero,1011294 <_fclose_r+0x9c>
 1011288:	8809883a 	mov	r4,r17
 101128c:	100c16c0 	call	100c16c <_free_r>
 1011290:	80001115 	stw	zero,68(r16)
 1011294:	8000030d 	sth	zero,12(r16)
 1011298:	100bba00 	call	100bba0 <__sfp_lock_release>
 101129c:	9005883a 	mov	r2,r18
 10112a0:	dfc00317 	ldw	ra,12(sp)
 10112a4:	dc800217 	ldw	r18,8(sp)
 10112a8:	dc400117 	ldw	r17,4(sp)
 10112ac:	dc000017 	ldw	r16,0(sp)
 10112b0:	dec00404 	addi	sp,sp,16
 10112b4:	f800283a 	ret
 10112b8:	100bba00 	call	100bba0 <__sfp_lock_release>
 10112bc:	0025883a 	mov	r18,zero
 10112c0:	9005883a 	mov	r2,r18
 10112c4:	dfc00317 	ldw	ra,12(sp)
 10112c8:	dc800217 	ldw	r18,8(sp)
 10112cc:	dc400117 	ldw	r17,4(sp)
 10112d0:	dc000017 	ldw	r16,0(sp)
 10112d4:	dec00404 	addi	sp,sp,16
 10112d8:	f800283a 	ret
 10112dc:	8809883a 	mov	r4,r17
 10112e0:	100bbac0 	call	100bbac <__sinit>
 10112e4:	8080030f 	ldh	r2,12(r16)
 10112e8:	103fd11e 	bne	r2,zero,1011230 <_fclose_r+0x38>
 10112ec:	003ff206 	br	10112b8 <_fclose_r+0xc0>
 10112f0:	81400417 	ldw	r5,16(r16)
 10112f4:	8809883a 	mov	r4,r17
 10112f8:	100c16c0 	call	100c16c <_free_r>
 10112fc:	003fd906 	br	1011264 <_fclose_r+0x6c>
 1011300:	04bfffc4 	movi	r18,-1
 1011304:	003fd406 	br	1011258 <_fclose_r+0x60>

01011308 <fclose>:
 1011308:	008040b4 	movhi	r2,258
 101130c:	1086c504 	addi	r2,r2,6932
 1011310:	200b883a 	mov	r5,r4
 1011314:	11000017 	ldw	r4,0(r2)
 1011318:	10111f81 	jmpi	10111f8 <_fclose_r>

0101131c <_fstat_r>:
 101131c:	defffd04 	addi	sp,sp,-12
 1011320:	dc000015 	stw	r16,0(sp)
 1011324:	040040b4 	movhi	r16,258
 1011328:	840e8304 	addi	r16,r16,14860
 101132c:	dc400115 	stw	r17,4(sp)
 1011330:	80000015 	stw	zero,0(r16)
 1011334:	2023883a 	mov	r17,r4
 1011338:	2809883a 	mov	r4,r5
 101133c:	300b883a 	mov	r5,r6
 1011340:	dfc00215 	stw	ra,8(sp)
 1011344:	10135ac0 	call	10135ac <fstat>
 1011348:	1007883a 	mov	r3,r2
 101134c:	00bfffc4 	movi	r2,-1
 1011350:	18800626 	beq	r3,r2,101136c <_fstat_r+0x50>
 1011354:	1805883a 	mov	r2,r3
 1011358:	dfc00217 	ldw	ra,8(sp)
 101135c:	dc400117 	ldw	r17,4(sp)
 1011360:	dc000017 	ldw	r16,0(sp)
 1011364:	dec00304 	addi	sp,sp,12
 1011368:	f800283a 	ret
 101136c:	80800017 	ldw	r2,0(r16)
 1011370:	103ff826 	beq	r2,zero,1011354 <_fstat_r+0x38>
 1011374:	88800015 	stw	r2,0(r17)
 1011378:	1805883a 	mov	r2,r3
 101137c:	dfc00217 	ldw	ra,8(sp)
 1011380:	dc400117 	ldw	r17,4(sp)
 1011384:	dc000017 	ldw	r16,0(sp)
 1011388:	dec00304 	addi	sp,sp,12
 101138c:	f800283a 	ret

01011390 <htinit>:
 1011390:	28800003 	ldbu	r2,0(r5)
 1011394:	10000626 	beq	r2,zero,10113b0 <htinit+0x20>
 1011398:	1105883a 	add	r2,r2,r4
 101139c:	11800005 	stb	r6,0(r2)
 10113a0:	28800043 	ldbu	r2,1(r5)
 10113a4:	31800044 	addi	r6,r6,1
 10113a8:	29400044 	addi	r5,r5,1
 10113ac:	103ffa1e 	bne	r2,zero,1011398 <htinit+0x8>
 10113b0:	f800283a 	ret

010113b4 <__hexdig_init>:
 10113b4:	defffd04 	addi	sp,sp,-12
 10113b8:	dc400015 	stw	r17,0(sp)
 10113bc:	044040b4 	movhi	r17,258
 10113c0:	8c4eaa04 	addi	r17,r17,15016
 10113c4:	dcc00115 	stw	r19,4(sp)
 10113c8:	8809883a 	mov	r4,r17
 10113cc:	04c00684 	movi	r19,26
 10113d0:	014040b4 	movhi	r5,258
 10113d4:	297e2204 	addi	r5,r5,-1912
 10113d8:	01800404 	movi	r6,16
 10113dc:	dfc00215 	stw	ra,8(sp)
 10113e0:	10113900 	call	1011390 <htinit>
 10113e4:	980d883a 	mov	r6,r19
 10113e8:	8809883a 	mov	r4,r17
 10113ec:	014040b4 	movhi	r5,258
 10113f0:	297e2504 	addi	r5,r5,-1900
 10113f4:	10113900 	call	1011390 <htinit>
 10113f8:	8809883a 	mov	r4,r17
 10113fc:	980d883a 	mov	r6,r19
 1011400:	014040b4 	movhi	r5,258
 1011404:	297e2704 	addi	r5,r5,-1892
 1011408:	dfc00217 	ldw	ra,8(sp)
 101140c:	dcc00117 	ldw	r19,4(sp)
 1011410:	dc400017 	ldw	r17,0(sp)
 1011414:	dec00304 	addi	sp,sp,12
 1011418:	10113901 	jmpi	1011390 <htinit>

0101141c <rshift>:
 101141c:	2807d17a 	srai	r3,r5,5
 1011420:	20800417 	ldw	r2,16(r4)
 1011424:	22400504 	addi	r9,r4,20
 1011428:	480f883a 	mov	r7,r9
 101142c:	1880190e 	bge	r3,r2,1011494 <rshift+0x78>
 1011430:	1085883a 	add	r2,r2,r2
 1011434:	18c7883a 	add	r3,r3,r3
 1011438:	1085883a 	add	r2,r2,r2
 101143c:	18c7883a 	add	r3,r3,r3
 1011440:	294007cc 	andi	r5,r5,31
 1011444:	4891883a 	add	r8,r9,r2
 1011448:	48cd883a 	add	r6,r9,r3
 101144c:	28001726 	beq	r5,zero,10114ac <rshift+0x90>
 1011450:	30c00017 	ldw	r3,0(r6)
 1011454:	00800804 	movi	r2,32
 1011458:	31800104 	addi	r6,r6,4
 101145c:	1155c83a 	sub	r10,r2,r5
 1011460:	1946d83a 	srl	r3,r3,r5
 1011464:	3200092e 	bgeu	r6,r8,101148c <rshift+0x70>
 1011468:	30800017 	ldw	r2,0(r6)
 101146c:	1284983a 	sll	r2,r2,r10
 1011470:	10c4b03a 	or	r2,r2,r3
 1011474:	38800015 	stw	r2,0(r7)
 1011478:	30c00017 	ldw	r3,0(r6)
 101147c:	31800104 	addi	r6,r6,4
 1011480:	39c00104 	addi	r7,r7,4
 1011484:	1946d83a 	srl	r3,r3,r5
 1011488:	323ff736 	bltu	r6,r8,1011468 <rshift+0x4c>
 101148c:	38c00015 	stw	r3,0(r7)
 1011490:	18000c1e 	bne	r3,zero,10114c4 <rshift+0xa8>
 1011494:	3a45c83a 	sub	r2,r7,r9
 1011498:	1005d0ba 	srai	r2,r2,2
 101149c:	20800415 	stw	r2,16(r4)
 10114a0:	1000011e 	bne	r2,zero,10114a8 <rshift+0x8c>
 10114a4:	20000515 	stw	zero,20(r4)
 10114a8:	f800283a 	ret
 10114ac:	323ff92e 	bgeu	r6,r8,1011494 <rshift+0x78>
 10114b0:	30800017 	ldw	r2,0(r6)
 10114b4:	31800104 	addi	r6,r6,4
 10114b8:	38800015 	stw	r2,0(r7)
 10114bc:	39c00104 	addi	r7,r7,4
 10114c0:	003ffa06 	br	10114ac <rshift+0x90>
 10114c4:	39c00104 	addi	r7,r7,4
 10114c8:	003ff206 	br	1011494 <rshift+0x78>

010114cc <__gethex>:
 10114cc:	defff304 	addi	sp,sp,-52
 10114d0:	dd400815 	stw	r21,32(sp)
 10114d4:	dd000715 	stw	r20,28(sp)
 10114d8:	dcc00615 	stw	r19,24(sp)
 10114dc:	dc400415 	stw	r17,16(sp)
 10114e0:	dfc00c15 	stw	ra,48(sp)
 10114e4:	df000b15 	stw	fp,44(sp)
 10114e8:	ddc00a15 	stw	r23,40(sp)
 10114ec:	dd800915 	stw	r22,36(sp)
 10114f0:	dc800515 	stw	r18,20(sp)
 10114f4:	dc000315 	stw	r16,12(sp)
 10114f8:	044040b4 	movhi	r17,258
 10114fc:	8c4eaa04 	addi	r17,r17,15016
 1011500:	88800c03 	ldbu	r2,48(r17)
 1011504:	202b883a 	mov	r21,r4
 1011508:	2827883a 	mov	r19,r5
 101150c:	3029883a 	mov	r20,r6
 1011510:	d9c00115 	stw	r7,4(sp)
 1011514:	10006e26 	beq	r2,zero,10116d0 <__gethex+0x204>
 1011518:	99800017 	ldw	r6,0(r19)
 101151c:	00800c04 	movi	r2,48
 1011520:	31000083 	ldbu	r4,2(r6)
 1011524:	30c00084 	addi	r3,r6,2
 1011528:	20806f1e 	bne	r4,r2,10116e8 <__gethex+0x21c>
 101152c:	200b883a 	mov	r5,r4
 1011530:	3007883a 	mov	r3,r6
 1011534:	188000c3 	ldbu	r2,3(r3)
 1011538:	18c00044 	addi	r3,r3,1
 101153c:	1009883a 	mov	r4,r2
 1011540:	117ffc26 	beq	r2,r5,1011534 <__gethex+0x68>
 1011544:	1997c83a 	sub	r11,r3,r6
 1011548:	19400084 	addi	r5,r3,2
 101154c:	2445883a 	add	r2,r4,r17
 1011550:	10c00003 	ldbu	r3,0(r2)
 1011554:	18002d26 	beq	r3,zero,101160c <__gethex+0x140>
 1011558:	29000003 	ldbu	r4,0(r5)
 101155c:	2825883a 	mov	r18,r5
 1011560:	000d883a 	mov	r6,zero
 1011564:	0013883a 	mov	r9,zero
 1011568:	21003fcc 	andi	r4,r4,255
 101156c:	2445883a 	add	r2,r4,r17
 1011570:	10c00003 	ldbu	r3,0(r2)
 1011574:	18000526 	beq	r3,zero,101158c <__gethex+0xc0>
 1011578:	29400044 	addi	r5,r5,1
 101157c:	29000003 	ldbu	r4,0(r5)
 1011580:	2445883a 	add	r2,r4,r17
 1011584:	10c00003 	ldbu	r3,0(r2)
 1011588:	183ffb1e 	bne	r3,zero,1011578 <__gethex+0xac>
 101158c:	00800b84 	movi	r2,46
 1011590:	20805826 	beq	r4,r2,10116f4 <__gethex+0x228>
 1011594:	30007a26 	beq	r6,zero,1011780 <__gethex+0x2b4>
 1011598:	2985c83a 	sub	r2,r5,r6
 101159c:	1085883a 	add	r2,r2,r2
 10115a0:	1085883a 	add	r2,r2,r2
 10115a4:	00adc83a 	sub	r22,zero,r2
 10115a8:	2821883a 	mov	r16,r5
 10115ac:	80c00003 	ldbu	r3,0(r16)
 10115b0:	00801404 	movi	r2,80
 10115b4:	18801e26 	beq	r3,r2,1011630 <__gethex+0x164>
 10115b8:	00801c04 	movi	r2,112
 10115bc:	18801c26 	beq	r3,r2,1011630 <__gethex+0x164>
 10115c0:	800d883a 	mov	r6,r16
 10115c4:	4805003a 	cmpeq	r2,r9,zero
 10115c8:	99800015 	stw	r6,0(r19)
 10115cc:	1000861e 	bne	r2,zero,10117e8 <__gethex+0x31c>
 10115d0:	58003d26 	beq	r11,zero,10116c8 <__gethex+0x1fc>
 10115d4:	0025883a 	mov	r18,zero
 10115d8:	9005883a 	mov	r2,r18
 10115dc:	dfc00c17 	ldw	ra,48(sp)
 10115e0:	df000b17 	ldw	fp,44(sp)
 10115e4:	ddc00a17 	ldw	r23,40(sp)
 10115e8:	dd800917 	ldw	r22,36(sp)
 10115ec:	dd400817 	ldw	r21,32(sp)
 10115f0:	dd000717 	ldw	r20,28(sp)
 10115f4:	dcc00617 	ldw	r19,24(sp)
 10115f8:	dc800517 	ldw	r18,20(sp)
 10115fc:	dc400417 	ldw	r17,16(sp)
 1011600:	dc000317 	ldw	r16,12(sp)
 1011604:	dec00d04 	addi	sp,sp,52
 1011608:	f800283a 	ret
 101160c:	00800b84 	movi	r2,46
 1011610:	20804a26 	beq	r4,r2,101173c <__gethex+0x270>
 1011614:	2821883a 	mov	r16,r5
 1011618:	80c00003 	ldbu	r3,0(r16)
 101161c:	00801404 	movi	r2,80
 1011620:	2825883a 	mov	r18,r5
 1011624:	02400044 	movi	r9,1
 1011628:	002d883a 	mov	r22,zero
 101162c:	18bfe21e 	bne	r3,r2,10115b8 <__gethex+0xec>
 1011630:	80c00043 	ldbu	r3,1(r16)
 1011634:	00800ac4 	movi	r2,43
 1011638:	81000044 	addi	r4,r16,1
 101163c:	18804a26 	beq	r3,r2,1011768 <__gethex+0x29c>
 1011640:	00800b44 	movi	r2,45
 1011644:	18804c26 	beq	r3,r2,1011778 <__gethex+0x2ac>
 1011648:	0015883a 	mov	r10,zero
 101164c:	1c45883a 	add	r2,r3,r17
 1011650:	10800003 	ldbu	r2,0(r2)
 1011654:	103fda26 	beq	r2,zero,10115c0 <__gethex+0xf4>
 1011658:	02000644 	movi	r8,25
 101165c:	40bfd816 	blt	r8,r2,10115c0 <__gethex+0xf4>
 1011660:	20c00043 	ldbu	r3,1(r4)
 1011664:	11fffc04 	addi	r7,r2,-16
 1011668:	008040b4 	movhi	r2,258
 101166c:	108eaa04 	addi	r2,r2,15016
 1011670:	1887883a 	add	r3,r3,r2
 1011674:	18800003 	ldbu	r2,0(r3)
 1011678:	21800044 	addi	r6,r4,1
 101167c:	10000d26 	beq	r2,zero,10116b4 <__gethex+0x1e8>
 1011680:	100b883a 	mov	r5,r2
 1011684:	4080020e 	bge	r8,r2,1011690 <__gethex+0x1c4>
 1011688:	00000a06 	br	10116b4 <__gethex+0x1e8>
 101168c:	41000916 	blt	r8,r4,10116b4 <__gethex+0x1e8>
 1011690:	31800044 	addi	r6,r6,1
 1011694:	30800003 	ldbu	r2,0(r6)
 1011698:	38c002a4 	muli	r3,r7,10
 101169c:	1445883a 	add	r2,r2,r17
 10116a0:	11000003 	ldbu	r4,0(r2)
 10116a4:	1947883a 	add	r3,r3,r5
 10116a8:	19fffc04 	addi	r7,r3,-16
 10116ac:	200b883a 	mov	r5,r4
 10116b0:	203ff61e 	bne	r4,zero,101168c <__gethex+0x1c0>
 10116b4:	5005003a 	cmpeq	r2,r10,zero
 10116b8:	1000011e 	bne	r2,zero,10116c0 <__gethex+0x1f4>
 10116bc:	01cfc83a 	sub	r7,zero,r7
 10116c0:	b1ed883a 	add	r22,r22,r7
 10116c4:	003fbf06 	br	10115c4 <__gethex+0xf8>
 10116c8:	04800184 	movi	r18,6
 10116cc:	003fc206 	br	10115d8 <__gethex+0x10c>
 10116d0:	10113b40 	call	10113b4 <__hexdig_init>
 10116d4:	99800017 	ldw	r6,0(r19)
 10116d8:	00800c04 	movi	r2,48
 10116dc:	31000083 	ldbu	r4,2(r6)
 10116e0:	30c00084 	addi	r3,r6,2
 10116e4:	20bf9126 	beq	r4,r2,101152c <__gethex+0x60>
 10116e8:	180b883a 	mov	r5,r3
 10116ec:	0017883a 	mov	r11,zero
 10116f0:	003f9606 	br	101154c <__gethex+0x80>
 10116f4:	303fa81e 	bne	r6,zero,1011598 <__gethex+0xcc>
 10116f8:	29400044 	addi	r5,r5,1
 10116fc:	28800003 	ldbu	r2,0(r5)
 1011700:	1445883a 	add	r2,r2,r17
 1011704:	10c00003 	ldbu	r3,0(r2)
 1011708:	1800ad26 	beq	r3,zero,10119c0 <__gethex+0x4f4>
 101170c:	2809883a 	mov	r4,r5
 1011710:	21000044 	addi	r4,r4,1
 1011714:	20800003 	ldbu	r2,0(r4)
 1011718:	1445883a 	add	r2,r2,r17
 101171c:	10c00003 	ldbu	r3,0(r2)
 1011720:	183ffb1e 	bne	r3,zero,1011710 <__gethex+0x244>
 1011724:	2145c83a 	sub	r2,r4,r5
 1011728:	1085883a 	add	r2,r2,r2
 101172c:	1085883a 	add	r2,r2,r2
 1011730:	00adc83a 	sub	r22,zero,r2
 1011734:	200b883a 	mov	r5,r4
 1011738:	003f9b06 	br	10115a8 <__gethex+0xdc>
 101173c:	29000043 	ldbu	r4,1(r5)
 1011740:	008040b4 	movhi	r2,258
 1011744:	108eaa04 	addi	r2,r2,15016
 1011748:	2c000044 	addi	r16,r5,1
 101174c:	2085883a 	add	r2,r4,r2
 1011750:	10c00003 	ldbu	r3,0(r2)
 1011754:	18000d1e 	bne	r3,zero,101178c <__gethex+0x2c0>
 1011758:	2825883a 	mov	r18,r5
 101175c:	02400044 	movi	r9,1
 1011760:	002d883a 	mov	r22,zero
 1011764:	003f9106 	br	10115ac <__gethex+0xe0>
 1011768:	0015883a 	mov	r10,zero
 101176c:	21000044 	addi	r4,r4,1
 1011770:	20c00003 	ldbu	r3,0(r4)
 1011774:	003fb506 	br	101164c <__gethex+0x180>
 1011778:	02800044 	movi	r10,1
 101177c:	003ffb06 	br	101176c <__gethex+0x2a0>
 1011780:	2821883a 	mov	r16,r5
 1011784:	002d883a 	mov	r22,zero
 1011788:	003f8806 	br	10115ac <__gethex+0xe0>
 101178c:	00800c04 	movi	r2,48
 1011790:	20800e1e 	bne	r4,r2,10117cc <__gethex+0x300>
 1011794:	2007883a 	mov	r3,r4
 1011798:	800b883a 	mov	r5,r16
 101179c:	29400044 	addi	r5,r5,1
 10117a0:	29000003 	ldbu	r4,0(r5)
 10117a4:	20803fcc 	andi	r2,r4,255
 10117a8:	10fffc26 	beq	r2,r3,101179c <__gethex+0x2d0>
 10117ac:	1445883a 	add	r2,r2,r17
 10117b0:	10c00003 	ldbu	r3,0(r2)
 10117b4:	1800071e 	bne	r3,zero,10117d4 <__gethex+0x308>
 10117b8:	02c00044 	movi	r11,1
 10117bc:	800d883a 	mov	r6,r16
 10117c0:	2825883a 	mov	r18,r5
 10117c4:	5813883a 	mov	r9,r11
 10117c8:	003f6706 	br	1011568 <__gethex+0x9c>
 10117cc:	81000003 	ldbu	r4,0(r16)
 10117d0:	800b883a 	mov	r5,r16
 10117d4:	800d883a 	mov	r6,r16
 10117d8:	2825883a 	mov	r18,r5
 10117dc:	02c00044 	movi	r11,1
 10117e0:	0013883a 	mov	r9,zero
 10117e4:	003f6006 	br	1011568 <__gethex+0x9c>
 10117e8:	8485c83a 	sub	r2,r16,r18
 10117ec:	10bfffc4 	addi	r2,r2,-1
 10117f0:	00c001c4 	movi	r3,7
 10117f4:	1880700e 	bge	r3,r2,10119b8 <__gethex+0x4ec>
 10117f8:	000b883a 	mov	r5,zero
 10117fc:	1005d07a 	srai	r2,r2,1
 1011800:	29400044 	addi	r5,r5,1
 1011804:	18bffd16 	blt	r3,r2,10117fc <__gethex+0x330>
 1011808:	a809883a 	mov	r4,r21
 101180c:	100d7100 	call	100d710 <_Balloc>
 1011810:	1027883a 	mov	r19,r2
 1011814:	10800504 	addi	r2,r2,20
 1011818:	d8800215 	stw	r2,8(sp)
 101181c:	9400522e 	bgeu	r18,r16,1011968 <__gethex+0x49c>
 1011820:	da000217 	ldw	r8,8(sp)
 1011824:	800b883a 	mov	r5,r16
 1011828:	000f883a 	mov	r7,zero
 101182c:	0009883a 	mov	r4,zero
 1011830:	02400b84 	movi	r9,46
 1011834:	02800804 	movi	r10,32
 1011838:	297fffc4 	addi	r5,r5,-1
 101183c:	28c00003 	ldbu	r3,0(r5)
 1011840:	1a400826 	beq	r3,r9,1011864 <__gethex+0x398>
 1011844:	380d883a 	mov	r6,r7
 1011848:	3a802726 	beq	r7,r10,10118e8 <__gethex+0x41c>
 101184c:	39c00104 	addi	r7,r7,4
 1011850:	1c47883a 	add	r3,r3,r17
 1011854:	18800003 	ldbu	r2,0(r3)
 1011858:	108003cc 	andi	r2,r2,15
 101185c:	1184983a 	sll	r2,r2,r6
 1011860:	2088b03a 	or	r4,r4,r2
 1011864:	917ff436 	bltu	r18,r5,1011838 <__gethex+0x36c>
 1011868:	d8c00217 	ldw	r3,8(sp)
 101186c:	40800104 	addi	r2,r8,4
 1011870:	41000015 	stw	r4,0(r8)
 1011874:	10c5c83a 	sub	r2,r2,r3
 1011878:	1021d0ba 	srai	r16,r2,2
 101187c:	9c000415 	stw	r16,16(r19)
 1011880:	100d1b80 	call	100d1b8 <__hi0bits>
 1011884:	8006917a 	slli	r3,r16,5
 1011888:	a5c00017 	ldw	r23,0(r20)
 101188c:	1885c83a 	sub	r2,r3,r2
 1011890:	b8801c16 	blt	r23,r2,1011904 <__gethex+0x438>
 1011894:	15c00a16 	blt	r2,r23,10118c0 <__gethex+0x3f4>
 1011898:	0039883a 	mov	fp,zero
 101189c:	a0800217 	ldw	r2,8(r20)
 10118a0:	1580340e 	bge	r2,r22,1011974 <__gethex+0x4a8>
 10118a4:	a809883a 	mov	r4,r21
 10118a8:	980b883a 	mov	r5,r19
 10118ac:	100d1900 	call	100d190 <_Bfree>
 10118b0:	d8c00d17 	ldw	r3,52(sp)
 10118b4:	048028c4 	movi	r18,163
 10118b8:	18000015 	stw	zero,0(r3)
 10118bc:	003f4606 	br	10115d8 <__gethex+0x10c>
 10118c0:	b8a1c83a 	sub	r16,r23,r2
 10118c4:	980b883a 	mov	r5,r19
 10118c8:	a809883a 	mov	r4,r21
 10118cc:	800d883a 	mov	r6,r16
 10118d0:	100dad40 	call	100dad4 <__lshift>
 10118d4:	1027883a 	mov	r19,r2
 10118d8:	b42dc83a 	sub	r22,r22,r16
 10118dc:	10800504 	addi	r2,r2,20
 10118e0:	d8800215 	stw	r2,8(sp)
 10118e4:	003fec06 	br	1011898 <__gethex+0x3cc>
 10118e8:	41000015 	stw	r4,0(r8)
 10118ec:	28c00003 	ldbu	r3,0(r5)
 10118f0:	01c00104 	movi	r7,4
 10118f4:	000d883a 	mov	r6,zero
 10118f8:	41d1883a 	add	r8,r8,r7
 10118fc:	0009883a 	mov	r4,zero
 1011900:	003fd306 	br	1011850 <__gethex+0x384>
 1011904:	15e1c83a 	sub	r16,r2,r23
 1011908:	9809883a 	mov	r4,r19
 101190c:	800b883a 	mov	r5,r16
 1011910:	100d6880 	call	100d688 <__any_on>
 1011914:	1000061e 	bne	r2,zero,1011930 <__gethex+0x464>
 1011918:	0039883a 	mov	fp,zero
 101191c:	9809883a 	mov	r4,r19
 1011920:	800b883a 	mov	r5,r16
 1011924:	101141c0 	call	101141c <rshift>
 1011928:	b42d883a 	add	r22,r22,r16
 101192c:	003fdb06 	br	101189c <__gethex+0x3d0>
 1011930:	817fffc4 	addi	r5,r16,-1
 1011934:	2805d17a 	srai	r2,r5,5
 1011938:	d8c00217 	ldw	r3,8(sp)
 101193c:	290007cc 	andi	r4,r5,31
 1011940:	1085883a 	add	r2,r2,r2
 1011944:	1085883a 	add	r2,r2,r2
 1011948:	01800044 	movi	r6,1
 101194c:	10c5883a 	add	r2,r2,r3
 1011950:	3108983a 	sll	r4,r6,r4
 1011954:	10c00017 	ldw	r3,0(r2)
 1011958:	20c8703a 	and	r4,r4,r3
 101195c:	20001a1e 	bne	r4,zero,10119c8 <__gethex+0x4fc>
 1011960:	3039883a 	mov	fp,r6
 1011964:	003fed06 	br	101191c <__gethex+0x450>
 1011968:	1011883a 	mov	r8,r2
 101196c:	0009883a 	mov	r4,zero
 1011970:	003fbd06 	br	1011868 <__gethex+0x39c>
 1011974:	a1000117 	ldw	r4,4(r20)
 1011978:	b1001a16 	blt	r22,r4,10119e4 <__gethex+0x518>
 101197c:	04800044 	movi	r18,1
 1011980:	e0000826 	beq	fp,zero,10119a4 <__gethex+0x4d8>
 1011984:	a1000317 	ldw	r4,12(r20)
 1011988:	00800084 	movi	r2,2
 101198c:	20809426 	beq	r4,r2,1011be0 <__gethex+0x714>
 1011990:	008000c4 	movi	r2,3
 1011994:	20805826 	beq	r4,r2,1011af8 <__gethex+0x62c>
 1011998:	00800044 	movi	r2,1
 101199c:	20803f26 	beq	r4,r2,1011a9c <__gethex+0x5d0>
 10119a0:	94800414 	ori	r18,r18,16
 10119a4:	d8800d17 	ldw	r2,52(sp)
 10119a8:	d8c00117 	ldw	r3,4(sp)
 10119ac:	14c00015 	stw	r19,0(r2)
 10119b0:	1d800015 	stw	r22,0(r3)
 10119b4:	003f0806 	br	10115d8 <__gethex+0x10c>
 10119b8:	000b883a 	mov	r5,zero
 10119bc:	003f9206 	br	1011808 <__gethex+0x33c>
 10119c0:	002d883a 	mov	r22,zero
 10119c4:	003ef806 	br	10115a8 <__gethex+0xdc>
 10119c8:	3140160e 	bge	r6,r5,1011a24 <__gethex+0x558>
 10119cc:	9809883a 	mov	r4,r19
 10119d0:	817fff84 	addi	r5,r16,-2
 10119d4:	100d6880 	call	100d688 <__any_on>
 10119d8:	10001226 	beq	r2,zero,1011a24 <__gethex+0x558>
 10119dc:	070000c4 	movi	fp,3
 10119e0:	003fce06 	br	101191c <__gethex+0x450>
 10119e4:	25a3c83a 	sub	r17,r4,r22
 10119e8:	8dc01016 	blt	r17,r23,1011a2c <__gethex+0x560>
 10119ec:	a0c00317 	ldw	r3,12(r20)
 10119f0:	00800084 	movi	r2,2
 10119f4:	18809326 	beq	r3,r2,1011c44 <__gethex+0x778>
 10119f8:	008000c4 	movi	r2,3
 10119fc:	18808e26 	beq	r3,r2,1011c38 <__gethex+0x76c>
 1011a00:	00800044 	movi	r2,1
 1011a04:	18807b26 	beq	r3,r2,1011bf4 <__gethex+0x728>
 1011a08:	a809883a 	mov	r4,r21
 1011a0c:	980b883a 	mov	r5,r19
 1011a10:	100d1900 	call	100d190 <_Bfree>
 1011a14:	d8c00d17 	ldw	r3,52(sp)
 1011a18:	04801404 	movi	r18,80
 1011a1c:	18000015 	stw	zero,0(r3)
 1011a20:	003eed06 	br	10115d8 <__gethex+0x10c>
 1011a24:	07000084 	movi	fp,2
 1011a28:	003fbc06 	br	101191c <__gethex+0x450>
 1011a2c:	8c3fffc4 	addi	r16,r17,-1
 1011a30:	e0001426 	beq	fp,zero,1011a84 <__gethex+0x5b8>
 1011a34:	07000044 	movi	fp,1
 1011a38:	8005d17a 	srai	r2,r16,5
 1011a3c:	d8c00217 	ldw	r3,8(sp)
 1011a40:	814007cc 	andi	r5,r16,31
 1011a44:	1085883a 	add	r2,r2,r2
 1011a48:	1085883a 	add	r2,r2,r2
 1011a4c:	10c5883a 	add	r2,r2,r3
 1011a50:	00c00044 	movi	r3,1
 1011a54:	1946983a 	sll	r3,r3,r5
 1011a58:	11000017 	ldw	r4,0(r2)
 1011a5c:	1906703a 	and	r3,r3,r4
 1011a60:	18000126 	beq	r3,zero,1011a68 <__gethex+0x59c>
 1011a64:	e7000094 	ori	fp,fp,2
 1011a68:	880b883a 	mov	r5,r17
 1011a6c:	9809883a 	mov	r4,r19
 1011a70:	101141c0 	call	101141c <rshift>
 1011a74:	a5800117 	ldw	r22,4(r20)
 1011a78:	bc6fc83a 	sub	r23,r23,r17
 1011a7c:	04800084 	movi	r18,2
 1011a80:	003fbf06 	br	1011980 <__gethex+0x4b4>
 1011a84:	043fec0e 	bge	zero,r16,1011a38 <__gethex+0x56c>
 1011a88:	9809883a 	mov	r4,r19
 1011a8c:	800b883a 	mov	r5,r16
 1011a90:	100d6880 	call	100d688 <__any_on>
 1011a94:	1039883a 	mov	fp,r2
 1011a98:	003fe706 	br	1011a38 <__gethex+0x56c>
 1011a9c:	e080008c 	andi	r2,fp,2
 1011aa0:	103fbf26 	beq	r2,zero,10119a0 <__gethex+0x4d4>
 1011aa4:	d8c00217 	ldw	r3,8(sp)
 1011aa8:	18800017 	ldw	r2,0(r3)
 1011aac:	e084b03a 	or	r2,fp,r2
 1011ab0:	1104703a 	and	r2,r2,r4
 1011ab4:	103fba26 	beq	r2,zero,10119a0 <__gethex+0x4d4>
 1011ab8:	9c000417 	ldw	r16,16(r19)
 1011abc:	d8c00217 	ldw	r3,8(sp)
 1011ac0:	017fffc4 	movi	r5,-1
 1011ac4:	8405883a 	add	r2,r16,r16
 1011ac8:	10b9883a 	add	fp,r2,r2
 1011acc:	1f09883a 	add	r4,r3,fp
 1011ad0:	dc000015 	stw	r16,0(sp)
 1011ad4:	00000306 	br	1011ae4 <__gethex+0x618>
 1011ad8:	18000015 	stw	zero,0(r3)
 1011adc:	18c00104 	addi	r3,r3,4
 1011ae0:	1900082e 	bgeu	r3,r4,1011b04 <__gethex+0x638>
 1011ae4:	18800017 	ldw	r2,0(r3)
 1011ae8:	117ffb26 	beq	r2,r5,1011ad8 <__gethex+0x60c>
 1011aec:	10800044 	addi	r2,r2,1
 1011af0:	18800015 	stw	r2,0(r3)
 1011af4:	00001f06 	br	1011b74 <__gethex+0x6a8>
 1011af8:	d8800e17 	ldw	r2,56(sp)
 1011afc:	103fa826 	beq	r2,zero,10119a0 <__gethex+0x4d4>
 1011b00:	003fed06 	br	1011ab8 <__gethex+0x5ec>
 1011b04:	98800217 	ldw	r2,8(r19)
 1011b08:	80801316 	blt	r16,r2,1011b58 <__gethex+0x68c>
 1011b0c:	99400117 	ldw	r5,4(r19)
 1011b10:	a809883a 	mov	r4,r21
 1011b14:	29400044 	addi	r5,r5,1
 1011b18:	100d7100 	call	100d710 <_Balloc>
 1011b1c:	99800417 	ldw	r6,16(r19)
 1011b20:	99400304 	addi	r5,r19,12
 1011b24:	11000304 	addi	r4,r2,12
 1011b28:	318d883a 	add	r6,r6,r6
 1011b2c:	318d883a 	add	r6,r6,r6
 1011b30:	31800204 	addi	r6,r6,8
 1011b34:	1023883a 	mov	r17,r2
 1011b38:	100cf780 	call	100cf78 <memcpy>
 1011b3c:	980b883a 	mov	r5,r19
 1011b40:	a809883a 	mov	r4,r21
 1011b44:	100d1900 	call	100d190 <_Bfree>
 1011b48:	8c000417 	ldw	r16,16(r17)
 1011b4c:	88800504 	addi	r2,r17,20
 1011b50:	8827883a 	mov	r19,r17
 1011b54:	d8800215 	stw	r2,8(sp)
 1011b58:	8405883a 	add	r2,r16,r16
 1011b5c:	1085883a 	add	r2,r2,r2
 1011b60:	14c5883a 	add	r2,r2,r19
 1011b64:	84000044 	addi	r16,r16,1
 1011b68:	00c00044 	movi	r3,1
 1011b6c:	10c00515 	stw	r3,20(r2)
 1011b70:	9c000415 	stw	r16,16(r19)
 1011b74:	00800084 	movi	r2,2
 1011b78:	90801426 	beq	r18,r2,1011bcc <__gethex+0x700>
 1011b7c:	d8800017 	ldw	r2,0(sp)
 1011b80:	14000b16 	blt	r2,r16,1011bb0 <__gethex+0x6e4>
 1011b84:	bc0007cc 	andi	r16,r23,31
 1011b88:	8000021e 	bne	r16,zero,1011b94 <__gethex+0x6c8>
 1011b8c:	94800814 	ori	r18,r18,32
 1011b90:	003f8406 	br	10119a4 <__gethex+0x4d8>
 1011b94:	d8c00217 	ldw	r3,8(sp)
 1011b98:	1f05883a 	add	r2,r3,fp
 1011b9c:	113fff17 	ldw	r4,-4(r2)
 1011ba0:	100d1b80 	call	100d1b8 <__hi0bits>
 1011ba4:	00c00804 	movi	r3,32
 1011ba8:	1c07c83a 	sub	r3,r3,r16
 1011bac:	10fff70e 	bge	r2,r3,1011b8c <__gethex+0x6c0>
 1011bb0:	9809883a 	mov	r4,r19
 1011bb4:	01400044 	movi	r5,1
 1011bb8:	101141c0 	call	101141c <rshift>
 1011bbc:	a0800217 	ldw	r2,8(r20)
 1011bc0:	b5800044 	addi	r22,r22,1
 1011bc4:	15bf3716 	blt	r2,r22,10118a4 <__gethex+0x3d8>
 1011bc8:	003ff006 	br	1011b8c <__gethex+0x6c0>
 1011bcc:	a0800017 	ldw	r2,0(r20)
 1011bd0:	10bfffc4 	addi	r2,r2,-1
 1011bd4:	b8801e26 	beq	r23,r2,1011c50 <__gethex+0x784>
 1011bd8:	04800884 	movi	r18,34
 1011bdc:	003f7106 	br	10119a4 <__gethex+0x4d8>
 1011be0:	d8c00e17 	ldw	r3,56(sp)
 1011be4:	00800044 	movi	r2,1
 1011be8:	10c5c83a 	sub	r2,r2,r3
 1011bec:	103f6c26 	beq	r2,zero,10119a0 <__gethex+0x4d4>
 1011bf0:	003fb106 	br	1011ab8 <__gethex+0x5ec>
 1011bf4:	bc7f841e 	bne	r23,r17,1011a08 <__gethex+0x53c>
 1011bf8:	1dc0050e 	bge	r3,r23,1011c10 <__gethex+0x744>
 1011bfc:	b8cbc83a 	sub	r5,r23,r3
 1011c00:	9809883a 	mov	r4,r19
 1011c04:	100d6880 	call	100d688 <__any_on>
 1011c08:	103f7f26 	beq	r2,zero,1011a08 <__gethex+0x53c>
 1011c0c:	a1000117 	ldw	r4,4(r20)
 1011c10:	d8800117 	ldw	r2,4(sp)
 1011c14:	d8c00217 	ldw	r3,8(sp)
 1011c18:	04000044 	movi	r16,1
 1011c1c:	11000015 	stw	r4,0(r2)
 1011c20:	d8800d17 	ldw	r2,52(sp)
 1011c24:	04801884 	movi	r18,98
 1011c28:	1c000015 	stw	r16,0(r3)
 1011c2c:	14c00015 	stw	r19,0(r2)
 1011c30:	9c000415 	stw	r16,16(r19)
 1011c34:	003e6806 	br	10115d8 <__gethex+0x10c>
 1011c38:	d8c00e17 	ldw	r3,56(sp)
 1011c3c:	183f7226 	beq	r3,zero,1011a08 <__gethex+0x53c>
 1011c40:	003ff306 	br	1011c10 <__gethex+0x744>
 1011c44:	d8800e17 	ldw	r2,56(sp)
 1011c48:	103ff126 	beq	r2,zero,1011c10 <__gethex+0x744>
 1011c4c:	003f6e06 	br	1011a08 <__gethex+0x53c>
 1011c50:	b805d17a 	srai	r2,r23,5
 1011c54:	d8c00217 	ldw	r3,8(sp)
 1011c58:	b94007cc 	andi	r5,r23,31
 1011c5c:	1085883a 	add	r2,r2,r2
 1011c60:	1085883a 	add	r2,r2,r2
 1011c64:	10c5883a 	add	r2,r2,r3
 1011c68:	00c00044 	movi	r3,1
 1011c6c:	1946983a 	sll	r3,r3,r5
 1011c70:	11000017 	ldw	r4,0(r2)
 1011c74:	1906703a 	and	r3,r3,r4
 1011c78:	183fd726 	beq	r3,zero,1011bd8 <__gethex+0x70c>
 1011c7c:	04800844 	movi	r18,33
 1011c80:	003f4806 	br	10119a4 <__gethex+0x4d8>

01011c84 <L_shift>:
 1011c84:	00800204 	movi	r2,8
 1011c88:	1185c83a 	sub	r2,r2,r6
 1011c8c:	1085883a 	add	r2,r2,r2
 1011c90:	21c00017 	ldw	r7,0(r4)
 1011c94:	1093883a 	add	r9,r2,r2
 1011c98:	00800804 	movi	r2,32
 1011c9c:	200d883a 	mov	r6,r4
 1011ca0:	1251c83a 	sub	r8,r2,r9
 1011ca4:	31800104 	addi	r6,r6,4
 1011ca8:	3805883a 	mov	r2,r7
 1011cac:	31c00017 	ldw	r7,0(r6)
 1011cb0:	3a08983a 	sll	r4,r7,r8
 1011cb4:	3a46d83a 	srl	r3,r7,r9
 1011cb8:	1104b03a 	or	r2,r2,r4
 1011cbc:	180f883a 	mov	r7,r3
 1011cc0:	30bfff15 	stw	r2,-4(r6)
 1011cc4:	30c00015 	stw	r3,0(r6)
 1011cc8:	317ff636 	bltu	r6,r5,1011ca4 <L_shift+0x20>
 1011ccc:	f800283a 	ret

01011cd0 <__hexnan>:
 1011cd0:	defff404 	addi	sp,sp,-48
 1011cd4:	dd800815 	stw	r22,32(sp)
 1011cd8:	058040b4 	movhi	r22,258
 1011cdc:	b58eaa04 	addi	r22,r22,15016
 1011ce0:	b0800c03 	ldbu	r2,48(r22)
 1011ce4:	dcc00515 	stw	r19,20(sp)
 1011ce8:	dc000215 	stw	r16,8(sp)
 1011cec:	dfc00b15 	stw	ra,44(sp)
 1011cf0:	df000a15 	stw	fp,40(sp)
 1011cf4:	ddc00915 	stw	r23,36(sp)
 1011cf8:	dd400715 	stw	r21,28(sp)
 1011cfc:	dd000615 	stw	r20,24(sp)
 1011d00:	dc800415 	stw	r18,16(sp)
 1011d04:	dc400315 	stw	r17,12(sp)
 1011d08:	d9000115 	stw	r4,4(sp)
 1011d0c:	2821883a 	mov	r16,r5
 1011d10:	3027883a 	mov	r19,r6
 1011d14:	10007426 	beq	r2,zero,1011ee8 <__hexnan+0x218>
 1011d18:	80c00017 	ldw	r3,0(r16)
 1011d1c:	1805d17a 	srai	r2,r3,5
 1011d20:	18c007cc 	andi	r3,r3,31
 1011d24:	1839003a 	cmpeq	fp,r3,zero
 1011d28:	1085883a 	add	r2,r2,r2
 1011d2c:	1085883a 	add	r2,r2,r2
 1011d30:	d8c00015 	stw	r3,0(sp)
 1011d34:	14c5883a 	add	r2,r2,r19
 1011d38:	e000011e 	bne	fp,zero,1011d40 <__hexnan+0x70>
 1011d3c:	10800104 	addi	r2,r2,4
 1011d40:	d8c00117 	ldw	r3,4(sp)
 1011d44:	153fff04 	addi	r20,r2,-4
 1011d48:	a021883a 	mov	r16,r20
 1011d4c:	1c400017 	ldw	r17,0(r3)
 1011d50:	a02b883a 	mov	r21,r20
 1011d54:	0025883a 	mov	r18,zero
 1011d58:	002f883a 	mov	r23,zero
 1011d5c:	000d883a 	mov	r6,zero
 1011d60:	103fff15 	stw	zero,-4(r2)
 1011d64:	8c400044 	addi	r17,r17,1
 1011d68:	89000003 	ldbu	r4,0(r17)
 1011d6c:	20000e26 	beq	r4,zero,1011da8 <__hexnan+0xd8>
 1011d70:	2585883a 	add	r2,r4,r22
 1011d74:	10c00003 	ldbu	r3,0(r2)
 1011d78:	18002e1e 	bne	r3,zero,1011e34 <__hexnan+0x164>
 1011d7c:	00800804 	movi	r2,32
 1011d80:	11005536 	bltu	r2,r4,1011ed8 <__hexnan+0x208>
 1011d84:	bcbff70e 	bge	r23,r18,1011d64 <__hexnan+0x94>
 1011d88:	8540022e 	bgeu	r16,r21,1011d94 <__hexnan+0xc4>
 1011d8c:	008001c4 	movi	r2,7
 1011d90:	11803c0e 	bge	r2,r6,1011e84 <__hexnan+0x1b4>
 1011d94:	9c003536 	bltu	r19,r16,1011e6c <__hexnan+0x19c>
 1011d98:	8c400044 	addi	r17,r17,1
 1011d9c:	89000003 	ldbu	r4,0(r17)
 1011da0:	01800204 	movi	r6,8
 1011da4:	203ff21e 	bne	r4,zero,1011d70 <__hexnan+0xa0>
 1011da8:	90004d26 	beq	r18,zero,1011ee0 <__hexnan+0x210>
 1011dac:	85404336 	bltu	r16,r21,1011ebc <__hexnan+0x1ec>
 1011db0:	9c00382e 	bgeu	r19,r16,1011e94 <__hexnan+0x1c4>
 1011db4:	9807883a 	mov	r3,r19
 1011db8:	80800017 	ldw	r2,0(r16)
 1011dbc:	84000104 	addi	r16,r16,4
 1011dc0:	18800015 	stw	r2,0(r3)
 1011dc4:	18c00104 	addi	r3,r3,4
 1011dc8:	a43ffb2e 	bgeu	r20,r16,1011db8 <__hexnan+0xe8>
 1011dcc:	18000015 	stw	zero,0(r3)
 1011dd0:	18c00104 	addi	r3,r3,4
 1011dd4:	a0fffd2e 	bgeu	r20,r3,1011dcc <__hexnan+0xfc>
 1011dd8:	a0800017 	ldw	r2,0(r20)
 1011ddc:	1000071e 	bne	r2,zero,1011dfc <__hexnan+0x12c>
 1011de0:	9d004326 	beq	r19,r20,1011ef0 <__hexnan+0x220>
 1011de4:	a007883a 	mov	r3,r20
 1011de8:	00000106 	br	1011df0 <__hexnan+0x120>
 1011dec:	98c04026 	beq	r19,r3,1011ef0 <__hexnan+0x220>
 1011df0:	18ffff04 	addi	r3,r3,-4
 1011df4:	18800017 	ldw	r2,0(r3)
 1011df8:	103ffc26 	beq	r2,zero,1011dec <__hexnan+0x11c>
 1011dfc:	00c00144 	movi	r3,5
 1011e00:	1805883a 	mov	r2,r3
 1011e04:	dfc00b17 	ldw	ra,44(sp)
 1011e08:	df000a17 	ldw	fp,40(sp)
 1011e0c:	ddc00917 	ldw	r23,36(sp)
 1011e10:	dd800817 	ldw	r22,32(sp)
 1011e14:	dd400717 	ldw	r21,28(sp)
 1011e18:	dd000617 	ldw	r20,24(sp)
 1011e1c:	dcc00517 	ldw	r19,20(sp)
 1011e20:	dc800417 	ldw	r18,16(sp)
 1011e24:	dc400317 	ldw	r17,12(sp)
 1011e28:	dc000217 	ldw	r16,8(sp)
 1011e2c:	dec00c04 	addi	sp,sp,48
 1011e30:	f800283a 	ret
 1011e34:	31800044 	addi	r6,r6,1
 1011e38:	00800204 	movi	r2,8
 1011e3c:	94800044 	addi	r18,r18,1
 1011e40:	1180040e 	bge	r2,r6,1011e54 <__hexnan+0x184>
 1011e44:	9c3fc72e 	bgeu	r19,r16,1011d64 <__hexnan+0x94>
 1011e48:	843fff04 	addi	r16,r16,-4
 1011e4c:	80000015 	stw	zero,0(r16)
 1011e50:	01800044 	movi	r6,1
 1011e54:	80800017 	ldw	r2,0(r16)
 1011e58:	18c003cc 	andi	r3,r3,15
 1011e5c:	1004913a 	slli	r2,r2,4
 1011e60:	10c4b03a 	or	r2,r2,r3
 1011e64:	80800015 	stw	r2,0(r16)
 1011e68:	003fbe06 	br	1011d64 <__hexnan+0x94>
 1011e6c:	843fff04 	addi	r16,r16,-4
 1011e70:	802b883a 	mov	r21,r16
 1011e74:	902f883a 	mov	r23,r18
 1011e78:	000d883a 	mov	r6,zero
 1011e7c:	80000015 	stw	zero,0(r16)
 1011e80:	003fb806 	br	1011d64 <__hexnan+0x94>
 1011e84:	8009883a 	mov	r4,r16
 1011e88:	a80b883a 	mov	r5,r21
 1011e8c:	1011c840 	call	1011c84 <L_shift>
 1011e90:	003fc006 	br	1011d94 <__hexnan+0xc4>
 1011e94:	e03fd01e 	bne	fp,zero,1011dd8 <__hexnan+0x108>
 1011e98:	d8c00017 	ldw	r3,0(sp)
 1011e9c:	00800804 	movi	r2,32
 1011ea0:	10c5c83a 	sub	r2,r2,r3
 1011ea4:	00ffffc4 	movi	r3,-1
 1011ea8:	1886d83a 	srl	r3,r3,r2
 1011eac:	a0800017 	ldw	r2,0(r20)
 1011eb0:	10c4703a 	and	r2,r2,r3
 1011eb4:	a0800015 	stw	r2,0(r20)
 1011eb8:	003fc806 	br	1011ddc <__hexnan+0x10c>
 1011ebc:	008001c4 	movi	r2,7
 1011ec0:	11bfbb16 	blt	r2,r6,1011db0 <__hexnan+0xe0>
 1011ec4:	a80b883a 	mov	r5,r21
 1011ec8:	8009883a 	mov	r4,r16
 1011ecc:	1011c840 	call	1011c84 <L_shift>
 1011ed0:	9c3ff02e 	bgeu	r19,r16,1011e94 <__hexnan+0x1c4>
 1011ed4:	003fb706 	br	1011db4 <__hexnan+0xe4>
 1011ed8:	00800a44 	movi	r2,41
 1011edc:	20800826 	beq	r4,r2,1011f00 <__hexnan+0x230>
 1011ee0:	00c00104 	movi	r3,4
 1011ee4:	003fc606 	br	1011e00 <__hexnan+0x130>
 1011ee8:	10113b40 	call	10113b4 <__hexdig_init>
 1011eec:	003f8a06 	br	1011d18 <__hexnan+0x48>
 1011ef0:	00800044 	movi	r2,1
 1011ef4:	00c00144 	movi	r3,5
 1011ef8:	98800015 	stw	r2,0(r19)
 1011efc:	003fc006 	br	1011e00 <__hexnan+0x130>
 1011f00:	903ff726 	beq	r18,zero,1011ee0 <__hexnan+0x210>
 1011f04:	d8c00117 	ldw	r3,4(sp)
 1011f08:	88800044 	addi	r2,r17,1
 1011f0c:	18800015 	stw	r2,0(r3)
 1011f10:	857fa72e 	bgeu	r16,r21,1011db0 <__hexnan+0xe0>
 1011f14:	003fe906 	br	1011ebc <__hexnan+0x1ec>

01011f18 <_isatty_r>:
 1011f18:	defffd04 	addi	sp,sp,-12
 1011f1c:	dc000015 	stw	r16,0(sp)
 1011f20:	040040b4 	movhi	r16,258
 1011f24:	840e8304 	addi	r16,r16,14860
 1011f28:	dc400115 	stw	r17,4(sp)
 1011f2c:	80000015 	stw	zero,0(r16)
 1011f30:	2023883a 	mov	r17,r4
 1011f34:	2809883a 	mov	r4,r5
 1011f38:	dfc00215 	stw	ra,8(sp)
 1011f3c:	10138fc0 	call	10138fc <isatty>
 1011f40:	1007883a 	mov	r3,r2
 1011f44:	00bfffc4 	movi	r2,-1
 1011f48:	18800626 	beq	r3,r2,1011f64 <_isatty_r+0x4c>
 1011f4c:	1805883a 	mov	r2,r3
 1011f50:	dfc00217 	ldw	ra,8(sp)
 1011f54:	dc400117 	ldw	r17,4(sp)
 1011f58:	dc000017 	ldw	r16,0(sp)
 1011f5c:	dec00304 	addi	sp,sp,12
 1011f60:	f800283a 	ret
 1011f64:	80800017 	ldw	r2,0(r16)
 1011f68:	103ff826 	beq	r2,zero,1011f4c <_isatty_r+0x34>
 1011f6c:	88800015 	stw	r2,0(r17)
 1011f70:	1805883a 	mov	r2,r3
 1011f74:	dfc00217 	ldw	ra,8(sp)
 1011f78:	dc400117 	ldw	r17,4(sp)
 1011f7c:	dc000017 	ldw	r16,0(sp)
 1011f80:	dec00304 	addi	sp,sp,12
 1011f84:	f800283a 	ret

01011f88 <_lseek_r>:
 1011f88:	defffd04 	addi	sp,sp,-12
 1011f8c:	dc000015 	stw	r16,0(sp)
 1011f90:	040040b4 	movhi	r16,258
 1011f94:	840e8304 	addi	r16,r16,14860
 1011f98:	dc400115 	stw	r17,4(sp)
 1011f9c:	80000015 	stw	zero,0(r16)
 1011fa0:	2023883a 	mov	r17,r4
 1011fa4:	2809883a 	mov	r4,r5
 1011fa8:	300b883a 	mov	r5,r6
 1011fac:	380d883a 	mov	r6,r7
 1011fb0:	dfc00215 	stw	ra,8(sp)
 1011fb4:	1013b080 	call	1013b08 <lseek>
 1011fb8:	1007883a 	mov	r3,r2
 1011fbc:	00bfffc4 	movi	r2,-1
 1011fc0:	18800626 	beq	r3,r2,1011fdc <_lseek_r+0x54>
 1011fc4:	1805883a 	mov	r2,r3
 1011fc8:	dfc00217 	ldw	ra,8(sp)
 1011fcc:	dc400117 	ldw	r17,4(sp)
 1011fd0:	dc000017 	ldw	r16,0(sp)
 1011fd4:	dec00304 	addi	sp,sp,12
 1011fd8:	f800283a 	ret
 1011fdc:	80800017 	ldw	r2,0(r16)
 1011fe0:	103ff826 	beq	r2,zero,1011fc4 <_lseek_r+0x3c>
 1011fe4:	88800015 	stw	r2,0(r17)
 1011fe8:	1805883a 	mov	r2,r3
 1011fec:	dfc00217 	ldw	ra,8(sp)
 1011ff0:	dc400117 	ldw	r17,4(sp)
 1011ff4:	dc000017 	ldw	r16,0(sp)
 1011ff8:	dec00304 	addi	sp,sp,12
 1011ffc:	f800283a 	ret

01012000 <_read_r>:
 1012000:	defffd04 	addi	sp,sp,-12
 1012004:	dc000015 	stw	r16,0(sp)
 1012008:	040040b4 	movhi	r16,258
 101200c:	840e8304 	addi	r16,r16,14860
 1012010:	dc400115 	stw	r17,4(sp)
 1012014:	80000015 	stw	zero,0(r16)
 1012018:	2023883a 	mov	r17,r4
 101201c:	2809883a 	mov	r4,r5
 1012020:	300b883a 	mov	r5,r6
 1012024:	380d883a 	mov	r6,r7
 1012028:	dfc00215 	stw	ra,8(sp)
 101202c:	1013d040 	call	1013d04 <read>
 1012030:	1007883a 	mov	r3,r2
 1012034:	00bfffc4 	movi	r2,-1
 1012038:	18800626 	beq	r3,r2,1012054 <_read_r+0x54>
 101203c:	1805883a 	mov	r2,r3
 1012040:	dfc00217 	ldw	ra,8(sp)
 1012044:	dc400117 	ldw	r17,4(sp)
 1012048:	dc000017 	ldw	r16,0(sp)
 101204c:	dec00304 	addi	sp,sp,12
 1012050:	f800283a 	ret
 1012054:	80800017 	ldw	r2,0(r16)
 1012058:	103ff826 	beq	r2,zero,101203c <_read_r+0x3c>
 101205c:	88800015 	stw	r2,0(r17)
 1012060:	1805883a 	mov	r2,r3
 1012064:	dfc00217 	ldw	ra,8(sp)
 1012068:	dc400117 	ldw	r17,4(sp)
 101206c:	dc000017 	ldw	r16,0(sp)
 1012070:	dec00304 	addi	sp,sp,12
 1012074:	f800283a 	ret

01012078 <__fixunsdfsi>:
 1012078:	defffb04 	addi	sp,sp,-20
 101207c:	dc400115 	stw	r17,4(sp)
 1012080:	dc000015 	stw	r16,0(sp)
 1012084:	04507834 	movhi	r17,16864
 1012088:	0021883a 	mov	r16,zero
 101208c:	800d883a 	mov	r6,r16
 1012090:	880f883a 	mov	r7,r17
 1012094:	dcc00315 	stw	r19,12(sp)
 1012098:	dc800215 	stw	r18,8(sp)
 101209c:	2827883a 	mov	r19,r5
 10120a0:	2025883a 	mov	r18,r4
 10120a4:	dfc00415 	stw	ra,16(sp)
 10120a8:	10053dc0 	call	10053dc <__gedf2>
 10120ac:	000d883a 	mov	r6,zero
 10120b0:	880f883a 	mov	r7,r17
 10120b4:	980b883a 	mov	r5,r19
 10120b8:	9009883a 	mov	r4,r18
 10120bc:	10000d16 	blt	r2,zero,10120f4 <__fixunsdfsi+0x7c>
 10120c0:	1004b340 	call	1004b34 <__subdf3>
 10120c4:	180b883a 	mov	r5,r3
 10120c8:	1009883a 	mov	r4,r2
 10120cc:	100555c0 	call	100555c <__fixdfsi>
 10120d0:	00e00034 	movhi	r3,32768
 10120d4:	10c5883a 	add	r2,r2,r3
 10120d8:	dfc00417 	ldw	ra,16(sp)
 10120dc:	dcc00317 	ldw	r19,12(sp)
 10120e0:	dc800217 	ldw	r18,8(sp)
 10120e4:	dc400117 	ldw	r17,4(sp)
 10120e8:	dc000017 	ldw	r16,0(sp)
 10120ec:	dec00504 	addi	sp,sp,20
 10120f0:	f800283a 	ret
 10120f4:	980b883a 	mov	r5,r19
 10120f8:	9009883a 	mov	r4,r18
 10120fc:	100555c0 	call	100555c <__fixdfsi>
 1012100:	dfc00417 	ldw	ra,16(sp)
 1012104:	dcc00317 	ldw	r19,12(sp)
 1012108:	dc800217 	ldw	r18,8(sp)
 101210c:	dc400117 	ldw	r17,4(sp)
 1012110:	dc000017 	ldw	r16,0(sp)
 1012114:	dec00504 	addi	sp,sp,20
 1012118:	f800283a 	ret

0101211c <__udivdi3>:
 101211c:	defff004 	addi	sp,sp,-64
 1012120:	2005883a 	mov	r2,r4
 1012124:	3011883a 	mov	r8,r6
 1012128:	df000e15 	stw	fp,56(sp)
 101212c:	dd000a15 	stw	r20,40(sp)
 1012130:	dc000615 	stw	r16,24(sp)
 1012134:	dfc00f15 	stw	ra,60(sp)
 1012138:	ddc00d15 	stw	r23,52(sp)
 101213c:	dd800c15 	stw	r22,48(sp)
 1012140:	dd400b15 	stw	r21,44(sp)
 1012144:	dcc00915 	stw	r19,36(sp)
 1012148:	dc800815 	stw	r18,32(sp)
 101214c:	dc400715 	stw	r17,28(sp)
 1012150:	4021883a 	mov	r16,r8
 1012154:	1039883a 	mov	fp,r2
 1012158:	2829883a 	mov	r20,r5
 101215c:	38003b1e 	bne	r7,zero,101224c <__udivdi3+0x130>
 1012160:	2a005c36 	bltu	r5,r8,10122d4 <__udivdi3+0x1b8>
 1012164:	4000a626 	beq	r8,zero,1012400 <__udivdi3+0x2e4>
 1012168:	00bfffd4 	movui	r2,65535
 101216c:	14009e36 	bltu	r2,r16,10123e8 <__udivdi3+0x2cc>
 1012170:	00803fc4 	movi	r2,255
 1012174:	14013d36 	bltu	r2,r16,101266c <__udivdi3+0x550>
 1012178:	000b883a 	mov	r5,zero
 101217c:	0005883a 	mov	r2,zero
 1012180:	8084d83a 	srl	r2,r16,r2
 1012184:	010040b4 	movhi	r4,258
 1012188:	213caa04 	addi	r4,r4,-3416
 101218c:	01800804 	movi	r6,32
 1012190:	1105883a 	add	r2,r2,r4
 1012194:	10c00003 	ldbu	r3,0(r2)
 1012198:	28c7883a 	add	r3,r5,r3
 101219c:	30edc83a 	sub	r22,r6,r3
 10121a0:	b000ee1e 	bne	r22,zero,101255c <__udivdi3+0x440>
 10121a4:	802ad43a 	srli	r21,r16,16
 10121a8:	00800044 	movi	r2,1
 10121ac:	a423c83a 	sub	r17,r20,r16
 10121b0:	85ffffcc 	andi	r23,r16,65535
 10121b4:	d8800315 	stw	r2,12(sp)
 10121b8:	8809883a 	mov	r4,r17
 10121bc:	a80b883a 	mov	r5,r21
 10121c0:	10057700 	call	1005770 <__udivsi3>
 10121c4:	8809883a 	mov	r4,r17
 10121c8:	a80b883a 	mov	r5,r21
 10121cc:	102d883a 	mov	r22,r2
 10121d0:	10057780 	call	1005778 <__umodsi3>
 10121d4:	1004943a 	slli	r2,r2,16
 10121d8:	e006d43a 	srli	r3,fp,16
 10121dc:	bda3383a 	mul	r17,r23,r22
 10121e0:	10c4b03a 	or	r2,r2,r3
 10121e4:	1440042e 	bgeu	r2,r17,10121f8 <__udivdi3+0xdc>
 10121e8:	1405883a 	add	r2,r2,r16
 10121ec:	b5bfffc4 	addi	r22,r22,-1
 10121f0:	14000136 	bltu	r2,r16,10121f8 <__udivdi3+0xdc>
 10121f4:	14413d36 	bltu	r2,r17,10126ec <__udivdi3+0x5d0>
 10121f8:	1463c83a 	sub	r17,r2,r17
 10121fc:	8809883a 	mov	r4,r17
 1012200:	a80b883a 	mov	r5,r21
 1012204:	10057700 	call	1005770 <__udivsi3>
 1012208:	8809883a 	mov	r4,r17
 101220c:	a80b883a 	mov	r5,r21
 1012210:	1029883a 	mov	r20,r2
 1012214:	10057780 	call	1005778 <__umodsi3>
 1012218:	1004943a 	slli	r2,r2,16
 101221c:	bd09383a 	mul	r4,r23,r20
 1012220:	e0ffffcc 	andi	r3,fp,65535
 1012224:	10c4b03a 	or	r2,r2,r3
 1012228:	1100042e 	bgeu	r2,r4,101223c <__udivdi3+0x120>
 101222c:	8085883a 	add	r2,r16,r2
 1012230:	a53fffc4 	addi	r20,r20,-1
 1012234:	14000136 	bltu	r2,r16,101223c <__udivdi3+0x120>
 1012238:	11012036 	bltu	r2,r4,10126bc <__udivdi3+0x5a0>
 101223c:	b004943a 	slli	r2,r22,16
 1012240:	d9000317 	ldw	r4,12(sp)
 1012244:	a084b03a 	or	r2,r20,r2
 1012248:	00001506 	br	10122a0 <__udivdi3+0x184>
 101224c:	380d883a 	mov	r6,r7
 1012250:	29c06236 	bltu	r5,r7,10123dc <__udivdi3+0x2c0>
 1012254:	00bfffd4 	movui	r2,65535
 1012258:	11c05a36 	bltu	r2,r7,10123c4 <__udivdi3+0x2a8>
 101225c:	00803fc4 	movi	r2,255
 1012260:	11c0fc36 	bltu	r2,r7,1012654 <__udivdi3+0x538>
 1012264:	000b883a 	mov	r5,zero
 1012268:	0005883a 	mov	r2,zero
 101226c:	3084d83a 	srl	r2,r6,r2
 1012270:	010040b4 	movhi	r4,258
 1012274:	213caa04 	addi	r4,r4,-3416
 1012278:	01c00804 	movi	r7,32
 101227c:	1105883a 	add	r2,r2,r4
 1012280:	10c00003 	ldbu	r3,0(r2)
 1012284:	28c7883a 	add	r3,r5,r3
 1012288:	38efc83a 	sub	r23,r7,r3
 101228c:	b800691e 	bne	r23,zero,1012434 <__udivdi3+0x318>
 1012290:	35000136 	bltu	r6,r20,1012298 <__udivdi3+0x17c>
 1012294:	e4005136 	bltu	fp,r16,10123dc <__udivdi3+0x2c0>
 1012298:	00800044 	movi	r2,1
 101229c:	0009883a 	mov	r4,zero
 10122a0:	2007883a 	mov	r3,r4
 10122a4:	dfc00f17 	ldw	ra,60(sp)
 10122a8:	df000e17 	ldw	fp,56(sp)
 10122ac:	ddc00d17 	ldw	r23,52(sp)
 10122b0:	dd800c17 	ldw	r22,48(sp)
 10122b4:	dd400b17 	ldw	r21,44(sp)
 10122b8:	dd000a17 	ldw	r20,40(sp)
 10122bc:	dcc00917 	ldw	r19,36(sp)
 10122c0:	dc800817 	ldw	r18,32(sp)
 10122c4:	dc400717 	ldw	r17,28(sp)
 10122c8:	dc000617 	ldw	r16,24(sp)
 10122cc:	dec01004 	addi	sp,sp,64
 10122d0:	f800283a 	ret
 10122d4:	00bfffd4 	movui	r2,65535
 10122d8:	12005036 	bltu	r2,r8,101241c <__udivdi3+0x300>
 10122dc:	00803fc4 	movi	r2,255
 10122e0:	1200e836 	bltu	r2,r8,1012684 <__udivdi3+0x568>
 10122e4:	000b883a 	mov	r5,zero
 10122e8:	0005883a 	mov	r2,zero
 10122ec:	8084d83a 	srl	r2,r16,r2
 10122f0:	010040b4 	movhi	r4,258
 10122f4:	213caa04 	addi	r4,r4,-3416
 10122f8:	01800804 	movi	r6,32
 10122fc:	1105883a 	add	r2,r2,r4
 1012300:	10c00003 	ldbu	r3,0(r2)
 1012304:	28c7883a 	add	r3,r5,r3
 1012308:	30cbc83a 	sub	r5,r6,r3
 101230c:	28000626 	beq	r5,zero,1012328 <__udivdi3+0x20c>
 1012310:	3145c83a 	sub	r2,r6,r5
 1012314:	e084d83a 	srl	r2,fp,r2
 1012318:	a146983a 	sll	r3,r20,r5
 101231c:	e178983a 	sll	fp,fp,r5
 1012320:	8160983a 	sll	r16,r16,r5
 1012324:	18a8b03a 	or	r20,r3,r2
 1012328:	802ad43a 	srli	r21,r16,16
 101232c:	a009883a 	mov	r4,r20
 1012330:	85ffffcc 	andi	r23,r16,65535
 1012334:	a80b883a 	mov	r5,r21
 1012338:	10057700 	call	1005770 <__udivsi3>
 101233c:	a009883a 	mov	r4,r20
 1012340:	a80b883a 	mov	r5,r21
 1012344:	102d883a 	mov	r22,r2
 1012348:	10057780 	call	1005778 <__umodsi3>
 101234c:	1004943a 	slli	r2,r2,16
 1012350:	e006d43a 	srli	r3,fp,16
 1012354:	bda3383a 	mul	r17,r23,r22
 1012358:	10c4b03a 	or	r2,r2,r3
 101235c:	1440042e 	bgeu	r2,r17,1012370 <__udivdi3+0x254>
 1012360:	1405883a 	add	r2,r2,r16
 1012364:	b5bfffc4 	addi	r22,r22,-1
 1012368:	14000136 	bltu	r2,r16,1012370 <__udivdi3+0x254>
 101236c:	1440d536 	bltu	r2,r17,10126c4 <__udivdi3+0x5a8>
 1012370:	1463c83a 	sub	r17,r2,r17
 1012374:	8809883a 	mov	r4,r17
 1012378:	a80b883a 	mov	r5,r21
 101237c:	10057700 	call	1005770 <__udivsi3>
 1012380:	8809883a 	mov	r4,r17
 1012384:	a80b883a 	mov	r5,r21
 1012388:	1029883a 	mov	r20,r2
 101238c:	10057780 	call	1005778 <__umodsi3>
 1012390:	1004943a 	slli	r2,r2,16
 1012394:	bd09383a 	mul	r4,r23,r20
 1012398:	e0ffffcc 	andi	r3,fp,65535
 101239c:	10c4b03a 	or	r2,r2,r3
 10123a0:	1100042e 	bgeu	r2,r4,10123b4 <__udivdi3+0x298>
 10123a4:	8085883a 	add	r2,r16,r2
 10123a8:	a53fffc4 	addi	r20,r20,-1
 10123ac:	14000136 	bltu	r2,r16,10123b4 <__udivdi3+0x298>
 10123b0:	1100c736 	bltu	r2,r4,10126d0 <__udivdi3+0x5b4>
 10123b4:	b004943a 	slli	r2,r22,16
 10123b8:	0009883a 	mov	r4,zero
 10123bc:	a084b03a 	or	r2,r20,r2
 10123c0:	003fb706 	br	10122a0 <__udivdi3+0x184>
 10123c4:	00804034 	movhi	r2,256
 10123c8:	10bfffc4 	addi	r2,r2,-1
 10123cc:	11c0a436 	bltu	r2,r7,1012660 <__udivdi3+0x544>
 10123d0:	01400404 	movi	r5,16
 10123d4:	2805883a 	mov	r2,r5
 10123d8:	003fa406 	br	101226c <__udivdi3+0x150>
 10123dc:	0005883a 	mov	r2,zero
 10123e0:	0009883a 	mov	r4,zero
 10123e4:	003fae06 	br	10122a0 <__udivdi3+0x184>
 10123e8:	00804034 	movhi	r2,256
 10123ec:	10bfffc4 	addi	r2,r2,-1
 10123f0:	1400a136 	bltu	r2,r16,1012678 <__udivdi3+0x55c>
 10123f4:	01400404 	movi	r5,16
 10123f8:	2805883a 	mov	r2,r5
 10123fc:	003f6006 	br	1012180 <__udivdi3+0x64>
 1012400:	01000044 	movi	r4,1
 1012404:	000b883a 	mov	r5,zero
 1012408:	10057700 	call	1005770 <__udivsi3>
 101240c:	1021883a 	mov	r16,r2
 1012410:	00bfffd4 	movui	r2,65535
 1012414:	143ff436 	bltu	r2,r16,10123e8 <__udivdi3+0x2cc>
 1012418:	003f5506 	br	1012170 <__udivdi3+0x54>
 101241c:	00804034 	movhi	r2,256
 1012420:	10bfffc4 	addi	r2,r2,-1
 1012424:	12009a36 	bltu	r2,r8,1012690 <__udivdi3+0x574>
 1012428:	01400404 	movi	r5,16
 101242c:	2805883a 	mov	r2,r5
 1012430:	003fae06 	br	10122ec <__udivdi3+0x1d0>
 1012434:	3dc5c83a 	sub	r2,r7,r23
 1012438:	35c8983a 	sll	r4,r6,r23
 101243c:	8086d83a 	srl	r3,r16,r2
 1012440:	a0a2d83a 	srl	r17,r20,r2
 1012444:	e084d83a 	srl	r2,fp,r2
 1012448:	20eab03a 	or	r21,r4,r3
 101244c:	a82cd43a 	srli	r22,r21,16
 1012450:	a5c6983a 	sll	r3,r20,r23
 1012454:	8809883a 	mov	r4,r17
 1012458:	b00b883a 	mov	r5,r22
 101245c:	1886b03a 	or	r3,r3,r2
 1012460:	d8c00215 	stw	r3,8(sp)
 1012464:	10057700 	call	1005770 <__udivsi3>
 1012468:	8809883a 	mov	r4,r17
 101246c:	b00b883a 	mov	r5,r22
 1012470:	1029883a 	mov	r20,r2
 1012474:	10057780 	call	1005778 <__umodsi3>
 1012478:	a8ffffcc 	andi	r3,r21,65535
 101247c:	d8c00515 	stw	r3,20(sp)
 1012480:	d9000217 	ldw	r4,8(sp)
 1012484:	d9400517 	ldw	r5,20(sp)
 1012488:	1004943a 	slli	r2,r2,16
 101248c:	2006d43a 	srli	r3,r4,16
 1012490:	85e0983a 	sll	r16,r16,r23
 1012494:	2d23383a 	mul	r17,r5,r20
 1012498:	10c4b03a 	or	r2,r2,r3
 101249c:	dc000015 	stw	r16,0(sp)
 10124a0:	1440032e 	bgeu	r2,r17,10124b0 <__udivdi3+0x394>
 10124a4:	1545883a 	add	r2,r2,r21
 10124a8:	a53fffc4 	addi	r20,r20,-1
 10124ac:	15407f2e 	bgeu	r2,r21,10126ac <__udivdi3+0x590>
 10124b0:	1463c83a 	sub	r17,r2,r17
 10124b4:	8809883a 	mov	r4,r17
 10124b8:	b00b883a 	mov	r5,r22
 10124bc:	10057700 	call	1005770 <__udivsi3>
 10124c0:	8809883a 	mov	r4,r17
 10124c4:	b00b883a 	mov	r5,r22
 10124c8:	1021883a 	mov	r16,r2
 10124cc:	10057780 	call	1005778 <__umodsi3>
 10124d0:	d8c00517 	ldw	r3,20(sp)
 10124d4:	d9000217 	ldw	r4,8(sp)
 10124d8:	1004943a 	slli	r2,r2,16
 10124dc:	1c0f383a 	mul	r7,r3,r16
 10124e0:	20ffffcc 	andi	r3,r4,65535
 10124e4:	10e2b03a 	or	r17,r2,r3
 10124e8:	89c0032e 	bgeu	r17,r7,10124f8 <__udivdi3+0x3dc>
 10124ec:	8d63883a 	add	r17,r17,r21
 10124f0:	843fffc4 	addi	r16,r16,-1
 10124f4:	8d40692e 	bgeu	r17,r21,101269c <__udivdi3+0x580>
 10124f8:	a008943a 	slli	r4,r20,16
 10124fc:	d9400017 	ldw	r5,0(sp)
 1012500:	89e3c83a 	sub	r17,r17,r7
 1012504:	8110b03a 	or	r8,r16,r4
 1012508:	280cd43a 	srli	r6,r5,16
 101250c:	28ffffcc 	andi	r3,r5,65535
 1012510:	40bfffcc 	andi	r2,r8,65535
 1012514:	400ad43a 	srli	r5,r8,16
 1012518:	10d3383a 	mul	r9,r2,r3
 101251c:	1185383a 	mul	r2,r2,r6
 1012520:	28c7383a 	mul	r3,r5,r3
 1012524:	4808d43a 	srli	r4,r9,16
 1012528:	298b383a 	mul	r5,r5,r6
 101252c:	10c5883a 	add	r2,r2,r3
 1012530:	2089883a 	add	r4,r4,r2
 1012534:	20c0022e 	bgeu	r4,r3,1012540 <__udivdi3+0x424>
 1012538:	00800074 	movhi	r2,1
 101253c:	288b883a 	add	r5,r5,r2
 1012540:	2004d43a 	srli	r2,r4,16
 1012544:	288b883a 	add	r5,r5,r2
 1012548:	89403f36 	bltu	r17,r5,1012648 <__udivdi3+0x52c>
 101254c:	89403926 	beq	r17,r5,1012634 <__udivdi3+0x518>
 1012550:	4005883a 	mov	r2,r8
 1012554:	0009883a 	mov	r4,zero
 1012558:	003f5106 	br	10122a0 <__udivdi3+0x184>
 101255c:	85a0983a 	sll	r16,r16,r22
 1012560:	3585c83a 	sub	r2,r6,r22
 1012564:	a0a2d83a 	srl	r17,r20,r2
 1012568:	802ad43a 	srli	r21,r16,16
 101256c:	e084d83a 	srl	r2,fp,r2
 1012570:	a586983a 	sll	r3,r20,r22
 1012574:	8809883a 	mov	r4,r17
 1012578:	a80b883a 	mov	r5,r21
 101257c:	1886b03a 	or	r3,r3,r2
 1012580:	d8c00115 	stw	r3,4(sp)
 1012584:	10057700 	call	1005770 <__udivsi3>
 1012588:	8809883a 	mov	r4,r17
 101258c:	a80b883a 	mov	r5,r21
 1012590:	d8800415 	stw	r2,16(sp)
 1012594:	10057780 	call	1005778 <__umodsi3>
 1012598:	d9000117 	ldw	r4,4(sp)
 101259c:	d9400417 	ldw	r5,16(sp)
 10125a0:	1004943a 	slli	r2,r2,16
 10125a4:	85ffffcc 	andi	r23,r16,65535
 10125a8:	2006d43a 	srli	r3,r4,16
 10125ac:	b963383a 	mul	r17,r23,r5
 10125b0:	10c4b03a 	or	r2,r2,r3
 10125b4:	1440042e 	bgeu	r2,r17,10125c8 <__udivdi3+0x4ac>
 10125b8:	297fffc4 	addi	r5,r5,-1
 10125bc:	1405883a 	add	r2,r2,r16
 10125c0:	d9400415 	stw	r5,16(sp)
 10125c4:	1400442e 	bgeu	r2,r16,10126d8 <__udivdi3+0x5bc>
 10125c8:	1463c83a 	sub	r17,r2,r17
 10125cc:	8809883a 	mov	r4,r17
 10125d0:	a80b883a 	mov	r5,r21
 10125d4:	10057700 	call	1005770 <__udivsi3>
 10125d8:	8809883a 	mov	r4,r17
 10125dc:	a80b883a 	mov	r5,r21
 10125e0:	1029883a 	mov	r20,r2
 10125e4:	10057780 	call	1005778 <__umodsi3>
 10125e8:	d9400117 	ldw	r5,4(sp)
 10125ec:	1004943a 	slli	r2,r2,16
 10125f0:	bd09383a 	mul	r4,r23,r20
 10125f4:	28ffffcc 	andi	r3,r5,65535
 10125f8:	10c6b03a 	or	r3,r2,r3
 10125fc:	1900062e 	bgeu	r3,r4,1012618 <__udivdi3+0x4fc>
 1012600:	1c07883a 	add	r3,r3,r16
 1012604:	a53fffc4 	addi	r20,r20,-1
 1012608:	1c000336 	bltu	r3,r16,1012618 <__udivdi3+0x4fc>
 101260c:	1900022e 	bgeu	r3,r4,1012618 <__udivdi3+0x4fc>
 1012610:	a53fffc4 	addi	r20,r20,-1
 1012614:	1c07883a 	add	r3,r3,r16
 1012618:	d9400417 	ldw	r5,16(sp)
 101261c:	e5b8983a 	sll	fp,fp,r22
 1012620:	1923c83a 	sub	r17,r3,r4
 1012624:	2804943a 	slli	r2,r5,16
 1012628:	a0a8b03a 	or	r20,r20,r2
 101262c:	dd000315 	stw	r20,12(sp)
 1012630:	003ee106 	br	10121b8 <__udivdi3+0x9c>
 1012634:	2004943a 	slli	r2,r4,16
 1012638:	e5c8983a 	sll	r4,fp,r23
 101263c:	48ffffcc 	andi	r3,r9,65535
 1012640:	10c5883a 	add	r2,r2,r3
 1012644:	20bfc22e 	bgeu	r4,r2,1012550 <__udivdi3+0x434>
 1012648:	40bfffc4 	addi	r2,r8,-1
 101264c:	0009883a 	mov	r4,zero
 1012650:	003f1306 	br	10122a0 <__udivdi3+0x184>
 1012654:	01400204 	movi	r5,8
 1012658:	2805883a 	mov	r2,r5
 101265c:	003f0306 	br	101226c <__udivdi3+0x150>
 1012660:	01400604 	movi	r5,24
 1012664:	2805883a 	mov	r2,r5
 1012668:	003f0006 	br	101226c <__udivdi3+0x150>
 101266c:	01400204 	movi	r5,8
 1012670:	2805883a 	mov	r2,r5
 1012674:	003ec206 	br	1012180 <__udivdi3+0x64>
 1012678:	01400604 	movi	r5,24
 101267c:	2805883a 	mov	r2,r5
 1012680:	003ebf06 	br	1012180 <__udivdi3+0x64>
 1012684:	01400204 	movi	r5,8
 1012688:	2805883a 	mov	r2,r5
 101268c:	003f1706 	br	10122ec <__udivdi3+0x1d0>
 1012690:	01400604 	movi	r5,24
 1012694:	2805883a 	mov	r2,r5
 1012698:	003f1406 	br	10122ec <__udivdi3+0x1d0>
 101269c:	89ff962e 	bgeu	r17,r7,10124f8 <__udivdi3+0x3dc>
 10126a0:	8d63883a 	add	r17,r17,r21
 10126a4:	843fffc4 	addi	r16,r16,-1
 10126a8:	003f9306 	br	10124f8 <__udivdi3+0x3dc>
 10126ac:	147f802e 	bgeu	r2,r17,10124b0 <__udivdi3+0x394>
 10126b0:	a53fffc4 	addi	r20,r20,-1
 10126b4:	1545883a 	add	r2,r2,r21
 10126b8:	003f7d06 	br	10124b0 <__udivdi3+0x394>
 10126bc:	a53fffc4 	addi	r20,r20,-1
 10126c0:	003ede06 	br	101223c <__udivdi3+0x120>
 10126c4:	b5bfffc4 	addi	r22,r22,-1
 10126c8:	1405883a 	add	r2,r2,r16
 10126cc:	003f2806 	br	1012370 <__udivdi3+0x254>
 10126d0:	a53fffc4 	addi	r20,r20,-1
 10126d4:	003f3706 	br	10123b4 <__udivdi3+0x298>
 10126d8:	147fbb2e 	bgeu	r2,r17,10125c8 <__udivdi3+0x4ac>
 10126dc:	297fffc4 	addi	r5,r5,-1
 10126e0:	1405883a 	add	r2,r2,r16
 10126e4:	d9400415 	stw	r5,16(sp)
 10126e8:	003fb706 	br	10125c8 <__udivdi3+0x4ac>
 10126ec:	b5bfffc4 	addi	r22,r22,-1
 10126f0:	1405883a 	add	r2,r2,r16
 10126f4:	003ec006 	br	10121f8 <__udivdi3+0xdc>

010126f8 <__umoddi3>:
 10126f8:	defff104 	addi	sp,sp,-60
 10126fc:	dd800b15 	stw	r22,44(sp)
 1012700:	dd000915 	stw	r20,36(sp)
 1012704:	dc000515 	stw	r16,20(sp)
 1012708:	dfc00e15 	stw	ra,56(sp)
 101270c:	df000d15 	stw	fp,52(sp)
 1012710:	ddc00c15 	stw	r23,48(sp)
 1012714:	dd400a15 	stw	r21,40(sp)
 1012718:	dcc00815 	stw	r19,32(sp)
 101271c:	dc800715 	stw	r18,28(sp)
 1012720:	dc400615 	stw	r17,24(sp)
 1012724:	3021883a 	mov	r16,r6
 1012728:	202d883a 	mov	r22,r4
 101272c:	2829883a 	mov	r20,r5
 1012730:	38002b1e 	bne	r7,zero,10127e0 <__umoddi3+0xe8>
 1012734:	29805036 	bltu	r5,r6,1012878 <__umoddi3+0x180>
 1012738:	30008a26 	beq	r6,zero,1012964 <__umoddi3+0x26c>
 101273c:	00bfffd4 	movui	r2,65535
 1012740:	14008236 	bltu	r2,r16,101294c <__umoddi3+0x254>
 1012744:	00803fc4 	movi	r2,255
 1012748:	14013636 	bltu	r2,r16,1012c24 <__umoddi3+0x52c>
 101274c:	000b883a 	mov	r5,zero
 1012750:	0005883a 	mov	r2,zero
 1012754:	8084d83a 	srl	r2,r16,r2
 1012758:	010040b4 	movhi	r4,258
 101275c:	213caa04 	addi	r4,r4,-3416
 1012760:	01800804 	movi	r6,32
 1012764:	1105883a 	add	r2,r2,r4
 1012768:	10c00003 	ldbu	r3,0(r2)
 101276c:	28c7883a 	add	r3,r5,r3
 1012770:	30efc83a 	sub	r23,r6,r3
 1012774:	b800941e 	bne	r23,zero,10129c8 <__umoddi3+0x2d0>
 1012778:	802ad43a 	srli	r21,r16,16
 101277c:	a423c83a 	sub	r17,r20,r16
 1012780:	0039883a 	mov	fp,zero
 1012784:	853fffcc 	andi	r20,r16,65535
 1012788:	8809883a 	mov	r4,r17
 101278c:	a80b883a 	mov	r5,r21
 1012790:	10057700 	call	1005770 <__udivsi3>
 1012794:	8809883a 	mov	r4,r17
 1012798:	a80b883a 	mov	r5,r21
 101279c:	a0a3383a 	mul	r17,r20,r2
 10127a0:	10057780 	call	1005778 <__umodsi3>
 10127a4:	1004943a 	slli	r2,r2,16
 10127a8:	b006d43a 	srli	r3,r22,16
 10127ac:	10c4b03a 	or	r2,r2,r3
 10127b0:	1440032e 	bgeu	r2,r17,10127c0 <__umoddi3+0xc8>
 10127b4:	1405883a 	add	r2,r2,r16
 10127b8:	14000136 	bltu	r2,r16,10127c0 <__umoddi3+0xc8>
 10127bc:	14413536 	bltu	r2,r17,1012c94 <__umoddi3+0x59c>
 10127c0:	1463c83a 	sub	r17,r2,r17
 10127c4:	8809883a 	mov	r4,r17
 10127c8:	a80b883a 	mov	r5,r21
 10127cc:	10057700 	call	1005770 <__udivsi3>
 10127d0:	8809883a 	mov	r4,r17
 10127d4:	a0a3383a 	mul	r17,r20,r2
 10127d8:	a80b883a 	mov	r5,r21
 10127dc:	00004d06 	br	1012914 <__umoddi3+0x21c>
 10127e0:	380d883a 	mov	r6,r7
 10127e4:	29c0102e 	bgeu	r5,r7,1012828 <__umoddi3+0x130>
 10127e8:	2011883a 	mov	r8,r4
 10127ec:	2813883a 	mov	r9,r5
 10127f0:	4005883a 	mov	r2,r8
 10127f4:	4807883a 	mov	r3,r9
 10127f8:	dfc00e17 	ldw	ra,56(sp)
 10127fc:	df000d17 	ldw	fp,52(sp)
 1012800:	ddc00c17 	ldw	r23,48(sp)
 1012804:	dd800b17 	ldw	r22,44(sp)
 1012808:	dd400a17 	ldw	r21,40(sp)
 101280c:	dd000917 	ldw	r20,36(sp)
 1012810:	dcc00817 	ldw	r19,32(sp)
 1012814:	dc800717 	ldw	r18,28(sp)
 1012818:	dc400617 	ldw	r17,24(sp)
 101281c:	dc000517 	ldw	r16,20(sp)
 1012820:	dec00f04 	addi	sp,sp,60
 1012824:	f800283a 	ret
 1012828:	00bfffd4 	movui	r2,65535
 101282c:	11c05a36 	bltu	r2,r7,1012998 <__umoddi3+0x2a0>
 1012830:	00803fc4 	movi	r2,255
 1012834:	11c0fe36 	bltu	r2,r7,1012c30 <__umoddi3+0x538>
 1012838:	000b883a 	mov	r5,zero
 101283c:	0005883a 	mov	r2,zero
 1012840:	3084d83a 	srl	r2,r6,r2
 1012844:	010040b4 	movhi	r4,258
 1012848:	213caa04 	addi	r4,r4,-3416
 101284c:	01c00804 	movi	r7,32
 1012850:	1105883a 	add	r2,r2,r4
 1012854:	10c00003 	ldbu	r3,0(r2)
 1012858:	28c7883a 	add	r3,r5,r3
 101285c:	38ebc83a 	sub	r21,r7,r3
 1012860:	a800851e 	bne	r21,zero,1012a78 <__umoddi3+0x380>
 1012864:	35005236 	bltu	r6,r20,10129b0 <__umoddi3+0x2b8>
 1012868:	b400512e 	bgeu	r22,r16,10129b0 <__umoddi3+0x2b8>
 101286c:	b011883a 	mov	r8,r22
 1012870:	a013883a 	mov	r9,r20
 1012874:	003fde06 	br	10127f0 <__umoddi3+0xf8>
 1012878:	00bfffd4 	movui	r2,65535
 101287c:	11804036 	bltu	r2,r6,1012980 <__umoddi3+0x288>
 1012880:	00803fc4 	movi	r2,255
 1012884:	1180ed36 	bltu	r2,r6,1012c3c <__umoddi3+0x544>
 1012888:	000b883a 	mov	r5,zero
 101288c:	0005883a 	mov	r2,zero
 1012890:	8084d83a 	srl	r2,r16,r2
 1012894:	010040b4 	movhi	r4,258
 1012898:	213caa04 	addi	r4,r4,-3416
 101289c:	01800804 	movi	r6,32
 10128a0:	1105883a 	add	r2,r2,r4
 10128a4:	10c00003 	ldbu	r3,0(r2)
 10128a8:	28c7883a 	add	r3,r5,r3
 10128ac:	30c7c83a 	sub	r3,r6,r3
 10128b0:	1800bf1e 	bne	r3,zero,1012bb0 <__umoddi3+0x4b8>
 10128b4:	0039883a 	mov	fp,zero
 10128b8:	802ad43a 	srli	r21,r16,16
 10128bc:	a009883a 	mov	r4,r20
 10128c0:	85ffffcc 	andi	r23,r16,65535
 10128c4:	a80b883a 	mov	r5,r21
 10128c8:	10057700 	call	1005770 <__udivsi3>
 10128cc:	a009883a 	mov	r4,r20
 10128d0:	a80b883a 	mov	r5,r21
 10128d4:	b8a3383a 	mul	r17,r23,r2
 10128d8:	10057780 	call	1005778 <__umodsi3>
 10128dc:	1004943a 	slli	r2,r2,16
 10128e0:	b006d43a 	srli	r3,r22,16
 10128e4:	10c4b03a 	or	r2,r2,r3
 10128e8:	1440032e 	bgeu	r2,r17,10128f8 <__umoddi3+0x200>
 10128ec:	1405883a 	add	r2,r2,r16
 10128f0:	14000136 	bltu	r2,r16,10128f8 <__umoddi3+0x200>
 10128f4:	1440e536 	bltu	r2,r17,1012c8c <__umoddi3+0x594>
 10128f8:	1463c83a 	sub	r17,r2,r17
 10128fc:	8809883a 	mov	r4,r17
 1012900:	a80b883a 	mov	r5,r21
 1012904:	10057700 	call	1005770 <__udivsi3>
 1012908:	8809883a 	mov	r4,r17
 101290c:	b8a3383a 	mul	r17,r23,r2
 1012910:	a80b883a 	mov	r5,r21
 1012914:	10057780 	call	1005778 <__umodsi3>
 1012918:	1004943a 	slli	r2,r2,16
 101291c:	b0ffffcc 	andi	r3,r22,65535
 1012920:	10c4b03a 	or	r2,r2,r3
 1012924:	1440042e 	bgeu	r2,r17,1012938 <__umoddi3+0x240>
 1012928:	1405883a 	add	r2,r2,r16
 101292c:	14000236 	bltu	r2,r16,1012938 <__umoddi3+0x240>
 1012930:	1440012e 	bgeu	r2,r17,1012938 <__umoddi3+0x240>
 1012934:	1405883a 	add	r2,r2,r16
 1012938:	1445c83a 	sub	r2,r2,r17
 101293c:	1724d83a 	srl	r18,r2,fp
 1012940:	0013883a 	mov	r9,zero
 1012944:	9011883a 	mov	r8,r18
 1012948:	003fa906 	br	10127f0 <__umoddi3+0xf8>
 101294c:	00804034 	movhi	r2,256
 1012950:	10bfffc4 	addi	r2,r2,-1
 1012954:	1400b036 	bltu	r2,r16,1012c18 <__umoddi3+0x520>
 1012958:	01400404 	movi	r5,16
 101295c:	2805883a 	mov	r2,r5
 1012960:	003f7c06 	br	1012754 <__umoddi3+0x5c>
 1012964:	01000044 	movi	r4,1
 1012968:	000b883a 	mov	r5,zero
 101296c:	10057700 	call	1005770 <__udivsi3>
 1012970:	1021883a 	mov	r16,r2
 1012974:	00bfffd4 	movui	r2,65535
 1012978:	143ff436 	bltu	r2,r16,101294c <__umoddi3+0x254>
 101297c:	003f7106 	br	1012744 <__umoddi3+0x4c>
 1012980:	00804034 	movhi	r2,256
 1012984:	10bfffc4 	addi	r2,r2,-1
 1012988:	1180af36 	bltu	r2,r6,1012c48 <__umoddi3+0x550>
 101298c:	01400404 	movi	r5,16
 1012990:	2805883a 	mov	r2,r5
 1012994:	003fbe06 	br	1012890 <__umoddi3+0x198>
 1012998:	00804034 	movhi	r2,256
 101299c:	10bfffc4 	addi	r2,r2,-1
 10129a0:	11c0ac36 	bltu	r2,r7,1012c54 <__umoddi3+0x55c>
 10129a4:	01400404 	movi	r5,16
 10129a8:	2805883a 	mov	r2,r5
 10129ac:	003fa406 	br	1012840 <__umoddi3+0x148>
 10129b0:	b409c83a 	sub	r4,r22,r16
 10129b4:	b105803a 	cmpltu	r2,r22,r4
 10129b8:	a187c83a 	sub	r3,r20,r6
 10129bc:	18a9c83a 	sub	r20,r3,r2
 10129c0:	202d883a 	mov	r22,r4
 10129c4:	003fa906 	br	101286c <__umoddi3+0x174>
 10129c8:	85e0983a 	sll	r16,r16,r23
 10129cc:	35c5c83a 	sub	r2,r6,r23
 10129d0:	a0a2d83a 	srl	r17,r20,r2
 10129d4:	802ad43a 	srli	r21,r16,16
 10129d8:	b084d83a 	srl	r2,r22,r2
 10129dc:	a5c6983a 	sll	r3,r20,r23
 10129e0:	8809883a 	mov	r4,r17
 10129e4:	a80b883a 	mov	r5,r21
 10129e8:	1886b03a 	or	r3,r3,r2
 10129ec:	d8c00115 	stw	r3,4(sp)
 10129f0:	853fffcc 	andi	r20,r16,65535
 10129f4:	10057700 	call	1005770 <__udivsi3>
 10129f8:	8809883a 	mov	r4,r17
 10129fc:	a80b883a 	mov	r5,r21
 1012a00:	a0a3383a 	mul	r17,r20,r2
 1012a04:	10057780 	call	1005778 <__umodsi3>
 1012a08:	d9000117 	ldw	r4,4(sp)
 1012a0c:	1004943a 	slli	r2,r2,16
 1012a10:	b839883a 	mov	fp,r23
 1012a14:	2006d43a 	srli	r3,r4,16
 1012a18:	10c4b03a 	or	r2,r2,r3
 1012a1c:	1440022e 	bgeu	r2,r17,1012a28 <__umoddi3+0x330>
 1012a20:	1405883a 	add	r2,r2,r16
 1012a24:	1400962e 	bgeu	r2,r16,1012c80 <__umoddi3+0x588>
 1012a28:	1463c83a 	sub	r17,r2,r17
 1012a2c:	8809883a 	mov	r4,r17
 1012a30:	a80b883a 	mov	r5,r21
 1012a34:	10057700 	call	1005770 <__udivsi3>
 1012a38:	8809883a 	mov	r4,r17
 1012a3c:	a80b883a 	mov	r5,r21
 1012a40:	a0a3383a 	mul	r17,r20,r2
 1012a44:	10057780 	call	1005778 <__umodsi3>
 1012a48:	d9400117 	ldw	r5,4(sp)
 1012a4c:	1004943a 	slli	r2,r2,16
 1012a50:	28ffffcc 	andi	r3,r5,65535
 1012a54:	10c4b03a 	or	r2,r2,r3
 1012a58:	1440042e 	bgeu	r2,r17,1012a6c <__umoddi3+0x374>
 1012a5c:	1405883a 	add	r2,r2,r16
 1012a60:	14000236 	bltu	r2,r16,1012a6c <__umoddi3+0x374>
 1012a64:	1440012e 	bgeu	r2,r17,1012a6c <__umoddi3+0x374>
 1012a68:	1405883a 	add	r2,r2,r16
 1012a6c:	b5ec983a 	sll	r22,r22,r23
 1012a70:	1463c83a 	sub	r17,r2,r17
 1012a74:	003f4406 	br	1012788 <__umoddi3+0x90>
 1012a78:	3d4fc83a 	sub	r7,r7,r21
 1012a7c:	3546983a 	sll	r3,r6,r21
 1012a80:	81c4d83a 	srl	r2,r16,r7
 1012a84:	a1e2d83a 	srl	r17,r20,r7
 1012a88:	a54c983a 	sll	r6,r20,r21
 1012a8c:	18aeb03a 	or	r23,r3,r2
 1012a90:	b828d43a 	srli	r20,r23,16
 1012a94:	b1c4d83a 	srl	r2,r22,r7
 1012a98:	8809883a 	mov	r4,r17
 1012a9c:	a00b883a 	mov	r5,r20
 1012aa0:	308cb03a 	or	r6,r6,r2
 1012aa4:	d9c00315 	stw	r7,12(sp)
 1012aa8:	d9800215 	stw	r6,8(sp)
 1012aac:	10057700 	call	1005770 <__udivsi3>
 1012ab0:	8809883a 	mov	r4,r17
 1012ab4:	a00b883a 	mov	r5,r20
 1012ab8:	1039883a 	mov	fp,r2
 1012abc:	10057780 	call	1005778 <__umodsi3>
 1012ac0:	b8ffffcc 	andi	r3,r23,65535
 1012ac4:	d8c00415 	stw	r3,16(sp)
 1012ac8:	d9000217 	ldw	r4,8(sp)
 1012acc:	d9400417 	ldw	r5,16(sp)
 1012ad0:	1004943a 	slli	r2,r2,16
 1012ad4:	2006d43a 	srli	r3,r4,16
 1012ad8:	8560983a 	sll	r16,r16,r21
 1012adc:	2f23383a 	mul	r17,r5,fp
 1012ae0:	10c4b03a 	or	r2,r2,r3
 1012ae4:	dc000015 	stw	r16,0(sp)
 1012ae8:	b56c983a 	sll	r22,r22,r21
 1012aec:	1440032e 	bgeu	r2,r17,1012afc <__umoddi3+0x404>
 1012af0:	15c5883a 	add	r2,r2,r23
 1012af4:	e73fffc4 	addi	fp,fp,-1
 1012af8:	15c05d2e 	bgeu	r2,r23,1012c70 <__umoddi3+0x578>
 1012afc:	1463c83a 	sub	r17,r2,r17
 1012b00:	8809883a 	mov	r4,r17
 1012b04:	a00b883a 	mov	r5,r20
 1012b08:	10057700 	call	1005770 <__udivsi3>
 1012b0c:	8809883a 	mov	r4,r17
 1012b10:	a00b883a 	mov	r5,r20
 1012b14:	1021883a 	mov	r16,r2
 1012b18:	10057780 	call	1005778 <__umodsi3>
 1012b1c:	d8c00417 	ldw	r3,16(sp)
 1012b20:	d9000217 	ldw	r4,8(sp)
 1012b24:	1004943a 	slli	r2,r2,16
 1012b28:	1c23383a 	mul	r17,r3,r16
 1012b2c:	20ffffcc 	andi	r3,r4,65535
 1012b30:	10ceb03a 	or	r7,r2,r3
 1012b34:	3c40032e 	bgeu	r7,r17,1012b44 <__umoddi3+0x44c>
 1012b38:	3dcf883a 	add	r7,r7,r23
 1012b3c:	843fffc4 	addi	r16,r16,-1
 1012b40:	3dc0472e 	bgeu	r7,r23,1012c60 <__umoddi3+0x568>
 1012b44:	e004943a 	slli	r2,fp,16
 1012b48:	d9400017 	ldw	r5,0(sp)
 1012b4c:	3c4fc83a 	sub	r7,r7,r17
 1012b50:	8084b03a 	or	r2,r16,r2
 1012b54:	28ffffcc 	andi	r3,r5,65535
 1012b58:	280cd43a 	srli	r6,r5,16
 1012b5c:	100ad43a 	srli	r5,r2,16
 1012b60:	10bfffcc 	andi	r2,r2,65535
 1012b64:	10d1383a 	mul	r8,r2,r3
 1012b68:	28c7383a 	mul	r3,r5,r3
 1012b6c:	1185383a 	mul	r2,r2,r6
 1012b70:	4008d43a 	srli	r4,r8,16
 1012b74:	298b383a 	mul	r5,r5,r6
 1012b78:	10c5883a 	add	r2,r2,r3
 1012b7c:	2089883a 	add	r4,r4,r2
 1012b80:	20c0022e 	bgeu	r4,r3,1012b8c <__umoddi3+0x494>
 1012b84:	00800074 	movhi	r2,1
 1012b88:	288b883a 	add	r5,r5,r2
 1012b8c:	2004d43a 	srli	r2,r4,16
 1012b90:	2008943a 	slli	r4,r4,16
 1012b94:	40ffffcc 	andi	r3,r8,65535
 1012b98:	288b883a 	add	r5,r5,r2
 1012b9c:	20c9883a 	add	r4,r4,r3
 1012ba0:	39400b36 	bltu	r7,r5,1012bd0 <__umoddi3+0x4d8>
 1012ba4:	39403d26 	beq	r7,r5,1012c9c <__umoddi3+0x5a4>
 1012ba8:	394bc83a 	sub	r5,r7,r5
 1012bac:	00000f06 	br	1012bec <__umoddi3+0x4f4>
 1012bb0:	30c5c83a 	sub	r2,r6,r3
 1012bb4:	1839883a 	mov	fp,r3
 1012bb8:	b084d83a 	srl	r2,r22,r2
 1012bbc:	a0c6983a 	sll	r3,r20,r3
 1012bc0:	8720983a 	sll	r16,r16,fp
 1012bc4:	b72c983a 	sll	r22,r22,fp
 1012bc8:	18a8b03a 	or	r20,r3,r2
 1012bcc:	003f3a06 	br	10128b8 <__umoddi3+0x1c0>
 1012bd0:	d8c00017 	ldw	r3,0(sp)
 1012bd4:	20c5c83a 	sub	r2,r4,r3
 1012bd8:	2089803a 	cmpltu	r4,r4,r2
 1012bdc:	2dc7c83a 	sub	r3,r5,r23
 1012be0:	1907c83a 	sub	r3,r3,r4
 1012be4:	38cbc83a 	sub	r5,r7,r3
 1012be8:	1009883a 	mov	r4,r2
 1012bec:	b105c83a 	sub	r2,r22,r4
 1012bf0:	b087803a 	cmpltu	r3,r22,r2
 1012bf4:	28c7c83a 	sub	r3,r5,r3
 1012bf8:	d9400317 	ldw	r5,12(sp)
 1012bfc:	1544d83a 	srl	r2,r2,r21
 1012c00:	1948983a 	sll	r4,r3,r5
 1012c04:	1d46d83a 	srl	r3,r3,r21
 1012c08:	20a4b03a 	or	r18,r4,r2
 1012c0c:	9011883a 	mov	r8,r18
 1012c10:	1813883a 	mov	r9,r3
 1012c14:	003ef606 	br	10127f0 <__umoddi3+0xf8>
 1012c18:	01400604 	movi	r5,24
 1012c1c:	2805883a 	mov	r2,r5
 1012c20:	003ecc06 	br	1012754 <__umoddi3+0x5c>
 1012c24:	01400204 	movi	r5,8
 1012c28:	2805883a 	mov	r2,r5
 1012c2c:	003ec906 	br	1012754 <__umoddi3+0x5c>
 1012c30:	01400204 	movi	r5,8
 1012c34:	2805883a 	mov	r2,r5
 1012c38:	003f0106 	br	1012840 <__umoddi3+0x148>
 1012c3c:	01400204 	movi	r5,8
 1012c40:	2805883a 	mov	r2,r5
 1012c44:	003f1206 	br	1012890 <__umoddi3+0x198>
 1012c48:	01400604 	movi	r5,24
 1012c4c:	2805883a 	mov	r2,r5
 1012c50:	003f0f06 	br	1012890 <__umoddi3+0x198>
 1012c54:	01400604 	movi	r5,24
 1012c58:	2805883a 	mov	r2,r5
 1012c5c:	003ef806 	br	1012840 <__umoddi3+0x148>
 1012c60:	3c7fb82e 	bgeu	r7,r17,1012b44 <__umoddi3+0x44c>
 1012c64:	843fffc4 	addi	r16,r16,-1
 1012c68:	3dcf883a 	add	r7,r7,r23
 1012c6c:	003fb506 	br	1012b44 <__umoddi3+0x44c>
 1012c70:	147fa22e 	bgeu	r2,r17,1012afc <__umoddi3+0x404>
 1012c74:	e73fffc4 	addi	fp,fp,-1
 1012c78:	15c5883a 	add	r2,r2,r23
 1012c7c:	003f9f06 	br	1012afc <__umoddi3+0x404>
 1012c80:	147f692e 	bgeu	r2,r17,1012a28 <__umoddi3+0x330>
 1012c84:	1405883a 	add	r2,r2,r16
 1012c88:	003f6706 	br	1012a28 <__umoddi3+0x330>
 1012c8c:	1405883a 	add	r2,r2,r16
 1012c90:	003f1906 	br	10128f8 <__umoddi3+0x200>
 1012c94:	1405883a 	add	r2,r2,r16
 1012c98:	003ec906 	br	10127c0 <__umoddi3+0xc8>
 1012c9c:	b13fcc36 	bltu	r22,r4,1012bd0 <__umoddi3+0x4d8>
 1012ca0:	000b883a 	mov	r5,zero
 1012ca4:	003fd106 	br	1012bec <__umoddi3+0x4f4>

01012ca8 <__nesf2>:
 1012ca8:	defff304 	addi	sp,sp,-52
 1012cac:	dc400b15 	stw	r17,44(sp)
 1012cb0:	dc400204 	addi	r17,sp,8
 1012cb4:	dc000a15 	stw	r16,40(sp)
 1012cb8:	d9000015 	stw	r4,0(sp)
 1012cbc:	d9400115 	stw	r5,4(sp)
 1012cc0:	d809883a 	mov	r4,sp
 1012cc4:	880b883a 	mov	r5,r17
 1012cc8:	dc000604 	addi	r16,sp,24
 1012ccc:	dfc00c15 	stw	ra,48(sp)
 1012cd0:	10131280 	call	1013128 <__unpack_f>
 1012cd4:	d9000104 	addi	r4,sp,4
 1012cd8:	800b883a 	mov	r5,r16
 1012cdc:	10131280 	call	1013128 <__unpack_f>
 1012ce0:	d8800217 	ldw	r2,8(sp)
 1012ce4:	00c00044 	movi	r3,1
 1012ce8:	180d883a 	mov	r6,r3
 1012cec:	1880062e 	bgeu	r3,r2,1012d08 <__nesf2+0x60>
 1012cf0:	d8800617 	ldw	r2,24(sp)
 1012cf4:	8809883a 	mov	r4,r17
 1012cf8:	800b883a 	mov	r5,r16
 1012cfc:	1880022e 	bgeu	r3,r2,1012d08 <__nesf2+0x60>
 1012d00:	10131f00 	call	10131f0 <__fpcmp_parts_f>
 1012d04:	100d883a 	mov	r6,r2
 1012d08:	3005883a 	mov	r2,r6
 1012d0c:	dfc00c17 	ldw	ra,48(sp)
 1012d10:	dc400b17 	ldw	r17,44(sp)
 1012d14:	dc000a17 	ldw	r16,40(sp)
 1012d18:	dec00d04 	addi	sp,sp,52
 1012d1c:	f800283a 	ret

01012d20 <__gtsf2>:
 1012d20:	defff304 	addi	sp,sp,-52
 1012d24:	dc400b15 	stw	r17,44(sp)
 1012d28:	dc400204 	addi	r17,sp,8
 1012d2c:	dc000a15 	stw	r16,40(sp)
 1012d30:	d9000015 	stw	r4,0(sp)
 1012d34:	d9400115 	stw	r5,4(sp)
 1012d38:	d809883a 	mov	r4,sp
 1012d3c:	880b883a 	mov	r5,r17
 1012d40:	dc000604 	addi	r16,sp,24
 1012d44:	dfc00c15 	stw	ra,48(sp)
 1012d48:	10131280 	call	1013128 <__unpack_f>
 1012d4c:	d9000104 	addi	r4,sp,4
 1012d50:	800b883a 	mov	r5,r16
 1012d54:	10131280 	call	1013128 <__unpack_f>
 1012d58:	d8800217 	ldw	r2,8(sp)
 1012d5c:	00c00044 	movi	r3,1
 1012d60:	01bfffc4 	movi	r6,-1
 1012d64:	1880062e 	bgeu	r3,r2,1012d80 <__gtsf2+0x60>
 1012d68:	d8800617 	ldw	r2,24(sp)
 1012d6c:	8809883a 	mov	r4,r17
 1012d70:	800b883a 	mov	r5,r16
 1012d74:	1880022e 	bgeu	r3,r2,1012d80 <__gtsf2+0x60>
 1012d78:	10131f00 	call	10131f0 <__fpcmp_parts_f>
 1012d7c:	100d883a 	mov	r6,r2
 1012d80:	3005883a 	mov	r2,r6
 1012d84:	dfc00c17 	ldw	ra,48(sp)
 1012d88:	dc400b17 	ldw	r17,44(sp)
 1012d8c:	dc000a17 	ldw	r16,40(sp)
 1012d90:	dec00d04 	addi	sp,sp,52
 1012d94:	f800283a 	ret

01012d98 <__ltsf2>:
 1012d98:	defff304 	addi	sp,sp,-52
 1012d9c:	dc400b15 	stw	r17,44(sp)
 1012da0:	dc400204 	addi	r17,sp,8
 1012da4:	dc000a15 	stw	r16,40(sp)
 1012da8:	d9000015 	stw	r4,0(sp)
 1012dac:	d9400115 	stw	r5,4(sp)
 1012db0:	d809883a 	mov	r4,sp
 1012db4:	880b883a 	mov	r5,r17
 1012db8:	dc000604 	addi	r16,sp,24
 1012dbc:	dfc00c15 	stw	ra,48(sp)
 1012dc0:	10131280 	call	1013128 <__unpack_f>
 1012dc4:	d9000104 	addi	r4,sp,4
 1012dc8:	800b883a 	mov	r5,r16
 1012dcc:	10131280 	call	1013128 <__unpack_f>
 1012dd0:	d8800217 	ldw	r2,8(sp)
 1012dd4:	00c00044 	movi	r3,1
 1012dd8:	180d883a 	mov	r6,r3
 1012ddc:	1880062e 	bgeu	r3,r2,1012df8 <__ltsf2+0x60>
 1012de0:	d8800617 	ldw	r2,24(sp)
 1012de4:	8809883a 	mov	r4,r17
 1012de8:	800b883a 	mov	r5,r16
 1012dec:	1880022e 	bgeu	r3,r2,1012df8 <__ltsf2+0x60>
 1012df0:	10131f00 	call	10131f0 <__fpcmp_parts_f>
 1012df4:	100d883a 	mov	r6,r2
 1012df8:	3005883a 	mov	r2,r6
 1012dfc:	dfc00c17 	ldw	ra,48(sp)
 1012e00:	dc400b17 	ldw	r17,44(sp)
 1012e04:	dc000a17 	ldw	r16,40(sp)
 1012e08:	dec00d04 	addi	sp,sp,52
 1012e0c:	f800283a 	ret

01012e10 <__ltdf2>:
 1012e10:	deffef04 	addi	sp,sp,-68
 1012e14:	dc400f15 	stw	r17,60(sp)
 1012e18:	dc400404 	addi	r17,sp,16
 1012e1c:	2005883a 	mov	r2,r4
 1012e20:	2807883a 	mov	r3,r5
 1012e24:	dc000e15 	stw	r16,56(sp)
 1012e28:	d809883a 	mov	r4,sp
 1012e2c:	880b883a 	mov	r5,r17
 1012e30:	dc000904 	addi	r16,sp,36
 1012e34:	d8c00115 	stw	r3,4(sp)
 1012e38:	d8800015 	stw	r2,0(sp)
 1012e3c:	d9800215 	stw	r6,8(sp)
 1012e40:	dfc01015 	stw	ra,64(sp)
 1012e44:	d9c00315 	stw	r7,12(sp)
 1012e48:	1005bac0 	call	1005bac <__unpack_d>
 1012e4c:	d9000204 	addi	r4,sp,8
 1012e50:	800b883a 	mov	r5,r16
 1012e54:	1005bac0 	call	1005bac <__unpack_d>
 1012e58:	d8800417 	ldw	r2,16(sp)
 1012e5c:	00c00044 	movi	r3,1
 1012e60:	180d883a 	mov	r6,r3
 1012e64:	1880062e 	bgeu	r3,r2,1012e80 <__ltdf2+0x70>
 1012e68:	d8800917 	ldw	r2,36(sp)
 1012e6c:	8809883a 	mov	r4,r17
 1012e70:	800b883a 	mov	r5,r16
 1012e74:	1880022e 	bgeu	r3,r2,1012e80 <__ltdf2+0x70>
 1012e78:	1005ce40 	call	1005ce4 <__fpcmp_parts_d>
 1012e7c:	100d883a 	mov	r6,r2
 1012e80:	3005883a 	mov	r2,r6
 1012e84:	dfc01017 	ldw	ra,64(sp)
 1012e88:	dc400f17 	ldw	r17,60(sp)
 1012e8c:	dc000e17 	ldw	r16,56(sp)
 1012e90:	dec01104 	addi	sp,sp,68
 1012e94:	f800283a 	ret

01012e98 <__ledf2>:
 1012e98:	deffef04 	addi	sp,sp,-68
 1012e9c:	dc400f15 	stw	r17,60(sp)
 1012ea0:	dc400404 	addi	r17,sp,16
 1012ea4:	2005883a 	mov	r2,r4
 1012ea8:	2807883a 	mov	r3,r5
 1012eac:	dc000e15 	stw	r16,56(sp)
 1012eb0:	d809883a 	mov	r4,sp
 1012eb4:	880b883a 	mov	r5,r17
 1012eb8:	dc000904 	addi	r16,sp,36
 1012ebc:	d8c00115 	stw	r3,4(sp)
 1012ec0:	d8800015 	stw	r2,0(sp)
 1012ec4:	d9800215 	stw	r6,8(sp)
 1012ec8:	dfc01015 	stw	ra,64(sp)
 1012ecc:	d9c00315 	stw	r7,12(sp)
 1012ed0:	1005bac0 	call	1005bac <__unpack_d>
 1012ed4:	d9000204 	addi	r4,sp,8
 1012ed8:	800b883a 	mov	r5,r16
 1012edc:	1005bac0 	call	1005bac <__unpack_d>
 1012ee0:	d8800417 	ldw	r2,16(sp)
 1012ee4:	00c00044 	movi	r3,1
 1012ee8:	180d883a 	mov	r6,r3
 1012eec:	1880062e 	bgeu	r3,r2,1012f08 <__ledf2+0x70>
 1012ef0:	d8800917 	ldw	r2,36(sp)
 1012ef4:	8809883a 	mov	r4,r17
 1012ef8:	800b883a 	mov	r5,r16
 1012efc:	1880022e 	bgeu	r3,r2,1012f08 <__ledf2+0x70>
 1012f00:	1005ce40 	call	1005ce4 <__fpcmp_parts_d>
 1012f04:	100d883a 	mov	r6,r2
 1012f08:	3005883a 	mov	r2,r6
 1012f0c:	dfc01017 	ldw	ra,64(sp)
 1012f10:	dc400f17 	ldw	r17,60(sp)
 1012f14:	dc000e17 	ldw	r16,56(sp)
 1012f18:	dec01104 	addi	sp,sp,68
 1012f1c:	f800283a 	ret

01012f20 <__truncdfsf2>:
 1012f20:	defff804 	addi	sp,sp,-32
 1012f24:	2005883a 	mov	r2,r4
 1012f28:	2807883a 	mov	r3,r5
 1012f2c:	d809883a 	mov	r4,sp
 1012f30:	d9400204 	addi	r5,sp,8
 1012f34:	d8c00115 	stw	r3,4(sp)
 1012f38:	d8800015 	stw	r2,0(sp)
 1012f3c:	dfc00715 	stw	ra,28(sp)
 1012f40:	1005bac0 	call	1005bac <__unpack_d>
 1012f44:	d9c00517 	ldw	r7,20(sp)
 1012f48:	da000617 	ldw	r8,24(sp)
 1012f4c:	02d00034 	movhi	r11,16384
 1012f50:	5affffc4 	addi	r11,r11,-1
 1012f54:	3812d7ba 	srli	r9,r7,30
 1012f58:	401a90ba 	slli	r13,r8,2
 1012f5c:	3ac4703a 	and	r2,r7,r11
 1012f60:	0007883a 	mov	r3,zero
 1012f64:	6a52b03a 	or	r9,r13,r9
 1012f68:	10c4b03a 	or	r2,r2,r3
 1012f6c:	d9000217 	ldw	r4,8(sp)
 1012f70:	d9400317 	ldw	r5,12(sp)
 1012f74:	d9800417 	ldw	r6,16(sp)
 1012f78:	480f883a 	mov	r7,r9
 1012f7c:	10000126 	beq	r2,zero,1012f84 <__truncdfsf2+0x64>
 1012f80:	49c00054 	ori	r7,r9,1
 1012f84:	10132980 	call	1013298 <__make_fp>
 1012f88:	dfc00717 	ldw	ra,28(sp)
 1012f8c:	dec00804 	addi	sp,sp,32
 1012f90:	f800283a 	ret

01012f94 <__floatunsidf>:
 1012f94:	defff204 	addi	sp,sp,-56
 1012f98:	dfc00d15 	stw	ra,52(sp)
 1012f9c:	ddc00c15 	stw	r23,48(sp)
 1012fa0:	dd800b15 	stw	r22,44(sp)
 1012fa4:	dd400a15 	stw	r21,40(sp)
 1012fa8:	dd000915 	stw	r20,36(sp)
 1012fac:	dcc00815 	stw	r19,32(sp)
 1012fb0:	dc800715 	stw	r18,28(sp)
 1012fb4:	dc400615 	stw	r17,24(sp)
 1012fb8:	dc000515 	stw	r16,20(sp)
 1012fbc:	d8000115 	stw	zero,4(sp)
 1012fc0:	20000f1e 	bne	r4,zero,1013000 <__floatunsidf+0x6c>
 1012fc4:	00800084 	movi	r2,2
 1012fc8:	d8800015 	stw	r2,0(sp)
 1012fcc:	d809883a 	mov	r4,sp
 1012fd0:	10058980 	call	1005898 <__pack_d>
 1012fd4:	dfc00d17 	ldw	ra,52(sp)
 1012fd8:	ddc00c17 	ldw	r23,48(sp)
 1012fdc:	dd800b17 	ldw	r22,44(sp)
 1012fe0:	dd400a17 	ldw	r21,40(sp)
 1012fe4:	dd000917 	ldw	r20,36(sp)
 1012fe8:	dcc00817 	ldw	r19,32(sp)
 1012fec:	dc800717 	ldw	r18,28(sp)
 1012ff0:	dc400617 	ldw	r17,24(sp)
 1012ff4:	dc000517 	ldw	r16,20(sp)
 1012ff8:	dec00e04 	addi	sp,sp,56
 1012ffc:	f800283a 	ret
 1013000:	008000c4 	movi	r2,3
 1013004:	00c00f04 	movi	r3,60
 1013008:	002f883a 	mov	r23,zero
 101300c:	202d883a 	mov	r22,r4
 1013010:	d8800015 	stw	r2,0(sp)
 1013014:	d8c00215 	stw	r3,8(sp)
 1013018:	d9000315 	stw	r4,12(sp)
 101301c:	ddc00415 	stw	r23,16(sp)
 1013020:	10058180 	call	1005818 <__clzsi2>
 1013024:	12400744 	addi	r9,r2,29
 1013028:	48000b16 	blt	r9,zero,1013058 <__floatunsidf+0xc4>
 101302c:	483fe726 	beq	r9,zero,1012fcc <__floatunsidf+0x38>
 1013030:	10bfff44 	addi	r2,r2,-3
 1013034:	10002e16 	blt	r2,zero,10130f0 <__floatunsidf+0x15c>
 1013038:	b0a2983a 	sll	r17,r22,r2
 101303c:	0021883a 	mov	r16,zero
 1013040:	d8800217 	ldw	r2,8(sp)
 1013044:	dc400415 	stw	r17,16(sp)
 1013048:	dc000315 	stw	r16,12(sp)
 101304c:	1245c83a 	sub	r2,r2,r9
 1013050:	d8800215 	stw	r2,8(sp)
 1013054:	003fdd06 	br	1012fcc <__floatunsidf+0x38>
 1013058:	0255c83a 	sub	r10,zero,r9
 101305c:	51bff804 	addi	r6,r10,-32
 1013060:	30001b16 	blt	r6,zero,10130d0 <__floatunsidf+0x13c>
 1013064:	b9a8d83a 	srl	r20,r23,r6
 1013068:	002b883a 	mov	r21,zero
 101306c:	000f883a 	mov	r7,zero
 1013070:	01000044 	movi	r4,1
 1013074:	0011883a 	mov	r8,zero
 1013078:	30002516 	blt	r6,zero,1013110 <__floatunsidf+0x17c>
 101307c:	21a6983a 	sll	r19,r4,r6
 1013080:	0025883a 	mov	r18,zero
 1013084:	00bfffc4 	movi	r2,-1
 1013088:	9089883a 	add	r4,r18,r2
 101308c:	988b883a 	add	r5,r19,r2
 1013090:	248d803a 	cmpltu	r6,r4,r18
 1013094:	314b883a 	add	r5,r6,r5
 1013098:	b104703a 	and	r2,r22,r4
 101309c:	b946703a 	and	r3,r23,r5
 10130a0:	10c4b03a 	or	r2,r2,r3
 10130a4:	10000226 	beq	r2,zero,10130b0 <__floatunsidf+0x11c>
 10130a8:	01c00044 	movi	r7,1
 10130ac:	0011883a 	mov	r8,zero
 10130b0:	d9000217 	ldw	r4,8(sp)
 10130b4:	a1c4b03a 	or	r2,r20,r7
 10130b8:	aa06b03a 	or	r3,r21,r8
 10130bc:	2249c83a 	sub	r4,r4,r9
 10130c0:	d8c00415 	stw	r3,16(sp)
 10130c4:	d9000215 	stw	r4,8(sp)
 10130c8:	d8800315 	stw	r2,12(sp)
 10130cc:	003fbf06 	br	1012fcc <__floatunsidf+0x38>
 10130d0:	bdc7883a 	add	r3,r23,r23
 10130d4:	008007c4 	movi	r2,31
 10130d8:	1285c83a 	sub	r2,r2,r10
 10130dc:	1886983a 	sll	r3,r3,r2
 10130e0:	b2a8d83a 	srl	r20,r22,r10
 10130e4:	baaad83a 	srl	r21,r23,r10
 10130e8:	1d28b03a 	or	r20,r3,r20
 10130ec:	003fdf06 	br	101306c <__floatunsidf+0xd8>
 10130f0:	b006d07a 	srli	r3,r22,1
 10130f4:	008007c4 	movi	r2,31
 10130f8:	1245c83a 	sub	r2,r2,r9
 10130fc:	1886d83a 	srl	r3,r3,r2
 1013100:	ba62983a 	sll	r17,r23,r9
 1013104:	b260983a 	sll	r16,r22,r9
 1013108:	1c62b03a 	or	r17,r3,r17
 101310c:	003fcc06 	br	1013040 <__floatunsidf+0xac>
 1013110:	2006d07a 	srli	r3,r4,1
 1013114:	008007c4 	movi	r2,31
 1013118:	1285c83a 	sub	r2,r2,r10
 101311c:	18a6d83a 	srl	r19,r3,r2
 1013120:	22a4983a 	sll	r18,r4,r10
 1013124:	003fd706 	br	1013084 <__floatunsidf+0xf0>

01013128 <__unpack_f>:
 1013128:	21800017 	ldw	r6,0(r4)
 101312c:	00c02034 	movhi	r3,128
 1013130:	18ffffc4 	addi	r3,r3,-1
 1013134:	3004d5fa 	srli	r2,r6,23
 1013138:	3008d7fa 	srli	r4,r6,31
 101313c:	30ce703a 	and	r7,r6,r3
 1013140:	10c03fcc 	andi	r3,r2,255
 1013144:	29000115 	stw	r4,4(r5)
 1013148:	1800131e 	bne	r3,zero,1013198 <__unpack_f+0x70>
 101314c:	38000f26 	beq	r7,zero,101318c <__unpack_f+0x64>
 1013150:	380691fa 	slli	r3,r7,7
 1013154:	01bfe084 	movi	r6,-126
 1013158:	008000c4 	movi	r2,3
 101315c:	01100034 	movhi	r4,16384
 1013160:	213fffc4 	addi	r4,r4,-1
 1013164:	28800015 	stw	r2,0(r5)
 1013168:	29800215 	stw	r6,8(r5)
 101316c:	20c00536 	bltu	r4,r3,1013184 <__unpack_f+0x5c>
 1013170:	3005883a 	mov	r2,r6
 1013174:	18c7883a 	add	r3,r3,r3
 1013178:	10bfffc4 	addi	r2,r2,-1
 101317c:	20fffd2e 	bgeu	r4,r3,1013174 <__unpack_f+0x4c>
 1013180:	28800215 	stw	r2,8(r5)
 1013184:	28c00315 	stw	r3,12(r5)
 1013188:	f800283a 	ret
 101318c:	00800084 	movi	r2,2
 1013190:	28800015 	stw	r2,0(r5)
 1013194:	f800283a 	ret
 1013198:	00803fc4 	movi	r2,255
 101319c:	18800826 	beq	r3,r2,10131c0 <__unpack_f+0x98>
 10131a0:	380491fa 	slli	r2,r7,7
 10131a4:	18ffe044 	addi	r3,r3,-127
 10131a8:	28c00215 	stw	r3,8(r5)
 10131ac:	10900034 	orhi	r2,r2,16384
 10131b0:	28800315 	stw	r2,12(r5)
 10131b4:	008000c4 	movi	r2,3
 10131b8:	28800015 	stw	r2,0(r5)
 10131bc:	f800283a 	ret
 10131c0:	3800031e 	bne	r7,zero,10131d0 <__unpack_f+0xa8>
 10131c4:	00800104 	movi	r2,4
 10131c8:	28800015 	stw	r2,0(r5)
 10131cc:	f800283a 	ret
 10131d0:	3080042c 	andhi	r2,r6,16
 10131d4:	10000426 	beq	r2,zero,10131e8 <__unpack_f+0xc0>
 10131d8:	00800044 	movi	r2,1
 10131dc:	28800015 	stw	r2,0(r5)
 10131e0:	29c00315 	stw	r7,12(r5)
 10131e4:	f800283a 	ret
 10131e8:	28000015 	stw	zero,0(r5)
 10131ec:	003ffc06 	br	10131e0 <__unpack_f+0xb8>

010131f0 <__fpcmp_parts_f>:
 10131f0:	21800017 	ldw	r6,0(r4)
 10131f4:	00c00044 	movi	r3,1
 10131f8:	19800a2e 	bgeu	r3,r6,1013224 <__fpcmp_parts_f+0x34>
 10131fc:	28800017 	ldw	r2,0(r5)
 1013200:	1880082e 	bgeu	r3,r2,1013224 <__fpcmp_parts_f+0x34>
 1013204:	00c00104 	movi	r3,4
 1013208:	30c01e26 	beq	r6,r3,1013284 <__fpcmp_parts_f+0x94>
 101320c:	10c01a26 	beq	r2,r3,1013278 <__fpcmp_parts_f+0x88>
 1013210:	00c00084 	movi	r3,2
 1013214:	30c00526 	beq	r6,r3,101322c <__fpcmp_parts_f+0x3c>
 1013218:	10c0071e 	bne	r2,r3,1013238 <__fpcmp_parts_f+0x48>
 101321c:	20800117 	ldw	r2,4(r4)
 1013220:	1000091e 	bne	r2,zero,1013248 <__fpcmp_parts_f+0x58>
 1013224:	00800044 	movi	r2,1
 1013228:	f800283a 	ret
 101322c:	10c0121e 	bne	r2,r3,1013278 <__fpcmp_parts_f+0x88>
 1013230:	0005883a 	mov	r2,zero
 1013234:	f800283a 	ret
 1013238:	20c00117 	ldw	r3,4(r4)
 101323c:	28800117 	ldw	r2,4(r5)
 1013240:	18800326 	beq	r3,r2,1013250 <__fpcmp_parts_f+0x60>
 1013244:	183ff726 	beq	r3,zero,1013224 <__fpcmp_parts_f+0x34>
 1013248:	00bfffc4 	movi	r2,-1
 101324c:	f800283a 	ret
 1013250:	21800217 	ldw	r6,8(r4)
 1013254:	28800217 	ldw	r2,8(r5)
 1013258:	11bffa16 	blt	r2,r6,1013244 <__fpcmp_parts_f+0x54>
 101325c:	30800416 	blt	r6,r2,1013270 <__fpcmp_parts_f+0x80>
 1013260:	21000317 	ldw	r4,12(r4)
 1013264:	29400317 	ldw	r5,12(r5)
 1013268:	293ff636 	bltu	r5,r4,1013244 <__fpcmp_parts_f+0x54>
 101326c:	217ff02e 	bgeu	r4,r5,1013230 <__fpcmp_parts_f+0x40>
 1013270:	183fec1e 	bne	r3,zero,1013224 <__fpcmp_parts_f+0x34>
 1013274:	003ff406 	br	1013248 <__fpcmp_parts_f+0x58>
 1013278:	28800117 	ldw	r2,4(r5)
 101327c:	103fe91e 	bne	r2,zero,1013224 <__fpcmp_parts_f+0x34>
 1013280:	003ff106 	br	1013248 <__fpcmp_parts_f+0x58>
 1013284:	11bfe51e 	bne	r2,r6,101321c <__fpcmp_parts_f+0x2c>
 1013288:	28c00117 	ldw	r3,4(r5)
 101328c:	20800117 	ldw	r2,4(r4)
 1013290:	1885c83a 	sub	r2,r3,r2
 1013294:	f800283a 	ret

01013298 <__make_fp>:
 1013298:	defffb04 	addi	sp,sp,-20
 101329c:	d9000015 	stw	r4,0(sp)
 10132a0:	d809883a 	mov	r4,sp
 10132a4:	dfc00415 	stw	ra,16(sp)
 10132a8:	d9400115 	stw	r5,4(sp)
 10132ac:	d9800215 	stw	r6,8(sp)
 10132b0:	d9c00315 	stw	r7,12(sp)
 10132b4:	10132c40 	call	10132c4 <__pack_f>
 10132b8:	dfc00417 	ldw	ra,16(sp)
 10132bc:	dec00504 	addi	sp,sp,20
 10132c0:	f800283a 	ret

010132c4 <__pack_f>:
 10132c4:	20c00017 	ldw	r3,0(r4)
 10132c8:	01c00044 	movi	r7,1
 10132cc:	21800317 	ldw	r6,12(r4)
 10132d0:	21400117 	ldw	r5,4(r4)
 10132d4:	38c02d2e 	bgeu	r7,r3,101338c <__pack_f+0xc8>
 10132d8:	00800104 	movi	r2,4
 10132dc:	18802826 	beq	r3,r2,1013380 <__pack_f+0xbc>
 10132e0:	00800084 	movi	r2,2
 10132e4:	18800126 	beq	r3,r2,10132ec <__pack_f+0x28>
 10132e8:	3000101e 	bne	r6,zero,101332c <__pack_f+0x68>
 10132ec:	000d883a 	mov	r6,zero
 10132f0:	0007883a 	mov	r3,zero
 10132f4:	19003fcc 	andi	r4,r3,255
 10132f8:	200895fa 	slli	r4,r4,23
 10132fc:	00c02034 	movhi	r3,128
 1013300:	18ffffc4 	addi	r3,r3,-1
 1013304:	30c6703a 	and	r3,r6,r3
 1013308:	10a0002c 	andhi	r2,r2,32768
 101330c:	10c4b03a 	or	r2,r2,r3
 1013310:	280a97fa 	slli	r5,r5,31
 1013314:	1104b03a 	or	r2,r2,r4
 1013318:	00e00034 	movhi	r3,32768
 101331c:	18ffffc4 	addi	r3,r3,-1
 1013320:	10c4703a 	and	r2,r2,r3
 1013324:	1144b03a 	or	r2,r2,r5
 1013328:	f800283a 	ret
 101332c:	21000217 	ldw	r4,8(r4)
 1013330:	00bfe084 	movi	r2,-126
 1013334:	20801b16 	blt	r4,r2,10133a4 <__pack_f+0xe0>
 1013338:	00801fc4 	movi	r2,127
 101333c:	11001016 	blt	r2,r4,1013380 <__pack_f+0xbc>
 1013340:	308e703a 	and	r7,r6,r2
 1013344:	2087883a 	add	r3,r4,r2
 1013348:	00801004 	movi	r2,64
 101334c:	38800526 	beq	r7,r2,1013364 <__pack_f+0xa0>
 1013350:	31800fc4 	addi	r6,r6,63
 1013354:	30000716 	blt	r6,zero,1013374 <__pack_f+0xb0>
 1013358:	300490ba 	slli	r2,r6,2
 101335c:	100cd27a 	srli	r6,r2,9
 1013360:	003fe406 	br	10132f4 <__pack_f+0x30>
 1013364:	3080200c 	andi	r2,r6,128
 1013368:	103ffa26 	beq	r2,zero,1013354 <__pack_f+0x90>
 101336c:	31cd883a 	add	r6,r6,r7
 1013370:	003ff806 	br	1013354 <__pack_f+0x90>
 1013374:	300cd07a 	srli	r6,r6,1
 1013378:	18c00044 	addi	r3,r3,1
 101337c:	003ff606 	br	1013358 <__pack_f+0x94>
 1013380:	000d883a 	mov	r6,zero
 1013384:	00ffffc4 	movi	r3,-1
 1013388:	003fda06 	br	10132f4 <__pack_f+0x30>
 101338c:	31800434 	orhi	r6,r6,16
 1013390:	00802034 	movhi	r2,128
 1013394:	10bfffc4 	addi	r2,r2,-1
 1013398:	308c703a 	and	r6,r6,r2
 101339c:	00ffffc4 	movi	r3,-1
 10133a0:	003fd406 	br	10132f4 <__pack_f+0x30>
 10133a4:	1109c83a 	sub	r4,r2,r4
 10133a8:	00800644 	movi	r2,25
 10133ac:	11001216 	blt	r2,r4,10133f8 <__pack_f+0x134>
 10133b0:	3904983a 	sll	r2,r7,r4
 10133b4:	3106d83a 	srl	r3,r6,r4
 10133b8:	10bfffc4 	addi	r2,r2,-1
 10133bc:	3084703a 	and	r2,r6,r2
 10133c0:	1004c03a 	cmpne	r2,r2,zero
 10133c4:	1886b03a 	or	r3,r3,r2
 10133c8:	19001fcc 	andi	r4,r3,127
 10133cc:	00801004 	movi	r2,64
 10133d0:	20800c26 	beq	r4,r2,1013404 <__pack_f+0x140>
 10133d4:	18c00fc4 	addi	r3,r3,63
 10133d8:	00900034 	movhi	r2,16384
 10133dc:	10bfffc4 	addi	r2,r2,-1
 10133e0:	180cd1fa 	srli	r6,r3,7
 10133e4:	10c7803a 	cmpltu	r3,r2,r3
 10133e8:	00802034 	movhi	r2,128
 10133ec:	10bfffc4 	addi	r2,r2,-1
 10133f0:	308c703a 	and	r6,r6,r2
 10133f4:	003fbf06 	br	10132f4 <__pack_f+0x30>
 10133f8:	0007883a 	mov	r3,zero
 10133fc:	000d883a 	mov	r6,zero
 1013400:	003ff906 	br	10133e8 <__pack_f+0x124>
 1013404:	1880200c 	andi	r2,r3,128
 1013408:	10000126 	beq	r2,zero,1013410 <__pack_f+0x14c>
 101340c:	1907883a 	add	r3,r3,r4
 1013410:	180cd1fa 	srli	r6,r3,7
 1013414:	00900034 	movhi	r2,16384
 1013418:	10bfffc4 	addi	r2,r2,-1
 101341c:	10c7803a 	cmpltu	r3,r2,r3
 1013420:	003ff106 	br	10133e8 <__pack_f+0x124>

01013424 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 1013424:	defff804 	addi	sp,sp,-32
 1013428:	dfc00715 	stw	ra,28(sp)
 101342c:	df000615 	stw	fp,24(sp)
 1013430:	df000604 	addi	fp,sp,24
 1013434:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 1013438:	e0bffc17 	ldw	r2,-16(fp)
 101343c:	1004803a 	cmplt	r2,r2,zero
 1013440:	1000081e 	bne	r2,zero,1013464 <close+0x40>
 1013444:	e0bffc17 	ldw	r2,-16(fp)
 1013448:	10800324 	muli	r2,r2,12
 101344c:	1007883a 	mov	r3,r2
 1013450:	008040b4 	movhi	r2,258
 1013454:	10814004 	addi	r2,r2,1280
 1013458:	1887883a 	add	r3,r3,r2
 101345c:	e0ffff15 	stw	r3,-4(fp)
 1013460:	00000106 	br	1013468 <close+0x44>
 1013464:	e03fff15 	stw	zero,-4(fp)
 1013468:	e0bfff17 	ldw	r2,-4(fp)
 101346c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 1013470:	e0bffb17 	ldw	r2,-20(fp)
 1013474:	1005003a 	cmpeq	r2,r2,zero
 1013478:	10001d1e 	bne	r2,zero,10134f0 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 101347c:	e0bffb17 	ldw	r2,-20(fp)
 1013480:	10800017 	ldw	r2,0(r2)
 1013484:	10800417 	ldw	r2,16(r2)
 1013488:	1005003a 	cmpeq	r2,r2,zero
 101348c:	1000071e 	bne	r2,zero,10134ac <close+0x88>
 1013490:	e0bffb17 	ldw	r2,-20(fp)
 1013494:	10800017 	ldw	r2,0(r2)
 1013498:	10800417 	ldw	r2,16(r2)
 101349c:	e13ffb17 	ldw	r4,-20(fp)
 10134a0:	103ee83a 	callr	r2
 10134a4:	e0bffe15 	stw	r2,-8(fp)
 10134a8:	00000106 	br	10134b0 <close+0x8c>
 10134ac:	e03ffe15 	stw	zero,-8(fp)
 10134b0:	e0bffe17 	ldw	r2,-8(fp)
 10134b4:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 10134b8:	e13ffc17 	ldw	r4,-16(fp)
 10134bc:	1013e840 	call	1013e84 <alt_release_fd>
    if (rval < 0)
 10134c0:	e0bffa17 	ldw	r2,-24(fp)
 10134c4:	1004403a 	cmpge	r2,r2,zero
 10134c8:	1000071e 	bne	r2,zero,10134e8 <close+0xc4>
    {
      ALT_ERRNO = -rval;
 10134cc:	10135200 	call	1013520 <alt_get_errno>
 10134d0:	e0fffa17 	ldw	r3,-24(fp)
 10134d4:	00c7c83a 	sub	r3,zero,r3
 10134d8:	10c00015 	stw	r3,0(r2)
      return -1;
 10134dc:	00bfffc4 	movi	r2,-1
 10134e0:	e0bffd15 	stw	r2,-12(fp)
 10134e4:	00000806 	br	1013508 <close+0xe4>
    }
    return 0;
 10134e8:	e03ffd15 	stw	zero,-12(fp)
 10134ec:	00000606 	br	1013508 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 10134f0:	10135200 	call	1013520 <alt_get_errno>
 10134f4:	1007883a 	mov	r3,r2
 10134f8:	00801444 	movi	r2,81
 10134fc:	18800015 	stw	r2,0(r3)
    return -1;
 1013500:	00bfffc4 	movi	r2,-1
 1013504:	e0bffd15 	stw	r2,-12(fp)
 1013508:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 101350c:	e037883a 	mov	sp,fp
 1013510:	dfc00117 	ldw	ra,4(sp)
 1013514:	df000017 	ldw	fp,0(sp)
 1013518:	dec00204 	addi	sp,sp,8
 101351c:	f800283a 	ret

01013520 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1013520:	defffd04 	addi	sp,sp,-12
 1013524:	dfc00215 	stw	ra,8(sp)
 1013528:	df000115 	stw	fp,4(sp)
 101352c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1013530:	008040b4 	movhi	r2,258
 1013534:	1086ce04 	addi	r2,r2,6968
 1013538:	10800017 	ldw	r2,0(r2)
 101353c:	1005003a 	cmpeq	r2,r2,zero
 1013540:	1000061e 	bne	r2,zero,101355c <alt_get_errno+0x3c>
 1013544:	008040b4 	movhi	r2,258
 1013548:	1086ce04 	addi	r2,r2,6968
 101354c:	10800017 	ldw	r2,0(r2)
 1013550:	103ee83a 	callr	r2
 1013554:	e0bfff15 	stw	r2,-4(fp)
 1013558:	00000306 	br	1013568 <alt_get_errno+0x48>
 101355c:	008040b4 	movhi	r2,258
 1013560:	108e8304 	addi	r2,r2,14860
 1013564:	e0bfff15 	stw	r2,-4(fp)
 1013568:	e0bfff17 	ldw	r2,-4(fp)
}
 101356c:	e037883a 	mov	sp,fp
 1013570:	dfc00117 	ldw	ra,4(sp)
 1013574:	df000017 	ldw	fp,0(sp)
 1013578:	dec00204 	addi	sp,sp,8
 101357c:	f800283a 	ret

01013580 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 1013580:	defffc04 	addi	sp,sp,-16
 1013584:	df000315 	stw	fp,12(sp)
 1013588:	df000304 	addi	fp,sp,12
 101358c:	e13ffd15 	stw	r4,-12(fp)
 1013590:	e17ffe15 	stw	r5,-8(fp)
 1013594:	e1bfff15 	stw	r6,-4(fp)
  return len;
 1013598:	e0bfff17 	ldw	r2,-4(fp)
}
 101359c:	e037883a 	mov	sp,fp
 10135a0:	df000017 	ldw	fp,0(sp)
 10135a4:	dec00104 	addi	sp,sp,4
 10135a8:	f800283a 	ret

010135ac <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 10135ac:	defff904 	addi	sp,sp,-28
 10135b0:	dfc00615 	stw	ra,24(sp)
 10135b4:	df000515 	stw	fp,20(sp)
 10135b8:	df000504 	addi	fp,sp,20
 10135bc:	e13ffc15 	stw	r4,-16(fp)
 10135c0:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 10135c4:	e0bffc17 	ldw	r2,-16(fp)
 10135c8:	1004803a 	cmplt	r2,r2,zero
 10135cc:	1000081e 	bne	r2,zero,10135f0 <fstat+0x44>
 10135d0:	e0bffc17 	ldw	r2,-16(fp)
 10135d4:	10800324 	muli	r2,r2,12
 10135d8:	1007883a 	mov	r3,r2
 10135dc:	008040b4 	movhi	r2,258
 10135e0:	10814004 	addi	r2,r2,1280
 10135e4:	1887883a 	add	r3,r3,r2
 10135e8:	e0ffff15 	stw	r3,-4(fp)
 10135ec:	00000106 	br	10135f4 <fstat+0x48>
 10135f0:	e03fff15 	stw	zero,-4(fp)
 10135f4:	e0bfff17 	ldw	r2,-4(fp)
 10135f8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 10135fc:	e0bffb17 	ldw	r2,-20(fp)
 1013600:	1005003a 	cmpeq	r2,r2,zero
 1013604:	1000121e 	bne	r2,zero,1013650 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 1013608:	e0bffb17 	ldw	r2,-20(fp)
 101360c:	10800017 	ldw	r2,0(r2)
 1013610:	10800817 	ldw	r2,32(r2)
 1013614:	1005003a 	cmpeq	r2,r2,zero
 1013618:	1000081e 	bne	r2,zero,101363c <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
 101361c:	e0bffb17 	ldw	r2,-20(fp)
 1013620:	10800017 	ldw	r2,0(r2)
 1013624:	10800817 	ldw	r2,32(r2)
 1013628:	e13ffb17 	ldw	r4,-20(fp)
 101362c:	e17ffd17 	ldw	r5,-12(fp)
 1013630:	103ee83a 	callr	r2
 1013634:	e0bffe15 	stw	r2,-8(fp)
 1013638:	00000b06 	br	1013668 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 101363c:	e0fffd17 	ldw	r3,-12(fp)
 1013640:	00880004 	movi	r2,8192
 1013644:	18800115 	stw	r2,4(r3)
      return 0;
 1013648:	e03ffe15 	stw	zero,-8(fp)
 101364c:	00000606 	br	1013668 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1013650:	10136800 	call	1013680 <alt_get_errno>
 1013654:	1007883a 	mov	r3,r2
 1013658:	00801444 	movi	r2,81
 101365c:	18800015 	stw	r2,0(r3)
    return -1;
 1013660:	00bfffc4 	movi	r2,-1
 1013664:	e0bffe15 	stw	r2,-8(fp)
 1013668:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 101366c:	e037883a 	mov	sp,fp
 1013670:	dfc00117 	ldw	ra,4(sp)
 1013674:	df000017 	ldw	fp,0(sp)
 1013678:	dec00204 	addi	sp,sp,8
 101367c:	f800283a 	ret

01013680 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1013680:	defffd04 	addi	sp,sp,-12
 1013684:	dfc00215 	stw	ra,8(sp)
 1013688:	df000115 	stw	fp,4(sp)
 101368c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1013690:	008040b4 	movhi	r2,258
 1013694:	1086ce04 	addi	r2,r2,6968
 1013698:	10800017 	ldw	r2,0(r2)
 101369c:	1005003a 	cmpeq	r2,r2,zero
 10136a0:	1000061e 	bne	r2,zero,10136bc <alt_get_errno+0x3c>
 10136a4:	008040b4 	movhi	r2,258
 10136a8:	1086ce04 	addi	r2,r2,6968
 10136ac:	10800017 	ldw	r2,0(r2)
 10136b0:	103ee83a 	callr	r2
 10136b4:	e0bfff15 	stw	r2,-4(fp)
 10136b8:	00000306 	br	10136c8 <alt_get_errno+0x48>
 10136bc:	008040b4 	movhi	r2,258
 10136c0:	108e8304 	addi	r2,r2,14860
 10136c4:	e0bfff15 	stw	r2,-4(fp)
 10136c8:	e0bfff17 	ldw	r2,-4(fp)
}
 10136cc:	e037883a 	mov	sp,fp
 10136d0:	dfc00117 	ldw	ra,4(sp)
 10136d4:	df000017 	ldw	fp,0(sp)
 10136d8:	dec00204 	addi	sp,sp,8
 10136dc:	f800283a 	ret

010136e0 <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
 10136e0:	defff504 	addi	sp,sp,-44
 10136e4:	dfc00a15 	stw	ra,40(sp)
 10136e8:	df000915 	stw	fp,36(sp)
 10136ec:	dc800815 	stw	r18,32(sp)
 10136f0:	dc400715 	stw	r17,28(sp)
 10136f4:	dc000615 	stw	r16,24(sp)
 10136f8:	df000604 	addi	fp,sp,24
 10136fc:	e13ffd15 	stw	r4,-12(fp)
 1013700:	e17ffe15 	stw	r5,-8(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
 1013704:	e0bffe17 	ldw	r2,-8(fp)
 1013708:	e0bffc15 	stw	r2,-16(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 101370c:	008040b4 	movhi	r2,258
 1013710:	108e8f04 	addi	r2,r2,14908
 1013714:	10800017 	ldw	r2,0(r2)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
 1013718:	e0bffb15 	stw	r2,-20(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 101371c:	008040b4 	movhi	r2,258
 1013720:	108e8e04 	addi	r2,r2,14904
 1013724:	10800017 	ldw	r2,0(r2)
  alt_u32 tick_rate = alt_ticks_per_second ();
 1013728:	e0bffa15 	stw	r2,-24(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
 101372c:	e0bffa17 	ldw	r2,-24(fp)
 1013730:	1005003a 	cmpeq	r2,r2,zero
 1013734:	1000661e 	bne	r2,zero,10138d0 <gettimeofday+0x1f0>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
 1013738:	d0a7c717 	ldw	r2,-24804(gp)
 101373c:	1021883a 	mov	r16,r2
 1013740:	e13ffb17 	ldw	r4,-20(fp)
 1013744:	e17ffa17 	ldw	r5,-24(fp)
 1013748:	10057700 	call	1005770 <__udivsi3>
 101374c:	8085883a 	add	r2,r16,r2
 1013750:	1007883a 	mov	r3,r2
 1013754:	e0bffd17 	ldw	r2,-12(fp)
 1013758:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
 101375c:	008040b4 	movhi	r2,258
 1013760:	108e8a04 	addi	r2,r2,14888
 1013764:	10800017 	ldw	r2,0(r2)
 1013768:	1025883a 	mov	r18,r2
 101376c:	e43ffb17 	ldw	r16,-20(fp)
 1013770:	0023883a 	mov	r17,zero
 1013774:	010003f4 	movhi	r4,15
 1013778:	21109004 	addi	r4,r4,16960
 101377c:	e17ffa17 	ldw	r5,-24(fp)
 1013780:	10057700 	call	1005770 <__udivsi3>
 1013784:	1009883a 	mov	r4,r2
 1013788:	2005883a 	mov	r2,r4
 101378c:	0007883a 	mov	r3,zero
 1013790:	8009883a 	mov	r4,r16
 1013794:	880b883a 	mov	r5,r17
 1013798:	100d883a 	mov	r6,r2
 101379c:	180f883a 	mov	r7,r3
 10137a0:	10057800 	call	1005780 <__muldi3>
 10137a4:	1009883a 	mov	r4,r2
 10137a8:	180b883a 	mov	r5,r3
 10137ac:	2005883a 	mov	r2,r4
 10137b0:	2807883a 	mov	r3,r5
 10137b4:	1009883a 	mov	r4,r2
 10137b8:	180b883a 	mov	r5,r3
 10137bc:	018003f4 	movhi	r6,15
 10137c0:	31909004 	addi	r6,r6,16960
 10137c4:	000f883a 	mov	r7,zero
 10137c8:	10126f80 	call	10126f8 <__umoddi3>
 10137cc:	1009883a 	mov	r4,r2
 10137d0:	180b883a 	mov	r5,r3
 10137d4:	2005883a 	mov	r2,r4
 10137d8:	2807883a 	mov	r3,r5
 10137dc:	9085883a 	add	r2,r18,r2
 10137e0:	1007883a 	mov	r3,r2
 10137e4:	e0bffd17 	ldw	r2,-12(fp)
 10137e8:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 10137ec:	00001506 	br	1013844 <gettimeofday+0x164>
      if (ptimeval->tv_sec <= 0)
 10137f0:	e0bffd17 	ldw	r2,-12(fp)
 10137f4:	10800017 	ldw	r2,0(r2)
 10137f8:	10800048 	cmpgei	r2,r2,1
 10137fc:	1000051e 	bne	r2,zero,1013814 <gettimeofday+0x134>
      {
          ptimeval->tv_sec = 0;
 1013800:	e0bffd17 	ldw	r2,-12(fp)
 1013804:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
 1013808:	e0bffd17 	ldw	r2,-12(fp)
 101380c:	10000115 	stw	zero,4(r2)
          break;
 1013810:	00001d06 	br	1013888 <gettimeofday+0x1a8>
      }
      else
      {
          ptimeval->tv_sec--;
 1013814:	e0bffd17 	ldw	r2,-12(fp)
 1013818:	10800017 	ldw	r2,0(r2)
 101381c:	10ffffc4 	addi	r3,r2,-1
 1013820:	e0bffd17 	ldw	r2,-12(fp)
 1013824:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
 1013828:	e0bffd17 	ldw	r2,-12(fp)
 101382c:	10c00117 	ldw	r3,4(r2)
 1013830:	008003f4 	movhi	r2,15
 1013834:	10909004 	addi	r2,r2,16960
 1013838:	1887883a 	add	r3,r3,r2
 101383c:	e0bffd17 	ldw	r2,-12(fp)
 1013840:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 1013844:	e0bffd17 	ldw	r2,-12(fp)
 1013848:	10800117 	ldw	r2,4(r2)
 101384c:	1004803a 	cmplt	r2,r2,zero
 1013850:	103fe71e 	bne	r2,zero,10137f0 <gettimeofday+0x110>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 1013854:	00000c06 	br	1013888 <gettimeofday+0x1a8>
      ptimeval->tv_sec++;
 1013858:	e0bffd17 	ldw	r2,-12(fp)
 101385c:	10800017 	ldw	r2,0(r2)
 1013860:	10c00044 	addi	r3,r2,1
 1013864:	e0bffd17 	ldw	r2,-12(fp)
 1013868:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
 101386c:	e0bffd17 	ldw	r2,-12(fp)
 1013870:	10c00117 	ldw	r3,4(r2)
 1013874:	00bffc74 	movhi	r2,65521
 1013878:	10af7004 	addi	r2,r2,-16960
 101387c:	1887883a 	add	r3,r3,r2
 1013880:	e0bffd17 	ldw	r2,-12(fp)
 1013884:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 1013888:	e0bffd17 	ldw	r2,-12(fp)
 101388c:	10c00117 	ldw	r3,4(r2)
 1013890:	008003f4 	movhi	r2,15
 1013894:	10908fc4 	addi	r2,r2,16959
 1013898:	10ffef16 	blt	r2,r3,1013858 <gettimeofday+0x178>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
 101389c:	e0bffc17 	ldw	r2,-16(fp)
 10138a0:	1005003a 	cmpeq	r2,r2,zero
 10138a4:	1000081e 	bne	r2,zero,10138c8 <gettimeofday+0x1e8>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
 10138a8:	d0e7c517 	ldw	r3,-24812(gp)
 10138ac:	e0bffc17 	ldw	r2,-16(fp)
 10138b0:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
 10138b4:	008040b4 	movhi	r2,258
 10138b8:	108e8804 	addi	r2,r2,14880
 10138bc:	10c00017 	ldw	r3,0(r2)
 10138c0:	e0bffc17 	ldw	r2,-16(fp)
 10138c4:	10c00115 	stw	r3,4(r2)
    }

    return 0;
 10138c8:	e03fff15 	stw	zero,-4(fp)
 10138cc:	00000206 	br	10138d8 <gettimeofday+0x1f8>
  }

  return -ENOTSUP;
 10138d0:	00bfde84 	movi	r2,-134
 10138d4:	e0bfff15 	stw	r2,-4(fp)
 10138d8:	e0bfff17 	ldw	r2,-4(fp)
}
 10138dc:	e037883a 	mov	sp,fp
 10138e0:	dfc00417 	ldw	ra,16(sp)
 10138e4:	df000317 	ldw	fp,12(sp)
 10138e8:	dc800217 	ldw	r18,8(sp)
 10138ec:	dc400117 	ldw	r17,4(sp)
 10138f0:	dc000017 	ldw	r16,0(sp)
 10138f4:	dec00504 	addi	sp,sp,20
 10138f8:	f800283a 	ret

010138fc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 10138fc:	deffeb04 	addi	sp,sp,-84
 1013900:	dfc01415 	stw	ra,80(sp)
 1013904:	df001315 	stw	fp,76(sp)
 1013908:	df001304 	addi	fp,sp,76
 101390c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1013910:	e0bffd17 	ldw	r2,-12(fp)
 1013914:	1004803a 	cmplt	r2,r2,zero
 1013918:	1000081e 	bne	r2,zero,101393c <isatty+0x40>
 101391c:	e0bffd17 	ldw	r2,-12(fp)
 1013920:	10800324 	muli	r2,r2,12
 1013924:	1007883a 	mov	r3,r2
 1013928:	008040b4 	movhi	r2,258
 101392c:	10814004 	addi	r2,r2,1280
 1013930:	1887883a 	add	r3,r3,r2
 1013934:	e0ffff15 	stw	r3,-4(fp)
 1013938:	00000106 	br	1013940 <isatty+0x44>
 101393c:	e03fff15 	stw	zero,-4(fp)
 1013940:	e0bfff17 	ldw	r2,-4(fp)
 1013944:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 1013948:	e0bfed17 	ldw	r2,-76(fp)
 101394c:	1005003a 	cmpeq	r2,r2,zero
 1013950:	10000f1e 	bne	r2,zero,1013990 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 1013954:	e0bfed17 	ldw	r2,-76(fp)
 1013958:	10800017 	ldw	r2,0(r2)
 101395c:	10800817 	ldw	r2,32(r2)
 1013960:	1004c03a 	cmpne	r2,r2,zero
 1013964:	1000031e 	bne	r2,zero,1013974 <isatty+0x78>
    {
      return 1;
 1013968:	00800044 	movi	r2,1
 101396c:	e0bffe15 	stw	r2,-8(fp)
 1013970:	00000c06 	br	10139a4 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 1013974:	e17fee04 	addi	r5,fp,-72
 1013978:	e13ffd17 	ldw	r4,-12(fp)
 101397c:	10135ac0 	call	10135ac <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 1013980:	e0bfef17 	ldw	r2,-68(fp)
 1013984:	10880020 	cmpeqi	r2,r2,8192
 1013988:	e0bffe15 	stw	r2,-8(fp)
 101398c:	00000506 	br	10139a4 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1013990:	10139bc0 	call	10139bc <alt_get_errno>
 1013994:	1007883a 	mov	r3,r2
 1013998:	00801444 	movi	r2,81
 101399c:	18800015 	stw	r2,0(r3)
    return 0;
 10139a0:	e03ffe15 	stw	zero,-8(fp)
 10139a4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 10139a8:	e037883a 	mov	sp,fp
 10139ac:	dfc00117 	ldw	ra,4(sp)
 10139b0:	df000017 	ldw	fp,0(sp)
 10139b4:	dec00204 	addi	sp,sp,8
 10139b8:	f800283a 	ret

010139bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10139bc:	defffd04 	addi	sp,sp,-12
 10139c0:	dfc00215 	stw	ra,8(sp)
 10139c4:	df000115 	stw	fp,4(sp)
 10139c8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10139cc:	008040b4 	movhi	r2,258
 10139d0:	1086ce04 	addi	r2,r2,6968
 10139d4:	10800017 	ldw	r2,0(r2)
 10139d8:	1005003a 	cmpeq	r2,r2,zero
 10139dc:	1000061e 	bne	r2,zero,10139f8 <alt_get_errno+0x3c>
 10139e0:	008040b4 	movhi	r2,258
 10139e4:	1086ce04 	addi	r2,r2,6968
 10139e8:	10800017 	ldw	r2,0(r2)
 10139ec:	103ee83a 	callr	r2
 10139f0:	e0bfff15 	stw	r2,-4(fp)
 10139f4:	00000306 	br	1013a04 <alt_get_errno+0x48>
 10139f8:	008040b4 	movhi	r2,258
 10139fc:	108e8304 	addi	r2,r2,14860
 1013a00:	e0bfff15 	stw	r2,-4(fp)
 1013a04:	e0bfff17 	ldw	r2,-4(fp)
}
 1013a08:	e037883a 	mov	sp,fp
 1013a0c:	dfc00117 	ldw	ra,4(sp)
 1013a10:	df000017 	ldw	fp,0(sp)
 1013a14:	dec00204 	addi	sp,sp,8
 1013a18:	f800283a 	ret

01013a1c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 1013a1c:	defffe04 	addi	sp,sp,-8
 1013a20:	dfc00115 	stw	ra,4(sp)
 1013a24:	df000015 	stw	fp,0(sp)
 1013a28:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 1013a2c:	010040b4 	movhi	r4,258
 1013a30:	2106d304 	addi	r4,r4,6988
 1013a34:	014040b4 	movhi	r5,258
 1013a38:	297f2704 	addi	r5,r5,-868
 1013a3c:	018040b4 	movhi	r6,258
 1013a40:	3186d304 	addi	r6,r6,6988
 1013a44:	1013a9c0 	call	1013a9c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 1013a48:	01004034 	movhi	r4,256
 1013a4c:	21000804 	addi	r4,r4,32
 1013a50:	01404034 	movhi	r5,256
 1013a54:	29400804 	addi	r5,r5,32
 1013a58:	01804034 	movhi	r6,256
 1013a5c:	31806e04 	addi	r6,r6,440
 1013a60:	1013a9c0 	call	1013a9c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 1013a64:	010040b4 	movhi	r4,258
 1013a68:	213ae704 	addi	r4,r4,-5220
 1013a6c:	014040b4 	movhi	r5,258
 1013a70:	297ae704 	addi	r5,r5,-5220
 1013a74:	018040b4 	movhi	r6,258
 1013a78:	31bf2704 	addi	r6,r6,-868
 1013a7c:	1013a9c0 	call	1013a9c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 1013a80:	101c4900 	call	101c490 <alt_dcache_flush_all>
  alt_icache_flush_all();
 1013a84:	101c7440 	call	101c744 <alt_icache_flush_all>
}
 1013a88:	e037883a 	mov	sp,fp
 1013a8c:	dfc00117 	ldw	ra,4(sp)
 1013a90:	df000017 	ldw	fp,0(sp)
 1013a94:	dec00204 	addi	sp,sp,8
 1013a98:	f800283a 	ret

01013a9c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 1013a9c:	defffc04 	addi	sp,sp,-16
 1013aa0:	df000315 	stw	fp,12(sp)
 1013aa4:	df000304 	addi	fp,sp,12
 1013aa8:	e13ffd15 	stw	r4,-12(fp)
 1013aac:	e17ffe15 	stw	r5,-8(fp)
 1013ab0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 1013ab4:	e0fffe17 	ldw	r3,-8(fp)
 1013ab8:	e0bffd17 	ldw	r2,-12(fp)
 1013abc:	18800e26 	beq	r3,r2,1013af8 <alt_load_section+0x5c>
  {
    while( to != end )
 1013ac0:	00000a06 	br	1013aec <alt_load_section+0x50>
    {
      *to++ = *from++;
 1013ac4:	e0bffd17 	ldw	r2,-12(fp)
 1013ac8:	10c00017 	ldw	r3,0(r2)
 1013acc:	e0bffe17 	ldw	r2,-8(fp)
 1013ad0:	10c00015 	stw	r3,0(r2)
 1013ad4:	e0bffe17 	ldw	r2,-8(fp)
 1013ad8:	10800104 	addi	r2,r2,4
 1013adc:	e0bffe15 	stw	r2,-8(fp)
 1013ae0:	e0bffd17 	ldw	r2,-12(fp)
 1013ae4:	10800104 	addi	r2,r2,4
 1013ae8:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 1013aec:	e0fffe17 	ldw	r3,-8(fp)
 1013af0:	e0bfff17 	ldw	r2,-4(fp)
 1013af4:	18bff31e 	bne	r3,r2,1013ac4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 1013af8:	e037883a 	mov	sp,fp
 1013afc:	df000017 	ldw	fp,0(sp)
 1013b00:	dec00104 	addi	sp,sp,4
 1013b04:	f800283a 	ret

01013b08 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 1013b08:	defff804 	addi	sp,sp,-32
 1013b0c:	dfc00715 	stw	ra,28(sp)
 1013b10:	df000615 	stw	fp,24(sp)
 1013b14:	df000604 	addi	fp,sp,24
 1013b18:	e13ffc15 	stw	r4,-16(fp)
 1013b1c:	e17ffd15 	stw	r5,-12(fp)
 1013b20:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 1013b24:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1013b28:	e0bffc17 	ldw	r2,-16(fp)
 1013b2c:	1004803a 	cmplt	r2,r2,zero
 1013b30:	1000081e 	bne	r2,zero,1013b54 <lseek+0x4c>
 1013b34:	e0bffc17 	ldw	r2,-16(fp)
 1013b38:	10800324 	muli	r2,r2,12
 1013b3c:	1007883a 	mov	r3,r2
 1013b40:	008040b4 	movhi	r2,258
 1013b44:	10814004 	addi	r2,r2,1280
 1013b48:	1887883a 	add	r3,r3,r2
 1013b4c:	e0ffff15 	stw	r3,-4(fp)
 1013b50:	00000106 	br	1013b58 <lseek+0x50>
 1013b54:	e03fff15 	stw	zero,-4(fp)
 1013b58:	e0bfff17 	ldw	r2,-4(fp)
 1013b5c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 1013b60:	e0bffb17 	ldw	r2,-20(fp)
 1013b64:	1005003a 	cmpeq	r2,r2,zero
 1013b68:	1000111e 	bne	r2,zero,1013bb0 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 1013b6c:	e0bffb17 	ldw	r2,-20(fp)
 1013b70:	10800017 	ldw	r2,0(r2)
 1013b74:	10800717 	ldw	r2,28(r2)
 1013b78:	1005003a 	cmpeq	r2,r2,zero
 1013b7c:	1000091e 	bne	r2,zero,1013ba4 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 1013b80:	e0bffb17 	ldw	r2,-20(fp)
 1013b84:	10800017 	ldw	r2,0(r2)
 1013b88:	10800717 	ldw	r2,28(r2)
 1013b8c:	e13ffb17 	ldw	r4,-20(fp)
 1013b90:	e17ffd17 	ldw	r5,-12(fp)
 1013b94:	e1bffe17 	ldw	r6,-8(fp)
 1013b98:	103ee83a 	callr	r2
 1013b9c:	e0bffa15 	stw	r2,-24(fp)
 1013ba0:	00000506 	br	1013bb8 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 1013ba4:	00bfde84 	movi	r2,-134
 1013ba8:	e0bffa15 	stw	r2,-24(fp)
 1013bac:	00000206 	br	1013bb8 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
 1013bb0:	00bfebc4 	movi	r2,-81
 1013bb4:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 1013bb8:	e0bffa17 	ldw	r2,-24(fp)
 1013bbc:	1004403a 	cmpge	r2,r2,zero
 1013bc0:	1000071e 	bne	r2,zero,1013be0 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
 1013bc4:	1013bf80 	call	1013bf8 <alt_get_errno>
 1013bc8:	1007883a 	mov	r3,r2
 1013bcc:	e0bffa17 	ldw	r2,-24(fp)
 1013bd0:	0085c83a 	sub	r2,zero,r2
 1013bd4:	18800015 	stw	r2,0(r3)
    rc = -1;
 1013bd8:	00bfffc4 	movi	r2,-1
 1013bdc:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 1013be0:	e0bffa17 	ldw	r2,-24(fp)
}
 1013be4:	e037883a 	mov	sp,fp
 1013be8:	dfc00117 	ldw	ra,4(sp)
 1013bec:	df000017 	ldw	fp,0(sp)
 1013bf0:	dec00204 	addi	sp,sp,8
 1013bf4:	f800283a 	ret

01013bf8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1013bf8:	defffd04 	addi	sp,sp,-12
 1013bfc:	dfc00215 	stw	ra,8(sp)
 1013c00:	df000115 	stw	fp,4(sp)
 1013c04:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1013c08:	008040b4 	movhi	r2,258
 1013c0c:	1086ce04 	addi	r2,r2,6968
 1013c10:	10800017 	ldw	r2,0(r2)
 1013c14:	1005003a 	cmpeq	r2,r2,zero
 1013c18:	1000061e 	bne	r2,zero,1013c34 <alt_get_errno+0x3c>
 1013c1c:	008040b4 	movhi	r2,258
 1013c20:	1086ce04 	addi	r2,r2,6968
 1013c24:	10800017 	ldw	r2,0(r2)
 1013c28:	103ee83a 	callr	r2
 1013c2c:	e0bfff15 	stw	r2,-4(fp)
 1013c30:	00000306 	br	1013c40 <alt_get_errno+0x48>
 1013c34:	008040b4 	movhi	r2,258
 1013c38:	108e8304 	addi	r2,r2,14860
 1013c3c:	e0bfff15 	stw	r2,-4(fp)
 1013c40:	e0bfff17 	ldw	r2,-4(fp)
}
 1013c44:	e037883a 	mov	sp,fp
 1013c48:	dfc00117 	ldw	ra,4(sp)
 1013c4c:	df000017 	ldw	fp,0(sp)
 1013c50:	dec00204 	addi	sp,sp,8
 1013c54:	f800283a 	ret

01013c58 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 1013c58:	defffd04 	addi	sp,sp,-12
 1013c5c:	dfc00215 	stw	ra,8(sp)
 1013c60:	df000115 	stw	fp,4(sp)
 1013c64:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1013c68:	0009883a 	mov	r4,zero
 1013c6c:	10142f40 	call	10142f4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 1013c70:	10143280 	call	1014328 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 1013c74:	010040b4 	movhi	r4,258
 1013c78:	213e2c04 	addi	r4,r4,-1872
 1013c7c:	014040b4 	movhi	r5,258
 1013c80:	297e2c04 	addi	r5,r5,-1872
 1013c84:	018040b4 	movhi	r6,258
 1013c88:	31be2c04 	addi	r6,r6,-1872
 1013c8c:	101c8380 	call	101c838 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 1013c90:	101c5e80 	call	101c5e8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 1013c94:	010040b4 	movhi	r4,258
 1013c98:	21319304 	addi	r4,r4,-14772
 1013c9c:	101d0340 	call	101d034 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 1013ca0:	d127c917 	ldw	r4,-24796(gp)
 1013ca4:	d167ca17 	ldw	r5,-24792(gp)
 1013ca8:	d1a7cb17 	ldw	r6,-24788(gp)
 1013cac:	10011800 	call	1001180 <main>
 1013cb0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 1013cb4:	01000044 	movi	r4,1
 1013cb8:	10134240 	call	1013424 <close>
  exit (result);
 1013cbc:	e13fff17 	ldw	r4,-4(fp)
 1013cc0:	101d0480 	call	101d048 <exit>

01013cc4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 1013cc4:	defffe04 	addi	sp,sp,-8
 1013cc8:	df000115 	stw	fp,4(sp)
 1013ccc:	df000104 	addi	fp,sp,4
 1013cd0:	e13fff15 	stw	r4,-4(fp)
}
 1013cd4:	e037883a 	mov	sp,fp
 1013cd8:	df000017 	ldw	fp,0(sp)
 1013cdc:	dec00104 	addi	sp,sp,4
 1013ce0:	f800283a 	ret

01013ce4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 1013ce4:	defffe04 	addi	sp,sp,-8
 1013ce8:	df000115 	stw	fp,4(sp)
 1013cec:	df000104 	addi	fp,sp,4
 1013cf0:	e13fff15 	stw	r4,-4(fp)
}
 1013cf4:	e037883a 	mov	sp,fp
 1013cf8:	df000017 	ldw	fp,0(sp)
 1013cfc:	dec00104 	addi	sp,sp,4
 1013d00:	f800283a 	ret

01013d04 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 1013d04:	defff704 	addi	sp,sp,-36
 1013d08:	dfc00815 	stw	ra,32(sp)
 1013d0c:	df000715 	stw	fp,28(sp)
 1013d10:	df000704 	addi	fp,sp,28
 1013d14:	e13ffb15 	stw	r4,-20(fp)
 1013d18:	e17ffc15 	stw	r5,-16(fp)
 1013d1c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1013d20:	e0bffb17 	ldw	r2,-20(fp)
 1013d24:	1004803a 	cmplt	r2,r2,zero
 1013d28:	1000081e 	bne	r2,zero,1013d4c <read+0x48>
 1013d2c:	e0bffb17 	ldw	r2,-20(fp)
 1013d30:	10800324 	muli	r2,r2,12
 1013d34:	1007883a 	mov	r3,r2
 1013d38:	008040b4 	movhi	r2,258
 1013d3c:	10814004 	addi	r2,r2,1280
 1013d40:	1887883a 	add	r3,r3,r2
 1013d44:	e0ffff15 	stw	r3,-4(fp)
 1013d48:	00000106 	br	1013d50 <read+0x4c>
 1013d4c:	e03fff15 	stw	zero,-4(fp)
 1013d50:	e0bfff17 	ldw	r2,-4(fp)
 1013d54:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 1013d58:	e0bffa17 	ldw	r2,-24(fp)
 1013d5c:	1005003a 	cmpeq	r2,r2,zero
 1013d60:	1000241e 	bne	r2,zero,1013df4 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 1013d64:	e0bffa17 	ldw	r2,-24(fp)
 1013d68:	10800217 	ldw	r2,8(r2)
 1013d6c:	108000cc 	andi	r2,r2,3
 1013d70:	10800060 	cmpeqi	r2,r2,1
 1013d74:	10001a1e 	bne	r2,zero,1013de0 <read+0xdc>
 1013d78:	e0bffa17 	ldw	r2,-24(fp)
 1013d7c:	10800017 	ldw	r2,0(r2)
 1013d80:	10800517 	ldw	r2,20(r2)
 1013d84:	1005003a 	cmpeq	r2,r2,zero
 1013d88:	1000151e 	bne	r2,zero,1013de0 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 1013d8c:	e0bffa17 	ldw	r2,-24(fp)
 1013d90:	10800017 	ldw	r2,0(r2)
 1013d94:	10800517 	ldw	r2,20(r2)
 1013d98:	e17ffc17 	ldw	r5,-16(fp)
 1013d9c:	e1bffd17 	ldw	r6,-12(fp)
 1013da0:	e13ffa17 	ldw	r4,-24(fp)
 1013da4:	103ee83a 	callr	r2
 1013da8:	e0bff915 	stw	r2,-28(fp)
 1013dac:	e0bff917 	ldw	r2,-28(fp)
 1013db0:	1004403a 	cmpge	r2,r2,zero
 1013db4:	1000071e 	bne	r2,zero,1013dd4 <read+0xd0>
        {
          ALT_ERRNO = -rval;
 1013db8:	1013e240 	call	1013e24 <alt_get_errno>
 1013dbc:	e0fff917 	ldw	r3,-28(fp)
 1013dc0:	00c7c83a 	sub	r3,zero,r3
 1013dc4:	10c00015 	stw	r3,0(r2)
          return -1;
 1013dc8:	00bfffc4 	movi	r2,-1
 1013dcc:	e0bffe15 	stw	r2,-8(fp)
 1013dd0:	00000e06 	br	1013e0c <read+0x108>
        }
        return rval;
 1013dd4:	e0bff917 	ldw	r2,-28(fp)
 1013dd8:	e0bffe15 	stw	r2,-8(fp)
 1013ddc:	00000b06 	br	1013e0c <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
 1013de0:	1013e240 	call	1013e24 <alt_get_errno>
 1013de4:	1007883a 	mov	r3,r2
 1013de8:	00800344 	movi	r2,13
 1013dec:	18800015 	stw	r2,0(r3)
 1013df0:	00000406 	br	1013e04 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 1013df4:	1013e240 	call	1013e24 <alt_get_errno>
 1013df8:	1007883a 	mov	r3,r2
 1013dfc:	00801444 	movi	r2,81
 1013e00:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1013e04:	00bfffc4 	movi	r2,-1
 1013e08:	e0bffe15 	stw	r2,-8(fp)
 1013e0c:	e0bffe17 	ldw	r2,-8(fp)
}
 1013e10:	e037883a 	mov	sp,fp
 1013e14:	dfc00117 	ldw	ra,4(sp)
 1013e18:	df000017 	ldw	fp,0(sp)
 1013e1c:	dec00204 	addi	sp,sp,8
 1013e20:	f800283a 	ret

01013e24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1013e24:	defffd04 	addi	sp,sp,-12
 1013e28:	dfc00215 	stw	ra,8(sp)
 1013e2c:	df000115 	stw	fp,4(sp)
 1013e30:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1013e34:	008040b4 	movhi	r2,258
 1013e38:	1086ce04 	addi	r2,r2,6968
 1013e3c:	10800017 	ldw	r2,0(r2)
 1013e40:	1005003a 	cmpeq	r2,r2,zero
 1013e44:	1000061e 	bne	r2,zero,1013e60 <alt_get_errno+0x3c>
 1013e48:	008040b4 	movhi	r2,258
 1013e4c:	1086ce04 	addi	r2,r2,6968
 1013e50:	10800017 	ldw	r2,0(r2)
 1013e54:	103ee83a 	callr	r2
 1013e58:	e0bfff15 	stw	r2,-4(fp)
 1013e5c:	00000306 	br	1013e6c <alt_get_errno+0x48>
 1013e60:	008040b4 	movhi	r2,258
 1013e64:	108e8304 	addi	r2,r2,14860
 1013e68:	e0bfff15 	stw	r2,-4(fp)
 1013e6c:	e0bfff17 	ldw	r2,-4(fp)
}
 1013e70:	e037883a 	mov	sp,fp
 1013e74:	dfc00117 	ldw	ra,4(sp)
 1013e78:	df000017 	ldw	fp,0(sp)
 1013e7c:	dec00204 	addi	sp,sp,8
 1013e80:	f800283a 	ret

01013e84 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 1013e84:	defffe04 	addi	sp,sp,-8
 1013e88:	df000115 	stw	fp,4(sp)
 1013e8c:	df000104 	addi	fp,sp,4
 1013e90:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 1013e94:	e0bfff17 	ldw	r2,-4(fp)
 1013e98:	108000d0 	cmplti	r2,r2,3
 1013e9c:	10000d1e 	bne	r2,zero,1013ed4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 1013ea0:	e0bfff17 	ldw	r2,-4(fp)
 1013ea4:	00c040b4 	movhi	r3,258
 1013ea8:	18c14004 	addi	r3,r3,1280
 1013eac:	10800324 	muli	r2,r2,12
 1013eb0:	10c5883a 	add	r2,r2,r3
 1013eb4:	10800204 	addi	r2,r2,8
 1013eb8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 1013ebc:	e0bfff17 	ldw	r2,-4(fp)
 1013ec0:	00c040b4 	movhi	r3,258
 1013ec4:	18c14004 	addi	r3,r3,1280
 1013ec8:	10800324 	muli	r2,r2,12
 1013ecc:	10c5883a 	add	r2,r2,r3
 1013ed0:	10000015 	stw	zero,0(r2)
  }
}
 1013ed4:	e037883a 	mov	sp,fp
 1013ed8:	df000017 	ldw	fp,0(sp)
 1013edc:	dec00104 	addi	sp,sp,4
 1013ee0:	f800283a 	ret

01013ee4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 1013ee4:	defff804 	addi	sp,sp,-32
 1013ee8:	df000715 	stw	fp,28(sp)
 1013eec:	df000704 	addi	fp,sp,28
 1013ef0:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1013ef4:	0005303a 	rdctl	r2,status
 1013ef8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1013efc:	e0fffb17 	ldw	r3,-20(fp)
 1013f00:	00bfff84 	movi	r2,-2
 1013f04:	1884703a 	and	r2,r3,r2
 1013f08:	1001703a 	wrctl	status,r2
  
  return context;
 1013f0c:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 1013f10:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 1013f14:	d0a00d17 	ldw	r2,-32716(gp)
 1013f18:	10c000c4 	addi	r3,r2,3
 1013f1c:	00bfff04 	movi	r2,-4
 1013f20:	1884703a 	and	r2,r3,r2
 1013f24:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 1013f28:	d0e00d17 	ldw	r3,-32716(gp)
 1013f2c:	e0bffe17 	ldw	r2,-8(fp)
 1013f30:	1887883a 	add	r3,r3,r2
 1013f34:	00806034 	movhi	r2,384
 1013f38:	10800004 	addi	r2,r2,0
 1013f3c:	10c0072e 	bgeu	r2,r3,1013f5c <sbrk+0x78>
 1013f40:	e0bffd17 	ldw	r2,-12(fp)
 1013f44:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1013f48:	e0bffa17 	ldw	r2,-24(fp)
 1013f4c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 1013f50:	00bfffc4 	movi	r2,-1
 1013f54:	e0bfff15 	stw	r2,-4(fp)
 1013f58:	00000c06 	br	1013f8c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 1013f5c:	d0a00d17 	ldw	r2,-32716(gp)
 1013f60:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 1013f64:	d0e00d17 	ldw	r3,-32716(gp)
 1013f68:	e0bffe17 	ldw	r2,-8(fp)
 1013f6c:	1885883a 	add	r2,r3,r2
 1013f70:	d0a00d15 	stw	r2,-32716(gp)
 1013f74:	e0bffd17 	ldw	r2,-12(fp)
 1013f78:	e0bff915 	stw	r2,-28(fp)
 1013f7c:	e0bff917 	ldw	r2,-28(fp)
 1013f80:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 1013f84:	e0bffc17 	ldw	r2,-16(fp)
 1013f88:	e0bfff15 	stw	r2,-4(fp)
 1013f8c:	e0bfff17 	ldw	r2,-4(fp)
} 
 1013f90:	e037883a 	mov	sp,fp
 1013f94:	df000017 	ldw	fp,0(sp)
 1013f98:	dec00104 	addi	sp,sp,4
 1013f9c:	f800283a 	ret

01013fa0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 1013fa0:	defffa04 	addi	sp,sp,-24
 1013fa4:	df000515 	stw	fp,20(sp)
 1013fa8:	df000504 	addi	fp,sp,20
 1013fac:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1013fb0:	0005303a 	rdctl	r2,status
 1013fb4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1013fb8:	e0fffd17 	ldw	r3,-12(fp)
 1013fbc:	00bfff84 	movi	r2,-2
 1013fc0:	1884703a 	and	r2,r3,r2
 1013fc4:	1001703a 	wrctl	status,r2
  
  return context;
 1013fc8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 1013fcc:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 1013fd0:	e0bfff17 	ldw	r2,-4(fp)
 1013fd4:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 1013fd8:	e0bffc17 	ldw	r2,-16(fp)
 1013fdc:	10c00017 	ldw	r3,0(r2)
 1013fe0:	e0bffc17 	ldw	r2,-16(fp)
 1013fe4:	10800117 	ldw	r2,4(r2)
 1013fe8:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 1013fec:	e0bffc17 	ldw	r2,-16(fp)
 1013ff0:	10c00117 	ldw	r3,4(r2)
 1013ff4:	e0bffc17 	ldw	r2,-16(fp)
 1013ff8:	10800017 	ldw	r2,0(r2)
 1013ffc:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 1014000:	e0fffc17 	ldw	r3,-16(fp)
 1014004:	e0bffc17 	ldw	r2,-16(fp)
 1014008:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 101400c:	e0fffc17 	ldw	r3,-16(fp)
 1014010:	e0bffc17 	ldw	r2,-16(fp)
 1014014:	18800015 	stw	r2,0(r3)
 1014018:	e0bffe17 	ldw	r2,-8(fp)
 101401c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1014020:	e0bffb17 	ldw	r2,-20(fp)
 1014024:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 1014028:	e037883a 	mov	sp,fp
 101402c:	df000017 	ldw	fp,0(sp)
 1014030:	dec00104 	addi	sp,sp,4
 1014034:	f800283a 	ret

01014038 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 1014038:	defffb04 	addi	sp,sp,-20
 101403c:	dfc00415 	stw	ra,16(sp)
 1014040:	df000315 	stw	fp,12(sp)
 1014044:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 1014048:	d0a00e17 	ldw	r2,-32712(gp)
 101404c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 1014050:	d0a7cd17 	ldw	r2,-24780(gp)
 1014054:	10800044 	addi	r2,r2,1
 1014058:	d0a7cd15 	stw	r2,-24780(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 101405c:	00003106 	br	1014124 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 1014060:	e0bffe17 	ldw	r2,-8(fp)
 1014064:	10800017 	ldw	r2,0(r2)
 1014068:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 101406c:	e0bffe17 	ldw	r2,-8(fp)
 1014070:	10800403 	ldbu	r2,16(r2)
 1014074:	10803fcc 	andi	r2,r2,255
 1014078:	1005003a 	cmpeq	r2,r2,zero
 101407c:	1000051e 	bne	r2,zero,1014094 <alt_tick+0x5c>
 1014080:	d0a7cd17 	ldw	r2,-24780(gp)
 1014084:	1004c03a 	cmpne	r2,r2,zero
 1014088:	1000021e 	bne	r2,zero,1014094 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 101408c:	e0bffe17 	ldw	r2,-8(fp)
 1014090:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 1014094:	e0bffe17 	ldw	r2,-8(fp)
 1014098:	10c00217 	ldw	r3,8(r2)
 101409c:	d0a7cd17 	ldw	r2,-24780(gp)
 10140a0:	10c01e36 	bltu	r2,r3,101411c <alt_tick+0xe4>
 10140a4:	e0bffe17 	ldw	r2,-8(fp)
 10140a8:	10800403 	ldbu	r2,16(r2)
 10140ac:	10803fcc 	andi	r2,r2,255
 10140b0:	1004c03a 	cmpne	r2,r2,zero
 10140b4:	1000191e 	bne	r2,zero,101411c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 10140b8:	e0bffe17 	ldw	r2,-8(fp)
 10140bc:	10c00317 	ldw	r3,12(r2)
 10140c0:	e0bffe17 	ldw	r2,-8(fp)
 10140c4:	11000517 	ldw	r4,20(r2)
 10140c8:	183ee83a 	callr	r3
 10140cc:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 10140d0:	e0bffd17 	ldw	r2,-12(fp)
 10140d4:	1004c03a 	cmpne	r2,r2,zero
 10140d8:	1000031e 	bne	r2,zero,10140e8 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 10140dc:	e13ffe17 	ldw	r4,-8(fp)
 10140e0:	1013fa00 	call	1013fa0 <alt_alarm_stop>
 10140e4:	00000d06 	br	101411c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 10140e8:	e0bffe17 	ldw	r2,-8(fp)
 10140ec:	10c00217 	ldw	r3,8(r2)
 10140f0:	e0bffd17 	ldw	r2,-12(fp)
 10140f4:	1887883a 	add	r3,r3,r2
 10140f8:	e0bffe17 	ldw	r2,-8(fp)
 10140fc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 1014100:	e0bffe17 	ldw	r2,-8(fp)
 1014104:	10c00217 	ldw	r3,8(r2)
 1014108:	d0a7cd17 	ldw	r2,-24780(gp)
 101410c:	1880032e 	bgeu	r3,r2,101411c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 1014110:	e0fffe17 	ldw	r3,-8(fp)
 1014114:	00800044 	movi	r2,1
 1014118:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 101411c:	e0bfff17 	ldw	r2,-4(fp)
 1014120:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1014124:	d0e00e04 	addi	r3,gp,-32712
 1014128:	e0bffe17 	ldw	r2,-8(fp)
 101412c:	10ffcc1e 	bne	r2,r3,1014060 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 1014130:	e037883a 	mov	sp,fp
 1014134:	dfc00117 	ldw	ra,4(sp)
 1014138:	df000017 	ldw	fp,0(sp)
 101413c:	dec00204 	addi	sp,sp,8
 1014140:	f800283a 	ret

01014144 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 1014144:	defffd04 	addi	sp,sp,-12
 1014148:	dfc00215 	stw	ra,8(sp)
 101414c:	df000115 	stw	fp,4(sp)
 1014150:	df000104 	addi	fp,sp,4
 1014154:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 1014158:	e13fff17 	ldw	r4,-4(fp)
 101415c:	101c3440 	call	101c344 <alt_busy_sleep>
}
 1014160:	e037883a 	mov	sp,fp
 1014164:	dfc00117 	ldw	ra,4(sp)
 1014168:	df000017 	ldw	fp,0(sp)
 101416c:	dec00204 	addi	sp,sp,8
 1014170:	f800283a 	ret

01014174 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 1014174:	defff704 	addi	sp,sp,-36
 1014178:	dfc00815 	stw	ra,32(sp)
 101417c:	df000715 	stw	fp,28(sp)
 1014180:	df000704 	addi	fp,sp,28
 1014184:	e13ffb15 	stw	r4,-20(fp)
 1014188:	e17ffc15 	stw	r5,-16(fp)
 101418c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1014190:	e0bffb17 	ldw	r2,-20(fp)
 1014194:	1004803a 	cmplt	r2,r2,zero
 1014198:	1000081e 	bne	r2,zero,10141bc <write+0x48>
 101419c:	e0bffb17 	ldw	r2,-20(fp)
 10141a0:	10800324 	muli	r2,r2,12
 10141a4:	1007883a 	mov	r3,r2
 10141a8:	008040b4 	movhi	r2,258
 10141ac:	10814004 	addi	r2,r2,1280
 10141b0:	1887883a 	add	r3,r3,r2
 10141b4:	e0ffff15 	stw	r3,-4(fp)
 10141b8:	00000106 	br	10141c0 <write+0x4c>
 10141bc:	e03fff15 	stw	zero,-4(fp)
 10141c0:	e0bfff17 	ldw	r2,-4(fp)
 10141c4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 10141c8:	e0bffa17 	ldw	r2,-24(fp)
 10141cc:	1005003a 	cmpeq	r2,r2,zero
 10141d0:	1000241e 	bne	r2,zero,1014264 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 10141d4:	e0bffa17 	ldw	r2,-24(fp)
 10141d8:	10800217 	ldw	r2,8(r2)
 10141dc:	108000cc 	andi	r2,r2,3
 10141e0:	1005003a 	cmpeq	r2,r2,zero
 10141e4:	10001a1e 	bne	r2,zero,1014250 <write+0xdc>
 10141e8:	e0bffa17 	ldw	r2,-24(fp)
 10141ec:	10800017 	ldw	r2,0(r2)
 10141f0:	10800617 	ldw	r2,24(r2)
 10141f4:	1005003a 	cmpeq	r2,r2,zero
 10141f8:	1000151e 	bne	r2,zero,1014250 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 10141fc:	e0bffa17 	ldw	r2,-24(fp)
 1014200:	10800017 	ldw	r2,0(r2)
 1014204:	10800617 	ldw	r2,24(r2)
 1014208:	e17ffc17 	ldw	r5,-16(fp)
 101420c:	e1bffd17 	ldw	r6,-12(fp)
 1014210:	e13ffa17 	ldw	r4,-24(fp)
 1014214:	103ee83a 	callr	r2
 1014218:	e0bff915 	stw	r2,-28(fp)
 101421c:	e0bff917 	ldw	r2,-28(fp)
 1014220:	1004403a 	cmpge	r2,r2,zero
 1014224:	1000071e 	bne	r2,zero,1014244 <write+0xd0>
      {
        ALT_ERRNO = -rval;
 1014228:	10142940 	call	1014294 <alt_get_errno>
 101422c:	e0fff917 	ldw	r3,-28(fp)
 1014230:	00c7c83a 	sub	r3,zero,r3
 1014234:	10c00015 	stw	r3,0(r2)
        return -1;
 1014238:	00bfffc4 	movi	r2,-1
 101423c:	e0bffe15 	stw	r2,-8(fp)
 1014240:	00000e06 	br	101427c <write+0x108>
      }
      return rval;
 1014244:	e0bff917 	ldw	r2,-28(fp)
 1014248:	e0bffe15 	stw	r2,-8(fp)
 101424c:	00000b06 	br	101427c <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
 1014250:	10142940 	call	1014294 <alt_get_errno>
 1014254:	1007883a 	mov	r3,r2
 1014258:	00800344 	movi	r2,13
 101425c:	18800015 	stw	r2,0(r3)
 1014260:	00000406 	br	1014274 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 1014264:	10142940 	call	1014294 <alt_get_errno>
 1014268:	1007883a 	mov	r3,r2
 101426c:	00801444 	movi	r2,81
 1014270:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1014274:	00bfffc4 	movi	r2,-1
 1014278:	e0bffe15 	stw	r2,-8(fp)
 101427c:	e0bffe17 	ldw	r2,-8(fp)
}
 1014280:	e037883a 	mov	sp,fp
 1014284:	dfc00117 	ldw	ra,4(sp)
 1014288:	df000017 	ldw	fp,0(sp)
 101428c:	dec00204 	addi	sp,sp,8
 1014290:	f800283a 	ret

01014294 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1014294:	defffd04 	addi	sp,sp,-12
 1014298:	dfc00215 	stw	ra,8(sp)
 101429c:	df000115 	stw	fp,4(sp)
 10142a0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10142a4:	008040b4 	movhi	r2,258
 10142a8:	1086ce04 	addi	r2,r2,6968
 10142ac:	10800017 	ldw	r2,0(r2)
 10142b0:	1005003a 	cmpeq	r2,r2,zero
 10142b4:	1000061e 	bne	r2,zero,10142d0 <alt_get_errno+0x3c>
 10142b8:	008040b4 	movhi	r2,258
 10142bc:	1086ce04 	addi	r2,r2,6968
 10142c0:	10800017 	ldw	r2,0(r2)
 10142c4:	103ee83a 	callr	r2
 10142c8:	e0bfff15 	stw	r2,-4(fp)
 10142cc:	00000306 	br	10142dc <alt_get_errno+0x48>
 10142d0:	008040b4 	movhi	r2,258
 10142d4:	108e8304 	addi	r2,r2,14860
 10142d8:	e0bfff15 	stw	r2,-4(fp)
 10142dc:	e0bfff17 	ldw	r2,-4(fp)
}
 10142e0:	e037883a 	mov	sp,fp
 10142e4:	dfc00117 	ldw	ra,4(sp)
 10142e8:	df000017 	ldw	fp,0(sp)
 10142ec:	dec00204 	addi	sp,sp,8
 10142f0:	f800283a 	ret

010142f4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 10142f4:	defffd04 	addi	sp,sp,-12
 10142f8:	dfc00215 	stw	ra,8(sp)
 10142fc:	df000115 	stw	fp,4(sp)
 1014300:	df000104 	addi	fp,sp,4
 1014304:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_SYSTEM, nios2_system);
 1014308:	101cd340 	call	101cd34 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 101430c:	00800044 	movi	r2,1
 1014310:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 1014314:	e037883a 	mov	sp,fp
 1014318:	dfc00117 	ldw	ra,4(sp)
 101431c:	df000017 	ldw	fp,0(sp)
 1014320:	dec00204 	addi	sp,sp,8
 1014324:	f800283a 	ret

01014328 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 1014328:	defffd04 	addi	sp,sp,-12
 101432c:	dfc00215 	stw	ra,8(sp)
 1014330:	df000115 	stw	fp,4(sp)
 1014334:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( SDCARD_TIMER, sdcard_timer);
 1014338:	00c040b4 	movhi	r3,258
 101433c:	18ce9d04 	addi	r3,r3,14964
 1014340:	00921004 	movi	r2,18496
 1014344:	18800015 	stw	r2,0(r3)
 1014348:	00c040b4 	movhi	r3,258
 101434c:	18ce9e04 	addi	r3,r3,14968
 1014350:	0080bef4 	movhi	r2,763
 1014354:	10bc2004 	addi	r2,r2,-3968
 1014358:	18800015 	stw	r2,0(r3)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, JTAG);
 101435c:	010040b4 	movhi	r4,258
 1014360:	2101aa04 	addi	r4,r4,1704
 1014364:	000b883a 	mov	r5,zero
 1014368:	000d883a 	mov	r6,zero
 101436c:	1018e100 	call	1018e10 <altera_avalon_jtag_uart_init>
 1014370:	010040b4 	movhi	r4,258
 1014374:	2101a004 	addi	r4,r4,1664
 1014378:	101468c0 	call	101468c <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_0, audio_0);
 101437c:	010040b4 	movhi	r4,258
 1014380:	2105b804 	addi	r4,r4,5856
 1014384:	101468c0 	call	101468c <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 1014388:	010040b4 	movhi	r4,258
 101438c:	2105c404 	addi	r4,r4,5904
 1014390:	10198200 	call	1019820 <alt_up_character_lcd_init>
 1014394:	010040b4 	movhi	r4,258
 1014398:	2105c404 	addi	r4,r4,5904
 101439c:	101468c0 	call	101468c <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_0, ps2_0);
 10143a0:	010040b4 	movhi	r4,258
 10143a4:	2105cf04 	addi	r4,r4,5948
 10143a8:	1019dcc0 	call	1019dcc <alt_up_ps2_init>
 10143ac:	010040b4 	movhi	r4,258
 10143b0:	2105cf04 	addi	r4,r4,5948
 10143b4:	101468c0 	call	101468c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VIDEO_CHARACTER_BUFFER_WITH_DMA_0, video_character_buffer_with_dma_0);
 10143b8:	008040b4 	movhi	r2,258
 10143bc:	1085dd04 	addi	r2,r2,6004
 10143c0:	10800a17 	ldw	r2,40(r2)
 10143c4:	10800104 	addi	r2,r2,4
 10143c8:	10800017 	ldw	r2,0(r2)
 10143cc:	10ffffcc 	andi	r3,r2,65535
 10143d0:	008040b4 	movhi	r2,258
 10143d4:	1085dd04 	addi	r2,r2,6004
 10143d8:	10c00c15 	stw	r3,48(r2)
 10143dc:	008040b4 	movhi	r2,258
 10143e0:	1085dd04 	addi	r2,r2,6004
 10143e4:	10800a17 	ldw	r2,40(r2)
 10143e8:	10800104 	addi	r2,r2,4
 10143ec:	10800017 	ldw	r2,0(r2)
 10143f0:	1005d43a 	srai	r2,r2,16
 10143f4:	10ffffcc 	andi	r3,r2,65535
 10143f8:	008040b4 	movhi	r2,258
 10143fc:	1085dd04 	addi	r2,r2,6004
 1014400:	10c00d15 	stw	r3,52(r2)
 1014404:	008040b4 	movhi	r2,258
 1014408:	1085dd04 	addi	r2,r2,6004
 101440c:	10800c17 	ldw	r2,48(r2)
 1014410:	10801068 	cmpgeui	r2,r2,65
 1014414:	1000081e 	bne	r2,zero,1014438 <alt_sys_init+0x110>
 1014418:	00c040b4 	movhi	r3,258
 101441c:	18c5dd04 	addi	r3,r3,6004
 1014420:	00800fc4 	movi	r2,63
 1014424:	18800f15 	stw	r2,60(r3)
 1014428:	00c040b4 	movhi	r3,258
 101442c:	18c5dd04 	addi	r3,r3,6004
 1014430:	00800184 	movi	r2,6
 1014434:	18801015 	stw	r2,64(r3)
 1014438:	008040b4 	movhi	r2,258
 101443c:	1085dd04 	addi	r2,r2,6004
 1014440:	10800d17 	ldw	r2,52(r2)
 1014444:	10800868 	cmpgeui	r2,r2,33
 1014448:	1000041e 	bne	r2,zero,101445c <alt_sys_init+0x134>
 101444c:	00c040b4 	movhi	r3,258
 1014450:	18c5dd04 	addi	r3,r3,6004
 1014454:	008007c4 	movi	r2,31
 1014458:	18801115 	stw	r2,68(r3)
 101445c:	010040b4 	movhi	r4,258
 1014460:	2105dd04 	addi	r4,r4,6004
 1014464:	101a3a00 	call	101a3a0 <alt_up_char_buffer_init>
 1014468:	010040b4 	movhi	r4,258
 101446c:	2105dd04 	addi	r4,r4,6004
 1014470:	101468c0 	call	101468c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA, video_pixel_buffer_dma);
 1014474:	008040b4 	movhi	r2,258
 1014478:	1085ef04 	addi	r2,r2,6076
 101447c:	10800a17 	ldw	r2,40(r2)
 1014480:	10800017 	ldw	r2,0(r2)
 1014484:	1007883a 	mov	r3,r2
 1014488:	008040b4 	movhi	r2,258
 101448c:	1085ef04 	addi	r2,r2,6076
 1014490:	10c00b15 	stw	r3,44(r2)
 1014494:	008040b4 	movhi	r2,258
 1014498:	1085ef04 	addi	r2,r2,6076
 101449c:	10800a17 	ldw	r2,40(r2)
 10144a0:	10800104 	addi	r2,r2,4
 10144a4:	10800017 	ldw	r2,0(r2)
 10144a8:	1007883a 	mov	r3,r2
 10144ac:	008040b4 	movhi	r2,258
 10144b0:	1085ef04 	addi	r2,r2,6076
 10144b4:	10c00c15 	stw	r3,48(r2)
 10144b8:	008040b4 	movhi	r2,258
 10144bc:	1085ef04 	addi	r2,r2,6076
 10144c0:	10800a17 	ldw	r2,40(r2)
 10144c4:	10800204 	addi	r2,r2,8
 10144c8:	10800017 	ldw	r2,0(r2)
 10144cc:	10ffffcc 	andi	r3,r2,65535
 10144d0:	008040b4 	movhi	r2,258
 10144d4:	1085ef04 	addi	r2,r2,6076
 10144d8:	10c00f15 	stw	r3,60(r2)
 10144dc:	008040b4 	movhi	r2,258
 10144e0:	1085ef04 	addi	r2,r2,6076
 10144e4:	10800a17 	ldw	r2,40(r2)
 10144e8:	10800204 	addi	r2,r2,8
 10144ec:	10800017 	ldw	r2,0(r2)
 10144f0:	1005d43a 	srai	r2,r2,16
 10144f4:	10ffffcc 	andi	r3,r2,65535
 10144f8:	008040b4 	movhi	r2,258
 10144fc:	1085ef04 	addi	r2,r2,6076
 1014500:	10c01015 	stw	r3,64(r2)
 1014504:	008040b4 	movhi	r2,258
 1014508:	1085ef04 	addi	r2,r2,6076
 101450c:	10800a17 	ldw	r2,40(r2)
 1014510:	10800304 	addi	r2,r2,12
 1014514:	10800017 	ldw	r2,0(r2)
 1014518:	1005d07a 	srai	r2,r2,1
 101451c:	10c0004c 	andi	r3,r2,1
 1014520:	008040b4 	movhi	r2,258
 1014524:	1085ef04 	addi	r2,r2,6076
 1014528:	10c00d15 	stw	r3,52(r2)
 101452c:	008040b4 	movhi	r2,258
 1014530:	1085ef04 	addi	r2,r2,6076
 1014534:	10800a17 	ldw	r2,40(r2)
 1014538:	10800304 	addi	r2,r2,12
 101453c:	10800017 	ldw	r2,0(r2)
 1014540:	1005d13a 	srai	r2,r2,4
 1014544:	10c003cc 	andi	r3,r2,15
 1014548:	008040b4 	movhi	r2,258
 101454c:	1085ef04 	addi	r2,r2,6076
 1014550:	10c00e15 	stw	r3,56(r2)
 1014554:	008040b4 	movhi	r2,258
 1014558:	1085ef04 	addi	r2,r2,6076
 101455c:	10800a17 	ldw	r2,40(r2)
 1014560:	10800304 	addi	r2,r2,12
 1014564:	10800017 	ldw	r2,0(r2)
 1014568:	1005d43a 	srai	r2,r2,16
 101456c:	1007883a 	mov	r3,r2
 1014570:	00bfffc4 	movi	r2,-1
 1014574:	1884703a 	and	r2,r3,r2
 1014578:	e0bfff45 	stb	r2,-3(fp)
 101457c:	008040b4 	movhi	r2,258
 1014580:	1085ef04 	addi	r2,r2,6076
 1014584:	10800a17 	ldw	r2,40(r2)
 1014588:	10800304 	addi	r2,r2,12
 101458c:	10800017 	ldw	r2,0(r2)
 1014590:	1005d63a 	srai	r2,r2,24
 1014594:	1007883a 	mov	r3,r2
 1014598:	00bfffc4 	movi	r2,-1
 101459c:	1884703a 	and	r2,r3,r2
 10145a0:	e0bfff05 	stb	r2,-4(fp)
 10145a4:	008040b4 	movhi	r2,258
 10145a8:	1085ef04 	addi	r2,r2,6076
 10145ac:	10800e17 	ldw	r2,56(r2)
 10145b0:	10800058 	cmpnei	r2,r2,1
 10145b4:	1000041e 	bne	r2,zero,10145c8 <alt_sys_init+0x2a0>
 10145b8:	008040b4 	movhi	r2,258
 10145bc:	1085ef04 	addi	r2,r2,6076
 10145c0:	10001115 	stw	zero,68(r2)
 10145c4:	00000e06 	br	1014600 <alt_sys_init+0x2d8>
 10145c8:	008040b4 	movhi	r2,258
 10145cc:	1085ef04 	addi	r2,r2,6076
 10145d0:	10800e17 	ldw	r2,56(r2)
 10145d4:	10800098 	cmpnei	r2,r2,2
 10145d8:	1000051e 	bne	r2,zero,10145f0 <alt_sys_init+0x2c8>
 10145dc:	00c040b4 	movhi	r3,258
 10145e0:	18c5ef04 	addi	r3,r3,6076
 10145e4:	00800044 	movi	r2,1
 10145e8:	18801115 	stw	r2,68(r3)
 10145ec:	00000406 	br	1014600 <alt_sys_init+0x2d8>
 10145f0:	00c040b4 	movhi	r3,258
 10145f4:	18c5ef04 	addi	r3,r3,6076
 10145f8:	00800084 	movi	r2,2
 10145fc:	18801115 	stw	r2,68(r3)
 1014600:	e0ffff43 	ldbu	r3,-3(fp)
 1014604:	00800804 	movi	r2,32
 1014608:	10c7c83a 	sub	r3,r2,r3
 101460c:	00bfffc4 	movi	r2,-1
 1014610:	10c6d83a 	srl	r3,r2,r3
 1014614:	008040b4 	movhi	r2,258
 1014618:	1085ef04 	addi	r2,r2,6076
 101461c:	10c01215 	stw	r3,72(r2)
 1014620:	e0ffff43 	ldbu	r3,-3(fp)
 1014624:	008040b4 	movhi	r2,258
 1014628:	1085ef04 	addi	r2,r2,6076
 101462c:	10801117 	ldw	r2,68(r2)
 1014630:	1887883a 	add	r3,r3,r2
 1014634:	008040b4 	movhi	r2,258
 1014638:	1085ef04 	addi	r2,r2,6076
 101463c:	10c01315 	stw	r3,76(r2)
 1014640:	e0ffff03 	ldbu	r3,-4(fp)
 1014644:	00800804 	movi	r2,32
 1014648:	10c7c83a 	sub	r3,r2,r3
 101464c:	00bfffc4 	movi	r2,-1
 1014650:	10c6d83a 	srl	r3,r2,r3
 1014654:	008040b4 	movhi	r2,258
 1014658:	1085ef04 	addi	r2,r2,6076
 101465c:	10c01415 	stw	r3,80(r2)
 1014660:	010040b4 	movhi	r4,258
 1014664:	2105ef04 	addi	r4,r4,6076
 1014668:	101468c0 	call	101468c <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
 101466c:	010040b4 	movhi	r4,258
 1014670:	21060404 	addi	r4,r4,6160
 1014674:	101468c0 	call	101468c <alt_dev_reg>
}
 1014678:	e037883a 	mov	sp,fp
 101467c:	dfc00117 	ldw	ra,4(sp)
 1014680:	df000017 	ldw	fp,0(sp)
 1014684:	dec00204 	addi	sp,sp,8
 1014688:	f800283a 	ret

0101468c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 101468c:	defffd04 	addi	sp,sp,-12
 1014690:	dfc00215 	stw	ra,8(sp)
 1014694:	df000115 	stw	fp,4(sp)
 1014698:	df000104 	addi	fp,sp,4
 101469c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 10146a0:	e13fff17 	ldw	r4,-4(fp)
 10146a4:	014040b4 	movhi	r5,258
 10146a8:	2946cb04 	addi	r5,r5,6956
 10146ac:	101c4d40 	call	101c4d4 <alt_dev_llist_insert>
}
 10146b0:	e037883a 	mov	sp,fp
 10146b4:	dfc00117 	ldw	ra,4(sp)
 10146b8:	df000017 	ldw	fp,0(sp)
 10146bc:	dec00204 	addi	sp,sp,8
 10146c0:	f800283a 	ret

010146c4 <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////
bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset);

bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
 10146c4:	defffa04 	addi	sp,sp,-24
 10146c8:	dfc00515 	stw	ra,20(sp)
 10146cc:	df000415 	stw	fp,16(sp)
 10146d0:	df000404 	addi	fp,sp,16
 10146d4:	e13ffe15 	stw	r4,-8(fp)
 10146d8:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
 10146dc:	e03ffd15 	stw	zero,-12(fp)

	if (alt_up_sd_card_is_Present()) {
 10146e0:	10174f00 	call	10174f0 <alt_up_sd_card_is_Present>
 10146e4:	1005003a 	cmpeq	r2,r2,zero
 10146e8:	1000221e 	bne	r2,zero,1014774 <Write_Sector_Data+0xb0>
		short int reg_state = 0xff;
 10146ec:	00803fc4 	movi	r2,255
 10146f0:	e0bffc0d 	sth	r2,-16(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0,
 10146f4:	d0a7d417 	ldw	r2,-24752(gp)
 10146f8:	1009883a 	mov	r4,r2
 10146fc:	e0fffe17 	ldw	r3,-8(fp)
 1014700:	e0bfff17 	ldw	r2,-4(fp)
 1014704:	1885883a 	add	r2,r3,r2
 1014708:	1006927a 	slli	r3,r2,9
 101470c:	2005883a 	mov	r2,r4
 1014710:	10c00035 	stwio	r3,0(r2)
				(sector_index + partition_offset)*512);
		IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
 1014714:	d0a7d317 	ldw	r2,-24756(gp)
 1014718:	1007883a 	mov	r3,r2
 101471c:	00800604 	movi	r2,24
 1014720:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
 1014724:	d0a7d017 	ldw	r2,-24768(gp)
 1014728:	1080002b 	ldhuio	r2,0(r2)
 101472c:	e0bffc0d 	sth	r2,-16(fp)
		} while ((reg_state & 0x04) != 0);
 1014730:	e0bffc0b 	ldhu	r2,-16(fp)
 1014734:	10bfffcc 	andi	r2,r2,65535
 1014738:	1080010c 	andi	r2,r2,4
 101473c:	1004c03a 	cmpne	r2,r2,zero
 1014740:	103ff81e 	bne	r2,zero,1014724 <Write_Sector_Data+0x60>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0) {
 1014744:	e0bffc0b 	ldhu	r2,-16(fp)
 1014748:	10bfffcc 	andi	r2,r2,65535
 101474c:	1080040c 	andi	r2,r2,16
 1014750:	1004c03a 	cmpne	r2,r2,zero
 1014754:	1000071e 	bne	r2,zero,1014774 <Write_Sector_Data+0xb0>
			result = true;
 1014758:	00800044 	movi	r2,1
 101475c:	e0bffd15 	stw	r2,-12(fp)
			current_sector_modified = false;
 1014760:	d027d915 	stw	zero,-24732(gp)
			current_sector_index = sector_index + partition_offset;
 1014764:	e0fffe17 	ldw	r3,-8(fp)
 1014768:	e0bfff17 	ldw	r2,-4(fp)
 101476c:	1885883a 	add	r2,r3,r2
 1014770:	d0a7da15 	stw	r2,-24728(gp)
		}
	}
	return result;
 1014774:	e0bffd17 	ldw	r2,-12(fp)
}
 1014778:	e037883a 	mov	sp,fp
 101477c:	dfc00117 	ldw	ra,4(sp)
 1014780:	df000017 	ldw	fp,0(sp)
 1014784:	dec00204 	addi	sp,sp,8
 1014788:	f800283a 	ret

0101478c <Save_Modified_Sector>:

bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
 101478c:	defffd04 	addi	sp,sp,-12
 1014790:	dfc00215 	stw	ra,8(sp)
 1014794:	df000115 	stw	fp,4(sp)
 1014798:	df000104 	addi	fp,sp,4
	bool result = true;
 101479c:	00800044 	movi	r2,1
 10147a0:	e0bfff15 	stw	r2,-4(fp)
	if (current_sector_modified) {
 10147a4:	d0a7d917 	ldw	r2,-24732(gp)
 10147a8:	1005003a 	cmpeq	r2,r2,zero
 10147ac:	1000051e 	bne	r2,zero,10147c4 <Save_Modified_Sector+0x38>
		result = Write_Sector_Data(current_sector_index, 0);
 10147b0:	d0a7da17 	ldw	r2,-24728(gp)
 10147b4:	1009883a 	mov	r4,r2
 10147b8:	000b883a 	mov	r5,zero
 10147bc:	10146c40 	call	10146c4 <Write_Sector_Data>
 10147c0:	e0bfff15 	stw	r2,-4(fp)
	}
	return result;
 10147c4:	e0bfff17 	ldw	r2,-4(fp)
}
 10147c8:	e037883a 	mov	sp,fp
 10147cc:	dfc00117 	ldw	ra,4(sp)
 10147d0:	df000017 	ldw	fp,0(sp)
 10147d4:	dec00204 	addi	sp,sp,8
 10147d8:	f800283a 	ret

010147dc <Read_Sector_Data>:

bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
 10147dc:	defff904 	addi	sp,sp,-28
 10147e0:	dfc00615 	stw	ra,24(sp)
 10147e4:	df000515 	stw	fp,20(sp)
 10147e8:	df000504 	addi	fp,sp,20
 10147ec:	e13ffd15 	stw	r4,-12(fp)
 10147f0:	e17ffe15 	stw	r5,-8(fp)
	bool result = false;
 10147f4:	e03ffc15 	stw	zero,-16(fp)

	if (alt_up_sd_card_is_Present()) {
 10147f8:	10174f00 	call	10174f0 <alt_up_sd_card_is_Present>
 10147fc:	1005003a 	cmpeq	r2,r2,zero
 1014800:	10002d1e 	bne	r2,zero,10148b8 <Read_Sector_Data+0xdc>
		short int reg_state = 0xff;
 1014804:	00803fc4 	movi	r2,255
 1014808:	e0bffb0d 	sth	r2,-20(fp)

		/* Write data to the SD card if the current buffer is out of date. */
		if (current_sector_modified) {
 101480c:	d0a7d917 	ldw	r2,-24732(gp)
 1014810:	1005003a 	cmpeq	r2,r2,zero
 1014814:	1000081e 	bne	r2,zero,1014838 <Read_Sector_Data+0x5c>
			if (Write_Sector_Data(current_sector_index, 0) == false) {
 1014818:	d0a7da17 	ldw	r2,-24728(gp)
 101481c:	1009883a 	mov	r4,r2
 1014820:	000b883a 	mov	r5,zero
 1014824:	10146c40 	call	10146c4 <Write_Sector_Data>
 1014828:	1004c03a 	cmpne	r2,r2,zero
 101482c:	1000021e 	bne	r2,zero,1014838 <Read_Sector_Data+0x5c>
				return false;
 1014830:	e03fff15 	stw	zero,-4(fp)
 1014834:	00002206 	br	10148c0 <Read_Sector_Data+0xe4>
			}
		}
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0,
 1014838:	d0a7d417 	ldw	r2,-24752(gp)
 101483c:	1009883a 	mov	r4,r2
 1014840:	e0fffd17 	ldw	r3,-12(fp)
 1014844:	e0bffe17 	ldw	r2,-8(fp)
 1014848:	1885883a 	add	r2,r3,r2
 101484c:	1006927a 	slli	r3,r2,9
 1014850:	2005883a 	mov	r2,r4
 1014854:	10c00035 	stwio	r3,0(r2)
				(sector_index + partition_offset)*512);
		IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
 1014858:	d0a7d317 	ldw	r2,-24756(gp)
 101485c:	1007883a 	mov	r3,r2
 1014860:	00800444 	movi	r2,17
 1014864:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
 1014868:	d0a7d017 	ldw	r2,-24768(gp)
 101486c:	1080002b 	ldhuio	r2,0(r2)
 1014870:	e0bffb0d 	sth	r2,-20(fp)
		} while ((reg_state & 0x04) != 0);
 1014874:	e0bffb0b 	ldhu	r2,-20(fp)
 1014878:	10bfffcc 	andi	r2,r2,65535
 101487c:	1080010c 	andi	r2,r2,4
 1014880:	1004c03a 	cmpne	r2,r2,zero
 1014884:	103ff81e 	bne	r2,zero,1014868 <Read_Sector_Data+0x8c>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0) {
 1014888:	e0bffb0b 	ldhu	r2,-20(fp)
 101488c:	10bfffcc 	andi	r2,r2,65535
 1014890:	1080040c 	andi	r2,r2,16
 1014894:	1004c03a 	cmpne	r2,r2,zero
 1014898:	1000071e 	bne	r2,zero,10148b8 <Read_Sector_Data+0xdc>
			result = true;
 101489c:	00800044 	movi	r2,1
 10148a0:	e0bffc15 	stw	r2,-16(fp)
			current_sector_modified = false;
 10148a4:	d027d915 	stw	zero,-24732(gp)
			current_sector_index = sector_index + partition_offset;
 10148a8:	e0fffd17 	ldw	r3,-12(fp)
 10148ac:	e0bffe17 	ldw	r2,-8(fp)
 10148b0:	1885883a 	add	r2,r3,r2
 10148b4:	d0a7da15 	stw	r2,-24728(gp)
		}
	}
	return result;
 10148b8:	e0bffc17 	ldw	r2,-16(fp)
 10148bc:	e0bfff15 	stw	r2,-4(fp)
 10148c0:	e0bfff17 	ldw	r2,-4(fp)
}
 10148c4:	e037883a 	mov	sp,fp
 10148c8:	dfc00117 	ldw	ra,4(sp)
 10148cc:	df000017 	ldw	fp,0(sp)
 10148d0:	dec00204 	addi	sp,sp,8
 10148d4:	f800283a 	ret

010148d8 <get_cluster_flag>:

bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
 10148d8:	defffa04 	addi	sp,sp,-24
 10148dc:	dfc00515 	stw	ra,20(sp)
 10148e0:	df000415 	stw	fp,16(sp)
 10148e4:	df000404 	addi	fp,sp,16
 10148e8:	e13ffd15 	stw	r4,-12(fp)
 10148ec:	e17ffe15 	stw	r5,-8(fp)
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
 10148f0:	e0bffd17 	ldw	r2,-12(fp)
 10148f4:	1006d23a 	srli	r3,r2,8
 10148f8:	d0a7d617 	ldw	r2,-24744(gp)
 10148fc:	1885883a 	add	r2,r3,r2
 1014900:	e0bffc15 	stw	r2,-16(fp)

	sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
 1014904:	008040b4 	movhi	r2,258
 1014908:	108eef04 	addi	r2,r2,15292
 101490c:	10c01117 	ldw	r3,68(r2)
 1014910:	e0bffc17 	ldw	r2,-16(fp)
 1014914:	10c5883a 	add	r2,r2,r3
 1014918:	e0bffc15 	stw	r2,-16(fp)

	if (sector_index != current_sector_index) {
 101491c:	d0e7da17 	ldw	r3,-24728(gp)
 1014920:	e0bffc17 	ldw	r2,-16(fp)
 1014924:	10c00726 	beq	r2,r3,1014944 <get_cluster_flag+0x6c>
		if (Read_Sector_Data(sector_index, 0) == false) {
 1014928:	e13ffc17 	ldw	r4,-16(fp)
 101492c:	000b883a 	mov	r5,zero
 1014930:	10147dc0 	call	10147dc <Read_Sector_Data>
 1014934:	1004c03a 	cmpne	r2,r2,zero
 1014938:	1000021e 	bne	r2,zero,1014944 <get_cluster_flag+0x6c>
			return false;
 101493c:	e03fff15 	stw	zero,-4(fp)
 1014940:	00000d06 	br	1014978 <get_cluster_flag+0xa0>
		}
	}
	*flag =
 1014944:	d0a7d817 	ldw	r2,-24736(gp)
 1014948:	10800a17 	ldw	r2,40(r2)
 101494c:	1007883a 	mov	r3,r2
 1014950:	e0bffd17 	ldw	r2,-12(fp)
 1014954:	10803fcc 	andi	r2,r2,255
 1014958:	1085883a 	add	r2,r2,r2
 101495c:	1885883a 	add	r2,r3,r2
 1014960:	1080002b 	ldhuio	r2,0(r2)
 1014964:	1007883a 	mov	r3,r2
 1014968:	e0bffe17 	ldw	r2,-8(fp)
 101496c:	10c0000d 	sth	r3,0(r2)
			(unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
	return true;
 1014970:	00800044 	movi	r2,1
 1014974:	e0bfff15 	stw	r2,-4(fp)
 1014978:	e0bfff17 	ldw	r2,-4(fp)
}
 101497c:	e037883a 	mov	sp,fp
 1014980:	dfc00117 	ldw	ra,4(sp)
 1014984:	df000017 	ldw	fp,0(sp)
 1014988:	dec00204 	addi	sp,sp,8
 101498c:	f800283a 	ret

01014990 <mark_cluster>:

bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
 1014990:	defff904 	addi	sp,sp,-28
 1014994:	dfc00615 	stw	ra,24(sp)
 1014998:	df000515 	stw	fp,20(sp)
 101499c:	df000504 	addi	fp,sp,20
 10149a0:	e13ffc15 	stw	r4,-16(fp)
 10149a4:	e1bffe15 	stw	r6,-8(fp)
 10149a8:	e17ffd0d 	sth	r5,-12(fp)
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
 10149ac:	e0bffc17 	ldw	r2,-16(fp)
 10149b0:	1006d23a 	srli	r3,r2,8
 10149b4:	d0a7d617 	ldw	r2,-24744(gp)
 10149b8:	1885883a 	add	r2,r3,r2
 10149bc:	e0bffb15 	stw	r2,-20(fp)

	if (first_fat) {
 10149c0:	e0bffe17 	ldw	r2,-8(fp)
 10149c4:	1005003a 	cmpeq	r2,r2,zero
 10149c8:	1000071e 	bne	r2,zero,10149e8 <mark_cluster+0x58>
		sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
 10149cc:	008040b4 	movhi	r2,258
 10149d0:	108eef04 	addi	r2,r2,15292
 10149d4:	10c01117 	ldw	r3,68(r2)
 10149d8:	e0bffb17 	ldw	r2,-20(fp)
 10149dc:	10c5883a 	add	r2,r2,r3
 10149e0:	e0bffb15 	stw	r2,-20(fp)
 10149e4:	00000606 	br	1014a00 <mark_cluster+0x70>
	} else {
		sector_index = sector_index + boot_sector_data.second_fat_sector_offset;
 10149e8:	008040b4 	movhi	r2,258
 10149ec:	108eef04 	addi	r2,r2,15292
 10149f0:	10c01217 	ldw	r3,72(r2)
 10149f4:	e0bffb17 	ldw	r2,-20(fp)
 10149f8:	10c5883a 	add	r2,r2,r3
 10149fc:	e0bffb15 	stw	r2,-20(fp)
	}

	if (sector_index != current_sector_index) {
 1014a00:	d0e7da17 	ldw	r3,-24728(gp)
 1014a04:	e0bffb17 	ldw	r2,-20(fp)
 1014a08:	10c00726 	beq	r2,r3,1014a28 <mark_cluster+0x98>
		if (Read_Sector_Data(sector_index, 0) == false) {
 1014a0c:	e13ffb17 	ldw	r4,-20(fp)
 1014a10:	000b883a 	mov	r5,zero
 1014a14:	10147dc0 	call	10147dc <Read_Sector_Data>
 1014a18:	1004c03a 	cmpne	r2,r2,zero
 1014a1c:	1000021e 	bne	r2,zero,1014a28 <mark_cluster+0x98>
			return false;
 1014a20:	e03fff15 	stw	zero,-4(fp)
 1014a24:	00000d06 	br	1014a5c <mark_cluster+0xcc>
		}
	}
	IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
 1014a28:	d0a7d817 	ldw	r2,-24736(gp)
 1014a2c:	10800a17 	ldw	r2,40(r2)
 1014a30:	1007883a 	mov	r3,r2
 1014a34:	e0bffc17 	ldw	r2,-16(fp)
 1014a38:	10803fcc 	andi	r2,r2,255
 1014a3c:	1085883a 	add	r2,r2,r2
 1014a40:	1885883a 	add	r2,r3,r2
 1014a44:	e0fffd0f 	ldh	r3,-12(fp)
 1014a48:	10c0002d 	sthio	r3,0(r2)
	current_sector_modified = true;
 1014a4c:	00800044 	movi	r2,1
 1014a50:	d0a7d915 	stw	r2,-24732(gp)
	return true;
 1014a54:	00800044 	movi	r2,1
 1014a58:	e0bfff15 	stw	r2,-4(fp)
 1014a5c:	e0bfff17 	ldw	r2,-4(fp)
}
 1014a60:	e037883a 	mov	sp,fp
 1014a64:	dfc00117 	ldw	ra,4(sp)
 1014a68:	df000017 	ldw	fp,0(sp)
 1014a6c:	dec00204 	addi	sp,sp,8
 1014a70:	f800283a 	ret

01014a74 <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
 1014a74:	defff704 	addi	sp,sp,-36
 1014a78:	dfc00815 	stw	ra,32(sp)
 1014a7c:	df000715 	stw	fp,28(sp)
 1014a80:	df000704 	addi	fp,sp,28
	bool result = false;
 1014a84:	e03fff15 	stw	zero,-4(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data_Attempt_CRC(0, 0)) {
 1014a88:	0009883a 	mov	r4,zero
 1014a8c:	000b883a 	mov	r5,zero
 1014a90:	1018c380 	call	1018c38 <Read_Sector_Data_Attempt_CRC>
 1014a94:	1005003a 	cmpeq	r2,r2,zero
 1014a98:	10005c1e 	bne	r2,zero,1014c0c <Check_for_Master_Boot_Record+0x198>
		end = (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
 1014a9c:	d0a7d817 	ldw	r2,-24736(gp)
 1014aa0:	10800a17 	ldw	r2,40(r2)
 1014aa4:	10807f84 	addi	r2,r2,510
 1014aa8:	1080002b 	ldhuio	r2,0(r2)
 1014aac:	10bfffcc 	andi	r2,r2,65535
 1014ab0:	10a0001c 	xori	r2,r2,32768
 1014ab4:	10a00004 	addi	r2,r2,-32768
 1014ab8:	e0bffd15 	stw	r2,-12(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55) {
 1014abc:	e0bffd17 	ldw	r2,-12(fp)
 1014ac0:	10ffffcc 	andi	r3,r2,65535
 1014ac4:	00aa9554 	movui	r2,43605
 1014ac8:	1880501e 	bne	r3,r2,1014c0c <Check_for_Master_Boot_Record+0x198>
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++) {
 1014acc:	e03ffe15 	stw	zero,-8(fp)
 1014ad0:	00004b06 	br	1014c00 <Check_for_Master_Boot_Record+0x18c>
				int partition_data_offset = (index * 16) + 0x01be;
 1014ad4:	e0bffe17 	ldw	r2,-8(fp)
 1014ad8:	1004913a 	slli	r2,r2,4
 1014adc:	10806f84 	addi	r2,r2,446
 1014ae0:	e0bffa15 	stw	r2,-24(fp)
				char type;

				// Read Partition type
				type =
 1014ae4:	d0a7d817 	ldw	r2,-24736(gp)
 1014ae8:	10800a17 	ldw	r2,40(r2)
 1014aec:	1007883a 	mov	r3,r2
 1014af0:	e0bffa17 	ldw	r2,-24(fp)
 1014af4:	1885883a 	add	r2,r3,r2
 1014af8:	10800104 	addi	r2,r2,4
 1014afc:	10800023 	ldbuio	r2,0(r2)
 1014b00:	e0bff905 	stb	r2,-28(fp)
						(unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14)) {
 1014b04:	e0bff907 	ldb	r2,-28(fp)
 1014b08:	10800060 	cmpeqi	r2,r2,1
 1014b0c:	1000091e 	bne	r2,zero,1014b34 <Check_for_Master_Boot_Record+0xc0>
 1014b10:	e0bff907 	ldb	r2,-28(fp)
 1014b14:	10800120 	cmpeqi	r2,r2,4
 1014b18:	1000061e 	bne	r2,zero,1014b34 <Check_for_Master_Boot_Record+0xc0>
 1014b1c:	e0bff907 	ldb	r2,-28(fp)
 1014b20:	108001a0 	cmpeqi	r2,r2,6
 1014b24:	1000031e 	bne	r2,zero,1014b34 <Check_for_Master_Boot_Record+0xc0>
 1014b28:	e0bff907 	ldb	r2,-28(fp)
 1014b2c:	10800398 	cmpnei	r2,r2,14
 1014b30:	1000301e 	bne	r2,zero,1014bf4 <Check_for_Master_Boot_Record+0x180>
					// Get partition offset and size.
					offset =
 1014b34:	d0a7d817 	ldw	r2,-24736(gp)
 1014b38:	10800a17 	ldw	r2,40(r2)
 1014b3c:	1007883a 	mov	r3,r2
 1014b40:	e0bffa17 	ldw	r2,-24(fp)
 1014b44:	1885883a 	add	r2,r3,r2
 1014b48:	10800284 	addi	r2,r2,10
 1014b4c:	1080002b 	ldhuio	r2,0(r2)
 1014b50:	10bfffcc 	andi	r2,r2,65535
 1014b54:	1008943a 	slli	r4,r2,16
 1014b58:	d0a7d817 	ldw	r2,-24736(gp)
 1014b5c:	10800a17 	ldw	r2,40(r2)
 1014b60:	1007883a 	mov	r3,r2
 1014b64:	e0bffa17 	ldw	r2,-24(fp)
 1014b68:	1885883a 	add	r2,r3,r2
 1014b6c:	10800204 	addi	r2,r2,8
 1014b70:	1080002b 	ldhuio	r2,0(r2)
 1014b74:	10bfffcc 	andi	r2,r2,65535
 1014b78:	2084b03a 	or	r2,r4,r2
 1014b7c:	e0bffc15 	stw	r2,-16(fp)
							(((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A))
									<< 16)
									| ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
					partition_size =
 1014b80:	d0a7d817 	ldw	r2,-24736(gp)
 1014b84:	10800a17 	ldw	r2,40(r2)
 1014b88:	1007883a 	mov	r3,r2
 1014b8c:	e0bffa17 	ldw	r2,-24(fp)
 1014b90:	1885883a 	add	r2,r3,r2
 1014b94:	10800384 	addi	r2,r2,14
 1014b98:	1080002b 	ldhuio	r2,0(r2)
 1014b9c:	10bfffcc 	andi	r2,r2,65535
 1014ba0:	1008943a 	slli	r4,r2,16
 1014ba4:	d0a7d817 	ldw	r2,-24736(gp)
 1014ba8:	10800a17 	ldw	r2,40(r2)
 1014bac:	1007883a 	mov	r3,r2
 1014bb0:	e0bffa17 	ldw	r2,-24(fp)
 1014bb4:	1885883a 	add	r2,r3,r2
 1014bb8:	10800304 	addi	r2,r2,12
 1014bbc:	1080002b 	ldhuio	r2,0(r2)
 1014bc0:	10bfffcc 	andi	r2,r2,65535
 1014bc4:	2084b03a 	or	r2,r4,r2
 1014bc8:	e0bffb15 	stw	r2,-20(fp)
							(((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E))
									<< 16)
									| ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));

					// Check if the partition is valid
					if (partition_size > 0) {
 1014bcc:	e0bffb17 	ldw	r2,-20(fp)
 1014bd0:	10800050 	cmplti	r2,r2,1
 1014bd4:	1000071e 	bne	r2,zero,1014bf4 <Check_for_Master_Boot_Record+0x180>
						result = true;
 1014bd8:	00800044 	movi	r2,1
 1014bdc:	e0bfff15 	stw	r2,-4(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
 1014be0:	e0bffb17 	ldw	r2,-20(fp)
 1014be4:	d0a7d715 	stw	r2,-24740(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
 1014be8:	e0bffc17 	ldw	r2,-16(fp)
 1014bec:	d0a7d615 	stw	r2,-24744(gp)
						break;
 1014bf0:	00000606 	br	1014c0c <Check_for_Master_Boot_Record+0x198>
		end = (short int) IORD_16DIRECT(device_pointer->base,0x1fe);

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55) {
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++) {
 1014bf4:	e0bffe17 	ldw	r2,-8(fp)
 1014bf8:	10800044 	addi	r2,r2,1
 1014bfc:	e0bffe15 	stw	r2,-8(fp)
 1014c00:	e0bffe17 	ldw	r2,-8(fp)
 1014c04:	10800110 	cmplti	r2,r2,4
 1014c08:	103fb21e 	bne	r2,zero,1014ad4 <Check_for_Master_Boot_Record+0x60>
				}
			}
		}
	}

	return result;
 1014c0c:	e0bfff17 	ldw	r2,-4(fp)
}
 1014c10:	e037883a 	mov	sp,fp
 1014c14:	dfc00117 	ldw	ra,4(sp)
 1014c18:	df000017 	ldw	fp,0(sp)
 1014c1c:	dec00204 	addi	sp,sp,8
 1014c20:	f800283a 	ret

01014c24 <Read_File_Record_At_Offset>:

bool Read_File_Record_At_Offset(int offset, t_file_record *record,
		unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
 1014c24:	defff804 	addi	sp,sp,-32
 1014c28:	dfc00715 	stw	ra,28(sp)
 1014c2c:	df000615 	stw	fp,24(sp)
 1014c30:	df000604 	addi	fp,sp,24
 1014c34:	e13ffc15 	stw	r4,-16(fp)
 1014c38:	e17ffd15 	stw	r5,-12(fp)
 1014c3c:	e1bffe15 	stw	r6,-8(fp)
 1014c40:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
 1014c44:	e03ffb15 	stw	zero,-20(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
 1014c48:	e0bffc17 	ldw	r2,-16(fp)
 1014c4c:	108007cc 	andi	r2,r2,31
 1014c50:	1004c03a 	cmpne	r2,r2,zero
 1014c54:	10008e1e 	bne	r2,zero,1014e90 <Read_File_Record_At_Offset+0x26c>
 1014c58:	10174f00 	call	10174f0 <alt_up_sd_card_is_Present>
 1014c5c:	1005003a 	cmpeq	r2,r2,zero
 1014c60:	10008b1e 	bne	r2,zero,1014e90 <Read_File_Record_At_Offset+0x26c>
 1014c64:	d0a7cf17 	ldw	r2,-24772(gp)
 1014c68:	1005003a 	cmpeq	r2,r2,zero
 1014c6c:	1000881e 	bne	r2,zero,1014e90 <Read_File_Record_At_Offset+0x26c>
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter++) {
 1014c70:	e03ffa15 	stw	zero,-24(fp)
 1014c74:	00001006 	br	1014cb8 <Read_File_Record_At_Offset+0x94>
			record->name[counter] =
 1014c78:	e17ffa17 	ldw	r5,-24(fp)
 1014c7c:	d0a7d817 	ldw	r2,-24736(gp)
 1014c80:	10800a17 	ldw	r2,40(r2)
 1014c84:	1009883a 	mov	r4,r2
 1014c88:	e0fffc17 	ldw	r3,-16(fp)
 1014c8c:	e0bffa17 	ldw	r2,-24(fp)
 1014c90:	1885883a 	add	r2,r3,r2
 1014c94:	2085883a 	add	r2,r4,r2
 1014c98:	10800023 	ldbuio	r2,0(r2)
 1014c9c:	1007883a 	mov	r3,r2
 1014ca0:	e0bffd17 	ldw	r2,-12(fp)
 1014ca4:	1145883a 	add	r2,r2,r5
 1014ca8:	10c00005 	stb	r3,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter++) {
 1014cac:	e0bffa17 	ldw	r2,-24(fp)
 1014cb0:	10800044 	addi	r2,r2,1
 1014cb4:	e0bffa15 	stw	r2,-24(fp)
 1014cb8:	e0bffa17 	ldw	r2,-24(fp)
 1014cbc:	10800210 	cmplti	r2,r2,8
 1014cc0:	103fed1e 	bne	r2,zero,1014c78 <Read_File_Record_At_Offset+0x54>
			record->name[counter] =
					(char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}
		for (counter = 0; counter < 3; counter++) {
 1014cc4:	e03ffa15 	stw	zero,-24(fp)
 1014cc8:	00001206 	br	1014d14 <Read_File_Record_At_Offset+0xf0>
			record->extension[counter] =
 1014ccc:	e17ffa17 	ldw	r5,-24(fp)
 1014cd0:	d0a7d817 	ldw	r2,-24736(gp)
 1014cd4:	10800a17 	ldw	r2,40(r2)
 1014cd8:	1009883a 	mov	r4,r2
 1014cdc:	e0fffc17 	ldw	r3,-16(fp)
 1014ce0:	e0bffa17 	ldw	r2,-24(fp)
 1014ce4:	1885883a 	add	r2,r3,r2
 1014ce8:	2085883a 	add	r2,r4,r2
 1014cec:	10800204 	addi	r2,r2,8
 1014cf0:	10800023 	ldbuio	r2,0(r2)
 1014cf4:	1007883a 	mov	r3,r2
 1014cf8:	e0bffd17 	ldw	r2,-12(fp)
 1014cfc:	2885883a 	add	r2,r5,r2
 1014d00:	10800204 	addi	r2,r2,8
 1014d04:	10c00005 	stb	r3,0(r2)

		for (counter = 0; counter < 8; counter++) {
			record->name[counter] =
					(char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}
		for (counter = 0; counter < 3; counter++) {
 1014d08:	e0bffa17 	ldw	r2,-24(fp)
 1014d0c:	10800044 	addi	r2,r2,1
 1014d10:	e0bffa15 	stw	r2,-24(fp)
 1014d14:	e0bffa17 	ldw	r2,-24(fp)
 1014d18:	108000d0 	cmplti	r2,r2,3
 1014d1c:	103feb1e 	bne	r2,zero,1014ccc <Read_File_Record_At_Offset+0xa8>
			record->extension[counter] =
					(char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}
		record->attributes =
 1014d20:	d0a7d817 	ldw	r2,-24736(gp)
 1014d24:	10800a17 	ldw	r2,40(r2)
 1014d28:	1007883a 	mov	r3,r2
 1014d2c:	e0bffc17 	ldw	r2,-16(fp)
 1014d30:	1885883a 	add	r2,r3,r2
 1014d34:	108002c4 	addi	r2,r2,11
 1014d38:	10800023 	ldbuio	r2,0(r2)
 1014d3c:	1007883a 	mov	r3,r2
 1014d40:	e0bffd17 	ldw	r2,-12(fp)
 1014d44:	10c002c5 	stb	r3,11(r2)
				(char) IORD_8DIRECT(device_pointer->base, offset+11);
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time =
 1014d48:	d0a7d817 	ldw	r2,-24736(gp)
 1014d4c:	10800a17 	ldw	r2,40(r2)
 1014d50:	1007883a 	mov	r3,r2
 1014d54:	e0bffc17 	ldw	r2,-16(fp)
 1014d58:	1885883a 	add	r2,r3,r2
 1014d5c:	10800384 	addi	r2,r2,14
 1014d60:	1080002b 	ldhuio	r2,0(r2)
 1014d64:	1007883a 	mov	r3,r2
 1014d68:	e0bffd17 	ldw	r2,-12(fp)
 1014d6c:	10c0030d 	sth	r3,12(r2)
				(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
		record->create_date =
 1014d70:	d0a7d817 	ldw	r2,-24736(gp)
 1014d74:	10800a17 	ldw	r2,40(r2)
 1014d78:	1007883a 	mov	r3,r2
 1014d7c:	e0bffc17 	ldw	r2,-16(fp)
 1014d80:	1885883a 	add	r2,r3,r2
 1014d84:	10800404 	addi	r2,r2,16
 1014d88:	1080002b 	ldhuio	r2,0(r2)
 1014d8c:	1007883a 	mov	r3,r2
 1014d90:	e0bffd17 	ldw	r2,-12(fp)
 1014d94:	10c0038d 	sth	r3,14(r2)
				(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
		record->last_access_date =
 1014d98:	d0a7d817 	ldw	r2,-24736(gp)
 1014d9c:	10800a17 	ldw	r2,40(r2)
 1014da0:	1007883a 	mov	r3,r2
 1014da4:	e0bffc17 	ldw	r2,-16(fp)
 1014da8:	1885883a 	add	r2,r3,r2
 1014dac:	10800484 	addi	r2,r2,18
 1014db0:	1080002b 	ldhuio	r2,0(r2)
 1014db4:	1007883a 	mov	r3,r2
 1014db8:	e0bffd17 	ldw	r2,-12(fp)
 1014dbc:	10c0040d 	sth	r3,16(r2)
				(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time =
 1014dc0:	d0a7d817 	ldw	r2,-24736(gp)
 1014dc4:	10800a17 	ldw	r2,40(r2)
 1014dc8:	1007883a 	mov	r3,r2
 1014dcc:	e0bffc17 	ldw	r2,-16(fp)
 1014dd0:	1885883a 	add	r2,r3,r2
 1014dd4:	10800584 	addi	r2,r2,22
 1014dd8:	1080002b 	ldhuio	r2,0(r2)
 1014ddc:	1007883a 	mov	r3,r2
 1014de0:	e0bffd17 	ldw	r2,-12(fp)
 1014de4:	10c0048d 	sth	r3,18(r2)
				(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
		record->last_modified_date =
 1014de8:	d0a7d817 	ldw	r2,-24736(gp)
 1014dec:	10800a17 	ldw	r2,40(r2)
 1014df0:	1007883a 	mov	r3,r2
 1014df4:	e0bffc17 	ldw	r2,-16(fp)
 1014df8:	1885883a 	add	r2,r3,r2
 1014dfc:	10800604 	addi	r2,r2,24
 1014e00:	1080002b 	ldhuio	r2,0(r2)
 1014e04:	1007883a 	mov	r3,r2
 1014e08:	e0bffd17 	ldw	r2,-12(fp)
 1014e0c:	10c0050d 	sth	r3,20(r2)
				(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
		record->start_cluster_index =
 1014e10:	d0a7d817 	ldw	r2,-24736(gp)
 1014e14:	10800a17 	ldw	r2,40(r2)
 1014e18:	1007883a 	mov	r3,r2
 1014e1c:	e0bffc17 	ldw	r2,-16(fp)
 1014e20:	1885883a 	add	r2,r3,r2
 1014e24:	10800684 	addi	r2,r2,26
 1014e28:	1080002b 	ldhuio	r2,0(r2)
 1014e2c:	1007883a 	mov	r3,r2
 1014e30:	e0bffd17 	ldw	r2,-12(fp)
 1014e34:	10c0058d 	sth	r3,22(r2)
				(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
		record->file_size_in_bytes =
 1014e38:	d0a7d817 	ldw	r2,-24736(gp)
 1014e3c:	10800a17 	ldw	r2,40(r2)
 1014e40:	1007883a 	mov	r3,r2
 1014e44:	e0bffc17 	ldw	r2,-16(fp)
 1014e48:	1885883a 	add	r2,r3,r2
 1014e4c:	10800704 	addi	r2,r2,28
 1014e50:	10800037 	ldwio	r2,0(r2)
 1014e54:	1007883a 	mov	r3,r2
 1014e58:	e0bffd17 	ldw	r2,-12(fp)
 1014e5c:	10c00615 	stw	r3,24(r2)
				(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
		record->file_record_cluster = cluster_index;
 1014e60:	e0fffd17 	ldw	r3,-12(fp)
 1014e64:	e0bffe17 	ldw	r2,-8(fp)
 1014e68:	18800a15 	stw	r2,40(r3)
		record->file_record_sector_in_cluster = sector_in_cluster;
 1014e6c:	e0fffd17 	ldw	r3,-12(fp)
 1014e70:	e0bfff17 	ldw	r2,-4(fp)
 1014e74:	18800b15 	stw	r2,44(r3)
		record->file_record_offset = offset;
 1014e78:	e0bffc17 	ldw	r2,-16(fp)
 1014e7c:	1007883a 	mov	r3,r2
 1014e80:	e0bffd17 	ldw	r2,-12(fp)
 1014e84:	10c00c0d 	sth	r3,48(r2)
		result = true;
 1014e88:	00800044 	movi	r2,1
 1014e8c:	e0bffb15 	stw	r2,-20(fp)
	}
	return result;
 1014e90:	e0bffb17 	ldw	r2,-20(fp)
}
 1014e94:	e037883a 	mov	sp,fp
 1014e98:	dfc00117 	ldw	ra,4(sp)
 1014e9c:	df000017 	ldw	fp,0(sp)
 1014ea0:	dec00204 	addi	sp,sp,8
 1014ea4:	f800283a 	ret

01014ea8 <Write_File_Record_At_Offset>:

bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
 1014ea8:	defff904 	addi	sp,sp,-28
 1014eac:	dfc00615 	stw	ra,24(sp)
 1014eb0:	df000515 	stw	fp,20(sp)
 1014eb4:	df000504 	addi	fp,sp,20
 1014eb8:	e13ffe15 	stw	r4,-8(fp)
 1014ebc:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
 1014ec0:	e03ffd15 	stw	zero,-12(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
 1014ec4:	e0bffe17 	ldw	r2,-8(fp)
 1014ec8:	108007cc 	andi	r2,r2,31
 1014ecc:	1004c03a 	cmpne	r2,r2,zero
 1014ed0:	10009d1e 	bne	r2,zero,1015148 <Write_File_Record_At_Offset+0x2a0>
 1014ed4:	10174f00 	call	10174f0 <alt_up_sd_card_is_Present>
 1014ed8:	1005003a 	cmpeq	r2,r2,zero
 1014edc:	10009a1e 	bne	r2,zero,1015148 <Write_File_Record_At_Offset+0x2a0>
 1014ee0:	d0a7cf17 	ldw	r2,-24772(gp)
 1014ee4:	1005003a 	cmpeq	r2,r2,zero
 1014ee8:	1000971e 	bne	r2,zero,1015148 <Write_File_Record_At_Offset+0x2a0>
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter = counter + 2) {
 1014eec:	e03ffc15 	stw	zero,-16(fp)
 1014ef0:	00001e06 	br	1014f6c <Write_File_Record_At_Offset+0xc4>
			short int two_chars = (short int) record->name[counter + 1];
 1014ef4:	e0bffc17 	ldw	r2,-16(fp)
 1014ef8:	10c00044 	addi	r3,r2,1
 1014efc:	e0bfff17 	ldw	r2,-4(fp)
 1014f00:	10c5883a 	add	r2,r2,r3
 1014f04:	10800003 	ldbu	r2,0(r2)
 1014f08:	10803fcc 	andi	r2,r2,255
 1014f0c:	e0bffb0d 	sth	r2,-20(fp)
			two_chars = two_chars << 8;
 1014f10:	e0bffb0f 	ldh	r2,-20(fp)
 1014f14:	1004923a 	slli	r2,r2,8
 1014f18:	e0bffb0d 	sth	r2,-20(fp)
			two_chars = two_chars | record->name[counter];
 1014f1c:	e0fffc17 	ldw	r3,-16(fp)
 1014f20:	e0bfff17 	ldw	r2,-4(fp)
 1014f24:	10c5883a 	add	r2,r2,r3
 1014f28:	10800003 	ldbu	r2,0(r2)
 1014f2c:	10c03fcc 	andi	r3,r2,255
 1014f30:	e0bffb0b 	ldhu	r2,-20(fp)
 1014f34:	10c4b03a 	or	r2,r2,r3
 1014f38:	e0bffb0d 	sth	r2,-20(fp)
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
 1014f3c:	d0a7d817 	ldw	r2,-24736(gp)
 1014f40:	10800a17 	ldw	r2,40(r2)
 1014f44:	1009883a 	mov	r4,r2
 1014f48:	e0fffe17 	ldw	r3,-8(fp)
 1014f4c:	e0bffc17 	ldw	r2,-16(fp)
 1014f50:	1885883a 	add	r2,r3,r2
 1014f54:	2085883a 	add	r2,r4,r2
 1014f58:	e0fffb0f 	ldh	r3,-20(fp)
 1014f5c:	10c0002d 	sthio	r3,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter = counter + 2) {
 1014f60:	e0bffc17 	ldw	r2,-16(fp)
 1014f64:	10800084 	addi	r2,r2,2
 1014f68:	e0bffc15 	stw	r2,-16(fp)
 1014f6c:	e0bffc17 	ldw	r2,-16(fp)
 1014f70:	10800210 	cmplti	r2,r2,8
 1014f74:	103fdf1e 	bne	r2,zero,1014ef4 <Write_File_Record_At_Offset+0x4c>
			short int two_chars = (short int) record->name[counter + 1];
			two_chars = two_chars << 8;
			two_chars = two_chars | record->name[counter];
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
		}
		for (counter = 0; counter < 3; counter++) {
 1014f78:	e03ffc15 	stw	zero,-16(fp)
 1014f7c:	00001306 	br	1014fcc <Write_File_Record_At_Offset+0x124>
			IOWR_8DIRECT(device_pointer->base, offset+counter+8,
 1014f80:	d0a7d817 	ldw	r2,-24736(gp)
 1014f84:	10800a17 	ldw	r2,40(r2)
 1014f88:	1009883a 	mov	r4,r2
 1014f8c:	e0fffe17 	ldw	r3,-8(fp)
 1014f90:	e0bffc17 	ldw	r2,-16(fp)
 1014f94:	1885883a 	add	r2,r3,r2
 1014f98:	2085883a 	add	r2,r4,r2
 1014f9c:	11000204 	addi	r4,r2,8
 1014fa0:	e0fffc17 	ldw	r3,-16(fp)
 1014fa4:	e0bfff17 	ldw	r2,-4(fp)
 1014fa8:	1885883a 	add	r2,r3,r2
 1014fac:	10800204 	addi	r2,r2,8
 1014fb0:	10800003 	ldbu	r2,0(r2)
 1014fb4:	10c03fcc 	andi	r3,r2,255
 1014fb8:	2005883a 	mov	r2,r4
 1014fbc:	10c00025 	stbio	r3,0(r2)
			short int two_chars = (short int) record->name[counter + 1];
			two_chars = two_chars << 8;
			two_chars = two_chars | record->name[counter];
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
		}
		for (counter = 0; counter < 3; counter++) {
 1014fc0:	e0bffc17 	ldw	r2,-16(fp)
 1014fc4:	10800044 	addi	r2,r2,1
 1014fc8:	e0bffc15 	stw	r2,-16(fp)
 1014fcc:	e0bffc17 	ldw	r2,-16(fp)
 1014fd0:	108000d0 	cmplti	r2,r2,3
 1014fd4:	103fea1e 	bne	r2,zero,1014f80 <Write_File_Record_At_Offset+0xd8>
			IOWR_8DIRECT(device_pointer->base, offset+counter+8,
					record->extension[counter]);
		}
		IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
 1014fd8:	d0a7d817 	ldw	r2,-24736(gp)
 1014fdc:	10800a17 	ldw	r2,40(r2)
 1014fe0:	1007883a 	mov	r3,r2
 1014fe4:	e0bffe17 	ldw	r2,-8(fp)
 1014fe8:	1885883a 	add	r2,r3,r2
 1014fec:	110002c4 	addi	r4,r2,11
 1014ff0:	e0bfff17 	ldw	r2,-4(fp)
 1014ff4:	108002c3 	ldbu	r2,11(r2)
 1014ff8:	10c03fcc 	andi	r3,r2,255
 1014ffc:	2005883a 	mov	r2,r4
 1015000:	10c00025 	stbio	r3,0(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
 1015004:	d0a7d817 	ldw	r2,-24736(gp)
 1015008:	10800a17 	ldw	r2,40(r2)
 101500c:	1007883a 	mov	r3,r2
 1015010:	e0bffe17 	ldw	r2,-8(fp)
 1015014:	1885883a 	add	r2,r3,r2
 1015018:	11000384 	addi	r4,r2,14
 101501c:	e0bfff17 	ldw	r2,-4(fp)
 1015020:	1080030b 	ldhu	r2,12(r2)
 1015024:	10ffffcc 	andi	r3,r2,65535
 1015028:	2005883a 	mov	r2,r4
 101502c:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
 1015030:	d0a7d817 	ldw	r2,-24736(gp)
 1015034:	10800a17 	ldw	r2,40(r2)
 1015038:	1007883a 	mov	r3,r2
 101503c:	e0bffe17 	ldw	r2,-8(fp)
 1015040:	1885883a 	add	r2,r3,r2
 1015044:	11000404 	addi	r4,r2,16
 1015048:	e0bfff17 	ldw	r2,-4(fp)
 101504c:	1080038b 	ldhu	r2,14(r2)
 1015050:	10ffffcc 	andi	r3,r2,65535
 1015054:	2005883a 	mov	r2,r4
 1015058:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+18,
 101505c:	d0a7d817 	ldw	r2,-24736(gp)
 1015060:	10800a17 	ldw	r2,40(r2)
 1015064:	1007883a 	mov	r3,r2
 1015068:	e0bffe17 	ldw	r2,-8(fp)
 101506c:	1885883a 	add	r2,r3,r2
 1015070:	11000484 	addi	r4,r2,18
 1015074:	e0bfff17 	ldw	r2,-4(fp)
 1015078:	1080040b 	ldhu	r2,16(r2)
 101507c:	10ffffcc 	andi	r3,r2,65535
 1015080:	2005883a 	mov	r2,r4
 1015084:	10c0002d 	sthio	r3,0(r2)
				record->last_access_date);
		/* Ignore reserved bytes at locations 20 and 21. */
		IOWR_16DIRECT(device_pointer->base, offset+22,
 1015088:	d0a7d817 	ldw	r2,-24736(gp)
 101508c:	10800a17 	ldw	r2,40(r2)
 1015090:	1007883a 	mov	r3,r2
 1015094:	e0bffe17 	ldw	r2,-8(fp)
 1015098:	1885883a 	add	r2,r3,r2
 101509c:	11000584 	addi	r4,r2,22
 10150a0:	e0bfff17 	ldw	r2,-4(fp)
 10150a4:	1080048b 	ldhu	r2,18(r2)
 10150a8:	10ffffcc 	andi	r3,r2,65535
 10150ac:	2005883a 	mov	r2,r4
 10150b0:	10c0002d 	sthio	r3,0(r2)
				record->last_modified_time);
		IOWR_16DIRECT(device_pointer->base, offset+24,
 10150b4:	d0a7d817 	ldw	r2,-24736(gp)
 10150b8:	10800a17 	ldw	r2,40(r2)
 10150bc:	1007883a 	mov	r3,r2
 10150c0:	e0bffe17 	ldw	r2,-8(fp)
 10150c4:	1885883a 	add	r2,r3,r2
 10150c8:	11000604 	addi	r4,r2,24
 10150cc:	e0bfff17 	ldw	r2,-4(fp)
 10150d0:	1080050b 	ldhu	r2,20(r2)
 10150d4:	10ffffcc 	andi	r3,r2,65535
 10150d8:	2005883a 	mov	r2,r4
 10150dc:	10c0002d 	sthio	r3,0(r2)
				record->last_modified_date);
		IOWR_16DIRECT(device_pointer->base, offset+26,
 10150e0:	d0a7d817 	ldw	r2,-24736(gp)
 10150e4:	10800a17 	ldw	r2,40(r2)
 10150e8:	1007883a 	mov	r3,r2
 10150ec:	e0bffe17 	ldw	r2,-8(fp)
 10150f0:	1885883a 	add	r2,r3,r2
 10150f4:	11000684 	addi	r4,r2,26
 10150f8:	e0bfff17 	ldw	r2,-4(fp)
 10150fc:	1080058b 	ldhu	r2,22(r2)
 1015100:	10ffffcc 	andi	r3,r2,65535
 1015104:	2005883a 	mov	r2,r4
 1015108:	10c0002d 	sthio	r3,0(r2)
				record->start_cluster_index);
		IOWR_32DIRECT(device_pointer->base, offset+28,
 101510c:	d0a7d817 	ldw	r2,-24736(gp)
 1015110:	10800a17 	ldw	r2,40(r2)
 1015114:	1007883a 	mov	r3,r2
 1015118:	e0bffe17 	ldw	r2,-8(fp)
 101511c:	1885883a 	add	r2,r3,r2
 1015120:	11000704 	addi	r4,r2,28
 1015124:	e0bfff17 	ldw	r2,-4(fp)
 1015128:	10800617 	ldw	r2,24(r2)
 101512c:	1007883a 	mov	r3,r2
 1015130:	2005883a 	mov	r2,r4
 1015134:	10c00035 	stwio	r3,0(r2)
				record->file_size_in_bytes);
		current_sector_modified = true;
 1015138:	00800044 	movi	r2,1
 101513c:	d0a7d915 	stw	r2,-24732(gp)
		result = true;
 1015140:	00800044 	movi	r2,1
 1015144:	e0bffd15 	stw	r2,-12(fp)
	}
	return result;
 1015148:	e0bffd17 	ldw	r2,-12(fp)
}
 101514c:	e037883a 	mov	sp,fp
 1015150:	dfc00117 	ldw	ra,4(sp)
 1015154:	df000017 	ldw	fp,0(sp)
 1015158:	dec00204 	addi	sp,sp,8
 101515c:	f800283a 	ret

01015160 <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
 1015160:	defff804 	addi	sp,sp,-32
 1015164:	dfc00715 	stw	ra,28(sp)
 1015168:	df000615 	stw	fp,24(sp)
 101516c:	dc000515 	stw	r16,20(sp)
 1015170:	df000504 	addi	fp,sp,20
 1015174:	e13fff15 	stw	r4,-4(fp)
	bool result = false;
 1015178:	e03ffe15 	stw	zero,-8(fp)
	int counter = 0;
 101517c:	e03ffd15 	stw	zero,-12(fp)
	short int end;

	result = Read_Sector_Data_Attempt_CRC(0, FAT_partition_start_sector);
 1015180:	0009883a 	mov	r4,zero
 1015184:	e17fff17 	ldw	r5,-4(fp)
 1015188:	1018c380 	call	1018c38 <Read_Sector_Data_Attempt_CRC>
 101518c:	e0bffe15 	stw	r2,-8(fp)
	end = (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
 1015190:	d0a7d817 	ldw	r2,-24736(gp)
 1015194:	10800a17 	ldw	r2,40(r2)
 1015198:	10807f84 	addi	r2,r2,510
 101519c:	1080002b 	ldhuio	r2,0(r2)
 10151a0:	e0bffc0d 	sth	r2,-16(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result)) {
 10151a4:	e0bffc0f 	ldh	r2,-16(fp)
 10151a8:	10ffffcc 	andi	r3,r2,65535
 10151ac:	00aa9554 	movui	r2,43605
 10151b0:	1881751e 	bne	r3,r2,1015788 <Check_for_DOS_FAT+0x628>
 10151b4:	e0bffe17 	ldw	r2,-8(fp)
 10151b8:	1005003a 	cmpeq	r2,r2,zero
 10151bc:	1001721e 	bne	r2,zero,1015788 <Check_for_DOS_FAT+0x628>
		int num_clusters = 0;
 10151c0:	e03ffb15 	stw	zero,-20(fp)

		boot_sector_data.jump_instruction[0] =
 10151c4:	d0a7d817 	ldw	r2,-24736(gp)
 10151c8:	10800a17 	ldw	r2,40(r2)
 10151cc:	10800023 	ldbuio	r2,0(r2)
 10151d0:	1007883a 	mov	r3,r2
 10151d4:	008040b4 	movhi	r2,258
 10151d8:	108eef04 	addi	r2,r2,15292
 10151dc:	10c00005 	stb	r3,0(r2)
				(char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] =
 10151e0:	d0a7d817 	ldw	r2,-24736(gp)
 10151e4:	10800a17 	ldw	r2,40(r2)
 10151e8:	10800044 	addi	r2,r2,1
 10151ec:	10800023 	ldbuio	r2,0(r2)
 10151f0:	1007883a 	mov	r3,r2
 10151f4:	008040b4 	movhi	r2,258
 10151f8:	108eef04 	addi	r2,r2,15292
 10151fc:	10c00045 	stb	r3,1(r2)
				(char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] =
 1015200:	d0a7d817 	ldw	r2,-24736(gp)
 1015204:	10800a17 	ldw	r2,40(r2)
 1015208:	10800084 	addi	r2,r2,2
 101520c:	10800023 	ldbuio	r2,0(r2)
 1015210:	1007883a 	mov	r3,r2
 1015214:	008040b4 	movhi	r2,258
 1015218:	108eef04 	addi	r2,r2,15292
 101521c:	10c00085 	stb	r3,2(r2)
				(char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++) {
 1015220:	e03ffd15 	stw	zero,-12(fp)
 1015224:	00001006 	br	1015268 <Check_for_DOS_FAT+0x108>
			boot_sector_data.OEM_name[counter] =
 1015228:	e13ffd17 	ldw	r4,-12(fp)
 101522c:	d0a7d817 	ldw	r2,-24736(gp)
 1015230:	10800a17 	ldw	r2,40(r2)
 1015234:	1007883a 	mov	r3,r2
 1015238:	e0bffd17 	ldw	r2,-12(fp)
 101523c:	1885883a 	add	r2,r3,r2
 1015240:	108000c4 	addi	r2,r2,3
 1015244:	10800023 	ldbuio	r2,0(r2)
 1015248:	1007883a 	mov	r3,r2
 101524c:	008040b4 	movhi	r2,258
 1015250:	108eef04 	addi	r2,r2,15292
 1015254:	1105883a 	add	r2,r2,r4
 1015258:	10c000c5 	stb	r3,3(r2)
				(char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] =
				(char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] =
				(char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++) {
 101525c:	e0bffd17 	ldw	r2,-12(fp)
 1015260:	10800044 	addi	r2,r2,1
 1015264:	e0bffd15 	stw	r2,-12(fp)
 1015268:	e0bffd17 	ldw	r2,-12(fp)
 101526c:	10800210 	cmplti	r2,r2,8
 1015270:	103fed1e 	bne	r2,zero,1015228 <Check_for_DOS_FAT+0xc8>
			boot_sector_data.OEM_name[counter] =
					(char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes =
 1015274:	d0a7d817 	ldw	r2,-24736(gp)
 1015278:	10800a17 	ldw	r2,40(r2)
 101527c:	10800304 	addi	r2,r2,12
 1015280:	10800023 	ldbuio	r2,0(r2)
 1015284:	10803fcc 	andi	r2,r2,255
 1015288:	1004923a 	slli	r2,r2,8
 101528c:	1007883a 	mov	r3,r2
 1015290:	d0a7d817 	ldw	r2,-24736(gp)
 1015294:	10800a17 	ldw	r2,40(r2)
 1015298:	108002c4 	addi	r2,r2,11
 101529c:	10800023 	ldbuio	r2,0(r2)
 10152a0:	10803fcc 	andi	r2,r2,255
 10152a4:	1080201c 	xori	r2,r2,128
 10152a8:	10bfe004 	addi	r2,r2,-128
 10152ac:	1884b03a 	or	r2,r3,r2
 10152b0:	1007883a 	mov	r3,r2
 10152b4:	008040b4 	movhi	r2,258
 10152b8:	108eef04 	addi	r2,r2,15292
 10152bc:	10c0030d 	sth	r3,12(r2)
				(((unsigned char) IORD_8DIRECT(device_pointer->base, 12)) << 8)
						| ((char) IORD_8DIRECT(device_pointer->base, 11));
		boot_sector_data.sectors_per_cluster =
 10152c0:	d0a7d817 	ldw	r2,-24736(gp)
 10152c4:	10800a17 	ldw	r2,40(r2)
 10152c8:	10800344 	addi	r2,r2,13
 10152cc:	10800023 	ldbuio	r2,0(r2)
 10152d0:	1007883a 	mov	r3,r2
 10152d4:	008040b4 	movhi	r2,258
 10152d8:	108eef04 	addi	r2,r2,15292
 10152dc:	10c00385 	stb	r3,14(r2)
				((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
		boot_sector_data.reserved_sectors =
 10152e0:	d0a7d817 	ldw	r2,-24736(gp)
 10152e4:	10800a17 	ldw	r2,40(r2)
 10152e8:	10800384 	addi	r2,r2,14
 10152ec:	1080002b 	ldhuio	r2,0(r2)
 10152f0:	1007883a 	mov	r3,r2
 10152f4:	008040b4 	movhi	r2,258
 10152f8:	108eef04 	addi	r2,r2,15292
 10152fc:	10c0040d 	sth	r3,16(r2)
				((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
		boot_sector_data.number_of_FATs =
 1015300:	d0a7d817 	ldw	r2,-24736(gp)
 1015304:	10800a17 	ldw	r2,40(r2)
 1015308:	10800404 	addi	r2,r2,16
 101530c:	10800023 	ldbuio	r2,0(r2)
 1015310:	1007883a 	mov	r3,r2
 1015314:	008040b4 	movhi	r2,258
 1015318:	108eef04 	addi	r2,r2,15292
 101531c:	10c00485 	stb	r3,18(r2)
				((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
		boot_sector_data.max_number_of_dir_entires =
 1015320:	d0a7d817 	ldw	r2,-24736(gp)
 1015324:	10800a17 	ldw	r2,40(r2)
 1015328:	10800484 	addi	r2,r2,18
 101532c:	10800023 	ldbuio	r2,0(r2)
 1015330:	10803fcc 	andi	r2,r2,255
 1015334:	1004923a 	slli	r2,r2,8
 1015338:	1007883a 	mov	r3,r2
 101533c:	d0a7d817 	ldw	r2,-24736(gp)
 1015340:	10800a17 	ldw	r2,40(r2)
 1015344:	10800444 	addi	r2,r2,17
 1015348:	10800023 	ldbuio	r2,0(r2)
 101534c:	10803fcc 	andi	r2,r2,255
 1015350:	1884b03a 	or	r2,r3,r2
 1015354:	1007883a 	mov	r3,r2
 1015358:	008040b4 	movhi	r2,258
 101535c:	108eef04 	addi	r2,r2,15292
 1015360:	10c0050d 	sth	r3,20(r2)
				(((unsigned short int) (((unsigned char) IORD_8DIRECT(device_pointer->base, 18))))
						<< 8)
						| ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
		boot_sector_data.number_of_sectors_in_partition =
 1015364:	d0a7d817 	ldw	r2,-24736(gp)
 1015368:	10800a17 	ldw	r2,40(r2)
 101536c:	10800504 	addi	r2,r2,20
 1015370:	10800023 	ldbuio	r2,0(r2)
 1015374:	10803fcc 	andi	r2,r2,255
 1015378:	1004923a 	slli	r2,r2,8
 101537c:	1007883a 	mov	r3,r2
 1015380:	d0a7d817 	ldw	r2,-24736(gp)
 1015384:	10800a17 	ldw	r2,40(r2)
 1015388:	108004c4 	addi	r2,r2,19
 101538c:	10800023 	ldbuio	r2,0(r2)
 1015390:	10803fcc 	andi	r2,r2,255
 1015394:	1884b03a 	or	r2,r3,r2
 1015398:	1007883a 	mov	r3,r2
 101539c:	008040b4 	movhi	r2,258
 10153a0:	108eef04 	addi	r2,r2,15292
 10153a4:	10c0058d 	sth	r3,22(r2)
				(((unsigned short int) (((unsigned char) IORD_8DIRECT(device_pointer->base, 20))))
						<< 8)
						| ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
		boot_sector_data.media_descriptor =
 10153a8:	d0a7d817 	ldw	r2,-24736(gp)
 10153ac:	10800a17 	ldw	r2,40(r2)
 10153b0:	10800544 	addi	r2,r2,21
 10153b4:	10800023 	ldbuio	r2,0(r2)
 10153b8:	1007883a 	mov	r3,r2
 10153bc:	008040b4 	movhi	r2,258
 10153c0:	108eef04 	addi	r2,r2,15292
 10153c4:	10c00605 	stb	r3,24(r2)
				((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
		boot_sector_data.number_of_sectors_per_table =
 10153c8:	d0a7d817 	ldw	r2,-24736(gp)
 10153cc:	10800a17 	ldw	r2,40(r2)
 10153d0:	10800584 	addi	r2,r2,22
 10153d4:	1080002b 	ldhuio	r2,0(r2)
 10153d8:	1007883a 	mov	r3,r2
 10153dc:	008040b4 	movhi	r2,258
 10153e0:	108eef04 	addi	r2,r2,15292
 10153e4:	10c0068d 	sth	r3,26(r2)
				((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
		boot_sector_data.number_of_sectors_per_track =
 10153e8:	d0a7d817 	ldw	r2,-24736(gp)
 10153ec:	10800a17 	ldw	r2,40(r2)
 10153f0:	10800604 	addi	r2,r2,24
 10153f4:	1080002b 	ldhuio	r2,0(r2)
 10153f8:	1007883a 	mov	r3,r2
 10153fc:	008040b4 	movhi	r2,258
 1015400:	108eef04 	addi	r2,r2,15292
 1015404:	10c0070d 	sth	r3,28(r2)
				((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
		boot_sector_data.number_of_heads =
 1015408:	d0a7d817 	ldw	r2,-24736(gp)
 101540c:	10800a17 	ldw	r2,40(r2)
 1015410:	10800684 	addi	r2,r2,26
 1015414:	1080002b 	ldhuio	r2,0(r2)
 1015418:	1007883a 	mov	r3,r2
 101541c:	008040b4 	movhi	r2,258
 1015420:	108eef04 	addi	r2,r2,15292
 1015424:	10c0078d 	sth	r3,30(r2)
				((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
		boot_sector_data.number_of_hidden_sectors =
 1015428:	d0a7d817 	ldw	r2,-24736(gp)
 101542c:	10800a17 	ldw	r2,40(r2)
 1015430:	10800704 	addi	r2,r2,28
 1015434:	10800037 	ldwio	r2,0(r2)
 1015438:	1007883a 	mov	r3,r2
 101543c:	008040b4 	movhi	r2,258
 1015440:	108eef04 	addi	r2,r2,15292
 1015444:	10c00815 	stw	r3,32(r2)
				((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
		boot_sector_data.total_sector_count_if_above_32MB =
 1015448:	d0a7d817 	ldw	r2,-24736(gp)
 101544c:	10800a17 	ldw	r2,40(r2)
 1015450:	10800804 	addi	r2,r2,32
 1015454:	10800037 	ldwio	r2,0(r2)
 1015458:	1007883a 	mov	r3,r2
 101545c:	008040b4 	movhi	r2,258
 1015460:	108eef04 	addi	r2,r2,15292
 1015464:	10c00915 	stw	r3,36(r2)
				((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
		boot_sector_data.drive_number =
 1015468:	d0a7d817 	ldw	r2,-24736(gp)
 101546c:	10800a17 	ldw	r2,40(r2)
 1015470:	10800904 	addi	r2,r2,36
 1015474:	10800023 	ldbuio	r2,0(r2)
 1015478:	1007883a 	mov	r3,r2
 101547c:	008040b4 	movhi	r2,258
 1015480:	108eef04 	addi	r2,r2,15292
 1015484:	10c00a05 	stb	r3,40(r2)
				((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
		boot_sector_data.current_head =
 1015488:	d0a7d817 	ldw	r2,-24736(gp)
 101548c:	10800a17 	ldw	r2,40(r2)
 1015490:	10800944 	addi	r2,r2,37
 1015494:	10800023 	ldbuio	r2,0(r2)
 1015498:	1007883a 	mov	r3,r2
 101549c:	008040b4 	movhi	r2,258
 10154a0:	108eef04 	addi	r2,r2,15292
 10154a4:	10c00a45 	stb	r3,41(r2)
				((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
		boot_sector_data.boot_signature =
 10154a8:	d0a7d817 	ldw	r2,-24736(gp)
 10154ac:	10800a17 	ldw	r2,40(r2)
 10154b0:	10800984 	addi	r2,r2,38
 10154b4:	10800023 	ldbuio	r2,0(r2)
 10154b8:	1007883a 	mov	r3,r2
 10154bc:	008040b4 	movhi	r2,258
 10154c0:	108eef04 	addi	r2,r2,15292
 10154c4:	10c00a85 	stb	r3,42(r2)
				((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
		boot_sector_data.first_fat_sector_offset =
 10154c8:	008040b4 	movhi	r2,258
 10154cc:	108eef04 	addi	r2,r2,15292
 10154d0:	1080040b 	ldhu	r2,16(r2)
 10154d4:	10ffffcc 	andi	r3,r2,65535
 10154d8:	008040b4 	movhi	r2,258
 10154dc:	108eef04 	addi	r2,r2,15292
 10154e0:	10c01115 	stw	r3,68(r2)
				boot_sector_data.reserved_sectors;
		boot_sector_data.second_fat_sector_offset =
 10154e4:	008040b4 	movhi	r2,258
 10154e8:	108eef04 	addi	r2,r2,15292
 10154ec:	10c01117 	ldw	r3,68(r2)
 10154f0:	008040b4 	movhi	r2,258
 10154f4:	108eef04 	addi	r2,r2,15292
 10154f8:	1080068b 	ldhu	r2,26(r2)
 10154fc:	10bfffcc 	andi	r2,r2,65535
 1015500:	1887883a 	add	r3,r3,r2
 1015504:	008040b4 	movhi	r2,258
 1015508:	108eef04 	addi	r2,r2,15292
 101550c:	10c01215 	stw	r3,72(r2)
				boot_sector_data.first_fat_sector_offset
						+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.root_directory_sector_offset =
 1015510:	008040b4 	movhi	r2,258
 1015514:	108eef04 	addi	r2,r2,15292
 1015518:	10c01217 	ldw	r3,72(r2)
 101551c:	008040b4 	movhi	r2,258
 1015520:	108eef04 	addi	r2,r2,15292
 1015524:	1080068b 	ldhu	r2,26(r2)
 1015528:	10bfffcc 	andi	r2,r2,65535
 101552c:	1887883a 	add	r3,r3,r2
 1015530:	008040b4 	movhi	r2,258
 1015534:	108eef04 	addi	r2,r2,15292
 1015538:	10c01315 	stw	r3,76(r2)
				boot_sector_data.second_fat_sector_offset
						+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.data_sector_offset =
 101553c:	008040b4 	movhi	r2,258
 1015540:	108eef04 	addi	r2,r2,15292
 1015544:	14001317 	ldw	r16,76(r2)
 1015548:	008040b4 	movhi	r2,258
 101554c:	108eef04 	addi	r2,r2,15292
 1015550:	1080050b 	ldhu	r2,20(r2)
 1015554:	10bfffcc 	andi	r2,r2,65535
 1015558:	1008917a 	slli	r4,r2,5
 101555c:	008040b4 	movhi	r2,258
 1015560:	108eef04 	addi	r2,r2,15292
 1015564:	1080030b 	ldhu	r2,12(r2)
 1015568:	117fffcc 	andi	r5,r2,65535
 101556c:	10056b00 	call	10056b0 <__divsi3>
 1015570:	8087883a 	add	r3,r16,r2
 1015574:	008040b4 	movhi	r2,258
 1015578:	108eef04 	addi	r2,r2,15292
 101557c:	10c01415 	stw	r3,80(r2)
				boot_sector_data.root_directory_sector_offset
						+ (32 * boot_sector_data.max_number_of_dir_entires
								/ boot_sector_data.sector_size_in_bytes);

		if (boot_sector_data.number_of_sectors_in_partition > 0) {
 1015580:	008040b4 	movhi	r2,258
 1015584:	108eef04 	addi	r2,r2,15292
 1015588:	1080058b 	ldhu	r2,22(r2)
 101558c:	10bfffcc 	andi	r2,r2,65535
 1015590:	1005003a 	cmpeq	r2,r2,zero
 1015594:	10000b1e 	bne	r2,zero,10155c4 <Check_for_DOS_FAT+0x464>
			num_clusters = (boot_sector_data.number_of_sectors_in_partition
 1015598:	008040b4 	movhi	r2,258
 101559c:	108eef04 	addi	r2,r2,15292
 10155a0:	1080058b 	ldhu	r2,22(r2)
 10155a4:	113fffcc 	andi	r4,r2,65535
 10155a8:	008040b4 	movhi	r2,258
 10155ac:	108eef04 	addi	r2,r2,15292
 10155b0:	10800383 	ldbu	r2,14(r2)
 10155b4:	11403fcc 	andi	r5,r2,255
 10155b8:	10056b00 	call	10056b0 <__divsi3>
 10155bc:	e0bffb15 	stw	r2,-20(fp)
 10155c0:	00000906 	br	10155e8 <Check_for_DOS_FAT+0x488>
					/ boot_sector_data.sectors_per_cluster);
		} else {
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB
 10155c4:	008040b4 	movhi	r2,258
 10155c8:	108eef04 	addi	r2,r2,15292
 10155cc:	11000917 	ldw	r4,36(r2)
 10155d0:	008040b4 	movhi	r2,258
 10155d4:	108eef04 	addi	r2,r2,15292
 10155d8:	10800383 	ldbu	r2,14(r2)
 10155dc:	11403fcc 	andi	r5,r2,255
 10155e0:	10057700 	call	1005770 <__udivsi3>
 10155e4:	e0bffb15 	stw	r2,-20(fp)
					/ boot_sector_data.sectors_per_cluster);
		}
		if (num_clusters < 4087) {
 10155e8:	e0bffb17 	ldw	r2,-20(fp)
 10155ec:	1083fdc8 	cmpgei	r2,r2,4087
 10155f0:	1000051e 	bne	r2,zero,1015608 <Check_for_DOS_FAT+0x4a8>
			boot_sector_data.bits_for_cluster_index = 12;
 10155f4:	00c040b4 	movhi	r3,258
 10155f8:	18ceef04 	addi	r3,r3,15292
 10155fc:	00800304 	movi	r2,12
 1015600:	18801085 	stb	r2,66(r3)
 1015604:	00000c06 	br	1015638 <Check_for_DOS_FAT+0x4d8>
		} else if (num_clusters <= 65517) {
 1015608:	e0fffb17 	ldw	r3,-20(fp)
 101560c:	00bffb54 	movui	r2,65517
 1015610:	10c00516 	blt	r2,r3,1015628 <Check_for_DOS_FAT+0x4c8>
			boot_sector_data.bits_for_cluster_index = 16;
 1015614:	00c040b4 	movhi	r3,258
 1015618:	18ceef04 	addi	r3,r3,15292
 101561c:	00800404 	movi	r2,16
 1015620:	18801085 	stb	r2,66(r3)
 1015624:	00000406 	br	1015638 <Check_for_DOS_FAT+0x4d8>
		} else {
			boot_sector_data.bits_for_cluster_index = 32;
 1015628:	00c040b4 	movhi	r3,258
 101562c:	18ceef04 	addi	r3,r3,15292
 1015630:	00800804 	movi	r2,32
 1015634:	18801085 	stb	r2,66(r3)
		}

		for (counter = 0; counter < 4; counter++) {
 1015638:	e03ffd15 	stw	zero,-12(fp)
 101563c:	00001106 	br	1015684 <Check_for_DOS_FAT+0x524>
			boot_sector_data.volume_id[counter] =
 1015640:	e13ffd17 	ldw	r4,-12(fp)
 1015644:	d0a7d817 	ldw	r2,-24736(gp)
 1015648:	10800a17 	ldw	r2,40(r2)
 101564c:	1007883a 	mov	r3,r2
 1015650:	e0bffd17 	ldw	r2,-12(fp)
 1015654:	1885883a 	add	r2,r3,r2
 1015658:	108009c4 	addi	r2,r2,39
 101565c:	10800023 	ldbuio	r2,0(r2)
 1015660:	1007883a 	mov	r3,r2
 1015664:	008040b4 	movhi	r2,258
 1015668:	108eef04 	addi	r2,r2,15292
 101566c:	2085883a 	add	r2,r4,r2
 1015670:	10800a04 	addi	r2,r2,40
 1015674:	10c000c5 	stb	r3,3(r2)
			boot_sector_data.bits_for_cluster_index = 16;
		} else {
			boot_sector_data.bits_for_cluster_index = 32;
		}

		for (counter = 0; counter < 4; counter++) {
 1015678:	e0bffd17 	ldw	r2,-12(fp)
 101567c:	10800044 	addi	r2,r2,1
 1015680:	e0bffd15 	stw	r2,-12(fp)
 1015684:	e0bffd17 	ldw	r2,-12(fp)
 1015688:	10800110 	cmplti	r2,r2,4
 101568c:	103fec1e 	bne	r2,zero,1015640 <Check_for_DOS_FAT+0x4e0>
			boot_sector_data.volume_id[counter] =
					((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}
		for (counter = 0; counter < 11; counter++) {
 1015690:	e03ffd15 	stw	zero,-12(fp)
 1015694:	00001106 	br	10156dc <Check_for_DOS_FAT+0x57c>
			boot_sector_data.volume_label[counter] =
 1015698:	e13ffd17 	ldw	r4,-12(fp)
 101569c:	d0a7d817 	ldw	r2,-24736(gp)
 10156a0:	10800a17 	ldw	r2,40(r2)
 10156a4:	1007883a 	mov	r3,r2
 10156a8:	e0bffd17 	ldw	r2,-12(fp)
 10156ac:	1885883a 	add	r2,r3,r2
 10156b0:	10800ac4 	addi	r2,r2,43
 10156b4:	10800023 	ldbuio	r2,0(r2)
 10156b8:	1007883a 	mov	r3,r2
 10156bc:	008040b4 	movhi	r2,258
 10156c0:	108eef04 	addi	r2,r2,15292
 10156c4:	2085883a 	add	r2,r4,r2
 10156c8:	10800b04 	addi	r2,r2,44
 10156cc:	10c000c5 	stb	r3,3(r2)

		for (counter = 0; counter < 4; counter++) {
			boot_sector_data.volume_id[counter] =
					((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}
		for (counter = 0; counter < 11; counter++) {
 10156d0:	e0bffd17 	ldw	r2,-12(fp)
 10156d4:	10800044 	addi	r2,r2,1
 10156d8:	e0bffd15 	stw	r2,-12(fp)
 10156dc:	e0bffd17 	ldw	r2,-12(fp)
 10156e0:	108002d0 	cmplti	r2,r2,11
 10156e4:	103fec1e 	bne	r2,zero,1015698 <Check_for_DOS_FAT+0x538>
			boot_sector_data.volume_label[counter] =
					((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}
		for (counter = 0; counter < 8; counter++) {
 10156e8:	e03ffd15 	stw	zero,-12(fp)
 10156ec:	00001106 	br	1015734 <Check_for_DOS_FAT+0x5d4>
			boot_sector_data.file_system_type[counter] =
 10156f0:	e13ffd17 	ldw	r4,-12(fp)
 10156f4:	d0a7d817 	ldw	r2,-24736(gp)
 10156f8:	10800a17 	ldw	r2,40(r2)
 10156fc:	1007883a 	mov	r3,r2
 1015700:	e0bffd17 	ldw	r2,-12(fp)
 1015704:	1885883a 	add	r2,r3,r2
 1015708:	10800d84 	addi	r2,r2,54
 101570c:	10800023 	ldbuio	r2,0(r2)
 1015710:	1007883a 	mov	r3,r2
 1015714:	008040b4 	movhi	r2,258
 1015718:	108eef04 	addi	r2,r2,15292
 101571c:	2085883a 	add	r2,r4,r2
 1015720:	10800e04 	addi	r2,r2,56
 1015724:	10c00085 	stb	r3,2(r2)
		}
		for (counter = 0; counter < 11; counter++) {
			boot_sector_data.volume_label[counter] =
					((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}
		for (counter = 0; counter < 8; counter++) {
 1015728:	e0bffd17 	ldw	r2,-12(fp)
 101572c:	10800044 	addi	r2,r2,1
 1015730:	e0bffd15 	stw	r2,-12(fp)
 1015734:	e0bffd17 	ldw	r2,-12(fp)
 1015738:	10800210 	cmplti	r2,r2,8
 101573c:	103fec1e 	bne	r2,zero,10156f0 <Check_for_DOS_FAT+0x590>
			boot_sector_data.file_system_type[counter] =
					((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
 1015740:	e03ffd15 	stw	zero,-12(fp)
 1015744:	00000a06 	br	1015770 <Check_for_DOS_FAT+0x610>
			active_files[counter].in_use = false;
 1015748:	e0bffd17 	ldw	r2,-12(fp)
 101574c:	00c040b4 	movhi	r3,258
 1015750:	18cf0404 	addi	r3,r3,15376
 1015754:	100491ba 	slli	r2,r2,6
 1015758:	10c5883a 	add	r2,r2,r3
 101575c:	10800f04 	addi	r2,r2,60
 1015760:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++) {
			boot_sector_data.file_system_type[counter] =
					((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
 1015764:	e0bffd17 	ldw	r2,-12(fp)
 1015768:	10800044 	addi	r2,r2,1
 101576c:	e0bffd15 	stw	r2,-12(fp)
 1015770:	e0bffd17 	ldw	r2,-12(fp)
 1015774:	10800510 	cmplti	r2,r2,20
 1015778:	103ff31e 	bne	r2,zero,1015748 <Check_for_DOS_FAT+0x5e8>
			active_files[counter].in_use = false;
		}
		result = true;
 101577c:	00800044 	movi	r2,1
 1015780:	e0bffe15 	stw	r2,-8(fp)
	int counter = 0;
	short int end;

	result = Read_Sector_Data_Attempt_CRC(0, FAT_partition_start_sector);
	end = (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result)) {
 1015784:	00000106 	br	101578c <Check_for_DOS_FAT+0x62c>
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
			active_files[counter].in_use = false;
		}
		result = true;
	} else {
		result = false;
 1015788:	e03ffe15 	stw	zero,-8(fp)
	}
	return result;
 101578c:	e0bffe17 	ldw	r2,-8(fp)
}
 1015790:	e037883a 	mov	sp,fp
 1015794:	dfc00217 	ldw	ra,8(sp)
 1015798:	df000117 	ldw	fp,4(sp)
 101579c:	dc000017 	ldw	r16,0(sp)
 10157a0:	dec00304 	addi	sp,sp,12
 10157a4:	f800283a 	ret

010157a8 <Look_for_FAT16>:

bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
 10157a8:	defffc04 	addi	sp,sp,-16
 10157ac:	dfc00315 	stw	ra,12(sp)
 10157b0:	df000215 	stw	fp,8(sp)
 10157b4:	df000204 	addi	fp,sp,8
	bool result = false;
 10157b8:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present()) {
 10157bc:	10174f00 	call	10174f0 <alt_up_sd_card_is_Present>
 10157c0:	1005003a 	cmpeq	r2,r2,zero
 10157c4:	1000331e 	bne	r2,zero,1015894 <Look_for_FAT16+0xec>
		Read_Sector_Data_Attempt_CRC(0, 0);
 10157c8:	0009883a 	mov	r4,zero
 10157cc:	000b883a 	mov	r5,zero
 10157d0:	1018c380 	call	1018c38 <Read_Sector_Data_Attempt_CRC>

		short int csd_file_format = *CSD_register_w0;
 10157d4:	d0a7d217 	ldw	r2,-24760(gp)
 10157d8:	1080000b 	ldhu	r2,0(r2)
 10157dc:	e0bffe0d 	sth	r2,-8(fp)

		fat_partition_offset_in_512_byte_sectors = 0;
 10157e0:	d027d615 	stw	zero,-24744(gp)
		fat_partition_size_in_512_byte_sectors = 0;
 10157e4:	d027d715 	stw	zero,-24740(gp)

		if (((csd_file_format & 0x8000) == 0)
 10157e8:	e0bffe0f 	ldh	r2,-8(fp)
 10157ec:	1004803a 	cmplt	r2,r2,zero
 10157f0:	1000281e 	bne	r2,zero,1015894 <Look_for_FAT16+0xec>
 10157f4:	e0bffe0b 	ldhu	r2,-8(fp)
 10157f8:	10bfffcc 	andi	r2,r2,65535
 10157fc:	1083000c 	andi	r2,r2,3072
 1015800:	10830020 	cmpeqi	r2,r2,3072
 1015804:	1000231e 	bne	r2,zero,1015894 <Look_for_FAT16+0xec>
				&& ((csd_file_format & 0x0c00) != 0x0c00)) {
			if ((csd_file_format & 0x0c00) == 0x0400) {
 1015808:	e0bffe0b 	ldhu	r2,-8(fp)
 101580c:	10bfffcc 	andi	r2,r2,65535
 1015810:	1083000c 	andi	r2,r2,3072
 1015814:	10810018 	cmpnei	r2,r2,1024
 1015818:	1000031e 	bne	r2,zero,1015828 <Look_for_FAT16+0x80>
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
 101581c:	0009883a 	mov	r4,zero
 1015820:	10151600 	call	1015160 <Check_for_DOS_FAT>
 1015824:	e0bfff15 	stw	r2,-4(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000) {
 1015828:	e0bffe0b 	ldhu	r2,-8(fp)
 101582c:	10bfffcc 	andi	r2,r2,65535
 1015830:	1083000c 	andi	r2,r2,3072
 1015834:	1004c03a 	cmpne	r2,r2,zero
 1015838:	1000061e 	bne	r2,zero,1015854 <Look_for_FAT16+0xac>
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record()) {
 101583c:	1014a740 	call	1014a74 <Check_for_Master_Boot_Record>
 1015840:	1005003a 	cmpeq	r2,r2,zero
 1015844:	1000031e 	bne	r2,zero,1015854 <Look_for_FAT16+0xac>
					result = Check_for_DOS_FAT(
 1015848:	d127d617 	ldw	r4,-24744(gp)
 101584c:	10151600 	call	1015160 <Check_for_DOS_FAT>
 1015850:	e0bfff15 	stw	r2,-4(fp)
							fat_partition_offset_in_512_byte_sectors);
				}
			}
			if (result == true) {
 1015854:	e0bfff17 	ldw	r2,-4(fp)
 1015858:	10800058 	cmpnei	r2,r2,1
 101585c:	10000d1e 	bne	r2,zero,1015894 <Look_for_FAT16+0xec>
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16) {
 1015860:	008040b4 	movhi	r2,258
 1015864:	108eef04 	addi	r2,r2,15292
 1015868:	10801083 	ldbu	r2,66(r2)
 101586c:	10803fcc 	andi	r2,r2,255
 1015870:	10800420 	cmpeqi	r2,r2,16
 1015874:	1000021e 	bne	r2,zero,1015880 <Look_for_FAT16+0xd8>
					result = false;
 1015878:	e03fff15 	stw	zero,-4(fp)
 101587c:	00000506 	br	1015894 <Look_for_FAT16+0xec>
				} else {
					fat_partition_size_in_512_byte_sectors =
 1015880:	008040b4 	movhi	r2,258
 1015884:	108eef04 	addi	r2,r2,15292
 1015888:	1080058b 	ldhu	r2,22(r2)
 101588c:	10bfffcc 	andi	r2,r2,65535
 1015890:	d0a7d715 	stw	r2,-24740(gp)
							boot_sector_data.number_of_sectors_in_partition;
				}
			}
		}
	}
	return result;
 1015894:	e0bfff17 	ldw	r2,-4(fp)
}
 1015898:	e037883a 	mov	sp,fp
 101589c:	dfc00117 	ldw	ra,4(sp)
 10158a0:	df000017 	ldw	fp,0(sp)
 10158a4:	dec00204 	addi	sp,sp,8
 10158a8:	f800283a 	ret

010158ac <filename_to_upper_case>:

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
 10158ac:	defffb04 	addi	sp,sp,-20
 10158b0:	dfc00415 	stw	ra,16(sp)
 10158b4:	df000315 	stw	fp,12(sp)
 10158b8:	df000304 	addi	fp,sp,12
 10158bc:	e13fff15 	stw	r4,-4(fp)
	int index;
	int length = strlen(file_name);
 10158c0:	e13fff17 	ldw	r4,-4(fp)
 10158c4:	10068940 	call	1006894 <strlen>
 10158c8:	e0bffd15 	stw	r2,-12(fp)

	for (index = 0; index < length; index++) {
 10158cc:	e03ffe15 	stw	zero,-8(fp)
 10158d0:	00002206 	br	101595c <filename_to_upper_case+0xb0>
		if ((file_name[index] >= 'a') && (file_name[index] <= 'z')) {
 10158d4:	e0bffe17 	ldw	r2,-8(fp)
 10158d8:	1007883a 	mov	r3,r2
 10158dc:	e0bfff17 	ldw	r2,-4(fp)
 10158e0:	1885883a 	add	r2,r3,r2
 10158e4:	10800003 	ldbu	r2,0(r2)
 10158e8:	10803fcc 	andi	r2,r2,255
 10158ec:	1080201c 	xori	r2,r2,128
 10158f0:	10bfe004 	addi	r2,r2,-128
 10158f4:	10801850 	cmplti	r2,r2,97
 10158f8:	1000151e 	bne	r2,zero,1015950 <filename_to_upper_case+0xa4>
 10158fc:	e0bffe17 	ldw	r2,-8(fp)
 1015900:	1007883a 	mov	r3,r2
 1015904:	e0bfff17 	ldw	r2,-4(fp)
 1015908:	1885883a 	add	r2,r3,r2
 101590c:	10800003 	ldbu	r2,0(r2)
 1015910:	10803fcc 	andi	r2,r2,255
 1015914:	1080201c 	xori	r2,r2,128
 1015918:	10bfe004 	addi	r2,r2,-128
 101591c:	10801ec8 	cmpgei	r2,r2,123
 1015920:	10000b1e 	bne	r2,zero,1015950 <filename_to_upper_case+0xa4>
			file_name[index] = (file_name[index] - 'a') + 'A';
 1015924:	e0bffe17 	ldw	r2,-8(fp)
 1015928:	1007883a 	mov	r3,r2
 101592c:	e0bfff17 	ldw	r2,-4(fp)
 1015930:	1889883a 	add	r4,r3,r2
 1015934:	e0bffe17 	ldw	r2,-8(fp)
 1015938:	1007883a 	mov	r3,r2
 101593c:	e0bfff17 	ldw	r2,-4(fp)
 1015940:	1885883a 	add	r2,r3,r2
 1015944:	10800003 	ldbu	r2,0(r2)
 1015948:	10bff804 	addi	r2,r2,-32
 101594c:	20800005 	stb	r2,0(r4)
// Change file name to upper case.
{
	int index;
	int length = strlen(file_name);

	for (index = 0; index < length; index++) {
 1015950:	e0bffe17 	ldw	r2,-8(fp)
 1015954:	10800044 	addi	r2,r2,1
 1015958:	e0bffe15 	stw	r2,-8(fp)
 101595c:	e0fffe17 	ldw	r3,-8(fp)
 1015960:	e0bffd17 	ldw	r2,-12(fp)
 1015964:	18bfdb16 	blt	r3,r2,10158d4 <filename_to_upper_case+0x28>
		if ((file_name[index] >= 'a') && (file_name[index] <= 'z')) {
			file_name[index] = (file_name[index] - 'a') + 'A';
		}
	}
}
 1015968:	e037883a 	mov	sp,fp
 101596c:	dfc00117 	ldw	ra,4(sp)
 1015970:	df000017 	ldw	fp,0(sp)
 1015974:	dec00204 	addi	sp,sp,8
 1015978:	f800283a 	ret

0101597c <check_file_name_for_FAT16_compliance>:

bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
 101597c:	defff804 	addi	sp,sp,-32
 1015980:	dfc00715 	stw	ra,28(sp)
 1015984:	df000615 	stw	fp,24(sp)
 1015988:	df000604 	addi	fp,sp,24
 101598c:	e13fff15 	stw	r4,-4(fp)
	int length = strlen(file_name);
 1015990:	e13fff17 	ldw	r4,-4(fp)
 1015994:	10068940 	call	1006894 <strlen>
 1015998:	e0bffe15 	stw	r2,-8(fp)
	int index;
	int last_dir_break_position = -1;
 101599c:	00bfffc4 	movi	r2,-1
 10159a0:	e0bffc15 	stw	r2,-16(fp)
	int last_period = -1;
 10159a4:	00bfffc4 	movi	r2,-1
 10159a8:	e0bffb15 	stw	r2,-20(fp)
	bool result = true;
 10159ac:	00800044 	movi	r2,1
 10159b0:	e0bffa15 	stw	r2,-24(fp)

	for (index = 0; index < length; index++) {
 10159b4:	e03ffd15 	stw	zero,-12(fp)
 10159b8:	00007606 	br	1015b94 <check_file_name_for_FAT16_compliance+0x218>
		if ((file_name[index] == ' ')
 10159bc:	e0bffd17 	ldw	r2,-12(fp)
 10159c0:	1007883a 	mov	r3,r2
 10159c4:	e0bfff17 	ldw	r2,-4(fp)
 10159c8:	1885883a 	add	r2,r3,r2
 10159cc:	10800003 	ldbu	r2,0(r2)
 10159d0:	10803fcc 	andi	r2,r2,255
 10159d4:	1080201c 	xori	r2,r2,128
 10159d8:	10bfe004 	addi	r2,r2,-128
 10159dc:	10800820 	cmpeqi	r2,r2,32
 10159e0:	1000431e 	bne	r2,zero,1015af0 <check_file_name_for_FAT16_compliance+0x174>
 10159e4:	e0bffd17 	ldw	r2,-12(fp)
 10159e8:	10ffffc4 	addi	r3,r2,-1
 10159ec:	e0bffc17 	ldw	r2,-16(fp)
 10159f0:	1880141e 	bne	r3,r2,1015a44 <check_file_name_for_FAT16_compliance+0xc8>
 10159f4:	e0bffd17 	ldw	r2,-12(fp)
 10159f8:	1007883a 	mov	r3,r2
 10159fc:	e0bfff17 	ldw	r2,-4(fp)
 1015a00:	1885883a 	add	r2,r3,r2
 1015a04:	10800003 	ldbu	r2,0(r2)
 1015a08:	10803fcc 	andi	r2,r2,255
 1015a0c:	1080201c 	xori	r2,r2,128
 1015a10:	10bfe004 	addi	r2,r2,-128
 1015a14:	10801720 	cmpeqi	r2,r2,92
 1015a18:	1000351e 	bne	r2,zero,1015af0 <check_file_name_for_FAT16_compliance+0x174>
 1015a1c:	e0bffd17 	ldw	r2,-12(fp)
 1015a20:	1007883a 	mov	r3,r2
 1015a24:	e0bfff17 	ldw	r2,-4(fp)
 1015a28:	1885883a 	add	r2,r3,r2
 1015a2c:	10800003 	ldbu	r2,0(r2)
 1015a30:	10803fcc 	andi	r2,r2,255
 1015a34:	1080201c 	xori	r2,r2,128
 1015a38:	10bfe004 	addi	r2,r2,-128
 1015a3c:	10800be0 	cmpeqi	r2,r2,47
 1015a40:	10002b1e 	bne	r2,zero,1015af0 <check_file_name_for_FAT16_compliance+0x174>
 1015a44:	e0fffd17 	ldw	r3,-12(fp)
 1015a48:	e0bffb17 	ldw	r2,-20(fp)
 1015a4c:	1885c83a 	sub	r2,r3,r2
 1015a50:	10800258 	cmpnei	r2,r2,9
 1015a54:	10000a1e 	bne	r2,zero,1015a80 <check_file_name_for_FAT16_compliance+0x104>
 1015a58:	e0bffd17 	ldw	r2,-12(fp)
 1015a5c:	1007883a 	mov	r3,r2
 1015a60:	e0bfff17 	ldw	r2,-4(fp)
 1015a64:	1885883a 	add	r2,r3,r2
 1015a68:	10800003 	ldbu	r2,0(r2)
 1015a6c:	10803fcc 	andi	r2,r2,255
 1015a70:	1080201c 	xori	r2,r2,128
 1015a74:	10bfe004 	addi	r2,r2,-128
 1015a78:	10800b98 	cmpnei	r2,r2,46
 1015a7c:	10001c1e 	bne	r2,zero,1015af0 <check_file_name_for_FAT16_compliance+0x174>
 1015a80:	e0fffc17 	ldw	r3,-16(fp)
 1015a84:	e0bffb17 	ldw	r2,-20(fp)
 1015a88:	18801b26 	beq	r3,r2,1015af8 <check_file_name_for_FAT16_compliance+0x17c>
 1015a8c:	e0fffd17 	ldw	r3,-12(fp)
 1015a90:	e0bffb17 	ldw	r2,-20(fp)
 1015a94:	1885c83a 	sub	r2,r3,r2
 1015a98:	10800110 	cmplti	r2,r2,4
 1015a9c:	1000161e 	bne	r2,zero,1015af8 <check_file_name_for_FAT16_compliance+0x17c>
 1015aa0:	e0bffd17 	ldw	r2,-12(fp)
 1015aa4:	1007883a 	mov	r3,r2
 1015aa8:	e0bfff17 	ldw	r2,-4(fp)
 1015aac:	1885883a 	add	r2,r3,r2
 1015ab0:	10800003 	ldbu	r2,0(r2)
 1015ab4:	10803fcc 	andi	r2,r2,255
 1015ab8:	1080201c 	xori	r2,r2,128
 1015abc:	10bfe004 	addi	r2,r2,-128
 1015ac0:	10801720 	cmpeqi	r2,r2,92
 1015ac4:	10000c1e 	bne	r2,zero,1015af8 <check_file_name_for_FAT16_compliance+0x17c>
 1015ac8:	e0bffd17 	ldw	r2,-12(fp)
 1015acc:	1007883a 	mov	r3,r2
 1015ad0:	e0bfff17 	ldw	r2,-4(fp)
 1015ad4:	1885883a 	add	r2,r3,r2
 1015ad8:	10800003 	ldbu	r2,0(r2)
 1015adc:	10803fcc 	andi	r2,r2,255
 1015ae0:	1080201c 	xori	r2,r2,128
 1015ae4:	10bfe004 	addi	r2,r2,-128
 1015ae8:	10800be0 	cmpeqi	r2,r2,47
 1015aec:	1000021e 	bne	r2,zero,1015af8 <check_file_name_for_FAT16_compliance+0x17c>
				|| ((index - last_period == 9) && (file_name[index] != '.'))
				|| ((last_dir_break_position != last_period)
						&& (index - last_period > 3)
						&& (file_name[index] != '\\')
						&& (file_name[index] != '/'))) {
			result = false;
 1015af0:	e03ffa15 	stw	zero,-24(fp)
			break;
 1015af4:	00002a06 	br	1015ba0 <check_file_name_for_FAT16_compliance+0x224>
		}
		if ((file_name[index] == '\\') || (file_name[index] == '/')) {
 1015af8:	e0bffd17 	ldw	r2,-12(fp)
 1015afc:	1007883a 	mov	r3,r2
 1015b00:	e0bfff17 	ldw	r2,-4(fp)
 1015b04:	1885883a 	add	r2,r3,r2
 1015b08:	10800003 	ldbu	r2,0(r2)
 1015b0c:	10803fcc 	andi	r2,r2,255
 1015b10:	1080201c 	xori	r2,r2,128
 1015b14:	10bfe004 	addi	r2,r2,-128
 1015b18:	10801720 	cmpeqi	r2,r2,92
 1015b1c:	10000a1e 	bne	r2,zero,1015b48 <check_file_name_for_FAT16_compliance+0x1cc>
 1015b20:	e0bffd17 	ldw	r2,-12(fp)
 1015b24:	1007883a 	mov	r3,r2
 1015b28:	e0bfff17 	ldw	r2,-4(fp)
 1015b2c:	1885883a 	add	r2,r3,r2
 1015b30:	10800003 	ldbu	r2,0(r2)
 1015b34:	10803fcc 	andi	r2,r2,255
 1015b38:	1080201c 	xori	r2,r2,128
 1015b3c:	10bfe004 	addi	r2,r2,-128
 1015b40:	10800bd8 	cmpnei	r2,r2,47
 1015b44:	1000041e 	bne	r2,zero,1015b58 <check_file_name_for_FAT16_compliance+0x1dc>
			last_period = index;
 1015b48:	e0bffd17 	ldw	r2,-12(fp)
 1015b4c:	e0bffb15 	stw	r2,-20(fp)
			last_dir_break_position = index;
 1015b50:	e0bffd17 	ldw	r2,-12(fp)
 1015b54:	e0bffc15 	stw	r2,-16(fp)
		}
		if (file_name[index] == '.') {
 1015b58:	e0bffd17 	ldw	r2,-12(fp)
 1015b5c:	1007883a 	mov	r3,r2
 1015b60:	e0bfff17 	ldw	r2,-4(fp)
 1015b64:	1885883a 	add	r2,r3,r2
 1015b68:	10800003 	ldbu	r2,0(r2)
 1015b6c:	10803fcc 	andi	r2,r2,255
 1015b70:	1080201c 	xori	r2,r2,128
 1015b74:	10bfe004 	addi	r2,r2,-128
 1015b78:	10800b98 	cmpnei	r2,r2,46
 1015b7c:	1000021e 	bne	r2,zero,1015b88 <check_file_name_for_FAT16_compliance+0x20c>
			last_period = index;
 1015b80:	e0bffd17 	ldw	r2,-12(fp)
 1015b84:	e0bffb15 	stw	r2,-20(fp)
	int index;
	int last_dir_break_position = -1;
	int last_period = -1;
	bool result = true;

	for (index = 0; index < length; index++) {
 1015b88:	e0bffd17 	ldw	r2,-12(fp)
 1015b8c:	10800044 	addi	r2,r2,1
 1015b90:	e0bffd15 	stw	r2,-12(fp)
 1015b94:	e0fffd17 	ldw	r3,-12(fp)
 1015b98:	e0bffe17 	ldw	r2,-8(fp)
 1015b9c:	18bf8716 	blt	r3,r2,10159bc <check_file_name_for_FAT16_compliance+0x40>
		}
		if (file_name[index] == '.') {
			last_period = index;
		}
	}
	if ((file_name[length - 1] == '\\') || (file_name[length - 1] == '/')) {
 1015ba0:	e0fffe17 	ldw	r3,-8(fp)
 1015ba4:	e0bfff17 	ldw	r2,-4(fp)
 1015ba8:	1885883a 	add	r2,r3,r2
 1015bac:	10bfffc4 	addi	r2,r2,-1
 1015bb0:	10800003 	ldbu	r2,0(r2)
 1015bb4:	10803fcc 	andi	r2,r2,255
 1015bb8:	1080201c 	xori	r2,r2,128
 1015bbc:	10bfe004 	addi	r2,r2,-128
 1015bc0:	10801720 	cmpeqi	r2,r2,92
 1015bc4:	10000a1e 	bne	r2,zero,1015bf0 <check_file_name_for_FAT16_compliance+0x274>
 1015bc8:	e0fffe17 	ldw	r3,-8(fp)
 1015bcc:	e0bfff17 	ldw	r2,-4(fp)
 1015bd0:	1885883a 	add	r2,r3,r2
 1015bd4:	10bfffc4 	addi	r2,r2,-1
 1015bd8:	10800003 	ldbu	r2,0(r2)
 1015bdc:	10803fcc 	andi	r2,r2,255
 1015be0:	1080201c 	xori	r2,r2,128
 1015be4:	10bfe004 	addi	r2,r2,-128
 1015be8:	10800bd8 	cmpnei	r2,r2,47
 1015bec:	1000011e 	bne	r2,zero,1015bf4 <check_file_name_for_FAT16_compliance+0x278>
		result = false;
 1015bf0:	e03ffa15 	stw	zero,-24(fp)
	}
	return result;
 1015bf4:	e0bffa17 	ldw	r2,-24(fp)
}
 1015bf8:	e037883a 	mov	sp,fp
 1015bfc:	dfc00117 	ldw	ra,4(sp)
 1015c00:	df000017 	ldw	fp,0(sp)
 1015c04:	dec00204 	addi	sp,sp,8
 1015c08:	f800283a 	ret

01015c0c <get_dir_divider_location>:

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
 1015c0c:	defffb04 	addi	sp,sp,-20
 1015c10:	dfc00415 	stw	ra,16(sp)
 1015c14:	df000315 	stw	fp,12(sp)
 1015c18:	df000304 	addi	fp,sp,12
 1015c1c:	e13fff15 	stw	r4,-4(fp)
	int index = 0;
 1015c20:	e03ffe15 	stw	zero,-8(fp)
	int length = strlen(name);
 1015c24:	e13fff17 	ldw	r4,-4(fp)
 1015c28:	10068940 	call	1006894 <strlen>
 1015c2c:	e0bffd15 	stw	r2,-12(fp)

	for (index = 0; index < length; index++) {
 1015c30:	e03ffe15 	stw	zero,-8(fp)
 1015c34:	00001706 	br	1015c94 <get_dir_divider_location+0x88>
		if ((name[index] == '\\') || (name[index] == '/')) {
 1015c38:	e0bffe17 	ldw	r2,-8(fp)
 1015c3c:	1007883a 	mov	r3,r2
 1015c40:	e0bfff17 	ldw	r2,-4(fp)
 1015c44:	1885883a 	add	r2,r3,r2
 1015c48:	10800003 	ldbu	r2,0(r2)
 1015c4c:	10803fcc 	andi	r2,r2,255
 1015c50:	1080201c 	xori	r2,r2,128
 1015c54:	10bfe004 	addi	r2,r2,-128
 1015c58:	10801720 	cmpeqi	r2,r2,92
 1015c5c:	1000101e 	bne	r2,zero,1015ca0 <get_dir_divider_location+0x94>
 1015c60:	e0bffe17 	ldw	r2,-8(fp)
 1015c64:	1007883a 	mov	r3,r2
 1015c68:	e0bfff17 	ldw	r2,-4(fp)
 1015c6c:	1885883a 	add	r2,r3,r2
 1015c70:	10800003 	ldbu	r2,0(r2)
 1015c74:	10803fcc 	andi	r2,r2,255
 1015c78:	1080201c 	xori	r2,r2,128
 1015c7c:	10bfe004 	addi	r2,r2,-128
 1015c80:	10800be0 	cmpeqi	r2,r2,47
 1015c84:	1000061e 	bne	r2,zero,1015ca0 <get_dir_divider_location+0x94>
// Find a directory divider location.
{
	int index = 0;
	int length = strlen(name);

	for (index = 0; index < length; index++) {
 1015c88:	e0bffe17 	ldw	r2,-8(fp)
 1015c8c:	10800044 	addi	r2,r2,1
 1015c90:	e0bffe15 	stw	r2,-8(fp)
 1015c94:	e0fffe17 	ldw	r3,-8(fp)
 1015c98:	e0bffd17 	ldw	r2,-12(fp)
 1015c9c:	18bfe616 	blt	r3,r2,1015c38 <get_dir_divider_location+0x2c>
		if ((name[index] == '\\') || (name[index] == '/')) {
			break;
		}
	}

	if (index == length) {
 1015ca0:	e0fffe17 	ldw	r3,-8(fp)
 1015ca4:	e0bffd17 	ldw	r2,-12(fp)
 1015ca8:	1880021e 	bne	r3,r2,1015cb4 <get_dir_divider_location+0xa8>
		index = -1;
 1015cac:	00bfffc4 	movi	r2,-1
 1015cb0:	e0bffe15 	stw	r2,-8(fp)
	}

	return index;
 1015cb4:	e0bffe17 	ldw	r2,-8(fp)
}
 1015cb8:	e037883a 	mov	sp,fp
 1015cbc:	dfc00117 	ldw	ra,4(sp)
 1015cc0:	df000017 	ldw	fp,0(sp)
 1015cc4:	dec00204 	addi	sp,sp,8
 1015cc8:	f800283a 	ret

01015ccc <match_file_record_to_name_ext>:

bool match_file_record_to_name_ext(t_file_record *file_record, char *name,
		char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
 1015ccc:	defff604 	addi	sp,sp,-40
 1015cd0:	df000915 	stw	fp,36(sp)
 1015cd4:	df000904 	addi	fp,sp,36
 1015cd8:	e13ff915 	stw	r4,-28(fp)
 1015cdc:	e17ffa15 	stw	r5,-24(fp)
 1015ce0:	e1bffb15 	stw	r6,-20(fp)
	bool match = true;
 1015ce4:	00800044 	movi	r2,1
 1015ce8:	e0bff815 	stw	r2,-32(fp)
	int index;

	for (index = 0; index < 8; index++) {
 1015cec:	e03ff715 	stw	zero,-36(fp)
 1015cf0:	00005006 	br	1015e34 <match_file_record_to_name_ext+0x168>
		if (CHAR_TO_UPPER(file_record->name[index])
 1015cf4:	e0fff717 	ldw	r3,-36(fp)
 1015cf8:	e0bff917 	ldw	r2,-28(fp)
 1015cfc:	10c5883a 	add	r2,r2,r3
 1015d00:	10800003 	ldbu	r2,0(r2)
 1015d04:	10803fcc 	andi	r2,r2,255
 1015d08:	10801870 	cmpltui	r2,r2,97
 1015d0c:	1000111e 	bne	r2,zero,1015d54 <match_file_record_to_name_ext+0x88>
 1015d10:	e0fff717 	ldw	r3,-36(fp)
 1015d14:	e0bff917 	ldw	r2,-28(fp)
 1015d18:	10c5883a 	add	r2,r2,r3
 1015d1c:	10800003 	ldbu	r2,0(r2)
 1015d20:	10803fcc 	andi	r2,r2,255
 1015d24:	10801ee8 	cmpgeui	r2,r2,123
 1015d28:	10000a1e 	bne	r2,zero,1015d54 <match_file_record_to_name_ext+0x88>
 1015d2c:	e0fff717 	ldw	r3,-36(fp)
 1015d30:	e0bff917 	ldw	r2,-28(fp)
 1015d34:	10c5883a 	add	r2,r2,r3
 1015d38:	10800003 	ldbu	r2,0(r2)
 1015d3c:	10bff804 	addi	r2,r2,-32
 1015d40:	10803fcc 	andi	r2,r2,255
 1015d44:	1080201c 	xori	r2,r2,128
 1015d48:	10bfe004 	addi	r2,r2,-128
 1015d4c:	e0bfff15 	stw	r2,-4(fp)
 1015d50:	00000806 	br	1015d74 <match_file_record_to_name_ext+0xa8>
 1015d54:	e0fff717 	ldw	r3,-36(fp)
 1015d58:	e0bff917 	ldw	r2,-28(fp)
 1015d5c:	10c5883a 	add	r2,r2,r3
 1015d60:	10800003 	ldbu	r2,0(r2)
 1015d64:	10803fcc 	andi	r2,r2,255
 1015d68:	1080201c 	xori	r2,r2,128
 1015d6c:	10bfe004 	addi	r2,r2,-128
 1015d70:	e0bfff15 	stw	r2,-4(fp)
 1015d74:	e0bff717 	ldw	r2,-36(fp)
 1015d78:	1007883a 	mov	r3,r2
 1015d7c:	e0bffa17 	ldw	r2,-24(fp)
 1015d80:	1885883a 	add	r2,r3,r2
 1015d84:	10800003 	ldbu	r2,0(r2)
 1015d88:	10803fcc 	andi	r2,r2,255
 1015d8c:	1080201c 	xori	r2,r2,128
 1015d90:	10bfe004 	addi	r2,r2,-128
 1015d94:	10801850 	cmplti	r2,r2,97
 1015d98:	1000151e 	bne	r2,zero,1015df0 <match_file_record_to_name_ext+0x124>
 1015d9c:	e0bff717 	ldw	r2,-36(fp)
 1015da0:	1007883a 	mov	r3,r2
 1015da4:	e0bffa17 	ldw	r2,-24(fp)
 1015da8:	1885883a 	add	r2,r3,r2
 1015dac:	10800003 	ldbu	r2,0(r2)
 1015db0:	10803fcc 	andi	r2,r2,255
 1015db4:	1080201c 	xori	r2,r2,128
 1015db8:	10bfe004 	addi	r2,r2,-128
 1015dbc:	10801ec8 	cmpgei	r2,r2,123
 1015dc0:	10000b1e 	bne	r2,zero,1015df0 <match_file_record_to_name_ext+0x124>
 1015dc4:	e0bff717 	ldw	r2,-36(fp)
 1015dc8:	1007883a 	mov	r3,r2
 1015dcc:	e0bffa17 	ldw	r2,-24(fp)
 1015dd0:	1885883a 	add	r2,r3,r2
 1015dd4:	10800003 	ldbu	r2,0(r2)
 1015dd8:	10bff804 	addi	r2,r2,-32
 1015ddc:	10803fcc 	andi	r2,r2,255
 1015de0:	1080201c 	xori	r2,r2,128
 1015de4:	10bfe004 	addi	r2,r2,-128
 1015de8:	e0bffe15 	stw	r2,-8(fp)
 1015dec:	00000906 	br	1015e14 <match_file_record_to_name_ext+0x148>
 1015df0:	e0bff717 	ldw	r2,-36(fp)
 1015df4:	1007883a 	mov	r3,r2
 1015df8:	e0bffa17 	ldw	r2,-24(fp)
 1015dfc:	1885883a 	add	r2,r3,r2
 1015e00:	10800003 	ldbu	r2,0(r2)
 1015e04:	10803fcc 	andi	r2,r2,255
 1015e08:	1080201c 	xori	r2,r2,128
 1015e0c:	10bfe004 	addi	r2,r2,-128
 1015e10:	e0bffe15 	stw	r2,-8(fp)
 1015e14:	e0bfff17 	ldw	r2,-4(fp)
 1015e18:	e0fffe17 	ldw	r3,-8(fp)
 1015e1c:	10c00226 	beq	r2,r3,1015e28 <match_file_record_to_name_ext+0x15c>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
 1015e20:	e03ff815 	stw	zero,-32(fp)
			break;
 1015e24:	00000606 	br	1015e40 <match_file_record_to_name_ext+0x174>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
	bool match = true;
	int index;

	for (index = 0; index < 8; index++) {
 1015e28:	e0bff717 	ldw	r2,-36(fp)
 1015e2c:	10800044 	addi	r2,r2,1
 1015e30:	e0bff715 	stw	r2,-36(fp)
 1015e34:	e0bff717 	ldw	r2,-36(fp)
 1015e38:	10800210 	cmplti	r2,r2,8
 1015e3c:	103fad1e 	bne	r2,zero,1015cf4 <match_file_record_to_name_ext+0x28>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
 1015e40:	e03ff715 	stw	zero,-36(fp)
 1015e44:	00005406 	br	1015f98 <match_file_record_to_name_ext+0x2cc>
		if (CHAR_TO_UPPER(file_record->extension[index])
 1015e48:	e0fff717 	ldw	r3,-36(fp)
 1015e4c:	e0bff917 	ldw	r2,-28(fp)
 1015e50:	1885883a 	add	r2,r3,r2
 1015e54:	10800204 	addi	r2,r2,8
 1015e58:	10800003 	ldbu	r2,0(r2)
 1015e5c:	10803fcc 	andi	r2,r2,255
 1015e60:	10801870 	cmpltui	r2,r2,97
 1015e64:	1000131e 	bne	r2,zero,1015eb4 <match_file_record_to_name_ext+0x1e8>
 1015e68:	e0fff717 	ldw	r3,-36(fp)
 1015e6c:	e0bff917 	ldw	r2,-28(fp)
 1015e70:	1885883a 	add	r2,r3,r2
 1015e74:	10800204 	addi	r2,r2,8
 1015e78:	10800003 	ldbu	r2,0(r2)
 1015e7c:	10803fcc 	andi	r2,r2,255
 1015e80:	10801ee8 	cmpgeui	r2,r2,123
 1015e84:	10000b1e 	bne	r2,zero,1015eb4 <match_file_record_to_name_ext+0x1e8>
 1015e88:	e0fff717 	ldw	r3,-36(fp)
 1015e8c:	e0bff917 	ldw	r2,-28(fp)
 1015e90:	1885883a 	add	r2,r3,r2
 1015e94:	10800204 	addi	r2,r2,8
 1015e98:	10800003 	ldbu	r2,0(r2)
 1015e9c:	10bff804 	addi	r2,r2,-32
 1015ea0:	10803fcc 	andi	r2,r2,255
 1015ea4:	1080201c 	xori	r2,r2,128
 1015ea8:	10bfe004 	addi	r2,r2,-128
 1015eac:	e0bffd15 	stw	r2,-12(fp)
 1015eb0:	00000906 	br	1015ed8 <match_file_record_to_name_ext+0x20c>
 1015eb4:	e0fff717 	ldw	r3,-36(fp)
 1015eb8:	e0bff917 	ldw	r2,-28(fp)
 1015ebc:	1885883a 	add	r2,r3,r2
 1015ec0:	10800204 	addi	r2,r2,8
 1015ec4:	10800003 	ldbu	r2,0(r2)
 1015ec8:	10803fcc 	andi	r2,r2,255
 1015ecc:	1080201c 	xori	r2,r2,128
 1015ed0:	10bfe004 	addi	r2,r2,-128
 1015ed4:	e0bffd15 	stw	r2,-12(fp)
 1015ed8:	e0bff717 	ldw	r2,-36(fp)
 1015edc:	1007883a 	mov	r3,r2
 1015ee0:	e0bffb17 	ldw	r2,-20(fp)
 1015ee4:	1885883a 	add	r2,r3,r2
 1015ee8:	10800003 	ldbu	r2,0(r2)
 1015eec:	10803fcc 	andi	r2,r2,255
 1015ef0:	1080201c 	xori	r2,r2,128
 1015ef4:	10bfe004 	addi	r2,r2,-128
 1015ef8:	10801850 	cmplti	r2,r2,97
 1015efc:	1000151e 	bne	r2,zero,1015f54 <match_file_record_to_name_ext+0x288>
 1015f00:	e0bff717 	ldw	r2,-36(fp)
 1015f04:	1007883a 	mov	r3,r2
 1015f08:	e0bffb17 	ldw	r2,-20(fp)
 1015f0c:	1885883a 	add	r2,r3,r2
 1015f10:	10800003 	ldbu	r2,0(r2)
 1015f14:	10803fcc 	andi	r2,r2,255
 1015f18:	1080201c 	xori	r2,r2,128
 1015f1c:	10bfe004 	addi	r2,r2,-128
 1015f20:	10801ec8 	cmpgei	r2,r2,123
 1015f24:	10000b1e 	bne	r2,zero,1015f54 <match_file_record_to_name_ext+0x288>
 1015f28:	e0bff717 	ldw	r2,-36(fp)
 1015f2c:	1007883a 	mov	r3,r2
 1015f30:	e0bffb17 	ldw	r2,-20(fp)
 1015f34:	1885883a 	add	r2,r3,r2
 1015f38:	10800003 	ldbu	r2,0(r2)
 1015f3c:	10bff804 	addi	r2,r2,-32
 1015f40:	10803fcc 	andi	r2,r2,255
 1015f44:	1080201c 	xori	r2,r2,128
 1015f48:	10bfe004 	addi	r2,r2,-128
 1015f4c:	e0bffc15 	stw	r2,-16(fp)
 1015f50:	00000906 	br	1015f78 <match_file_record_to_name_ext+0x2ac>
 1015f54:	e0bff717 	ldw	r2,-36(fp)
 1015f58:	1007883a 	mov	r3,r2
 1015f5c:	e0bffb17 	ldw	r2,-20(fp)
 1015f60:	1885883a 	add	r2,r3,r2
 1015f64:	10800003 	ldbu	r2,0(r2)
 1015f68:	10803fcc 	andi	r2,r2,255
 1015f6c:	1080201c 	xori	r2,r2,128
 1015f70:	10bfe004 	addi	r2,r2,-128
 1015f74:	e0bffc15 	stw	r2,-16(fp)
 1015f78:	e0bffd17 	ldw	r2,-12(fp)
 1015f7c:	e0fffc17 	ldw	r3,-16(fp)
 1015f80:	10c00226 	beq	r2,r3,1015f8c <match_file_record_to_name_ext+0x2c0>
				!= CHAR_TO_UPPER(extension[index])) {
			match = false;
 1015f84:	e03ff815 	stw	zero,-32(fp)
			break;
 1015f88:	00000606 	br	1015fa4 <match_file_record_to_name_ext+0x2d8>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
 1015f8c:	e0bff717 	ldw	r2,-36(fp)
 1015f90:	10800044 	addi	r2,r2,1
 1015f94:	e0bff715 	stw	r2,-36(fp)
 1015f98:	e0bff717 	ldw	r2,-36(fp)
 1015f9c:	108000d0 	cmplti	r2,r2,3
 1015fa0:	103fa91e 	bne	r2,zero,1015e48 <match_file_record_to_name_ext+0x17c>
				!= CHAR_TO_UPPER(extension[index])) {
			match = false;
			break;
		}
	}
	return match;
 1015fa4:	e0bff817 	ldw	r2,-32(fp)
}
 1015fa8:	e037883a 	mov	sp,fp
 1015fac:	df000017 	ldw	fp,0(sp)
 1015fb0:	dec00104 	addi	sp,sp,4
 1015fb4:	f800283a 	ret

01015fb8 <get_home_directory_cluster_for_file>:

bool get_home_directory_cluster_for_file(char *file_name,
		int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
 1015fb8:	deffe604 	addi	sp,sp,-104
 1015fbc:	dfc01915 	stw	ra,100(sp)
 1015fc0:	df001815 	stw	fp,96(sp)
 1015fc4:	df001804 	addi	fp,sp,96
 1015fc8:	e13ffc15 	stw	r4,-16(fp)
 1015fcc:	e17ffd15 	stw	r5,-12(fp)
 1015fd0:	e1bffe15 	stw	r6,-8(fp)
	bool result = false;
 1015fd4:	e03ff715 	stw	zero,-36(fp)
	int home_dir_cluster = 0;
 1015fd8:	e03ff615 	stw	zero,-40(fp)
	int location, index;
	int start_location = 0;
 1015fdc:	e03ff315 	stw	zero,-52(fp)

	/* Get Next Directory. */
	location = get_dir_divider_location(file_name);
 1015fe0:	e13ffc17 	ldw	r4,-16(fp)
 1015fe4:	1015c0c0 	call	1015c0c <get_dir_divider_location>
 1015fe8:	e0bff515 	stw	r2,-44(fp)
	while (location > 0) {
 1015fec:	00012206 	br	1016478 <get_home_directory_cluster_for_file+0x4c0>
		char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
 1015ff0:	00800804 	movi	r2,32
 1015ff4:	e0bff805 	stb	r2,-32(fp)
 1015ff8:	00800804 	movi	r2,32
 1015ffc:	e0bff845 	stb	r2,-31(fp)
 1016000:	00800804 	movi	r2,32
 1016004:	e0bff885 	stb	r2,-30(fp)
 1016008:	00800804 	movi	r2,32
 101600c:	e0bff8c5 	stb	r2,-29(fp)
 1016010:	00800804 	movi	r2,32
 1016014:	e0bff905 	stb	r2,-28(fp)
 1016018:	00800804 	movi	r2,32
 101601c:	e0bff945 	stb	r2,-27(fp)
 1016020:	00800804 	movi	r2,32
 1016024:	e0bff985 	stb	r2,-26(fp)
 1016028:	00800804 	movi	r2,32
 101602c:	e0bff9c5 	stb	r2,-25(fp)
		char extension[3] = { ' ', ' ', ' ' };
 1016030:	00800804 	movi	r2,32
 1016034:	e0bffa05 	stb	r2,-24(fp)
 1016038:	00800804 	movi	r2,32
 101603c:	e0bffa45 	stb	r2,-23(fp)
 1016040:	00800804 	movi	r2,32
 1016044:	e0bffa85 	stb	r2,-22(fp)
		int ext_index = -1;
 1016048:	00bfffc4 	movi	r2,-1
 101604c:	e0bff215 	stw	r2,-56(fp)
		int new_cluster = home_dir_cluster;
 1016050:	e0bff617 	ldw	r2,-40(fp)
 1016054:	e0bff115 	stw	r2,-60(fp)

		// Get the name of the directory in name/extension format.
		for (index = 0; index < location; index++) {
 1016058:	e03ff415 	stw	zero,-48(fp)
 101605c:	00002e06 	br	1016118 <get_home_directory_cluster_for_file+0x160>
			if (file_name[index + start_location] == '.') {
 1016060:	e0fff417 	ldw	r3,-48(fp)
 1016064:	e0bff317 	ldw	r2,-52(fp)
 1016068:	1885883a 	add	r2,r3,r2
 101606c:	1007883a 	mov	r3,r2
 1016070:	e0bffc17 	ldw	r2,-16(fp)
 1016074:	1885883a 	add	r2,r3,r2
 1016078:	10800003 	ldbu	r2,0(r2)
 101607c:	10803fcc 	andi	r2,r2,255
 1016080:	1080201c 	xori	r2,r2,128
 1016084:	10bfe004 	addi	r2,r2,-128
 1016088:	10800b98 	cmpnei	r2,r2,46
 101608c:	1000031e 	bne	r2,zero,101609c <get_home_directory_cluster_for_file+0xe4>
				ext_index = index;
 1016090:	e0bff417 	ldw	r2,-48(fp)
 1016094:	e0bff215 	stw	r2,-56(fp)
 1016098:	00001c06 	br	101610c <get_home_directory_cluster_for_file+0x154>
			} else if (ext_index < 0) {
 101609c:	e0bff217 	ldw	r2,-56(fp)
 10160a0:	1004403a 	cmpge	r2,r2,zero
 10160a4:	10000c1e 	bne	r2,zero,10160d8 <get_home_directory_cluster_for_file+0x120>
				name[index] = file_name[index + start_location];
 10160a8:	e13ff417 	ldw	r4,-48(fp)
 10160ac:	e0fff417 	ldw	r3,-48(fp)
 10160b0:	e0bff317 	ldw	r2,-52(fp)
 10160b4:	1885883a 	add	r2,r3,r2
 10160b8:	1007883a 	mov	r3,r2
 10160bc:	e0bffc17 	ldw	r2,-16(fp)
 10160c0:	1885883a 	add	r2,r3,r2
 10160c4:	10c00003 	ldbu	r3,0(r2)
 10160c8:	e0bff804 	addi	r2,fp,-32
 10160cc:	1105883a 	add	r2,r2,r4
 10160d0:	10c00005 	stb	r3,0(r2)
 10160d4:	00000d06 	br	101610c <get_home_directory_cluster_for_file+0x154>
			} else {
				extension[index - ext_index] =
 10160d8:	e0fff417 	ldw	r3,-48(fp)
 10160dc:	e0bff217 	ldw	r2,-56(fp)
 10160e0:	1889c83a 	sub	r4,r3,r2
 10160e4:	e0fff417 	ldw	r3,-48(fp)
 10160e8:	e0bff317 	ldw	r2,-52(fp)
 10160ec:	1885883a 	add	r2,r3,r2
 10160f0:	1007883a 	mov	r3,r2
 10160f4:	e0bffc17 	ldw	r2,-16(fp)
 10160f8:	1885883a 	add	r2,r3,r2
 10160fc:	10c00003 	ldbu	r3,0(r2)
 1016100:	e0bffa04 	addi	r2,fp,-24
 1016104:	1105883a 	add	r2,r2,r4
 1016108:	10c00005 	stb	r3,0(r2)
		char extension[3] = { ' ', ' ', ' ' };
		int ext_index = -1;
		int new_cluster = home_dir_cluster;

		// Get the name of the directory in name/extension format.
		for (index = 0; index < location; index++) {
 101610c:	e0bff417 	ldw	r2,-48(fp)
 1016110:	10800044 	addi	r2,r2,1
 1016114:	e0bff415 	stw	r2,-48(fp)
 1016118:	e0fff417 	ldw	r3,-48(fp)
 101611c:	e0bff517 	ldw	r2,-44(fp)
 1016120:	18bfcf16 	blt	r3,r2,1016060 <get_home_directory_cluster_for_file+0xa8>
				extension[index - ext_index] =
						file_name[index + start_location];
			}
		}

		if (home_dir_cluster == 0) {
 1016124:	e0bff617 	ldw	r2,-40(fp)
 1016128:	1004c03a 	cmpne	r2,r2,zero
 101612c:	1000551e 	bne	r2,zero,1016284 <get_home_directory_cluster_for_file+0x2cc>
			/* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
			int max_root_dir_sectors = ((32
					* boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
 1016130:	008040b4 	movhi	r2,258
 1016134:	108eef04 	addi	r2,r2,15292
 1016138:	1080050b 	ldhu	r2,20(r2)
 101613c:	10bfffcc 	andi	r2,r2,65535
 1016140:	1008917a 	slli	r4,r2,5
 1016144:	008040b4 	movhi	r2,258
 1016148:	108eef04 	addi	r2,r2,15292
 101614c:	1080030b 	ldhu	r2,12(r2)
 1016150:	117fffcc 	andi	r5,r2,65535
 1016154:	10056b00 	call	10056b0 <__divsi3>
 1016158:	e0bff015 	stw	r2,-64(fp)
			int sector_index;

			for (sector_index = 0; sector_index < max_root_dir_sectors;
 101615c:	e03fef15 	stw	zero,-68(fp)
 1016160:	00003806 	br	1016244 <get_home_directory_cluster_for_file+0x28c>
					sector_index++) {
				if (Read_Sector_Data(
 1016164:	008040b4 	movhi	r2,258
 1016168:	108eef04 	addi	r2,r2,15292
 101616c:	10c01317 	ldw	r3,76(r2)
 1016170:	e0bfef17 	ldw	r2,-68(fp)
 1016174:	1885883a 	add	r2,r3,r2
 1016178:	1009883a 	mov	r4,r2
 101617c:	d167d617 	ldw	r5,-24744(gp)
 1016180:	10147dc0 	call	10147dc <Read_Sector_Data>
 1016184:	1005003a 	cmpeq	r2,r2,zero
 1016188:	1000311e 	bne	r2,zero,1016250 <get_home_directory_cluster_for_file+0x298>
						sector_index
								+ boot_sector_data.root_directory_sector_offset,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
 101618c:	e03fee15 	stw	zero,-72(fp)
 1016190:	00002306 	br	1016220 <get_home_directory_cluster_for_file+0x268>

						// Read file record.
						Read_File_Record_At_Offset(file_counter * 32,
 1016194:	e0bfee17 	ldw	r2,-72(fp)
 1016198:	1008917a 	slli	r4,r2,5
 101619c:	e1ffef17 	ldw	r7,-68(fp)
 10161a0:	e17ffe17 	ldw	r5,-8(fp)
 10161a4:	000d883a 	mov	r6,zero
 10161a8:	1014c240 	call	1014c24 <Read_File_Record_At_Offset>
								file_record, 0, sector_index);
						if ((file_record->name[0] != 0xe5)
 10161ac:	e0bffe17 	ldw	r2,-8(fp)
 10161b0:	10800003 	ldbu	r2,0(r2)
 10161b4:	10803fcc 	andi	r2,r2,255
 10161b8:	10803960 	cmpeqi	r2,r2,229
 10161bc:	1000151e 	bne	r2,zero,1016214 <get_home_directory_cluster_for_file+0x25c>
 10161c0:	e0bffe17 	ldw	r2,-8(fp)
 10161c4:	10800003 	ldbu	r2,0(r2)
 10161c8:	10803fcc 	andi	r2,r2,255
 10161cc:	1005003a 	cmpeq	r2,r2,zero
 10161d0:	1000101e 	bne	r2,zero,1016214 <get_home_directory_cluster_for_file+0x25c>
								&& (file_record->name[0] != 0x00)) {
							bool match = match_file_record_to_name_ext(
									file_record, name, extension);
 10161d4:	e17ff804 	addi	r5,fp,-32
 10161d8:	e1bffa04 	addi	r6,fp,-24
 10161dc:	e13ffe17 	ldw	r4,-8(fp)
 10161e0:	1015ccc0 	call	1015ccc <match_file_record_to_name_ext>
 10161e4:	e0bfed15 	stw	r2,-76(fp)
							if (match) {
 10161e8:	e0bfed17 	ldw	r2,-76(fp)
 10161ec:	1005003a 	cmpeq	r2,r2,zero
 10161f0:	1000081e 	bne	r2,zero,1016214 <get_home_directory_cluster_for_file+0x25c>
								new_cluster = file_record->start_cluster_index;
 10161f4:	e0bffe17 	ldw	r2,-8(fp)
 10161f8:	1080058b 	ldhu	r2,22(r2)
 10161fc:	10bfffcc 	andi	r2,r2,65535
 1016200:	e0bff115 	stw	r2,-60(fp)
								file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
 1016204:	e0fffe17 	ldw	r3,-8(fp)
 1016208:	00800044 	movi	r2,1
 101620c:	18800a15 	stw	r2,40(r3)
								break;
 1016210:	00000606 	br	101622c <get_home_directory_cluster_for_file+0x274>
						sector_index
								+ boot_sector_data.root_directory_sector_offset,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
 1016214:	e0bfee17 	ldw	r2,-72(fp)
 1016218:	10800044 	addi	r2,r2,1
 101621c:	e0bfee15 	stw	r2,-72(fp)
 1016220:	e0bfee17 	ldw	r2,-72(fp)
 1016224:	10800410 	cmplti	r2,r2,16
 1016228:	103fda1e 	bne	r2,zero,1016194 <get_home_directory_cluster_for_file+0x1dc>
						}
					}
				} else {
					break;
				}
				if (new_cluster != home_dir_cluster) {
 101622c:	e0fff117 	ldw	r3,-60(fp)
 1016230:	e0bff617 	ldw	r2,-40(fp)
 1016234:	1880061e 	bne	r3,r2,1016250 <get_home_directory_cluster_for_file+0x298>
					* boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
			int sector_index;

			for (sector_index = 0; sector_index < max_root_dir_sectors;
					sector_index++) {
 1016238:	e0bfef17 	ldw	r2,-68(fp)
 101623c:	10800044 	addi	r2,r2,1
 1016240:	e0bfef15 	stw	r2,-68(fp)
			int max_root_dir_sectors = ((32
					* boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
			int sector_index;

			for (sector_index = 0; sector_index < max_root_dir_sectors;
 1016244:	e0ffef17 	ldw	r3,-68(fp)
 1016248:	e0bff017 	ldw	r2,-64(fp)
 101624c:	18bfc516 	blt	r3,r2,1016164 <get_home_directory_cluster_for_file+0x1ac>
				}
				if (new_cluster != home_dir_cluster) {
					break;
				}
			}
			if (new_cluster != home_dir_cluster) {
 1016250:	e0fff117 	ldw	r3,-60(fp)
 1016254:	e0bff617 	ldw	r2,-40(fp)
 1016258:	18800826 	beq	r3,r2,101627c <get_home_directory_cluster_for_file+0x2c4>
				// A valid directory is found, so go to it.
				home_dir_cluster = new_cluster;
 101625c:	e0bff117 	ldw	r2,-60(fp)
 1016260:	e0bff615 	stw	r2,-40(fp)
				start_location = start_location + location + 1;
 1016264:	e0fff317 	ldw	r3,-52(fp)
 1016268:	e0bff517 	ldw	r2,-44(fp)
 101626c:	1885883a 	add	r2,r3,r2
 1016270:	10800044 	addi	r2,r2,1
 1016274:	e0bff315 	stw	r2,-52(fp)
 1016278:	00007406 	br	101644c <get_home_directory_cluster_for_file+0x494>
			} else {
				// Directory path is invalid.
				return false;
 101627c:	e03fff15 	stw	zero,-4(fp)
 1016280:	00008c06 	br	10164b4 <get_home_directory_cluster_for_file+0x4fc>
			}
		} else {
			// This is a subdirectory that can have any number of elements. So scan through it as though it was a file
			// and see if you can find the directory of interest.
			int cluster = home_dir_cluster;
 1016284:	e0bff617 	ldw	r2,-40(fp)
 1016288:	e0bfec15 	stw	r2,-80(fp)

			do {
				int start_sector = (cluster - 2)
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
 101628c:	e0bfec17 	ldw	r2,-80(fp)
 1016290:	10ffff84 	addi	r3,r2,-2
 1016294:	008040b4 	movhi	r2,258
 1016298:	108eef04 	addi	r2,r2,15292
 101629c:	10800383 	ldbu	r2,14(r2)
 10162a0:	10803fcc 	andi	r2,r2,255
 10162a4:	1885383a 	mul	r2,r3,r2
 10162a8:	1007883a 	mov	r3,r2
 10162ac:	008040b4 	movhi	r2,258
 10162b0:	108eef04 	addi	r2,r2,15292
 10162b4:	10801417 	ldw	r2,80(r2)
 10162b8:	1885883a 	add	r2,r3,r2
 10162bc:	e0bfeb15 	stw	r2,-84(fp)
				int sector_index;

				for (sector_index = 0;
 10162c0:	e03fea15 	stw	zero,-88(fp)
						sector_index < boot_sector_data.sectors_per_cluster;
 10162c4:	00003206 	br	1016390 <get_home_directory_cluster_for_file+0x3d8>
						sector_index++) {
					if (Read_Sector_Data(sector_index + start_sector,
 10162c8:	e0ffea17 	ldw	r3,-88(fp)
 10162cc:	e0bfeb17 	ldw	r2,-84(fp)
 10162d0:	1889883a 	add	r4,r3,r2
 10162d4:	d167d617 	ldw	r5,-24744(gp)
 10162d8:	10147dc0 	call	10147dc <Read_Sector_Data>
 10162dc:	1005003a 	cmpeq	r2,r2,zero
 10162e0:	1000311e 	bne	r2,zero,10163a8 <get_home_directory_cluster_for_file+0x3f0>
							fat_partition_offset_in_512_byte_sectors)) {
						int file_counter;

						for (file_counter = 0; file_counter < 16;
 10162e4:	e03fe915 	stw	zero,-92(fp)
 10162e8:	00002006 	br	101636c <get_home_directory_cluster_for_file+0x3b4>
								file_counter++) {
							// Read file record.
							Read_File_Record_At_Offset(file_counter * 32,
 10162ec:	e0bfe917 	ldw	r2,-92(fp)
 10162f0:	1008917a 	slli	r4,r2,5
 10162f4:	e1bfec17 	ldw	r6,-80(fp)
 10162f8:	e1ffea17 	ldw	r7,-88(fp)
 10162fc:	e17ffe17 	ldw	r5,-8(fp)
 1016300:	1014c240 	call	1014c24 <Read_File_Record_At_Offset>
									file_record, cluster, sector_index);
							if ((file_record->name[0] != 0xe5)
 1016304:	e0bffe17 	ldw	r2,-8(fp)
 1016308:	10800003 	ldbu	r2,0(r2)
 101630c:	10803fcc 	andi	r2,r2,255
 1016310:	10803960 	cmpeqi	r2,r2,229
 1016314:	1000121e 	bne	r2,zero,1016360 <get_home_directory_cluster_for_file+0x3a8>
 1016318:	e0bffe17 	ldw	r2,-8(fp)
 101631c:	10800003 	ldbu	r2,0(r2)
 1016320:	10803fcc 	andi	r2,r2,255
 1016324:	1005003a 	cmpeq	r2,r2,zero
 1016328:	10000d1e 	bne	r2,zero,1016360 <get_home_directory_cluster_for_file+0x3a8>
									&& (file_record->name[0] != 0x00)) {
								bool match = match_file_record_to_name_ext(
										file_record, name, extension);
 101632c:	e17ff804 	addi	r5,fp,-32
 1016330:	e1bffa04 	addi	r6,fp,-24
 1016334:	e13ffe17 	ldw	r4,-8(fp)
 1016338:	1015ccc0 	call	1015ccc <match_file_record_to_name_ext>
 101633c:	e0bfe815 	stw	r2,-96(fp)
								if (match) {
 1016340:	e0bfe817 	ldw	r2,-96(fp)
 1016344:	1005003a 	cmpeq	r2,r2,zero
 1016348:	1000051e 	bne	r2,zero,1016360 <get_home_directory_cluster_for_file+0x3a8>
									new_cluster =
 101634c:	e0bffe17 	ldw	r2,-8(fp)
 1016350:	1080058b 	ldhu	r2,22(r2)
 1016354:	10bfffcc 	andi	r2,r2,65535
 1016358:	e0bff115 	stw	r2,-60(fp)
											file_record->start_cluster_index;
									break;
 101635c:	00000606 	br	1016378 <get_home_directory_cluster_for_file+0x3c0>
					if (Read_Sector_Data(sector_index + start_sector,
							fat_partition_offset_in_512_byte_sectors)) {
						int file_counter;

						for (file_counter = 0; file_counter < 16;
								file_counter++) {
 1016360:	e0bfe917 	ldw	r2,-92(fp)
 1016364:	10800044 	addi	r2,r2,1
 1016368:	e0bfe915 	stw	r2,-92(fp)
						sector_index++) {
					if (Read_Sector_Data(sector_index + start_sector,
							fat_partition_offset_in_512_byte_sectors)) {
						int file_counter;

						for (file_counter = 0; file_counter < 16;
 101636c:	e0bfe917 	ldw	r2,-92(fp)
 1016370:	10800410 	cmplti	r2,r2,16
 1016374:	103fdd1e 	bne	r2,zero,10162ec <get_home_directory_cluster_for_file+0x334>
							}
						}
					} else {
						break;
					}
					if (new_cluster != home_dir_cluster) {
 1016378:	e0fff117 	ldw	r3,-60(fp)
 101637c:	e0bff617 	ldw	r2,-40(fp)
 1016380:	1880091e 	bne	r3,r2,10163a8 <get_home_directory_cluster_for_file+0x3f0>
						+ boot_sector_data.data_sector_offset;
				int sector_index;

				for (sector_index = 0;
						sector_index < boot_sector_data.sectors_per_cluster;
						sector_index++) {
 1016384:	e0bfea17 	ldw	r2,-88(fp)
 1016388:	10800044 	addi	r2,r2,1
 101638c:	e0bfea15 	stw	r2,-88(fp)
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
				int sector_index;

				for (sector_index = 0;
						sector_index < boot_sector_data.sectors_per_cluster;
 1016390:	008040b4 	movhi	r2,258
 1016394:	108eef04 	addi	r2,r2,15292
 1016398:	10800383 	ldbu	r2,14(r2)
 101639c:	10c03fcc 	andi	r3,r2,255
 10163a0:	e0bfea17 	ldw	r2,-88(fp)
 10163a4:	10ffc816 	blt	r2,r3,10162c8 <get_home_directory_cluster_for_file+0x310>
						break;
					}
				}
				// If this is the end of the cluster and the directory has not been found, then see if there is another cluster
				// that holds data for the current directory.
				if (new_cluster == home_dir_cluster) {
 10163a8:	e0fff117 	ldw	r3,-60(fp)
 10163ac:	e0bff617 	ldw	r2,-40(fp)
 10163b0:	1880131e 	bne	r3,r2,1016400 <get_home_directory_cluster_for_file+0x448>
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster)) {
 10163b4:	e13ff117 	ldw	r4,-60(fp)
 10163b8:	e17ffb04 	addi	r5,fp,-20
 10163bc:	10148d80 	call	10148d8 <get_cluster_flag>
 10163c0:	1005003a 	cmpeq	r2,r2,zero
 10163c4:	10000c1e 	bne	r2,zero,10163f8 <get_home_directory_cluster_for_file+0x440>
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8) {
 10163c8:	e0bffb0b 	ldhu	r2,-20(fp)
 10163cc:	10bfffcc 	andi	r2,r2,65535
 10163d0:	10fffe0c 	andi	r3,r2,65528
 10163d4:	00bffe14 	movui	r2,65528
 10163d8:	1880021e 	bne	r3,r2,10163e4 <get_home_directory_cluster_for_file+0x42c>
							return false;
 10163dc:	e03fff15 	stw	zero,-4(fp)
 10163e0:	00003406 	br	10164b4 <get_home_directory_cluster_for_file+0x4fc>
						}
						new_cluster = (next_cluster & 0x0000fff8);
 10163e4:	e0bffb0b 	ldhu	r2,-20(fp)
 10163e8:	10bfffcc 	andi	r2,r2,65535
 10163ec:	10bffe0c 	andi	r2,r2,65528
 10163f0:	e0bff115 	stw	r2,-60(fp)
 10163f4:	00000206 	br	1016400 <get_home_directory_cluster_for_file+0x448>
					} else {
						// Directory path is invalid.                 
						return false;
 10163f8:	e03fff15 	stw	zero,-4(fp)
 10163fc:	00002d06 	br	10164b4 <get_home_directory_cluster_for_file+0x4fc>
					}
				}
			} while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
 1016400:	e0ffec17 	ldw	r3,-80(fp)
 1016404:	00bffdd4 	movui	r2,65527
 1016408:	10c00316 	blt	r2,r3,1016418 <get_home_directory_cluster_for_file+0x460>
 101640c:	e0fff117 	ldw	r3,-60(fp)
 1016410:	e0bff617 	ldw	r2,-40(fp)
 1016414:	18bf9d26 	beq	r3,r2,101628c <get_home_directory_cluster_for_file+0x2d4>
			if (new_cluster != home_dir_cluster) {
 1016418:	e0fff117 	ldw	r3,-60(fp)
 101641c:	e0bff617 	ldw	r2,-40(fp)
 1016420:	18800826 	beq	r3,r2,1016444 <get_home_directory_cluster_for_file+0x48c>
				// A valid directory is found, so go to it.
				home_dir_cluster = new_cluster;
 1016424:	e0bff117 	ldw	r2,-60(fp)
 1016428:	e0bff615 	stw	r2,-40(fp)
				start_location = start_location + location + 1;
 101642c:	e0fff317 	ldw	r3,-52(fp)
 1016430:	e0bff517 	ldw	r2,-44(fp)
 1016434:	1885883a 	add	r2,r3,r2
 1016438:	10800044 	addi	r2,r2,1
 101643c:	e0bff315 	stw	r2,-52(fp)
 1016440:	00000206 	br	101644c <get_home_directory_cluster_for_file+0x494>
			} else {
				// Directory path is invalid.
				return false;
 1016444:	e03fff15 	stw	zero,-4(fp)
 1016448:	00001a06 	br	10164b4 <get_home_directory_cluster_for_file+0x4fc>
			}
		}
		location = get_dir_divider_location(&(file_name[start_location]));
 101644c:	e0bff317 	ldw	r2,-52(fp)
 1016450:	1007883a 	mov	r3,r2
 1016454:	e0bffc17 	ldw	r2,-16(fp)
 1016458:	1889883a 	add	r4,r3,r2
 101645c:	1015c0c0 	call	1015c0c <get_dir_divider_location>
 1016460:	e0bff515 	stw	r2,-44(fp)
		if (location < 0) {
 1016464:	e0bff517 	ldw	r2,-44(fp)
 1016468:	1004403a 	cmpge	r2,r2,zero
 101646c:	1000021e 	bne	r2,zero,1016478 <get_home_directory_cluster_for_file+0x4c0>
			// Directory has been located.
			result = true;
 1016470:	00800044 	movi	r2,1
 1016474:	e0bff715 	stw	r2,-36(fp)
	int location, index;
	int start_location = 0;

	/* Get Next Directory. */
	location = get_dir_divider_location(file_name);
	while (location > 0) {
 1016478:	e0bff517 	ldw	r2,-44(fp)
 101647c:	10800048 	cmpgei	r2,r2,1
 1016480:	103edb1e 	bne	r2,zero,1015ff0 <get_home_directory_cluster_for_file+0x38>
			// Directory has been located.
			result = true;
		}
	}

	*home_directory_cluster = home_dir_cluster;
 1016484:	e0fffd17 	ldw	r3,-12(fp)
 1016488:	e0bff617 	ldw	r2,-40(fp)
 101648c:	18800015 	stw	r2,0(r3)
	if (home_dir_cluster == 0) {
 1016490:	e0bff617 	ldw	r2,-40(fp)
 1016494:	1004c03a 	cmpne	r2,r2,zero
 1016498:	1000041e 	bne	r2,zero,10164ac <get_home_directory_cluster_for_file+0x4f4>
		file_record->file_record_cluster = 0; // Home directory is the root directory.
 101649c:	e0bffe17 	ldw	r2,-8(fp)
 10164a0:	10000a15 	stw	zero,40(r2)
		result = true;
 10164a4:	00800044 	movi	r2,1
 10164a8:	e0bff715 	stw	r2,-36(fp)
	}
	return result;
 10164ac:	e0bff717 	ldw	r2,-36(fp)
 10164b0:	e0bfff15 	stw	r2,-4(fp)
 10164b4:	e0bfff17 	ldw	r2,-4(fp)
}
 10164b8:	e037883a 	mov	sp,fp
 10164bc:	dfc00117 	ldw	ra,4(sp)
 10164c0:	df000017 	ldw	fp,0(sp)
 10164c4:	dec00204 	addi	sp,sp,8
 10164c8:	f800283a 	ret

010164cc <find_file_in_directory>:

bool find_file_in_directory(int directory_start_cluster, char *file_name,
		t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
 10164cc:	deffe704 	addi	sp,sp,-100
 10164d0:	dfc01815 	stw	ra,96(sp)
 10164d4:	df001715 	stw	fp,92(sp)
 10164d8:	df001704 	addi	fp,sp,92
 10164dc:	e13ffc15 	stw	r4,-16(fp)
 10164e0:	e17ffd15 	stw	r5,-12(fp)
 10164e4:	e1bffe15 	stw	r6,-8(fp)
	int location = get_dir_divider_location(file_name);
 10164e8:	e13ffd17 	ldw	r4,-12(fp)
 10164ec:	1015c0c0 	call	1015c0c <get_dir_divider_location>
 10164f0:	e0bff715 	stw	r2,-36(fp)
	int last_dir_separator = 0;
 10164f4:	e03ff615 	stw	zero,-40(fp)
	char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
 10164f8:	00800804 	movi	r2,32
 10164fc:	e0bff805 	stb	r2,-32(fp)
 1016500:	00800804 	movi	r2,32
 1016504:	e0bff845 	stb	r2,-31(fp)
 1016508:	00800804 	movi	r2,32
 101650c:	e0bff885 	stb	r2,-30(fp)
 1016510:	00800804 	movi	r2,32
 1016514:	e0bff8c5 	stb	r2,-29(fp)
 1016518:	00800804 	movi	r2,32
 101651c:	e0bff905 	stb	r2,-28(fp)
 1016520:	00800804 	movi	r2,32
 1016524:	e0bff945 	stb	r2,-27(fp)
 1016528:	00800804 	movi	r2,32
 101652c:	e0bff985 	stb	r2,-26(fp)
 1016530:	00800804 	movi	r2,32
 1016534:	e0bff9c5 	stb	r2,-25(fp)
	char extension[3] = { ' ', ' ', ' ' };
 1016538:	00800804 	movi	r2,32
 101653c:	e0bffa05 	stb	r2,-24(fp)
 1016540:	00800804 	movi	r2,32
 1016544:	e0bffa45 	stb	r2,-23(fp)
 1016548:	00800804 	movi	r2,32
 101654c:	e0bffa85 	stb	r2,-22(fp)
	int ext_index = -1;
 1016550:	00bfffc4 	movi	r2,-1
 1016554:	e0bff515 	stw	r2,-44(fp)
	int cluster = directory_start_cluster;
 1016558:	e0bffc17 	ldw	r2,-16(fp)
 101655c:	e0bff415 	stw	r2,-48(fp)
	int index;
	int length = strlen(file_name);
 1016560:	e13ffd17 	ldw	r4,-12(fp)
 1016564:	10068940 	call	1006894 <strlen>
 1016568:	e0bff215 	stw	r2,-56(fp)
	bool result = false;
 101656c:	e03ff115 	stw	zero,-60(fp)

	// Skip through all directory separators.
	while (location > 0) {
 1016570:	00000b06 	br	10165a0 <find_file_in_directory+0xd4>
		last_dir_separator = last_dir_separator + location + 1;
 1016574:	e0fff617 	ldw	r3,-40(fp)
 1016578:	e0bff717 	ldw	r2,-36(fp)
 101657c:	1885883a 	add	r2,r3,r2
 1016580:	10800044 	addi	r2,r2,1
 1016584:	e0bff615 	stw	r2,-40(fp)
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
 1016588:	e0bff617 	ldw	r2,-40(fp)
 101658c:	1007883a 	mov	r3,r2
 1016590:	e0bffd17 	ldw	r2,-12(fp)
 1016594:	1889883a 	add	r4,r3,r2
 1016598:	1015c0c0 	call	1015c0c <get_dir_divider_location>
 101659c:	e0bff715 	stw	r2,-36(fp)
	int index;
	int length = strlen(file_name);
	bool result = false;

	// Skip through all directory separators.
	while (location > 0) {
 10165a0:	e0bff717 	ldw	r2,-36(fp)
 10165a4:	10800048 	cmpgei	r2,r2,1
 10165a8:	103ff21e 	bne	r2,zero,1016574 <find_file_in_directory+0xa8>
		last_dir_separator = last_dir_separator + location + 1;
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
	}

	// Get the name of the file in name/extension format.
	for (index = last_dir_separator; index < length; index++) {
 10165ac:	e0bff617 	ldw	r2,-40(fp)
 10165b0:	e0bff315 	stw	r2,-52(fp)
 10165b4:	00002b06 	br	1016664 <find_file_in_directory+0x198>
		if (file_name[index] == '.') {
 10165b8:	e0bff317 	ldw	r2,-52(fp)
 10165bc:	1007883a 	mov	r3,r2
 10165c0:	e0bffd17 	ldw	r2,-12(fp)
 10165c4:	1885883a 	add	r2,r3,r2
 10165c8:	10800003 	ldbu	r2,0(r2)
 10165cc:	10803fcc 	andi	r2,r2,255
 10165d0:	1080201c 	xori	r2,r2,128
 10165d4:	10bfe004 	addi	r2,r2,-128
 10165d8:	10800b98 	cmpnei	r2,r2,46
 10165dc:	1000031e 	bne	r2,zero,10165ec <find_file_in_directory+0x120>
			ext_index = index;
 10165e0:	e0bff317 	ldw	r2,-52(fp)
 10165e4:	e0bff515 	stw	r2,-44(fp)
 10165e8:	00001b06 	br	1016658 <find_file_in_directory+0x18c>
		} else if (ext_index < 0) {
 10165ec:	e0bff517 	ldw	r2,-44(fp)
 10165f0:	1004403a 	cmpge	r2,r2,zero
 10165f4:	10000c1e 	bne	r2,zero,1016628 <find_file_in_directory+0x15c>
			name[index - last_dir_separator] = file_name[index];
 10165f8:	e0fff317 	ldw	r3,-52(fp)
 10165fc:	e0bff617 	ldw	r2,-40(fp)
 1016600:	1889c83a 	sub	r4,r3,r2
 1016604:	e0bff317 	ldw	r2,-52(fp)
 1016608:	1007883a 	mov	r3,r2
 101660c:	e0bffd17 	ldw	r2,-12(fp)
 1016610:	1885883a 	add	r2,r3,r2
 1016614:	10c00003 	ldbu	r3,0(r2)
 1016618:	e0bff804 	addi	r2,fp,-32
 101661c:	1105883a 	add	r2,r2,r4
 1016620:	10c00005 	stb	r3,0(r2)
 1016624:	00000c06 	br	1016658 <find_file_in_directory+0x18c>
		} else {
			extension[index - ext_index - 1] = file_name[index];
 1016628:	e0fff317 	ldw	r3,-52(fp)
 101662c:	e0bff517 	ldw	r2,-44(fp)
 1016630:	1885c83a 	sub	r2,r3,r2
 1016634:	113fffc4 	addi	r4,r2,-1
 1016638:	e0bff317 	ldw	r2,-52(fp)
 101663c:	1007883a 	mov	r3,r2
 1016640:	e0bffd17 	ldw	r2,-12(fp)
 1016644:	1885883a 	add	r2,r3,r2
 1016648:	10c00003 	ldbu	r3,0(r2)
 101664c:	e0bffa04 	addi	r2,fp,-24
 1016650:	1105883a 	add	r2,r2,r4
 1016654:	10c00005 	stb	r3,0(r2)
		last_dir_separator = last_dir_separator + location + 1;
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
	}

	// Get the name of the file in name/extension format.
	for (index = last_dir_separator; index < length; index++) {
 1016658:	e0bff317 	ldw	r2,-52(fp)
 101665c:	10800044 	addi	r2,r2,1
 1016660:	e0bff315 	stw	r2,-52(fp)
 1016664:	e0fff317 	ldw	r3,-52(fp)
 1016668:	e0bff217 	ldw	r2,-56(fp)
 101666c:	18bfd216 	blt	r3,r2,10165b8 <find_file_in_directory+0xec>
			extension[index - ext_index - 1] = file_name[index];
		}
	}

	// Look for the file.
	if (directory_start_cluster == 0) {
 1016670:	e0bffc17 	ldw	r2,-16(fp)
 1016674:	1004c03a 	cmpne	r2,r2,zero
 1016678:	1000441e 	bne	r2,zero,101678c <find_file_in_directory+0x2c0>
		/* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
		int max_root_dir_sectors = ((32
				* boot_sector_data.max_number_of_dir_entires)
				/ boot_sector_data.sector_size_in_bytes);
 101667c:	008040b4 	movhi	r2,258
 1016680:	108eef04 	addi	r2,r2,15292
 1016684:	1080050b 	ldhu	r2,20(r2)
 1016688:	10bfffcc 	andi	r2,r2,65535
 101668c:	1008917a 	slli	r4,r2,5
 1016690:	008040b4 	movhi	r2,258
 1016694:	108eef04 	addi	r2,r2,15292
 1016698:	1080030b 	ldhu	r2,12(r2)
 101669c:	117fffcc 	andi	r5,r2,65535
 10166a0:	10056b00 	call	10056b0 <__divsi3>
 10166a4:	e0bff015 	stw	r2,-64(fp)
		int sector_index;

		for (sector_index = 0; sector_index < max_root_dir_sectors;
 10166a8:	e03fef15 	stw	zero,-68(fp)
 10166ac:	00003306 	br	101677c <find_file_in_directory+0x2b0>
				sector_index++) {
			if (Read_Sector_Data(
 10166b0:	008040b4 	movhi	r2,258
 10166b4:	108eef04 	addi	r2,r2,15292
 10166b8:	10c01317 	ldw	r3,76(r2)
 10166bc:	e0bfef17 	ldw	r2,-68(fp)
 10166c0:	1885883a 	add	r2,r3,r2
 10166c4:	1009883a 	mov	r4,r2
 10166c8:	d167d617 	ldw	r5,-24744(gp)
 10166cc:	10147dc0 	call	10147dc <Read_Sector_Data>
 10166d0:	1005003a 	cmpeq	r2,r2,zero
 10166d4:	10008e1e 	bne	r2,zero,1016910 <find_file_in_directory+0x444>
					sector_index
							+ boot_sector_data.root_directory_sector_offset,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
 10166d8:	e03fee15 	stw	zero,-72(fp)
 10166dc:	00001e06 	br	1016758 <find_file_in_directory+0x28c>
					// Read file record.
					Read_File_Record_At_Offset(file_counter * 32, file_record,
 10166e0:	e0bfee17 	ldw	r2,-72(fp)
 10166e4:	1008917a 	slli	r4,r2,5
 10166e8:	e1ffef17 	ldw	r7,-68(fp)
 10166ec:	e17ffe17 	ldw	r5,-8(fp)
 10166f0:	000d883a 	mov	r6,zero
 10166f4:	1014c240 	call	1014c24 <Read_File_Record_At_Offset>
							0, sector_index);
					if ((file_record->name[0] != 0xe5)
 10166f8:	e0bffe17 	ldw	r2,-8(fp)
 10166fc:	10800003 	ldbu	r2,0(r2)
 1016700:	10803fcc 	andi	r2,r2,255
 1016704:	10803960 	cmpeqi	r2,r2,229
 1016708:	1000101e 	bne	r2,zero,101674c <find_file_in_directory+0x280>
 101670c:	e0bffe17 	ldw	r2,-8(fp)
 1016710:	10800003 	ldbu	r2,0(r2)
 1016714:	10803fcc 	andi	r2,r2,255
 1016718:	1005003a 	cmpeq	r2,r2,zero
 101671c:	10000b1e 	bne	r2,zero,101674c <find_file_in_directory+0x280>
							&& (file_record->name[0] != 0x00)) {
						bool match = match_file_record_to_name_ext(file_record,
								name, extension);
 1016720:	e17ff804 	addi	r5,fp,-32
 1016724:	e1bffa04 	addi	r6,fp,-24
 1016728:	e13ffe17 	ldw	r4,-8(fp)
 101672c:	1015ccc0 	call	1015ccc <match_file_record_to_name_ext>
 1016730:	e0bfed15 	stw	r2,-76(fp)

						if (match) {
 1016734:	e0bfed17 	ldw	r2,-76(fp)
 1016738:	1005003a 	cmpeq	r2,r2,zero
 101673c:	1000031e 	bne	r2,zero,101674c <find_file_in_directory+0x280>
							result = true;
 1016740:	00800044 	movi	r2,1
 1016744:	e0bff115 	stw	r2,-60(fp)
							break;
 1016748:	00000606 	br	1016764 <find_file_in_directory+0x298>
					sector_index
							+ boot_sector_data.root_directory_sector_offset,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
 101674c:	e0bfee17 	ldw	r2,-72(fp)
 1016750:	10800044 	addi	r2,r2,1
 1016754:	e0bfee15 	stw	r2,-72(fp)
 1016758:	e0bfee17 	ldw	r2,-72(fp)
 101675c:	10800410 	cmplti	r2,r2,16
 1016760:	103fdf1e 	bne	r2,zero,10166e0 <find_file_in_directory+0x214>
					}
				}
			} else {
				break;
			}
			if (result) {
 1016764:	e0bff117 	ldw	r2,-60(fp)
 1016768:	1004c03a 	cmpne	r2,r2,zero
 101676c:	1000681e 	bne	r2,zero,1016910 <find_file_in_directory+0x444>
				* boot_sector_data.max_number_of_dir_entires)
				/ boot_sector_data.sector_size_in_bytes);
		int sector_index;

		for (sector_index = 0; sector_index < max_root_dir_sectors;
				sector_index++) {
 1016770:	e0bfef17 	ldw	r2,-68(fp)
 1016774:	10800044 	addi	r2,r2,1
 1016778:	e0bfef15 	stw	r2,-68(fp)
		int max_root_dir_sectors = ((32
				* boot_sector_data.max_number_of_dir_entires)
				/ boot_sector_data.sector_size_in_bytes);
		int sector_index;

		for (sector_index = 0; sector_index < max_root_dir_sectors;
 101677c:	e0ffef17 	ldw	r3,-68(fp)
 1016780:	e0bff017 	ldw	r2,-64(fp)
 1016784:	18bfca16 	blt	r3,r2,10166b0 <find_file_in_directory+0x1e4>
 1016788:	00006106 	br	1016910 <find_file_in_directory+0x444>
		}
	} else {
		do {
			int start_sector = (cluster - 2)
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
 101678c:	e0bff417 	ldw	r2,-48(fp)
 1016790:	10ffff84 	addi	r3,r2,-2
 1016794:	008040b4 	movhi	r2,258
 1016798:	108eef04 	addi	r2,r2,15292
 101679c:	10800383 	ldbu	r2,14(r2)
 10167a0:	10803fcc 	andi	r2,r2,255
 10167a4:	1885383a 	mul	r2,r3,r2
 10167a8:	1007883a 	mov	r3,r2
 10167ac:	008040b4 	movhi	r2,258
 10167b0:	108eef04 	addi	r2,r2,15292
 10167b4:	10801417 	ldw	r2,80(r2)
 10167b8:	1885883a 	add	r2,r3,r2
 10167bc:	e0bfec15 	stw	r2,-80(fp)
			int sector_index;

			for (sector_index = 0;
 10167c0:	e03feb15 	stw	zero,-84(fp)
					sector_index < boot_sector_data.sectors_per_cluster;
 10167c4:	00003006 	br	1016888 <find_file_in_directory+0x3bc>
					sector_index++) {
				if (Read_Sector_Data(sector_index + start_sector,
 10167c8:	e0ffeb17 	ldw	r3,-84(fp)
 10167cc:	e0bfec17 	ldw	r2,-80(fp)
 10167d0:	1889883a 	add	r4,r3,r2
 10167d4:	d167d617 	ldw	r5,-24744(gp)
 10167d8:	10147dc0 	call	10147dc <Read_Sector_Data>
 10167dc:	1005003a 	cmpeq	r2,r2,zero
 10167e0:	10002f1e 	bne	r2,zero,10168a0 <find_file_in_directory+0x3d4>
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
 10167e4:	e03fea15 	stw	zero,-88(fp)
 10167e8:	00001e06 	br	1016864 <find_file_in_directory+0x398>
						// Read file record.
						Read_File_Record_At_Offset(file_counter * 32,
 10167ec:	e0bfea17 	ldw	r2,-88(fp)
 10167f0:	1008917a 	slli	r4,r2,5
 10167f4:	e1bff417 	ldw	r6,-48(fp)
 10167f8:	e1ffeb17 	ldw	r7,-84(fp)
 10167fc:	e17ffe17 	ldw	r5,-8(fp)
 1016800:	1014c240 	call	1014c24 <Read_File_Record_At_Offset>
								file_record, cluster, sector_index);
						if ((file_record->name[0] != 0xe5)
 1016804:	e0bffe17 	ldw	r2,-8(fp)
 1016808:	10800003 	ldbu	r2,0(r2)
 101680c:	10803fcc 	andi	r2,r2,255
 1016810:	10803960 	cmpeqi	r2,r2,229
 1016814:	1000101e 	bne	r2,zero,1016858 <find_file_in_directory+0x38c>
 1016818:	e0bffe17 	ldw	r2,-8(fp)
 101681c:	10800003 	ldbu	r2,0(r2)
 1016820:	10803fcc 	andi	r2,r2,255
 1016824:	1005003a 	cmpeq	r2,r2,zero
 1016828:	10000b1e 	bne	r2,zero,1016858 <find_file_in_directory+0x38c>
								&& (file_record->name[0] != 0x00)) {
							bool match = match_file_record_to_name_ext(
									file_record, name, extension);
 101682c:	e17ff804 	addi	r5,fp,-32
 1016830:	e1bffa04 	addi	r6,fp,-24
 1016834:	e13ffe17 	ldw	r4,-8(fp)
 1016838:	1015ccc0 	call	1015ccc <match_file_record_to_name_ext>
 101683c:	e0bfe915 	stw	r2,-92(fp)

							if (match) {
 1016840:	e0bfe917 	ldw	r2,-92(fp)
 1016844:	1005003a 	cmpeq	r2,r2,zero
 1016848:	1000031e 	bne	r2,zero,1016858 <find_file_in_directory+0x38c>
								result = true;
 101684c:	00800044 	movi	r2,1
 1016850:	e0bff115 	stw	r2,-60(fp)
								break;
 1016854:	00000606 	br	1016870 <find_file_in_directory+0x3a4>
					sector_index++) {
				if (Read_Sector_Data(sector_index + start_sector,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
 1016858:	e0bfea17 	ldw	r2,-88(fp)
 101685c:	10800044 	addi	r2,r2,1
 1016860:	e0bfea15 	stw	r2,-88(fp)
 1016864:	e0bfea17 	ldw	r2,-88(fp)
 1016868:	10800410 	cmplti	r2,r2,16
 101686c:	103fdf1e 	bne	r2,zero,10167ec <find_file_in_directory+0x320>
						}
					}
				} else {
					break;
				}
				if (result) {
 1016870:	e0bff117 	ldw	r2,-60(fp)
 1016874:	1004c03a 	cmpne	r2,r2,zero
 1016878:	1000091e 	bne	r2,zero,10168a0 <find_file_in_directory+0x3d4>
					+ boot_sector_data.data_sector_offset;
			int sector_index;

			for (sector_index = 0;
					sector_index < boot_sector_data.sectors_per_cluster;
					sector_index++) {
 101687c:	e0bfeb17 	ldw	r2,-84(fp)
 1016880:	10800044 	addi	r2,r2,1
 1016884:	e0bfeb15 	stw	r2,-84(fp)
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
			int sector_index;

			for (sector_index = 0;
					sector_index < boot_sector_data.sectors_per_cluster;
 1016888:	008040b4 	movhi	r2,258
 101688c:	108eef04 	addi	r2,r2,15292
 1016890:	10800383 	ldbu	r2,14(r2)
 1016894:	10c03fcc 	andi	r3,r2,255
 1016898:	e0bfeb17 	ldw	r2,-84(fp)
 101689c:	10ffca16 	blt	r2,r3,10167c8 <find_file_in_directory+0x2fc>
					break;
				}
			}
			// If this is the end of the cluster and the file has not been found, then see if there is another cluster
			// that holds data for the current directory.
			if (result == false) {
 10168a0:	e0bff117 	ldw	r2,-60(fp)
 10168a4:	1004c03a 	cmpne	r2,r2,zero
 10168a8:	1000131e 	bne	r2,zero,10168f8 <find_file_in_directory+0x42c>
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster)) {
 10168ac:	e13ff417 	ldw	r4,-48(fp)
 10168b0:	e17ffb04 	addi	r5,fp,-20
 10168b4:	10148d80 	call	10148d8 <get_cluster_flag>
 10168b8:	1005003a 	cmpeq	r2,r2,zero
 10168bc:	10000c1e 	bne	r2,zero,10168f0 <find_file_in_directory+0x424>
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
 10168c0:	e0bffb0b 	ldhu	r2,-20(fp)
 10168c4:	10bfffcc 	andi	r2,r2,65535
 10168c8:	10fffe0c 	andi	r3,r2,65528
 10168cc:	00bffe14 	movui	r2,65528
 10168d0:	1880021e 	bne	r3,r2,10168dc <find_file_in_directory+0x410>
						return false;
 10168d4:	e03fff15 	stw	zero,-4(fp)
 10168d8:	00000f06 	br	1016918 <find_file_in_directory+0x44c>
					}
					cluster = (new_cluster & 0x0000fff8);
 10168dc:	e0bffb0b 	ldhu	r2,-20(fp)
 10168e0:	10bfffcc 	andi	r2,r2,65535
 10168e4:	10bffe0c 	andi	r2,r2,65528
 10168e8:	e0bff415 	stw	r2,-48(fp)
 10168ec:	00000206 	br	10168f8 <find_file_in_directory+0x42c>
				} else {
					// Directory path is invalid.
					return false;
 10168f0:	e03fff15 	stw	zero,-4(fp)
 10168f4:	00000806 	br	1016918 <find_file_in_directory+0x44c>
				}
			}
		} while ((cluster < 0x0000fff8) && (result == false));
 10168f8:	e0fff417 	ldw	r3,-48(fp)
 10168fc:	00bffdd4 	movui	r2,65527
 1016900:	10c00316 	blt	r2,r3,1016910 <find_file_in_directory+0x444>
 1016904:	e0bff117 	ldw	r2,-60(fp)
 1016908:	1005003a 	cmpeq	r2,r2,zero
 101690c:	103f9f1e 	bne	r2,zero,101678c <find_file_in_directory+0x2c0>
	}

	return result;
 1016910:	e0bff117 	ldw	r2,-60(fp)
 1016914:	e0bfff15 	stw	r2,-4(fp)
 1016918:	e0bfff17 	ldw	r2,-4(fp)
}
 101691c:	e037883a 	mov	sp,fp
 1016920:	dfc00117 	ldw	ra,4(sp)
 1016924:	df000017 	ldw	fp,0(sp)
 1016928:	dec00204 	addi	sp,sp,8
 101692c:	f800283a 	ret

01016930 <find_first_empty_cluster>:

bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
 1016930:	defff504 	addi	sp,sp,-44
 1016934:	dfc00a15 	stw	ra,40(sp)
 1016938:	df000915 	stw	fp,36(sp)
 101693c:	df000904 	addi	fp,sp,36
 1016940:	e13fff15 	stw	r4,-4(fp)
	unsigned int sector = boot_sector_data.first_fat_sector_offset;
 1016944:	008040b4 	movhi	r2,258
 1016948:	108eef04 	addi	r2,r2,15292
 101694c:	10801117 	ldw	r2,68(r2)
 1016950:	e0bffe15 	stw	r2,-8(fp)
	unsigned int cluster_index = 2;
 1016954:	00800084 	movi	r2,2
 1016958:	e0bffd15 	stw	r2,-12(fp)
	short int cluster = -1;
 101695c:	00bfffc4 	movi	r2,-1
 1016960:	e0bffc0d 	sth	r2,-16(fp)
	bool result = false;
 1016964:	e03ffb15 	stw	zero,-20(fp)
	unsigned max_cluster_index = 0;
 1016968:	e03ffa15 	stw	zero,-24(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
 101696c:	008040b4 	movhi	r2,258
 1016970:	108eef04 	addi	r2,r2,15292
 1016974:	10801417 	ldw	r2,80(r2)
 1016978:	e0bff915 	stw	r2,-28(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
 101697c:	008040b4 	movhi	r2,258
 1016980:	108eef04 	addi	r2,r2,15292
 1016984:	1080058b 	ldhu	r2,22(r2)
 1016988:	10bfffcc 	andi	r2,r2,65535
 101698c:	e0bff815 	stw	r2,-32(fp)
	unsigned int greater_than_32 =
			boot_sector_data.total_sector_count_if_above_32MB;
 1016990:	008040b4 	movhi	r2,258
 1016994:	108eef04 	addi	r2,r2,15292
 1016998:	10800917 	ldw	r2,36(r2)
 101699c:	e0bff715 	stw	r2,-36(fp)

	if (less_than_32 > greater_than_32) {
 10169a0:	e0fff817 	ldw	r3,-32(fp)
 10169a4:	e0bff717 	ldw	r2,-36(fp)
 10169a8:	10c00b2e 	bgeu	r2,r3,10169d8 <find_first_empty_cluster+0xa8>
		max_cluster_index = ((less_than_32 - non_data_sectors)
 10169ac:	e0fff817 	ldw	r3,-32(fp)
 10169b0:	e0bff917 	ldw	r2,-28(fp)
 10169b4:	1889c83a 	sub	r4,r3,r2
 10169b8:	008040b4 	movhi	r2,258
 10169bc:	108eef04 	addi	r2,r2,15292
 10169c0:	10800383 	ldbu	r2,14(r2)
 10169c4:	11403fcc 	andi	r5,r2,255
 10169c8:	10057700 	call	1005770 <__udivsi3>
 10169cc:	10800044 	addi	r2,r2,1
 10169d0:	e0bffa15 	stw	r2,-24(fp)
 10169d4:	00002906 	br	1016a7c <find_first_empty_cluster+0x14c>
				/ boot_sector_data.sectors_per_cluster) + 1;
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
 10169d8:	e0fff717 	ldw	r3,-36(fp)
 10169dc:	e0bff917 	ldw	r2,-28(fp)
 10169e0:	1889c83a 	sub	r4,r3,r2
 10169e4:	008040b4 	movhi	r2,258
 10169e8:	108eef04 	addi	r2,r2,15292
 10169ec:	10800383 	ldbu	r2,14(r2)
 10169f0:	11403fcc 	andi	r5,r2,255
 10169f4:	10057700 	call	1005770 <__udivsi3>
 10169f8:	10800044 	addi	r2,r2,1
 10169fc:	e0bffa15 	stw	r2,-24(fp)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
 1016a00:	00001e06 	br	1016a7c <find_first_empty_cluster+0x14c>
		if (Read_Sector_Data(sector,
 1016a04:	e13ffe17 	ldw	r4,-8(fp)
 1016a08:	d167d617 	ldw	r5,-24744(gp)
 1016a0c:	10147dc0 	call	10147dc <Read_Sector_Data>
 1016a10:	1005003a 	cmpeq	r2,r2,zero
 1016a14:	1000131e 	bne	r2,zero,1016a64 <find_first_empty_cluster+0x134>
				fat_partition_offset_in_512_byte_sectors)) {
			do {
				cluster =
 1016a18:	d0a7d817 	ldw	r2,-24736(gp)
 1016a1c:	10800a17 	ldw	r2,40(r2)
 1016a20:	1007883a 	mov	r3,r2
 1016a24:	e0bffd17 	ldw	r2,-12(fp)
 1016a28:	10803fcc 	andi	r2,r2,255
 1016a2c:	1085883a 	add	r2,r2,r2
 1016a30:	1885883a 	add	r2,r3,r2
 1016a34:	1080002b 	ldhuio	r2,0(r2)
 1016a38:	e0bffc0d 	sth	r2,-16(fp)
						((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
				if (cluster == 0) {
 1016a3c:	e0bffc0f 	ldh	r2,-16(fp)
 1016a40:	1005003a 	cmpeq	r2,r2,zero
 1016a44:	1000071e 	bne	r2,zero,1016a64 <find_first_empty_cluster+0x134>
					// Free cluster found.
					break;
				} else {
					cluster_index++;
 1016a48:	e0bffd17 	ldw	r2,-12(fp)
 1016a4c:	10800044 	addi	r2,r2,1
 1016a50:	e0bffd15 	stw	r2,-12(fp)
				}
			} while ((cluster_index % 256) != 0);
 1016a54:	e0bffd17 	ldw	r2,-12(fp)
 1016a58:	10803fcc 	andi	r2,r2,255
 1016a5c:	1004c03a 	cmpne	r2,r2,zero
 1016a60:	103fed1e 	bne	r2,zero,1016a18 <find_first_empty_cluster+0xe8>
		}
		if (cluster == 0) {
 1016a64:	e0bffc0f 	ldh	r2,-16(fp)
 1016a68:	1005003a 	cmpeq	r2,r2,zero
 1016a6c:	1000081e 	bne	r2,zero,1016a90 <find_first_empty_cluster+0x160>
			break;
		}
		sector++;
 1016a70:	e0bffe17 	ldw	r2,-8(fp)
 1016a74:	10800044 	addi	r2,r2,1
 1016a78:	e0bffe15 	stw	r2,-8(fp)
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
 1016a7c:	008040b4 	movhi	r2,258
 1016a80:	108eef04 	addi	r2,r2,15292
 1016a84:	10c01217 	ldw	r3,72(r2)
 1016a88:	e0bffe17 	ldw	r2,-8(fp)
 1016a8c:	18bfdd1e 	bne	r3,r2,1016a04 <find_first_empty_cluster+0xd4>
		if (cluster == 0) {
			break;
		}
		sector++;
	}
	if ((cluster == 0) && (cluster <= max_cluster_index)) {
 1016a90:	e0bffc0f 	ldh	r2,-16(fp)
 1016a94:	1004c03a 	cmpne	r2,r2,zero
 1016a98:	1000081e 	bne	r2,zero,1016abc <find_first_empty_cluster+0x18c>
 1016a9c:	e0fffc0f 	ldh	r3,-16(fp)
 1016aa0:	e0bffa17 	ldw	r2,-24(fp)
 1016aa4:	10c00536 	bltu	r2,r3,1016abc <find_first_empty_cluster+0x18c>
		*cluster_number = cluster_index;
 1016aa8:	e0bfff17 	ldw	r2,-4(fp)
 1016aac:	e0fffd17 	ldw	r3,-12(fp)
 1016ab0:	10c00015 	stw	r3,0(r2)
		result = true;
 1016ab4:	00800044 	movi	r2,1
 1016ab8:	e0bffb15 	stw	r2,-20(fp)
	}
	return result;
 1016abc:	e0bffb17 	ldw	r2,-20(fp)
}
 1016ac0:	e037883a 	mov	sp,fp
 1016ac4:	dfc00117 	ldw	ra,4(sp)
 1016ac8:	df000017 	ldw	fp,0(sp)
 1016acc:	dec00204 	addi	sp,sp,8
 1016ad0:	f800283a 	ret

01016ad4 <find_first_empty_record_in_a_subdirectory>:

int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
 1016ad4:	defff404 	addi	sp,sp,-48
 1016ad8:	dfc00b15 	stw	ra,44(sp)
 1016adc:	df000a15 	stw	fp,40(sp)
 1016ae0:	df000a04 	addi	fp,sp,40
 1016ae4:	e13ffe15 	stw	r4,-8(fp)
	int result = -1;
 1016ae8:	00bfffc4 	movi	r2,-1
 1016aec:	e0bffb15 	stw	r2,-20(fp)
	int cluster = start_cluster_index;
 1016af0:	e0bffe17 	ldw	r2,-8(fp)
 1016af4:	e0bffa15 	stw	r2,-24(fp)
	do {
		int start_sector = (cluster - 2)
				* (boot_sector_data.sectors_per_cluster)
				+ boot_sector_data.data_sector_offset;
 1016af8:	e0bffa17 	ldw	r2,-24(fp)
 1016afc:	10ffff84 	addi	r3,r2,-2
 1016b00:	008040b4 	movhi	r2,258
 1016b04:	108eef04 	addi	r2,r2,15292
 1016b08:	10800383 	ldbu	r2,14(r2)
 1016b0c:	10803fcc 	andi	r2,r2,255
 1016b10:	1885383a 	mul	r2,r3,r2
 1016b14:	1007883a 	mov	r3,r2
 1016b18:	008040b4 	movhi	r2,258
 1016b1c:	108eef04 	addi	r2,r2,15292
 1016b20:	10801417 	ldw	r2,80(r2)
 1016b24:	1885883a 	add	r2,r3,r2
 1016b28:	e0bff915 	stw	r2,-28(fp)
		int sector_index;

		for (sector_index = 0;
 1016b2c:	e03ff815 	stw	zero,-32(fp)
				sector_index < boot_sector_data.sectors_per_cluster;
 1016b30:	00002c06 	br	1016be4 <find_first_empty_record_in_a_subdirectory+0x110>
				sector_index++) {
			if (Read_Sector_Data(sector_index + start_sector,
 1016b34:	e0fff817 	ldw	r3,-32(fp)
 1016b38:	e0bff917 	ldw	r2,-28(fp)
 1016b3c:	1889883a 	add	r4,r3,r2
 1016b40:	d167d617 	ldw	r5,-24744(gp)
 1016b44:	10147dc0 	call	10147dc <Read_Sector_Data>
 1016b48:	1005003a 	cmpeq	r2,r2,zero
 1016b4c:	10002b1e 	bne	r2,zero,1016bfc <find_first_empty_record_in_a_subdirectory+0x128>
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
 1016b50:	e03ff715 	stw	zero,-36(fp)
 1016b54:	00001d06 	br	1016bcc <find_first_empty_record_in_a_subdirectory+0xf8>
					unsigned short int leading_char;

					// Read file record.
					leading_char =
 1016b58:	d0a7d817 	ldw	r2,-24736(gp)
 1016b5c:	10800a17 	ldw	r2,40(r2)
 1016b60:	1007883a 	mov	r3,r2
 1016b64:	e0bff717 	ldw	r2,-36(fp)
 1016b68:	1004917a 	slli	r2,r2,5
 1016b6c:	1885883a 	add	r2,r3,r2
 1016b70:	10800023 	ldbuio	r2,0(r2)
 1016b74:	10803fcc 	andi	r2,r2,255
 1016b78:	e0bff60d 	sth	r2,-40(fp)
							((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
					if ((leading_char == 0x00e5) || (leading_char == 0)) {
 1016b7c:	e0bff60b 	ldhu	r2,-40(fp)
 1016b80:	10803960 	cmpeqi	r2,r2,229
 1016b84:	1000031e 	bne	r2,zero,1016b94 <find_first_empty_record_in_a_subdirectory+0xc0>
 1016b88:	e0bff60b 	ldhu	r2,-40(fp)
 1016b8c:	1004c03a 	cmpne	r2,r2,zero
 1016b90:	10000b1e 	bne	r2,zero,1016bc0 <find_first_empty_record_in_a_subdirectory+0xec>
						result = (cluster)
 1016b94:	e0bff817 	ldw	r2,-32(fp)
 1016b98:	1006913a 	slli	r3,r2,4
 1016b9c:	e0bff717 	ldw	r2,-36(fp)
 1016ba0:	1885883a 	add	r2,r3,r2
 1016ba4:	1006943a 	slli	r3,r2,16
 1016ba8:	e0bffa17 	ldw	r2,-24(fp)
 1016bac:	1884b03a 	or	r2,r3,r2
 1016bb0:	e0bffb15 	stw	r2,-20(fp)
								| ((sector_index * 16 + file_counter) << 16);
						return result;
 1016bb4:	e0bffb17 	ldw	r2,-20(fp)
 1016bb8:	e0bfff15 	stw	r2,-4(fp)
 1016bbc:	00005206 	br	1016d08 <find_first_empty_record_in_a_subdirectory+0x234>
				sector_index++) {
			if (Read_Sector_Data(sector_index + start_sector,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
 1016bc0:	e0bff717 	ldw	r2,-36(fp)
 1016bc4:	10800044 	addi	r2,r2,1
 1016bc8:	e0bff715 	stw	r2,-36(fp)
 1016bcc:	e0bff717 	ldw	r2,-36(fp)
 1016bd0:	10800410 	cmplti	r2,r2,16
 1016bd4:	103fe01e 	bne	r2,zero,1016b58 <find_first_empty_record_in_a_subdirectory+0x84>
				+ boot_sector_data.data_sector_offset;
		int sector_index;

		for (sector_index = 0;
				sector_index < boot_sector_data.sectors_per_cluster;
				sector_index++) {
 1016bd8:	e0bff817 	ldw	r2,-32(fp)
 1016bdc:	10800044 	addi	r2,r2,1
 1016be0:	e0bff815 	stw	r2,-32(fp)
				* (boot_sector_data.sectors_per_cluster)
				+ boot_sector_data.data_sector_offset;
		int sector_index;

		for (sector_index = 0;
				sector_index < boot_sector_data.sectors_per_cluster;
 1016be4:	008040b4 	movhi	r2,258
 1016be8:	108eef04 	addi	r2,r2,15292
 1016bec:	10800383 	ldbu	r2,14(r2)
 1016bf0:	10c03fcc 	andi	r3,r2,255
 1016bf4:	e0bff817 	ldw	r2,-32(fp)
 1016bf8:	10ffce16 	blt	r2,r3,1016b34 <find_first_empty_record_in_a_subdirectory+0x60>
				break;
			}
		}
		// If this is the end of the cluster and the file has not been found, then see if there is another cluster
		// that holds data for the current directory.
		if (result < 0) {
 1016bfc:	e0bffb17 	ldw	r2,-20(fp)
 1016c00:	1004403a 	cmpge	r2,r2,zero
 1016c04:	1000381e 	bne	r2,zero,1016ce8 <find_first_empty_record_in_a_subdirectory+0x214>
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster)) {
 1016c08:	e13ffa17 	ldw	r4,-24(fp)
 1016c0c:	e17ffc04 	addi	r5,fp,-16
 1016c10:	10148d80 	call	10148d8 <get_cluster_flag>
 1016c14:	1005003a 	cmpeq	r2,r2,zero
 1016c18:	1000311e 	bne	r2,zero,1016ce0 <find_first_empty_record_in_a_subdirectory+0x20c>
				// The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
 1016c1c:	e0bffc0b 	ldhu	r2,-16(fp)
 1016c20:	10bfffcc 	andi	r2,r2,65535
 1016c24:	10fffe0c 	andi	r3,r2,65528
 1016c28:	00bffe14 	movui	r2,65528
 1016c2c:	18802e1e 	bne	r3,r2,1016ce8 <find_first_empty_record_in_a_subdirectory+0x214>
					int new_dir_cluster;
					if (find_first_empty_cluster(&new_dir_cluster)) {
 1016c30:	e13ffd04 	addi	r4,fp,-12
 1016c34:	10169300 	call	1016930 <find_first_empty_cluster>
 1016c38:	1005003a 	cmpeq	r2,r2,zero
 1016c3c:	1000231e 	bne	r2,zero,1016ccc <find_first_empty_record_in_a_subdirectory+0x1f8>
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster,
 1016c40:	e13ffa17 	ldw	r4,-24(fp)
 1016c44:	e0bffd17 	ldw	r2,-12(fp)
 1016c48:	117fffcc 	andi	r5,r2,65535
 1016c4c:	2960001c 	xori	r5,r5,32768
 1016c50:	29600004 	addi	r5,r5,-32768
 1016c54:	01800044 	movi	r6,1
 1016c58:	10149900 	call	1014990 <mark_cluster>
 1016c5c:	1005003a 	cmpeq	r2,r2,zero
 1016c60:	10001a1e 	bne	r2,zero,1016ccc <find_first_empty_record_in_a_subdirectory+0x1f8>
 1016c64:	e0bffd17 	ldw	r2,-12(fp)
 1016c68:	1009883a 	mov	r4,r2
 1016c6c:	017fffc4 	movi	r5,-1
 1016c70:	01800044 	movi	r6,1
 1016c74:	10149900 	call	1014990 <mark_cluster>
 1016c78:	1005003a 	cmpeq	r2,r2,zero
 1016c7c:	1000131e 	bne	r2,zero,1016ccc <find_first_empty_record_in_a_subdirectory+0x1f8>
 1016c80:	e13ffa17 	ldw	r4,-24(fp)
 1016c84:	e0bffd17 	ldw	r2,-12(fp)
 1016c88:	117fffcc 	andi	r5,r2,65535
 1016c8c:	2960001c 	xori	r5,r5,32768
 1016c90:	29600004 	addi	r5,r5,-32768
 1016c94:	000d883a 	mov	r6,zero
 1016c98:	10149900 	call	1014990 <mark_cluster>
 1016c9c:	1005003a 	cmpeq	r2,r2,zero
 1016ca0:	10000a1e 	bne	r2,zero,1016ccc <find_first_empty_record_in_a_subdirectory+0x1f8>
 1016ca4:	e0bffd17 	ldw	r2,-12(fp)
 1016ca8:	1009883a 	mov	r4,r2
 1016cac:	017fffc4 	movi	r5,-1
 1016cb0:	000d883a 	mov	r6,zero
 1016cb4:	10149900 	call	1014990 <mark_cluster>
 1016cb8:	1005003a 	cmpeq	r2,r2,zero
 1016cbc:	1000031e 	bne	r2,zero,1016ccc <find_first_empty_record_in_a_subdirectory+0x1f8>
										((short int) (0xffff)), true)
								&& mark_cluster(cluster,
										((short int) (new_dir_cluster)), false)
								&& mark_cluster(new_dir_cluster,
										((short int) (0xffff)), false)) {
							Save_Modified_Sector();
 1016cc0:	101478c0 	call	101478c <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;
 1016cc4:	e0bffd17 	ldw	r2,-12(fp)
 1016cc8:	e0bffb15 	stw	r2,-20(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
 1016ccc:	e0bffc0b 	ldhu	r2,-16(fp)
 1016cd0:	10bfffcc 	andi	r2,r2,65535
 1016cd4:	10bffe0c 	andi	r2,r2,65528
 1016cd8:	e0bffa15 	stw	r2,-24(fp)
 1016cdc:	00000206 	br	1016ce8 <find_first_empty_record_in_a_subdirectory+0x214>
				}
			} else {
				// Error encountered.                 
				result = -1;
 1016ce0:	00bfffc4 	movi	r2,-1
 1016ce4:	e0bffb15 	stw	r2,-20(fp)
			}
		}
	} while ((cluster < 0x0000fff8) && (result == -1));
 1016ce8:	e0fffa17 	ldw	r3,-24(fp)
 1016cec:	00bffdd4 	movui	r2,65527
 1016cf0:	10c00316 	blt	r2,r3,1016d00 <find_first_empty_record_in_a_subdirectory+0x22c>
 1016cf4:	e0bffb17 	ldw	r2,-20(fp)
 1016cf8:	10bfffe0 	cmpeqi	r2,r2,-1
 1016cfc:	103f7e1e 	bne	r2,zero,1016af8 <find_first_empty_record_in_a_subdirectory+0x24>
	return result;
 1016d00:	e0bffb17 	ldw	r2,-20(fp)
 1016d04:	e0bfff15 	stw	r2,-4(fp)
 1016d08:	e0bfff17 	ldw	r2,-4(fp)
}
 1016d0c:	e037883a 	mov	sp,fp
 1016d10:	dfc00117 	ldw	ra,4(sp)
 1016d14:	df000017 	ldw	fp,0(sp)
 1016d18:	dec00204 	addi	sp,sp,8
 1016d1c:	f800283a 	ret

01016d20 <find_first_empty_record_in_root_directory>:

int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
 1016d20:	defff804 	addi	sp,sp,-32
 1016d24:	dfc00715 	stw	ra,28(sp)
 1016d28:	df000615 	stw	fp,24(sp)
 1016d2c:	df000604 	addi	fp,sp,24
	int max_root_dir_sectors =
			((32 * boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
 1016d30:	008040b4 	movhi	r2,258
 1016d34:	108eef04 	addi	r2,r2,15292
 1016d38:	1080050b 	ldhu	r2,20(r2)
 1016d3c:	10bfffcc 	andi	r2,r2,65535
 1016d40:	1008917a 	slli	r4,r2,5
 1016d44:	008040b4 	movhi	r2,258
 1016d48:	108eef04 	addi	r2,r2,15292
 1016d4c:	1080030b 	ldhu	r2,12(r2)
 1016d50:	117fffcc 	andi	r5,r2,65535
 1016d54:	10056b00 	call	10056b0 <__divsi3>
 1016d58:	e0bffe15 	stw	r2,-8(fp)
	int sector_index;
	int result = -1;
 1016d5c:	00bfffc4 	movi	r2,-1
 1016d60:	e0bffc15 	stw	r2,-16(fp)

	for (sector_index = 0; sector_index < max_root_dir_sectors;
 1016d64:	e03ffd15 	stw	zero,-12(fp)
 1016d68:	00002d06 	br	1016e20 <find_first_empty_record_in_root_directory+0x100>
			sector_index++) {
		if (Read_Sector_Data(
 1016d6c:	008040b4 	movhi	r2,258
 1016d70:	108eef04 	addi	r2,r2,15292
 1016d74:	10c01317 	ldw	r3,76(r2)
 1016d78:	e0bffd17 	ldw	r2,-12(fp)
 1016d7c:	1885883a 	add	r2,r3,r2
 1016d80:	1009883a 	mov	r4,r2
 1016d84:	d167d617 	ldw	r5,-24744(gp)
 1016d88:	10147dc0 	call	10147dc <Read_Sector_Data>
 1016d8c:	1005003a 	cmpeq	r2,r2,zero
 1016d90:	1000261e 	bne	r2,zero,1016e2c <find_first_empty_record_in_root_directory+0x10c>
				sector_index + boot_sector_data.root_directory_sector_offset,
				fat_partition_offset_in_512_byte_sectors)) {
			int file_counter;

			for (file_counter = 0; file_counter < 16; file_counter++) {
 1016d94:	e03ffb15 	stw	zero,-20(fp)
 1016d98:	00001b06 	br	1016e08 <find_first_empty_record_in_root_directory+0xe8>
				unsigned short int leading_char;

				// Read first character of the file record.
				leading_char =
 1016d9c:	d0a7d817 	ldw	r2,-24736(gp)
 1016da0:	10800a17 	ldw	r2,40(r2)
 1016da4:	1007883a 	mov	r3,r2
 1016da8:	e0bffb17 	ldw	r2,-20(fp)
 1016dac:	1004917a 	slli	r2,r2,5
 1016db0:	1885883a 	add	r2,r3,r2
 1016db4:	10800023 	ldbuio	r2,0(r2)
 1016db8:	10803fcc 	andi	r2,r2,255
 1016dbc:	e0bffa0d 	sth	r2,-24(fp)
						((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
				if ((leading_char == 0x00e5) || (leading_char == 0)) {
 1016dc0:	e0bffa0b 	ldhu	r2,-24(fp)
 1016dc4:	10803960 	cmpeqi	r2,r2,229
 1016dc8:	1000031e 	bne	r2,zero,1016dd8 <find_first_empty_record_in_root_directory+0xb8>
 1016dcc:	e0bffa0b 	ldhu	r2,-24(fp)
 1016dd0:	1004c03a 	cmpne	r2,r2,zero
 1016dd4:	1000091e 	bne	r2,zero,1016dfc <find_first_empty_record_in_root_directory+0xdc>
					result = (sector_index * 16 + file_counter) << 16;
 1016dd8:	e0bffd17 	ldw	r2,-12(fp)
 1016ddc:	1006913a 	slli	r3,r2,4
 1016de0:	e0bffb17 	ldw	r2,-20(fp)
 1016de4:	1885883a 	add	r2,r3,r2
 1016de8:	1004943a 	slli	r2,r2,16
 1016dec:	e0bffc15 	stw	r2,-16(fp)
					return result;
 1016df0:	e0bffc17 	ldw	r2,-16(fp)
 1016df4:	e0bfff15 	stw	r2,-4(fp)
 1016df8:	00000e06 	br	1016e34 <find_first_empty_record_in_root_directory+0x114>
		if (Read_Sector_Data(
				sector_index + boot_sector_data.root_directory_sector_offset,
				fat_partition_offset_in_512_byte_sectors)) {
			int file_counter;

			for (file_counter = 0; file_counter < 16; file_counter++) {
 1016dfc:	e0bffb17 	ldw	r2,-20(fp)
 1016e00:	10800044 	addi	r2,r2,1
 1016e04:	e0bffb15 	stw	r2,-20(fp)
 1016e08:	e0bffb17 	ldw	r2,-20(fp)
 1016e0c:	10800410 	cmplti	r2,r2,16
 1016e10:	103fe21e 	bne	r2,zero,1016d9c <find_first_empty_record_in_root_directory+0x7c>
					/ boot_sector_data.sector_size_in_bytes);
	int sector_index;
	int result = -1;

	for (sector_index = 0; sector_index < max_root_dir_sectors;
			sector_index++) {
 1016e14:	e0bffd17 	ldw	r2,-12(fp)
 1016e18:	10800044 	addi	r2,r2,1
 1016e1c:	e0bffd15 	stw	r2,-12(fp)
			((32 * boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
	int sector_index;
	int result = -1;

	for (sector_index = 0; sector_index < max_root_dir_sectors;
 1016e20:	e0fffd17 	ldw	r3,-12(fp)
 1016e24:	e0bffe17 	ldw	r2,-8(fp)
 1016e28:	18bfd016 	blt	r3,r2,1016d6c <find_first_empty_record_in_root_directory+0x4c>
			}
		} else {
			break;
		}
	}
	return result;
 1016e2c:	e0bffc17 	ldw	r2,-16(fp)
 1016e30:	e0bfff15 	stw	r2,-4(fp)
 1016e34:	e0bfff17 	ldw	r2,-4(fp)
}
 1016e38:	e037883a 	mov	sp,fp
 1016e3c:	dfc00117 	ldw	ra,4(sp)
 1016e40:	df000017 	ldw	fp,0(sp)
 1016e44:	dec00204 	addi	sp,sp,8
 1016e48:	f800283a 	ret

01016e4c <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name,
		char *extension)
// This function converts the file name into a name . extension format.
{
 1016e4c:	defffa04 	addi	sp,sp,-24
 1016e50:	df000515 	stw	fp,20(sp)
 1016e54:	df000504 	addi	fp,sp,20
 1016e58:	e13ffd15 	stw	r4,-12(fp)
 1016e5c:	e17ffe15 	stw	r5,-8(fp)
 1016e60:	e1bfff15 	stw	r6,-4(fp)
	int counter;
	int local = 0;
 1016e64:	e03ffb15 	stw	zero,-20(fp)

	for (counter = 0; counter < 8; counter++) {
 1016e68:	e03ffc15 	stw	zero,-16(fp)
 1016e6c:	00002b06 	br	1016f1c <convert_filename_to_name_extension+0xd0>
		if (filename[local] != '.') {
 1016e70:	e0bffb17 	ldw	r2,-20(fp)
 1016e74:	1007883a 	mov	r3,r2
 1016e78:	e0bffd17 	ldw	r2,-12(fp)
 1016e7c:	1885883a 	add	r2,r3,r2
 1016e80:	10800003 	ldbu	r2,0(r2)
 1016e84:	10803fcc 	andi	r2,r2,255
 1016e88:	1080201c 	xori	r2,r2,128
 1016e8c:	10bfe004 	addi	r2,r2,-128
 1016e90:	10800ba0 	cmpeqi	r2,r2,46
 1016e94:	1000181e 	bne	r2,zero,1016ef8 <convert_filename_to_name_extension+0xac>
			name[counter] = filename[local];
 1016e98:	e0bffc17 	ldw	r2,-16(fp)
 1016e9c:	1007883a 	mov	r3,r2
 1016ea0:	e0bffe17 	ldw	r2,-8(fp)
 1016ea4:	1889883a 	add	r4,r3,r2
 1016ea8:	e0bffb17 	ldw	r2,-20(fp)
 1016eac:	1007883a 	mov	r3,r2
 1016eb0:	e0bffd17 	ldw	r2,-12(fp)
 1016eb4:	1885883a 	add	r2,r3,r2
 1016eb8:	10800003 	ldbu	r2,0(r2)
 1016ebc:	20800005 	stb	r2,0(r4)
			if (filename[local] != 0)
 1016ec0:	e0bffb17 	ldw	r2,-20(fp)
 1016ec4:	1007883a 	mov	r3,r2
 1016ec8:	e0bffd17 	ldw	r2,-12(fp)
 1016ecc:	1885883a 	add	r2,r3,r2
 1016ed0:	10800003 	ldbu	r2,0(r2)
 1016ed4:	10803fcc 	andi	r2,r2,255
 1016ed8:	1080201c 	xori	r2,r2,128
 1016edc:	10bfe004 	addi	r2,r2,-128
 1016ee0:	1005003a 	cmpeq	r2,r2,zero
 1016ee4:	10000a1e 	bne	r2,zero,1016f10 <convert_filename_to_name_extension+0xc4>
				local++;
 1016ee8:	e0bffb17 	ldw	r2,-20(fp)
 1016eec:	10800044 	addi	r2,r2,1
 1016ef0:	e0bffb15 	stw	r2,-20(fp)
 1016ef4:	00000606 	br	1016f10 <convert_filename_to_name_extension+0xc4>
		} else {
			name[counter] = ' ';
 1016ef8:	e0bffc17 	ldw	r2,-16(fp)
 1016efc:	1007883a 	mov	r3,r2
 1016f00:	e0bffe17 	ldw	r2,-8(fp)
 1016f04:	1887883a 	add	r3,r3,r2
 1016f08:	00800804 	movi	r2,32
 1016f0c:	18800005 	stb	r2,0(r3)
// This function converts the file name into a name . extension format.
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
 1016f10:	e0bffc17 	ldw	r2,-16(fp)
 1016f14:	10800044 	addi	r2,r2,1
 1016f18:	e0bffc15 	stw	r2,-16(fp)
 1016f1c:	e0bffc17 	ldw	r2,-16(fp)
 1016f20:	10800210 	cmplti	r2,r2,8
 1016f24:	103fd21e 	bne	r2,zero,1016e70 <convert_filename_to_name_extension+0x24>
				local++;
		} else {
			name[counter] = ' ';
		}
	}
	if (filename[local] == '.')
 1016f28:	e0bffb17 	ldw	r2,-20(fp)
 1016f2c:	1007883a 	mov	r3,r2
 1016f30:	e0bffd17 	ldw	r2,-12(fp)
 1016f34:	1885883a 	add	r2,r3,r2
 1016f38:	10800003 	ldbu	r2,0(r2)
 1016f3c:	10803fcc 	andi	r2,r2,255
 1016f40:	1080201c 	xori	r2,r2,128
 1016f44:	10bfe004 	addi	r2,r2,-128
 1016f48:	10800b98 	cmpnei	r2,r2,46
 1016f4c:	1000031e 	bne	r2,zero,1016f5c <convert_filename_to_name_extension+0x110>
		local++;
 1016f50:	e0bffb17 	ldw	r2,-20(fp)
 1016f54:	10800044 	addi	r2,r2,1
 1016f58:	e0bffb15 	stw	r2,-20(fp)
	for (counter = 0; counter < 3; counter++) {
 1016f5c:	e03ffc15 	stw	zero,-16(fp)
 1016f60:	00002106 	br	1016fe8 <convert_filename_to_name_extension+0x19c>
		if (filename[local] != 0) {
 1016f64:	e0bffb17 	ldw	r2,-20(fp)
 1016f68:	1007883a 	mov	r3,r2
 1016f6c:	e0bffd17 	ldw	r2,-12(fp)
 1016f70:	1885883a 	add	r2,r3,r2
 1016f74:	10800003 	ldbu	r2,0(r2)
 1016f78:	10803fcc 	andi	r2,r2,255
 1016f7c:	1080201c 	xori	r2,r2,128
 1016f80:	10bfe004 	addi	r2,r2,-128
 1016f84:	1005003a 	cmpeq	r2,r2,zero
 1016f88:	10000e1e 	bne	r2,zero,1016fc4 <convert_filename_to_name_extension+0x178>
			extension[counter] = filename[local];
 1016f8c:	e0bffc17 	ldw	r2,-16(fp)
 1016f90:	1007883a 	mov	r3,r2
 1016f94:	e0bfff17 	ldw	r2,-4(fp)
 1016f98:	1889883a 	add	r4,r3,r2
 1016f9c:	e0bffb17 	ldw	r2,-20(fp)
 1016fa0:	1007883a 	mov	r3,r2
 1016fa4:	e0bffd17 	ldw	r2,-12(fp)
 1016fa8:	1885883a 	add	r2,r3,r2
 1016fac:	10800003 	ldbu	r2,0(r2)
 1016fb0:	20800005 	stb	r2,0(r4)
			local++;
 1016fb4:	e0bffb17 	ldw	r2,-20(fp)
 1016fb8:	10800044 	addi	r2,r2,1
 1016fbc:	e0bffb15 	stw	r2,-20(fp)
 1016fc0:	00000606 	br	1016fdc <convert_filename_to_name_extension+0x190>
		} else {
			extension[counter] = ' ';
 1016fc4:	e0bffc17 	ldw	r2,-16(fp)
 1016fc8:	1007883a 	mov	r3,r2
 1016fcc:	e0bfff17 	ldw	r2,-4(fp)
 1016fd0:	1887883a 	add	r3,r3,r2
 1016fd4:	00800804 	movi	r2,32
 1016fd8:	18800005 	stb	r2,0(r3)
			name[counter] = ' ';
		}
	}
	if (filename[local] == '.')
		local++;
	for (counter = 0; counter < 3; counter++) {
 1016fdc:	e0bffc17 	ldw	r2,-16(fp)
 1016fe0:	10800044 	addi	r2,r2,1
 1016fe4:	e0bffc15 	stw	r2,-16(fp)
 1016fe8:	e0bffc17 	ldw	r2,-16(fp)
 1016fec:	108000d0 	cmplti	r2,r2,3
 1016ff0:	103fdc1e 	bne	r2,zero,1016f64 <convert_filename_to_name_extension+0x118>
		} else {
			extension[counter] = ' ';
		}
	}

}
 1016ff4:	e037883a 	mov	sp,fp
 1016ff8:	df000017 	ldw	fp,0(sp)
 1016ffc:	dec00104 	addi	sp,sp,4
 1017000:	f800283a 	ret

01017004 <create_file>:

bool create_file(char *name, t_file_record *file_record,
		t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
 1017004:	defff304 	addi	sp,sp,-52
 1017008:	dfc00c15 	stw	ra,48(sp)
 101700c:	df000b15 	stw	fp,44(sp)
 1017010:	df000b04 	addi	fp,sp,44
 1017014:	e13ffb15 	stw	r4,-20(fp)
 1017018:	e17ffc15 	stw	r5,-16(fp)
 101701c:	e1bffd15 	stw	r6,-12(fp)
	unsigned int cluster_number;
	bool result = false;
 1017020:	e03ff915 	stw	zero,-28(fp)

	if (find_first_empty_cluster(&cluster_number)) {
 1017024:	e13ffa04 	addi	r4,fp,-24
 1017028:	10169300 	call	1016930 <find_first_empty_cluster>
 101702c:	1005003a 	cmpeq	r2,r2,zero
 1017030:	1000a31e 	bne	r2,zero,10172c0 <create_file+0x2bc>
		int record_index;

		if (home_dir->file_record_cluster == 0) {
 1017034:	e0bffd17 	ldw	r2,-12(fp)
 1017038:	10800a17 	ldw	r2,40(r2)
 101703c:	1004c03a 	cmpne	r2,r2,zero
 1017040:	1000031e 	bne	r2,zero,1017050 <create_file+0x4c>
			// Put a file in the root directory.
			record_index = find_first_empty_record_in_root_directory();
 1017044:	1016d200 	call	1016d20 <find_first_empty_record_in_root_directory>
 1017048:	e0bff815 	stw	r2,-32(fp)
 101704c:	00000506 	br	1017064 <create_file+0x60>
		} else {
			// Put a file in a subdirectory.
			record_index = find_first_empty_record_in_a_subdirectory(
 1017050:	e0bffd17 	ldw	r2,-12(fp)
 1017054:	1080058b 	ldhu	r2,22(r2)
 1017058:	113fffcc 	andi	r4,r2,65535
 101705c:	1016ad40 	call	1016ad4 <find_first_empty_record_in_a_subdirectory>
 1017060:	e0bff815 	stw	r2,-32(fp)
					home_dir->start_cluster_index);
		}
		if (record_index >= 0) {
 1017064:	e0bff817 	ldw	r2,-32(fp)
 1017068:	1004803a 	cmplt	r2,r2,zero
 101706c:	1000941e 	bne	r2,zero,10172c0 <create_file+0x2bc>
			unsigned int file_record_sector;
			int location = get_dir_divider_location(name);
 1017070:	e13ffb17 	ldw	r4,-20(fp)
 1017074:	1015c0c0 	call	1015c0c <get_dir_divider_location>
 1017078:	e0bff615 	stw	r2,-40(fp)
			int last_dir_separator = 0;
 101707c:	e03ff515 	stw	zero,-44(fp)

			// Skip through all directory separators.
			while (location > 0) {
 1017080:	00000b06 	br	10170b0 <create_file+0xac>
				last_dir_separator = last_dir_separator + location + 1;
 1017084:	e0fff517 	ldw	r3,-44(fp)
 1017088:	e0bff617 	ldw	r2,-40(fp)
 101708c:	1885883a 	add	r2,r3,r2
 1017090:	10800044 	addi	r2,r2,1
 1017094:	e0bff515 	stw	r2,-44(fp)
				location = get_dir_divider_location(
 1017098:	e0bff517 	ldw	r2,-44(fp)
 101709c:	1007883a 	mov	r3,r2
 10170a0:	e0bffb17 	ldw	r2,-20(fp)
 10170a4:	1889883a 	add	r4,r3,r2
 10170a8:	1015c0c0 	call	1015c0c <get_dir_divider_location>
 10170ac:	e0bff615 	stw	r2,-40(fp)
			unsigned int file_record_sector;
			int location = get_dir_divider_location(name);
			int last_dir_separator = 0;

			// Skip through all directory separators.
			while (location > 0) {
 10170b0:	e0bff617 	ldw	r2,-40(fp)
 10170b4:	10800048 	cmpgei	r2,r2,1
 10170b8:	103ff21e 	bne	r2,zero,1017084 <create_file+0x80>
				last_dir_separator = last_dir_separator + location + 1;
				location = get_dir_divider_location(
						&(name[last_dir_separator]));
			}

			convert_filename_to_name_extension(&(name[last_dir_separator]),
 10170bc:	e0bff517 	ldw	r2,-44(fp)
 10170c0:	1007883a 	mov	r3,r2
 10170c4:	e0bffb17 	ldw	r2,-20(fp)
 10170c8:	1889883a 	add	r4,r3,r2
 10170cc:	e0bffc17 	ldw	r2,-16(fp)
 10170d0:	100b883a 	mov	r5,r2
 10170d4:	e0bffc17 	ldw	r2,-16(fp)
 10170d8:	10800204 	addi	r2,r2,8
 10170dc:	100d883a 	mov	r6,r2
 10170e0:	1016e4c0 	call	1016e4c <convert_filename_to_name_extension>
					file_record->name, file_record->extension);

			file_record->attributes = 0;
 10170e4:	e0bffc17 	ldw	r2,-16(fp)
 10170e8:	100002c5 	stb	zero,11(r2)
			file_record->create_time = 0;
 10170ec:	e0bffc17 	ldw	r2,-16(fp)
 10170f0:	1000030d 	sth	zero,12(r2)
			file_record->create_date = 0;
 10170f4:	e0bffc17 	ldw	r2,-16(fp)
 10170f8:	1000038d 	sth	zero,14(r2)
			file_record->last_access_date = 0;
 10170fc:	e0bffc17 	ldw	r2,-16(fp)
 1017100:	1000040d 	sth	zero,16(r2)
			file_record->last_modified_time = 0;
 1017104:	e0bffc17 	ldw	r2,-16(fp)
 1017108:	1000048d 	sth	zero,18(r2)
			file_record->last_modified_date = 0;
 101710c:	e0bffc17 	ldw	r2,-16(fp)
 1017110:	1000050d 	sth	zero,20(r2)
			file_record->start_cluster_index = cluster_number;
 1017114:	e0bffa17 	ldw	r2,-24(fp)
 1017118:	1007883a 	mov	r3,r2
 101711c:	e0bffc17 	ldw	r2,-16(fp)
 1017120:	10c0058d 	sth	r3,22(r2)
			file_record->file_size_in_bytes = 0;
 1017124:	e0bffc17 	ldw	r2,-16(fp)
 1017128:	10000615 	stw	zero,24(r2)
			file_record->current_cluster_index = cluster_number;
 101712c:	e0fffa17 	ldw	r3,-24(fp)
 1017130:	e0bffc17 	ldw	r2,-16(fp)
 1017134:	10c00715 	stw	r3,28(r2)
			file_record->current_sector_in_cluster = 0;
 1017138:	e0bffc17 	ldw	r2,-16(fp)
 101713c:	10000815 	stw	zero,32(r2)
			file_record->current_byte_position = 0;
 1017140:	e0bffc17 	ldw	r2,-16(fp)
 1017144:	10000915 	stw	zero,36(r2)
			file_record->file_record_cluster = record_index & 0x0000ffff;
 1017148:	e0bff817 	ldw	r2,-32(fp)
 101714c:	10ffffcc 	andi	r3,r2,65535
 1017150:	e0bffc17 	ldw	r2,-16(fp)
 1017154:	10c00a15 	stw	r3,40(r2)
			file_record->file_record_sector_in_cluster = ((record_index >> 16)
 1017158:	e0bff817 	ldw	r2,-32(fp)
 101715c:	1005d43a 	srai	r2,r2,16
 1017160:	10bfffcc 	andi	r2,r2,65535
 1017164:	e0bfff15 	stw	r2,-4(fp)
 1017168:	e0ffff17 	ldw	r3,-4(fp)
 101716c:	1804403a 	cmpge	r2,r3,zero
 1017170:	1000031e 	bne	r2,zero,1017180 <create_file+0x17c>
 1017174:	e0bfff17 	ldw	r2,-4(fp)
 1017178:	108003c4 	addi	r2,r2,15
 101717c:	e0bfff15 	stw	r2,-4(fp)
 1017180:	e0ffff17 	ldw	r3,-4(fp)
 1017184:	1805d13a 	srai	r2,r3,4
 1017188:	1007883a 	mov	r3,r2
 101718c:	e0bffc17 	ldw	r2,-16(fp)
 1017190:	10c00b15 	stw	r3,44(r2)
					& 0x0000ffff) / 16;
			file_record->file_record_offset = (((record_index >> 16)
 1017194:	e0bff817 	ldw	r2,-32(fp)
 1017198:	1005d43a 	srai	r2,r2,16
 101719c:	108003cc 	andi	r2,r2,15
 10171a0:	1004917a 	slli	r2,r2,5
 10171a4:	1007883a 	mov	r3,r2
 10171a8:	e0bffc17 	ldw	r2,-16(fp)
 10171ac:	10c00c0d 	sth	r3,48(r2)
					& 0x0000ffff) % 16) * 32;
			file_record->home_directory_cluster = home_dir->start_cluster_index;
 10171b0:	e0bffd17 	ldw	r2,-12(fp)
 10171b4:	1080058b 	ldhu	r2,22(r2)
 10171b8:	10ffffcc 	andi	r3,r2,65535
 10171bc:	e0bffc17 	ldw	r2,-16(fp)
 10171c0:	10c00d15 	stw	r3,52(r2)
			file_record->in_use = true;
 10171c4:	e0fffc17 	ldw	r3,-16(fp)
 10171c8:	00800044 	movi	r2,1
 10171cc:	18800f15 	stw	r2,60(r3)
			file_record->modified = true;
 10171d0:	e0fffc17 	ldw	r3,-16(fp)
 10171d4:	00800044 	movi	r2,1
 10171d8:	18800e15 	stw	r2,56(r3)
			// Now write the record at the specified location.
			file_record_sector =
 10171dc:	e0bffc17 	ldw	r2,-16(fp)
 10171e0:	10800a17 	ldw	r2,40(r2)
 10171e4:	1004c03a 	cmpne	r2,r2,zero
 10171e8:	1000081e 	bne	r2,zero,101720c <create_file+0x208>
 10171ec:	008040b4 	movhi	r2,258
 10171f0:	108eef04 	addi	r2,r2,15292
 10171f4:	10c01317 	ldw	r3,76(r2)
 10171f8:	e0bffc17 	ldw	r2,-16(fp)
 10171fc:	10800b17 	ldw	r2,44(r2)
 1017200:	1887883a 	add	r3,r3,r2
 1017204:	e0fffe15 	stw	r3,-8(fp)
 1017208:	00001006 	br	101724c <create_file+0x248>
 101720c:	008040b4 	movhi	r2,258
 1017210:	108eef04 	addi	r2,r2,15292
 1017214:	11001417 	ldw	r4,80(r2)
 1017218:	e0bffc17 	ldw	r2,-16(fp)
 101721c:	10800a17 	ldw	r2,40(r2)
 1017220:	10ffff84 	addi	r3,r2,-2
 1017224:	008040b4 	movhi	r2,258
 1017228:	108eef04 	addi	r2,r2,15292
 101722c:	10800383 	ldbu	r2,14(r2)
 1017230:	10803fcc 	andi	r2,r2,255
 1017234:	1885383a 	mul	r2,r3,r2
 1017238:	2087883a 	add	r3,r4,r2
 101723c:	e0bffc17 	ldw	r2,-16(fp)
 1017240:	10800b17 	ldw	r2,44(r2)
 1017244:	1887883a 	add	r3,r3,r2
 1017248:	e0fffe15 	stw	r3,-8(fp)
 101724c:	e0bffe17 	ldw	r2,-8(fp)
 1017250:	e0bff715 	stw	r2,-36(fp)
							(boot_sector_data.data_sector_offset
									+ (file_record->file_record_cluster - 2)
											* boot_sector_data.sectors_per_cluster
									+ file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector,
 1017254:	e13ff717 	ldw	r4,-36(fp)
 1017258:	d167d617 	ldw	r5,-24744(gp)
 101725c:	10147dc0 	call	10147dc <Read_Sector_Data>
 1017260:	1005003a 	cmpeq	r2,r2,zero
 1017264:	1000161e 	bne	r2,zero,10172c0 <create_file+0x2bc>
					fat_partition_offset_in_512_byte_sectors)) {
				if (Write_File_Record_At_Offset(file_record->file_record_offset,
 1017268:	e0bffc17 	ldw	r2,-16(fp)
 101726c:	10800c0b 	ldhu	r2,48(r2)
 1017270:	113fffcc 	andi	r4,r2,65535
 1017274:	2120001c 	xori	r4,r4,32768
 1017278:	21200004 	addi	r4,r4,-32768
 101727c:	e17ffc17 	ldw	r5,-16(fp)
 1017280:	1014ea80 	call	1014ea8 <Write_File_Record_At_Offset>
 1017284:	1005003a 	cmpeq	r2,r2,zero
 1017288:	10000d1e 	bne	r2,zero,10172c0 <create_file+0x2bc>
						file_record)) {
					Save_Modified_Sector();
 101728c:	101478c0 	call	101478c <Save_Modified_Sector>
					// Mark the first cluster of the file as the last cluster at first.
					mark_cluster(cluster_number, ((short int) (0xffff)), true);
 1017290:	e13ffa17 	ldw	r4,-24(fp)
 1017294:	017fffc4 	movi	r5,-1
 1017298:	01800044 	movi	r6,1
 101729c:	10149900 	call	1014990 <mark_cluster>
					if (mark_cluster(cluster_number, ((short int) (0xffff)),
 10172a0:	e13ffa17 	ldw	r4,-24(fp)
 10172a4:	017fffc4 	movi	r5,-1
 10172a8:	000d883a 	mov	r6,zero
 10172ac:	10149900 	call	1014990 <mark_cluster>
 10172b0:	1005003a 	cmpeq	r2,r2,zero
 10172b4:	1000021e 	bne	r2,zero,10172c0 <create_file+0x2bc>
							false)) {
						result = true;
 10172b8:	00800044 	movi	r2,1
 10172bc:	e0bff915 	stw	r2,-28(fp)
				}
			}
		}

	}
	return result;
 10172c0:	e0bff917 	ldw	r2,-28(fp)
}
 10172c4:	e037883a 	mov	sp,fp
 10172c8:	dfc00117 	ldw	ra,4(sp)
 10172cc:	df000017 	ldw	fp,0(sp)
 10172d0:	dec00204 	addi	sp,sp,8
 10172d4:	f800283a 	ret

010172d8 <copy_file_record_name_to_string>:

void copy_file_record_name_to_string(t_file_record *file_record,
		char *file_name)
/* Copy a file name from the file record to a given string */
{
 10172d8:	defffb04 	addi	sp,sp,-20
 10172dc:	df000415 	stw	fp,16(sp)
 10172e0:	df000404 	addi	fp,sp,16
 10172e4:	e13ffe15 	stw	r4,-8(fp)
 10172e8:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
 10172ec:	e03ffc15 	stw	zero,-16(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
 10172f0:	e03ffd15 	stw	zero,-12(fp)
 10172f4:	00001606 	br	1017350 <copy_file_record_name_to_string+0x78>
		if (file_record->name[index] != ' ') {
 10172f8:	e0fffd17 	ldw	r3,-12(fp)
 10172fc:	e0bffe17 	ldw	r2,-8(fp)
 1017300:	10c5883a 	add	r2,r2,r3
 1017304:	10800003 	ldbu	r2,0(r2)
 1017308:	10803fcc 	andi	r2,r2,255
 101730c:	10800820 	cmpeqi	r2,r2,32
 1017310:	10000c1e 	bne	r2,zero,1017344 <copy_file_record_name_to_string+0x6c>
			file_name[flength] = file_record->name[index];
 1017314:	e0bffc17 	ldw	r2,-16(fp)
 1017318:	1007883a 	mov	r3,r2
 101731c:	e0bfff17 	ldw	r2,-4(fp)
 1017320:	1889883a 	add	r4,r3,r2
 1017324:	e0fffd17 	ldw	r3,-12(fp)
 1017328:	e0bffe17 	ldw	r2,-8(fp)
 101732c:	10c5883a 	add	r2,r2,r3
 1017330:	10800003 	ldbu	r2,0(r2)
 1017334:	20800005 	stb	r2,0(r4)
			flength = flength + 1;
 1017338:	e0bffc17 	ldw	r2,-16(fp)
 101733c:	10800044 	addi	r2,r2,1
 1017340:	e0bffc15 	stw	r2,-16(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
 1017344:	e0bffd17 	ldw	r2,-12(fp)
 1017348:	10800044 	addi	r2,r2,1
 101734c:	e0bffd15 	stw	r2,-12(fp)
 1017350:	e0bffd17 	ldw	r2,-12(fp)
 1017354:	10800210 	cmplti	r2,r2,8
 1017358:	103fe71e 	bne	r2,zero,10172f8 <copy_file_record_name_to_string+0x20>
		if (file_record->name[index] != ' ') {
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ') {
 101735c:	e0bffe17 	ldw	r2,-8(fp)
 1017360:	10800203 	ldbu	r2,8(r2)
 1017364:	10803fcc 	andi	r2,r2,255
 1017368:	10800820 	cmpeqi	r2,r2,32
 101736c:	1000261e 	bne	r2,zero,1017408 <copy_file_record_name_to_string+0x130>
		file_name[flength] = '.';
 1017370:	e0bffc17 	ldw	r2,-16(fp)
 1017374:	1007883a 	mov	r3,r2
 1017378:	e0bfff17 	ldw	r2,-4(fp)
 101737c:	1887883a 	add	r3,r3,r2
 1017380:	00800b84 	movi	r2,46
 1017384:	18800005 	stb	r2,0(r3)
		flength = flength + 1;
 1017388:	e0bffc17 	ldw	r2,-16(fp)
 101738c:	10800044 	addi	r2,r2,1
 1017390:	e0bffc15 	stw	r2,-16(fp)
		for (index = 0; index < 3; index++) {
 1017394:	e03ffd15 	stw	zero,-12(fp)
 1017398:	00001806 	br	10173fc <copy_file_record_name_to_string+0x124>
			if (file_record->extension[index] != ' ') {
 101739c:	e0fffd17 	ldw	r3,-12(fp)
 10173a0:	e0bffe17 	ldw	r2,-8(fp)
 10173a4:	1885883a 	add	r2,r3,r2
 10173a8:	10800204 	addi	r2,r2,8
 10173ac:	10800003 	ldbu	r2,0(r2)
 10173b0:	10803fcc 	andi	r2,r2,255
 10173b4:	10800820 	cmpeqi	r2,r2,32
 10173b8:	10000d1e 	bne	r2,zero,10173f0 <copy_file_record_name_to_string+0x118>
				file_name[flength] = file_record->extension[index];
 10173bc:	e0bffc17 	ldw	r2,-16(fp)
 10173c0:	1007883a 	mov	r3,r2
 10173c4:	e0bfff17 	ldw	r2,-4(fp)
 10173c8:	1889883a 	add	r4,r3,r2
 10173cc:	e0fffd17 	ldw	r3,-12(fp)
 10173d0:	e0bffe17 	ldw	r2,-8(fp)
 10173d4:	1885883a 	add	r2,r3,r2
 10173d8:	10800204 	addi	r2,r2,8
 10173dc:	10800003 	ldbu	r2,0(r2)
 10173e0:	20800005 	stb	r2,0(r4)
				flength = flength + 1;
 10173e4:	e0bffc17 	ldw	r2,-16(fp)
 10173e8:	10800044 	addi	r2,r2,1
 10173ec:	e0bffc15 	stw	r2,-16(fp)
		}
	}
	if (file_record->extension[0] != ' ') {
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++) {
 10173f0:	e0bffd17 	ldw	r2,-12(fp)
 10173f4:	10800044 	addi	r2,r2,1
 10173f8:	e0bffd15 	stw	r2,-12(fp)
 10173fc:	e0bffd17 	ldw	r2,-12(fp)
 1017400:	108000d0 	cmplti	r2,r2,3
 1017404:	103fe51e 	bne	r2,zero,101739c <copy_file_record_name_to_string+0xc4>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
 1017408:	e0bffc17 	ldw	r2,-16(fp)
 101740c:	1007883a 	mov	r3,r2
 1017410:	e0bfff17 	ldw	r2,-4(fp)
 1017414:	1885883a 	add	r2,r3,r2
 1017418:	10000005 	stb	zero,0(r2)
}
 101741c:	e037883a 	mov	sp,fp
 1017420:	df000017 	ldw	fp,0(sp)
 1017424:	dec00104 	addi	sp,sp,4
 1017428:	f800283a 	ret

0101742c <alt_up_sd_card_open_dev>:

///////////////////////////////////////////////////////////////////////////
// Direct functions
///////////////////////////////////////////////////////////////////////////

alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name) {
 101742c:	defffc04 	addi	sp,sp,-16
 1017430:	dfc00315 	stw	ra,12(sp)
 1017434:	df000215 	stw	fp,8(sp)
 1017438:	df000204 	addi	fp,sp,8
 101743c:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name,
			&alt_dev_list);
 1017440:	e13fff17 	ldw	r4,-4(fp)
 1017444:	014040b4 	movhi	r5,258
 1017448:	2946cb04 	addi	r5,r5,6956
 101744c:	101c6b00 	call	101c6b0 <alt_find_dev>
 1017450:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL) {
 1017454:	e0bffe17 	ldw	r2,-8(fp)
 1017458:	1005003a 	cmpeq	r2,r2,zero
 101745c:	10001e1e 	bne	r2,zero,10174d8 <alt_up_sd_card_open_dev+0xac>
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
 1017460:	e0bffe17 	ldw	r2,-8(fp)
 1017464:	10800a17 	ldw	r2,40(r2)
 1017468:	10808d04 	addi	r2,r2,564
 101746c:	d0a7d015 	stw	r2,-24768(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
 1017470:	e0bffe17 	ldw	r2,-8(fp)
 1017474:	10800a17 	ldw	r2,40(r2)
 1017478:	10808904 	addi	r2,r2,548
 101747c:	d0a7d115 	stw	r2,-24764(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
 1017480:	e0bffe17 	ldw	r2,-8(fp)
 1017484:	10800a17 	ldw	r2,40(r2)
 1017488:	10808404 	addi	r2,r2,528
 101748c:	d0a7d215 	stw	r2,-24760(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
 1017490:	e0bffe17 	ldw	r2,-8(fp)
 1017494:	10800a17 	ldw	r2,40(r2)
 1017498:	10808c04 	addi	r2,r2,560
 101749c:	d0a7d315 	stw	r2,-24756(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
 10174a0:	e0bffe17 	ldw	r2,-8(fp)
 10174a4:	10800a17 	ldw	r2,40(r2)
 10174a8:	10808b04 	addi	r2,r2,556
 10174ac:	d0a7d415 	stw	r2,-24752(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
 10174b0:	e0bffe17 	ldw	r2,-8(fp)
 10174b4:	10800a17 	ldw	r2,40(r2)
 10174b8:	d0a7d515 	stw	r2,-24748(gp)
		device_pointer = dev;
 10174bc:	e0bffe17 	ldw	r2,-8(fp)
 10174c0:	d0a7d815 	stw	r2,-24736(gp)
		initialized = false;
 10174c4:	d027ce15 	stw	zero,-24776(gp)
		is_sd_card_formated_as_FAT16 = false;
 10174c8:	d027cf15 	stw	zero,-24772(gp)
		search_data.valid = false;
 10174cc:	008040b4 	movhi	r2,258
 10174d0:	108eea04 	addi	r2,r2,15272
 10174d4:	10000415 	stw	zero,16(r2)
	}
	return dev;
 10174d8:	e0bffe17 	ldw	r2,-8(fp)
}
 10174dc:	e037883a 	mov	sp,fp
 10174e0:	dfc00117 	ldw	ra,4(sp)
 10174e4:	df000017 	ldw	fp,0(sp)
 10174e8:	dec00204 	addi	sp,sp,8
 10174ec:	f800283a 	ret

010174f0 <alt_up_sd_card_is_Present>:

bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
 10174f0:	defffd04 	addi	sp,sp,-12
 10174f4:	df000215 	stw	fp,8(sp)
 10174f8:	df000204 	addi	fp,sp,8
	bool result = false;
 10174fc:	e03fff15 	stw	zero,-4(fp)

	if ((device_pointer != NULL)
 1017500:	d0a7d817 	ldw	r2,-24736(gp)
 1017504:	1005003a 	cmpeq	r2,r2,zero
 1017508:	1000081e 	bne	r2,zero,101752c <alt_up_sd_card_is_Present+0x3c>
 101750c:	d0a7d017 	ldw	r2,-24768(gp)
 1017510:	1080002b 	ldhuio	r2,0(r2)
 1017514:	1080008c 	andi	r2,r2,2
 1017518:	1005003a 	cmpeq	r2,r2,zero
 101751c:	1000031e 	bne	r2,zero,101752c <alt_up_sd_card_is_Present+0x3c>
			&& ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0)) {
		result = true;
 1017520:	00800044 	movi	r2,1
 1017524:	e0bfff15 	stw	r2,-4(fp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
	bool result = false;

	if ((device_pointer != NULL)
 1017528:	00001e06 	br	10175a4 <alt_up_sd_card_is_Present+0xb4>
			&& ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0)) {
		result = true;
	} else if (initialized == true) {
 101752c:	d0a7ce17 	ldw	r2,-24776(gp)
 1017530:	10800058 	cmpnei	r2,r2,1
 1017534:	10001b1e 	bne	r2,zero,10175a4 <alt_up_sd_card_is_Present+0xb4>
		int index;

		initialized = false;
 1017538:	d027ce15 	stw	zero,-24776(gp)
		search_data.valid = false;
 101753c:	008040b4 	movhi	r2,258
 1017540:	108eea04 	addi	r2,r2,15272
 1017544:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
 1017548:	d027cf15 	stw	zero,-24772(gp)

		for (index = 0; index < MAX_FILES_OPENED; index++) {
 101754c:	e03ffe15 	stw	zero,-8(fp)
 1017550:	00001106 	br	1017598 <alt_up_sd_card_is_Present+0xa8>
			active_files[index].in_use = false;
 1017554:	e0bffe17 	ldw	r2,-8(fp)
 1017558:	00c040b4 	movhi	r3,258
 101755c:	18cf0404 	addi	r3,r3,15376
 1017560:	100491ba 	slli	r2,r2,6
 1017564:	10c5883a 	add	r2,r2,r3
 1017568:	10800f04 	addi	r2,r2,60
 101756c:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
 1017570:	e0bffe17 	ldw	r2,-8(fp)
 1017574:	00c040b4 	movhi	r3,258
 1017578:	18cf0404 	addi	r3,r3,15376
 101757c:	100491ba 	slli	r2,r2,6
 1017580:	10c5883a 	add	r2,r2,r3
 1017584:	10800e04 	addi	r2,r2,56
 1017588:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for (index = 0; index < MAX_FILES_OPENED; index++) {
 101758c:	e0bffe17 	ldw	r2,-8(fp)
 1017590:	10800044 	addi	r2,r2,1
 1017594:	e0bffe15 	stw	r2,-8(fp)
 1017598:	e0bffe17 	ldw	r2,-8(fp)
 101759c:	10800510 	cmplti	r2,r2,20
 10175a0:	103fec1e 	bne	r2,zero,1017554 <alt_up_sd_card_is_Present+0x64>
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
	return result;
 10175a4:	e0bfff17 	ldw	r2,-4(fp)
}
 10175a8:	e037883a 	mov	sp,fp
 10175ac:	df000017 	ldw	fp,0(sp)
 10175b0:	dec00104 	addi	sp,sp,4
 10175b4:	f800283a 	ret

010175b8 <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
 10175b8:	defffd04 	addi	sp,sp,-12
 10175bc:	dfc00215 	stw	ra,8(sp)
 10175c0:	df000115 	stw	fp,4(sp)
 10175c4:	df000104 	addi	fp,sp,4
	bool result = false;
 10175c8:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present()) {
 10175cc:	10174f00 	call	10174f0 <alt_up_sd_card_is_Present>
 10175d0:	1005003a 	cmpeq	r2,r2,zero
 10175d4:	10000d1e 	bne	r2,zero,101760c <alt_up_sd_card_is_FAT16+0x54>
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false) {
 10175d8:	d0a7ce17 	ldw	r2,-24776(gp)
 10175dc:	1004c03a 	cmpne	r2,r2,zero
 10175e0:	1000071e 	bne	r2,zero,1017600 <alt_up_sd_card_is_FAT16+0x48>
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
 10175e4:	10157a80 	call	10157a8 <Look_for_FAT16>
 10175e8:	d0a7cf15 	stw	r2,-24772(gp)
			initialized = is_sd_card_formated_as_FAT16;
 10175ec:	d0a7cf17 	ldw	r2,-24772(gp)
 10175f0:	d0a7ce15 	stw	r2,-24776(gp)
			search_data.valid = false;
 10175f4:	008040b4 	movhi	r2,258
 10175f8:	108eea04 	addi	r2,r2,15272
 10175fc:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
 1017600:	d0a7cf17 	ldw	r2,-24772(gp)
 1017604:	e0bfff15 	stw	r2,-4(fp)
 1017608:	00000206 	br	1017614 <alt_up_sd_card_is_FAT16+0x5c>
	} else {
		// If not then you may as well not open the device.
		initialized = false;
 101760c:	d027ce15 	stw	zero,-24776(gp)
		is_sd_card_formated_as_FAT16 = false;
 1017610:	d027cf15 	stw	zero,-24772(gp)
	}

	return result;
 1017614:	e0bfff17 	ldw	r2,-4(fp)
}
 1017618:	e037883a 	mov	sp,fp
 101761c:	dfc00117 	ldw	ra,4(sp)
 1017620:	df000017 	ldw	fp,0(sp)
 1017624:	dec00204 	addi	sp,sp,8
 1017628:	f800283a 	ret

0101762c <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
 101762c:	deffea04 	addi	sp,sp,-88
 1017630:	dfc01515 	stw	ra,84(sp)
 1017634:	df001415 	stw	fp,80(sp)
 1017638:	df001404 	addi	fp,sp,80
 101763c:	e13ffe15 	stw	r4,-8(fp)
 1017640:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
 1017644:	00800084 	movi	r2,2
 1017648:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
 101764c:	10174f00 	call	10174f0 <alt_up_sd_card_is_Present>
 1017650:	1005003a 	cmpeq	r2,r2,zero
 1017654:	1000241e 	bne	r2,zero,10176e8 <alt_up_sd_card_find_first+0xbc>
 1017658:	d0a7cf17 	ldw	r2,-24772(gp)
 101765c:	1005003a 	cmpeq	r2,r2,zero
 1017660:	1000211e 	bne	r2,zero,10176e8 <alt_up_sd_card_find_first+0xbc>
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through,
 1017664:	e17fed04 	addi	r5,fp,-76
 1017668:	e1bfee04 	addi	r6,fp,-72
 101766c:	e13ffe17 	ldw	r4,-8(fp)
 1017670:	1015fb80 	call	1015fb8 <get_home_directory_cluster_for_file>
 1017674:	1005003a 	cmpeq	r2,r2,zero
 1017678:	1000191e 	bne	r2,zero,10176e0 <alt_up_sd_card_find_first+0xb4>
				&home_directory_cluster, &file_record)) {
			search_data.directory_root_cluster = home_directory_cluster;
 101767c:	e0bfed17 	ldw	r2,-76(fp)
 1017680:	1007883a 	mov	r3,r2
 1017684:	008040b4 	movhi	r2,258
 1017688:	108eea04 	addi	r2,r2,15272
 101768c:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
 1017690:	e0bfed17 	ldw	r2,-76(fp)
 1017694:	1007883a 	mov	r3,r2
 1017698:	008040b4 	movhi	r2,258
 101769c:	108eea04 	addi	r2,r2,15272
 10176a0:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
 10176a4:	008040b4 	movhi	r2,258
 10176a8:	108eea04 	addi	r2,r2,15272
 10176ac:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
 10176b0:	00c040b4 	movhi	r3,258
 10176b4:	18ceea04 	addi	r3,r3,15272
 10176b8:	00bfffc4 	movi	r2,-1
 10176bc:	1880030d 	sth	r2,12(r3)
			search_data.valid = true;
 10176c0:	00c040b4 	movhi	r3,258
 10176c4:	18ceea04 	addi	r3,r3,15272
 10176c8:	00800044 	movi	r2,1
 10176cc:	18800415 	stw	r2,16(r3)
			result = alt_up_sd_card_find_next(file_name);
 10176d0:	e13fff17 	ldw	r4,-4(fp)
 10176d4:	10177000 	call	1017700 <alt_up_sd_card_find_next>
 10176d8:	e0bfec0d 	sth	r2,-80(fp)
 10176dc:	00000206 	br	10176e8 <alt_up_sd_card_find_first+0xbc>
		} else {
			result = 1;
 10176e0:	00800044 	movi	r2,1
 10176e4:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
 10176e8:	e0bfec0f 	ldh	r2,-80(fp)
}
 10176ec:	e037883a 	mov	sp,fp
 10176f0:	dfc00117 	ldw	ra,4(sp)
 10176f4:	df000017 	ldw	fp,0(sp)
 10176f8:	dec00204 	addi	sp,sp,8
 10176fc:	f800283a 	ret

01017700 <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
 1017700:	deffe404 	addi	sp,sp,-112
 1017704:	dfc01b15 	stw	ra,108(sp)
 1017708:	df001a15 	stw	fp,104(sp)
 101770c:	df001a04 	addi	fp,sp,104
 1017710:	e13ffe15 	stw	r4,-8(fp)
	short int result = 2;
 1017714:	00800084 	movi	r2,2
 1017718:	e0bfed0d 	sth	r2,-76(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
 101771c:	10174f00 	call	10174f0 <alt_up_sd_card_is_Present>
 1017720:	1005003a 	cmpeq	r2,r2,zero
 1017724:	1000da1e 	bne	r2,zero,1017a90 <alt_up_sd_card_find_next+0x390>
 1017728:	d0a7cf17 	ldw	r2,-24772(gp)
 101772c:	1005003a 	cmpeq	r2,r2,zero
 1017730:	1000d71e 	bne	r2,zero,1017a90 <alt_up_sd_card_find_next+0x390>
		if (search_data.valid) {
 1017734:	008040b4 	movhi	r2,258
 1017738:	108eea04 	addi	r2,r2,15272
 101773c:	10800417 	ldw	r2,16(r2)
 1017740:	1005003a 	cmpeq	r2,r2,zero
 1017744:	1000d01e 	bne	r2,zero,1017a88 <alt_up_sd_card_find_next+0x388>
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
 1017748:	008040b4 	movhi	r2,258
 101774c:	108eea04 	addi	r2,r2,15272
 1017750:	10800117 	ldw	r2,4(r2)
 1017754:	e0bfec15 	stw	r2,-80(fp)

			if (cluster == 0) {
 1017758:	e0bfec17 	ldw	r2,-80(fp)
 101775c:	1004c03a 	cmpne	r2,r2,zero
 1017760:	1000511e 	bne	r2,zero,10178a8 <alt_up_sd_card_find_next+0x1a8>
				// Searching through the root directory
				int max_root_dir_sectors = ((32
						* boot_sector_data.max_number_of_dir_entires)
						/ boot_sector_data.sector_size_in_bytes);
 1017764:	008040b4 	movhi	r2,258
 1017768:	108eef04 	addi	r2,r2,15292
 101776c:	1080050b 	ldhu	r2,20(r2)
 1017770:	10bfffcc 	andi	r2,r2,65535
 1017774:	1008917a 	slli	r4,r2,5
 1017778:	008040b4 	movhi	r2,258
 101777c:	108eef04 	addi	r2,r2,15292
 1017780:	1080030b 	ldhu	r2,12(r2)
 1017784:	117fffcc 	andi	r5,r2,65535
 1017788:	10056b00 	call	10056b0 <__divsi3>
 101778c:	e0bfeb15 	stw	r2,-84(fp)
				int sector_index = search_data.current_sector_in_cluster;
 1017790:	008040b4 	movhi	r2,258
 1017794:	108eea04 	addi	r2,r2,15272
 1017798:	10800217 	ldw	r2,8(r2)
 101779c:	e0bfea15 	stw	r2,-88(fp)
				int file_counter = search_data.file_index_in_sector + 1;
 10177a0:	008040b4 	movhi	r2,258
 10177a4:	108eea04 	addi	r2,r2,15272
 10177a8:	1080030b 	ldhu	r2,12(r2)
 10177ac:	10bfffcc 	andi	r2,r2,65535
 10177b0:	10a0001c 	xori	r2,r2,32768
 10177b4:	10a00004 	addi	r2,r2,-32768
 10177b8:	10800044 	addi	r2,r2,1
 10177bc:	e0bfe915 	stw	r2,-92(fp)

				for (; sector_index < max_root_dir_sectors; sector_index++) {
 10177c0:	00003306 	br	1017890 <alt_up_sd_card_find_next+0x190>
					if (Read_Sector_Data(
 10177c4:	008040b4 	movhi	r2,258
 10177c8:	108eef04 	addi	r2,r2,15292
 10177cc:	10c01317 	ldw	r3,76(r2)
 10177d0:	e0bfea17 	ldw	r2,-88(fp)
 10177d4:	1885883a 	add	r2,r3,r2
 10177d8:	1009883a 	mov	r4,r2
 10177dc:	d167d617 	ldw	r5,-24744(gp)
 10177e0:	10147dc0 	call	10147dc <Read_Sector_Data>
 10177e4:	1005003a 	cmpeq	r2,r2,zero
 10177e8:	10002c1e 	bne	r2,zero,101789c <alt_up_sd_card_find_next+0x19c>
							sector_index
									+ boot_sector_data.root_directory_sector_offset,
							fat_partition_offset_in_512_byte_sectors)) {
						for (; file_counter < 16; file_counter++) {
 10177ec:	00002106 	br	1017874 <alt_up_sd_card_find_next+0x174>
							if (Read_File_Record_At_Offset(file_counter * 32,
 10177f0:	e0bfe917 	ldw	r2,-92(fp)
 10177f4:	1008917a 	slli	r4,r2,5
 10177f8:	e1ffea17 	ldw	r7,-88(fp)
 10177fc:	e17fee04 	addi	r5,fp,-72
 1017800:	000d883a 	mov	r6,zero
 1017804:	1014c240 	call	1014c24 <Read_File_Record_At_Offset>
 1017808:	1005003a 	cmpeq	r2,r2,zero
 101780c:	1000161e 	bne	r2,zero,1017868 <alt_up_sd_card_find_next+0x168>
									&file_record, 0, sector_index)) {
								if ((file_record.name[0] != 0)
 1017810:	e0bfee03 	ldbu	r2,-72(fp)
 1017814:	10803fcc 	andi	r2,r2,255
 1017818:	1005003a 	cmpeq	r2,r2,zero
 101781c:	1000121e 	bne	r2,zero,1017868 <alt_up_sd_card_find_next+0x168>
 1017820:	e0bfee03 	ldbu	r2,-72(fp)
 1017824:	10803fcc 	andi	r2,r2,255
 1017828:	10803960 	cmpeqi	r2,r2,229
 101782c:	10000e1e 	bne	r2,zero,1017868 <alt_up_sd_card_find_next+0x168>
										&& (file_record.name[0] != 0xe5)) {
									/* Update search structure. */
									search_data.file_index_in_sector =
 1017830:	e0bfe917 	ldw	r2,-92(fp)
 1017834:	1007883a 	mov	r3,r2
 1017838:	008040b4 	movhi	r2,258
 101783c:	108eea04 	addi	r2,r2,15272
 1017840:	10c0030d 	sth	r3,12(r2)
											file_counter;
									search_data.current_sector_in_cluster =
 1017844:	e0ffea17 	ldw	r3,-88(fp)
 1017848:	008040b4 	movhi	r2,258
 101784c:	108eea04 	addi	r2,r2,15272
 1017850:	10c00215 	stw	r3,8(r2)
											sector_index;

									/* Copy file name.*/
									copy_file_record_name_to_string(
 1017854:	e13fee04 	addi	r4,fp,-72
 1017858:	e17ffe17 	ldw	r5,-8(fp)
 101785c:	10172d80 	call	10172d8 <copy_file_record_name_to_string>
											&file_record, file_name);
									return 0;
 1017860:	e03fff15 	stw	zero,-4(fp)
 1017864:	00008c06 	br	1017a98 <alt_up_sd_card_find_next+0x398>
				for (; sector_index < max_root_dir_sectors; sector_index++) {
					if (Read_Sector_Data(
							sector_index
									+ boot_sector_data.root_directory_sector_offset,
							fat_partition_offset_in_512_byte_sectors)) {
						for (; file_counter < 16; file_counter++) {
 1017868:	e0bfe917 	ldw	r2,-92(fp)
 101786c:	10800044 	addi	r2,r2,1
 1017870:	e0bfe915 	stw	r2,-92(fp)
 1017874:	e0bfe917 	ldw	r2,-92(fp)
 1017878:	10800410 	cmplti	r2,r2,16
 101787c:	103fdc1e 	bne	r2,zero,10177f0 <alt_up_sd_card_find_next+0xf0>
											&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
 1017880:	e03fe915 	stw	zero,-92(fp)
						* boot_sector_data.max_number_of_dir_entires)
						/ boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector + 1;

				for (; sector_index < max_root_dir_sectors; sector_index++) {
 1017884:	e0bfea17 	ldw	r2,-88(fp)
 1017888:	10800044 	addi	r2,r2,1
 101788c:	e0bfea15 	stw	r2,-88(fp)
 1017890:	e0ffea17 	ldw	r3,-88(fp)
 1017894:	e0bfeb17 	ldw	r2,-84(fp)
 1017898:	18bfca16 	blt	r3,r2,10177c4 <alt_up_sd_card_find_next+0xc4>
						file_counter = 0;
					} else {
						break;
					}
				}
				result = -1;
 101789c:	00bfffc4 	movi	r2,-1
 10178a0:	e0bfed0d 	sth	r2,-76(fp)
 10178a4:	00007a06 	br	1017a90 <alt_up_sd_card_find_next+0x390>
			} else {
				int file_counter = search_data.file_index_in_sector + 1;
 10178a8:	008040b4 	movhi	r2,258
 10178ac:	108eea04 	addi	r2,r2,15272
 10178b0:	1080030b 	ldhu	r2,12(r2)
 10178b4:	10bfffcc 	andi	r2,r2,65535
 10178b8:	10a0001c 	xori	r2,r2,32768
 10178bc:	10a00004 	addi	r2,r2,-32768
 10178c0:	10800044 	addi	r2,r2,1
 10178c4:	e0bfe815 	stw	r2,-96(fp)
				do {
					int start_sector = (cluster - 2)
							* (boot_sector_data.sectors_per_cluster)
							+ boot_sector_data.data_sector_offset;
 10178c8:	e0bfec17 	ldw	r2,-80(fp)
 10178cc:	10ffff84 	addi	r3,r2,-2
 10178d0:	008040b4 	movhi	r2,258
 10178d4:	108eef04 	addi	r2,r2,15292
 10178d8:	10800383 	ldbu	r2,14(r2)
 10178dc:	10803fcc 	andi	r2,r2,255
 10178e0:	1885383a 	mul	r2,r3,r2
 10178e4:	1007883a 	mov	r3,r2
 10178e8:	008040b4 	movhi	r2,258
 10178ec:	108eef04 	addi	r2,r2,15292
 10178f0:	10801417 	ldw	r2,80(r2)
 10178f4:	1885883a 	add	r2,r3,r2
 10178f8:	e0bfe715 	stw	r2,-100(fp)
					int sector_index = search_data.current_sector_in_cluster;
 10178fc:	008040b4 	movhi	r2,258
 1017900:	108eea04 	addi	r2,r2,15272
 1017904:	10800217 	ldw	r2,8(r2)
 1017908:	e0bfe615 	stw	r2,-104(fp)

					for (; sector_index < boot_sector_data.sectors_per_cluster;
 101790c:	00003406 	br	10179e0 <alt_up_sd_card_find_next+0x2e0>
							sector_index++) {
						if (Read_Sector_Data(sector_index + start_sector,
 1017910:	e0ffe617 	ldw	r3,-104(fp)
 1017914:	e0bfe717 	ldw	r2,-100(fp)
 1017918:	1889883a 	add	r4,r3,r2
 101791c:	d167d617 	ldw	r5,-24744(gp)
 1017920:	10147dc0 	call	10147dc <Read_Sector_Data>
 1017924:	1005003a 	cmpeq	r2,r2,zero
 1017928:	1000331e 	bne	r2,zero,10179f8 <alt_up_sd_card_find_next+0x2f8>
								fat_partition_offset_in_512_byte_sectors)) {
							for (; file_counter < 16; file_counter++) {
 101792c:	00002506 	br	10179c4 <alt_up_sd_card_find_next+0x2c4>
								if (Read_File_Record_At_Offset(
 1017930:	e0bfe817 	ldw	r2,-96(fp)
 1017934:	1008917a 	slli	r4,r2,5
 1017938:	e1bfec17 	ldw	r6,-80(fp)
 101793c:	e1ffe617 	ldw	r7,-104(fp)
 1017940:	e17fee04 	addi	r5,fp,-72
 1017944:	1014c240 	call	1014c24 <Read_File_Record_At_Offset>
 1017948:	1005003a 	cmpeq	r2,r2,zero
 101794c:	10001a1e 	bne	r2,zero,10179b8 <alt_up_sd_card_find_next+0x2b8>
										file_counter * 32, &file_record,
										cluster, sector_index)) {
									if ((file_record.name[0] != 0)
 1017950:	e0bfee03 	ldbu	r2,-72(fp)
 1017954:	10803fcc 	andi	r2,r2,255
 1017958:	1005003a 	cmpeq	r2,r2,zero
 101795c:	1000161e 	bne	r2,zero,10179b8 <alt_up_sd_card_find_next+0x2b8>
 1017960:	e0bfee03 	ldbu	r2,-72(fp)
 1017964:	10803fcc 	andi	r2,r2,255
 1017968:	10803960 	cmpeqi	r2,r2,229
 101796c:	1000121e 	bne	r2,zero,10179b8 <alt_up_sd_card_find_next+0x2b8>
											&& (file_record.name[0] != 0xe5)) {
										/* Update search structure. */
										search_data.current_cluster_index =
 1017970:	e0ffec17 	ldw	r3,-80(fp)
 1017974:	008040b4 	movhi	r2,258
 1017978:	108eea04 	addi	r2,r2,15272
 101797c:	10c00115 	stw	r3,4(r2)
												cluster;
										search_data.file_index_in_sector =
 1017980:	e0bfe817 	ldw	r2,-96(fp)
 1017984:	1007883a 	mov	r3,r2
 1017988:	008040b4 	movhi	r2,258
 101798c:	108eea04 	addi	r2,r2,15272
 1017990:	10c0030d 	sth	r3,12(r2)
												file_counter;
										search_data.current_sector_in_cluster =
 1017994:	e0ffe617 	ldw	r3,-104(fp)
 1017998:	008040b4 	movhi	r2,258
 101799c:	108eea04 	addi	r2,r2,15272
 10179a0:	10c00215 	stw	r3,8(r2)
												sector_index;

										/* Copy file name.*/
										copy_file_record_name_to_string(
 10179a4:	e13fee04 	addi	r4,fp,-72
 10179a8:	e17ffe17 	ldw	r5,-8(fp)
 10179ac:	10172d80 	call	10172d8 <copy_file_record_name_to_string>
												&file_record, file_name);
										return 0;
 10179b0:	e03fff15 	stw	zero,-4(fp)
 10179b4:	00003806 	br	1017a98 <alt_up_sd_card_find_next+0x398>

					for (; sector_index < boot_sector_data.sectors_per_cluster;
							sector_index++) {
						if (Read_Sector_Data(sector_index + start_sector,
								fat_partition_offset_in_512_byte_sectors)) {
							for (; file_counter < 16; file_counter++) {
 10179b8:	e0bfe817 	ldw	r2,-96(fp)
 10179bc:	10800044 	addi	r2,r2,1
 10179c0:	e0bfe815 	stw	r2,-96(fp)
 10179c4:	e0bfe817 	ldw	r2,-96(fp)
 10179c8:	10800410 	cmplti	r2,r2,16
 10179cc:	103fd81e 	bne	r2,zero,1017930 <alt_up_sd_card_find_next+0x230>
												&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
 10179d0:	e03fe815 	stw	zero,-96(fp)
							* (boot_sector_data.sectors_per_cluster)
							+ boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;

					for (; sector_index < boot_sector_data.sectors_per_cluster;
							sector_index++) {
 10179d4:	e0bfe617 	ldw	r2,-104(fp)
 10179d8:	10800044 	addi	r2,r2,1
 10179dc:	e0bfe615 	stw	r2,-104(fp)
					int start_sector = (cluster - 2)
							* (boot_sector_data.sectors_per_cluster)
							+ boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;

					for (; sector_index < boot_sector_data.sectors_per_cluster;
 10179e0:	008040b4 	movhi	r2,258
 10179e4:	108eef04 	addi	r2,r2,15292
 10179e8:	10800383 	ldbu	r2,14(r2)
 10179ec:	10c03fcc 	andi	r3,r2,255
 10179f0:	e0bfe617 	ldw	r2,-104(fp)
 10179f4:	10ffc616 	blt	r2,r3,1017910 <alt_up_sd_card_find_next+0x210>
							break;
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster) {
 10179f8:	008040b4 	movhi	r2,258
 10179fc:	108eef04 	addi	r2,r2,15292
 1017a00:	10800383 	ldbu	r2,14(r2)
 1017a04:	10c03fcc 	andi	r3,r2,255
 1017a08:	e0bfe617 	ldw	r2,-104(fp)
 1017a0c:	10c01a16 	blt	r2,r3,1017a78 <alt_up_sd_card_find_next+0x378>
						short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster)) {
 1017a10:	e13fec17 	ldw	r4,-80(fp)
 1017a14:	e17fed84 	addi	r5,fp,-74
 1017a18:	10148d80 	call	10148d8 <get_cluster_flag>
 1017a1c:	1005003a 	cmpeq	r2,r2,zero
 1017a20:	1000131e 	bne	r2,zero,1017a70 <alt_up_sd_card_find_next+0x370>
							if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
 1017a24:	e0bfed8b 	ldhu	r2,-74(fp)
 1017a28:	10bfffcc 	andi	r2,r2,65535
 1017a2c:	10a0001c 	xori	r2,r2,32768
 1017a30:	10a00004 	addi	r2,r2,-32768
 1017a34:	10fffe0c 	andi	r3,r2,65528
 1017a38:	00bffe14 	movui	r2,65528
 1017a3c:	1880051e 	bne	r3,r2,1017a54 <alt_up_sd_card_find_next+0x354>
								result = -1;
 1017a40:	00bfffc4 	movi	r2,-1
 1017a44:	e0bfed0d 	sth	r2,-76(fp)
								search_data.valid = false;
 1017a48:	008040b4 	movhi	r2,258
 1017a4c:	108eea04 	addi	r2,r2,15272
 1017a50:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
 1017a54:	e0bfed8b 	ldhu	r2,-74(fp)
 1017a58:	10bfffcc 	andi	r2,r2,65535
 1017a5c:	10a0001c 	xori	r2,r2,32768
 1017a60:	10a00004 	addi	r2,r2,-32768
 1017a64:	10bffe0c 	andi	r2,r2,65528
 1017a68:	e0bfec15 	stw	r2,-80(fp)
 1017a6c:	00000206 	br	1017a78 <alt_up_sd_card_find_next+0x378>
						} else {
							// Error encountered.                 
							result = -1;
 1017a70:	00bfffc4 	movi	r2,-1
 1017a74:	e0bfed0d 	sth	r2,-76(fp)
						}
					}
				} while (cluster < 0x0000fff8);
 1017a78:	e0ffec17 	ldw	r3,-80(fp)
 1017a7c:	00bffdd4 	movui	r2,65527
 1017a80:	10ff910e 	bge	r2,r3,10178c8 <alt_up_sd_card_find_next+0x1c8>
 1017a84:	00000206 	br	1017a90 <alt_up_sd_card_find_next+0x390>
			}
		} else {
			// Call Find_First first.
			result = 3;
 1017a88:	008000c4 	movi	r2,3
 1017a8c:	e0bfed0d 	sth	r2,-76(fp)
		}
	}
	return result;
 1017a90:	e0bfed0f 	ldh	r2,-76(fp)
 1017a94:	e0bfff15 	stw	r2,-4(fp)
 1017a98:	e0bfff17 	ldw	r2,-4(fp)
}
 1017a9c:	e037883a 	mov	sp,fp
 1017aa0:	dfc00117 	ldw	ra,4(sp)
 1017aa4:	df000017 	ldw	fp,0(sp)
 1017aa8:	dec00204 	addi	sp,sp,8
 1017aac:	f800283a 	ret

01017ab0 <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
 1017ab0:	deffe804 	addi	sp,sp,-96
 1017ab4:	dfc01715 	stw	ra,92(sp)
 1017ab8:	df001615 	stw	fp,88(sp)
 1017abc:	df001604 	addi	fp,sp,88
 1017ac0:	e13ffd15 	stw	r4,-12(fp)
 1017ac4:	e17ffe15 	stw	r5,-8(fp)
	short int file_record_index = -1;
 1017ac8:	00bfffc4 	movi	r2,-1
 1017acc:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
 1017ad0:	10174f00 	call	10174f0 <alt_up_sd_card_is_Present>
 1017ad4:	1005003a 	cmpeq	r2,r2,zero
 1017ad8:	1000d71e 	bne	r2,zero,1017e38 <alt_up_sd_card_fopen+0x388>
 1017adc:	d0a7cf17 	ldw	r2,-24772(gp)
 1017ae0:	1005003a 	cmpeq	r2,r2,zero
 1017ae4:	1000d41e 	bne	r2,zero,1017e38 <alt_up_sd_card_fopen+0x388>
		unsigned int home_directory_cluster = 0;
 1017ae8:	e03fec15 	stw	zero,-80(fp)
		 * Rules:
		 *  - no spaces
		 *  - at most 12 chatacters per name, with a period in 9th position.
		 *  - a / or a \ every at most 12 characters.
		 */
		filename_to_upper_case(name);
 1017aec:	e13ffd17 	ldw	r4,-12(fp)
 1017af0:	10158ac0 	call	10158ac <filename_to_upper_case>
		if (check_file_name_for_FAT16_compliance(name)) {
 1017af4:	e13ffd17 	ldw	r4,-12(fp)
 1017af8:	101597c0 	call	101597c <check_file_name_for_FAT16_compliance>
 1017afc:	1005003a 	cmpeq	r2,r2,zero
 1017b00:	1000cd1e 	bne	r2,zero,1017e38 <alt_up_sd_card_fopen+0x388>
			int index;

			/* Get home directory cluster location for the specified file. 0 means root directory. */
			if (!get_home_directory_cluster_for_file(name,
 1017b04:	e17fec04 	addi	r5,fp,-80
 1017b08:	e1bfed04 	addi	r6,fp,-76
 1017b0c:	e13ffd17 	ldw	r4,-12(fp)
 1017b10:	1015fb80 	call	1015fb8 <get_home_directory_cluster_for_file>
 1017b14:	1004c03a 	cmpne	r2,r2,zero
 1017b18:	1000031e 	bne	r2,zero,1017b28 <alt_up_sd_card_fopen+0x78>
					&home_directory_cluster, &home_dir)) {
				return file_record_index;
 1017b1c:	e0bfeb0f 	ldh	r2,-84(fp)
 1017b20:	e0bfff15 	stw	r2,-4(fp)
 1017b24:	0000c606 	br	1017e40 <alt_up_sd_card_fopen+0x390>
			}

			/* Find a free file slot to store file specs in. */
			for (index = 0; index < MAX_FILES_OPENED; index++) {
 1017b28:	e03fea15 	stw	zero,-88(fp)
 1017b2c:	00000f06 	br	1017b6c <alt_up_sd_card_fopen+0xbc>
				if (active_files[index].in_use == false) {
 1017b30:	e0bfea17 	ldw	r2,-88(fp)
 1017b34:	00c040b4 	movhi	r3,258
 1017b38:	18cf0404 	addi	r3,r3,15376
 1017b3c:	100491ba 	slli	r2,r2,6
 1017b40:	10c5883a 	add	r2,r2,r3
 1017b44:	10800f04 	addi	r2,r2,60
 1017b48:	10800017 	ldw	r2,0(r2)
 1017b4c:	1004c03a 	cmpne	r2,r2,zero
 1017b50:	1000031e 	bne	r2,zero,1017b60 <alt_up_sd_card_fopen+0xb0>
					file_record_index = index;
 1017b54:	e0bfea17 	ldw	r2,-88(fp)
 1017b58:	e0bfeb0d 	sth	r2,-84(fp)
					break;
 1017b5c:	00000606 	br	1017b78 <alt_up_sd_card_fopen+0xc8>
					&home_directory_cluster, &home_dir)) {
				return file_record_index;
			}

			/* Find a free file slot to store file specs in. */
			for (index = 0; index < MAX_FILES_OPENED; index++) {
 1017b60:	e0bfea17 	ldw	r2,-88(fp)
 1017b64:	10800044 	addi	r2,r2,1
 1017b68:	e0bfea15 	stw	r2,-88(fp)
 1017b6c:	e0bfea17 	ldw	r2,-88(fp)
 1017b70:	10800510 	cmplti	r2,r2,20
 1017b74:	103fee1e 	bne	r2,zero,1017b30 <alt_up_sd_card_fopen+0x80>
				if (active_files[index].in_use == false) {
					file_record_index = index;
					break;
				}
			}
			if (file_record_index >= 0) {
 1017b78:	e0bfeb0f 	ldh	r2,-84(fp)
 1017b7c:	1004803a 	cmplt	r2,r2,zero
 1017b80:	1000ad1e 	bne	r2,zero,1017e38 <alt_up_sd_card_fopen+0x388>
				/* If file record is found, then look for the specified file. If the create flag is set to true
				 * and the file is not found, then it should be created in the current directory.
				 */

				if (find_file_in_directory(home_directory_cluster, name,
 1017b84:	e0bfec17 	ldw	r2,-80(fp)
 1017b88:	1009883a 	mov	r4,r2
 1017b8c:	e0bfeb0f 	ldh	r2,-84(fp)
 1017b90:	100491ba 	slli	r2,r2,6
 1017b94:	1007883a 	mov	r3,r2
 1017b98:	008040b4 	movhi	r2,258
 1017b9c:	108f0404 	addi	r2,r2,15376
 1017ba0:	188d883a 	add	r6,r3,r2
 1017ba4:	e17ffd17 	ldw	r5,-12(fp)
 1017ba8:	10164cc0 	call	10164cc <find_file_in_directory>
 1017bac:	1005003a 	cmpeq	r2,r2,zero
 1017bb0:	10007d1e 	bne	r2,zero,1017da8 <alt_up_sd_card_fopen+0x2f8>
						&(active_files[file_record_index]))) {
					if (create) {
 1017bb4:	e0bffe17 	ldw	r2,-8(fp)
 1017bb8:	1005003a 	cmpeq	r2,r2,zero
 1017bbc:	1000031e 	bne	r2,zero,1017bcc <alt_up_sd_card_fopen+0x11c>
						/* Do not allow overwriting existing files for now. */
						return -1;
 1017bc0:	00bfffc4 	movi	r2,-1
 1017bc4:	e0bfff15 	stw	r2,-4(fp)
 1017bc8:	00009d06 	br	1017e40 <alt_up_sd_card_fopen+0x390>
					}
					active_files[file_record_index].current_cluster_index =
 1017bcc:	e17feb0f 	ldh	r5,-84(fp)
 1017bd0:	e0bfeb0f 	ldh	r2,-84(fp)
 1017bd4:	00c040b4 	movhi	r3,258
 1017bd8:	18cf0404 	addi	r3,r3,15376
 1017bdc:	100491ba 	slli	r2,r2,6
 1017be0:	10c5883a 	add	r2,r2,r3
 1017be4:	10800504 	addi	r2,r2,20
 1017be8:	1080008b 	ldhu	r2,2(r2)
 1017bec:	113fffcc 	andi	r4,r2,65535
 1017bf0:	00c040b4 	movhi	r3,258
 1017bf4:	18cf0404 	addi	r3,r3,15376
 1017bf8:	280491ba 	slli	r2,r5,6
 1017bfc:	10c5883a 	add	r2,r2,r3
 1017c00:	10800704 	addi	r2,r2,28
 1017c04:	11000015 	stw	r4,0(r2)
							active_files[file_record_index].start_cluster_index;
					active_files[file_record_index].current_sector_in_cluster =
 1017c08:	e0bfeb0f 	ldh	r2,-84(fp)
 1017c0c:	00c040b4 	movhi	r3,258
 1017c10:	18cf0404 	addi	r3,r3,15376
 1017c14:	100491ba 	slli	r2,r2,6
 1017c18:	10c5883a 	add	r2,r2,r3
 1017c1c:	10800804 	addi	r2,r2,32
 1017c20:	10000015 	stw	zero,0(r2)
							0;
					active_files[file_record_index].current_byte_position = 0;
 1017c24:	e0bfeb0f 	ldh	r2,-84(fp)
 1017c28:	00c040b4 	movhi	r3,258
 1017c2c:	18cf0404 	addi	r3,r3,15376
 1017c30:	100491ba 	slli	r2,r2,6
 1017c34:	10c5883a 	add	r2,r2,r3
 1017c38:	10800904 	addi	r2,r2,36
 1017c3c:	10000015 	stw	zero,0(r2)
					active_files[file_record_index].in_use = true;
 1017c40:	e0bfeb0f 	ldh	r2,-84(fp)
 1017c44:	00c040b4 	movhi	r3,258
 1017c48:	18cf0404 	addi	r3,r3,15376
 1017c4c:	100491ba 	slli	r2,r2,6
 1017c50:	10c5883a 	add	r2,r2,r3
 1017c54:	10c00f04 	addi	r3,r2,60
 1017c58:	00800044 	movi	r2,1
 1017c5c:	18800015 	stw	r2,0(r3)
					active_files[file_record_index].modified = false;
 1017c60:	e0bfeb0f 	ldh	r2,-84(fp)
 1017c64:	00c040b4 	movhi	r3,258
 1017c68:	18cf0404 	addi	r3,r3,15376
 1017c6c:	100491ba 	slli	r2,r2,6
 1017c70:	10c5883a 	add	r2,r2,r3
 1017c74:	10800e04 	addi	r2,r2,56
 1017c78:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++) {
 1017c7c:	e03fea15 	stw	zero,-88(fp)
 1017c80:	00004506 	br	1017d98 <alt_up_sd_card_fopen+0x2e8>
						if ((file_record_index != index)
 1017c84:	e0ffeb0f 	ldh	r3,-84(fp)
 1017c88:	e0bfea17 	ldw	r2,-88(fp)
 1017c8c:	18803f26 	beq	r3,r2,1017d8c <alt_up_sd_card_fopen+0x2dc>
 1017c90:	e0bfea17 	ldw	r2,-88(fp)
 1017c94:	00c040b4 	movhi	r3,258
 1017c98:	18cf0404 	addi	r3,r3,15376
 1017c9c:	100491ba 	slli	r2,r2,6
 1017ca0:	10c5883a 	add	r2,r2,r3
 1017ca4:	10800f04 	addi	r2,r2,60
 1017ca8:	10800017 	ldw	r2,0(r2)
 1017cac:	10800058 	cmpnei	r2,r2,1
 1017cb0:	1000361e 	bne	r2,zero,1017d8c <alt_up_sd_card_fopen+0x2dc>
								&& (active_files[index].in_use == true)) {
							if ((active_files[file_record_index].file_record_cluster
 1017cb4:	e0bfeb0f 	ldh	r2,-84(fp)
 1017cb8:	00c040b4 	movhi	r3,258
 1017cbc:	18cf0404 	addi	r3,r3,15376
 1017cc0:	100491ba 	slli	r2,r2,6
 1017cc4:	10c5883a 	add	r2,r2,r3
 1017cc8:	10800a04 	addi	r2,r2,40
 1017ccc:	11000017 	ldw	r4,0(r2)
 1017cd0:	e0bfea17 	ldw	r2,-88(fp)
 1017cd4:	00c040b4 	movhi	r3,258
 1017cd8:	18cf0404 	addi	r3,r3,15376
 1017cdc:	100491ba 	slli	r2,r2,6
 1017ce0:	10c5883a 	add	r2,r2,r3
 1017ce4:	10800a04 	addi	r2,r2,40
 1017ce8:	10800017 	ldw	r2,0(r2)
 1017cec:	2080271e 	bne	r4,r2,1017d8c <alt_up_sd_card_fopen+0x2dc>
 1017cf0:	e0bfeb0f 	ldh	r2,-84(fp)
 1017cf4:	00c040b4 	movhi	r3,258
 1017cf8:	18cf0404 	addi	r3,r3,15376
 1017cfc:	100491ba 	slli	r2,r2,6
 1017d00:	10c5883a 	add	r2,r2,r3
 1017d04:	10800b04 	addi	r2,r2,44
 1017d08:	11000017 	ldw	r4,0(r2)
 1017d0c:	e0bfea17 	ldw	r2,-88(fp)
 1017d10:	00c040b4 	movhi	r3,258
 1017d14:	18cf0404 	addi	r3,r3,15376
 1017d18:	100491ba 	slli	r2,r2,6
 1017d1c:	10c5883a 	add	r2,r2,r3
 1017d20:	10800b04 	addi	r2,r2,44
 1017d24:	10800017 	ldw	r2,0(r2)
 1017d28:	2080181e 	bne	r4,r2,1017d8c <alt_up_sd_card_fopen+0x2dc>
 1017d2c:	e0bfeb0f 	ldh	r2,-84(fp)
 1017d30:	00c040b4 	movhi	r3,258
 1017d34:	18cf0404 	addi	r3,r3,15376
 1017d38:	100491ba 	slli	r2,r2,6
 1017d3c:	10c5883a 	add	r2,r2,r3
 1017d40:	10800c04 	addi	r2,r2,48
 1017d44:	1100000b 	ldhu	r4,0(r2)
 1017d48:	e0bfea17 	ldw	r2,-88(fp)
 1017d4c:	00c040b4 	movhi	r3,258
 1017d50:	18cf0404 	addi	r3,r3,15376
 1017d54:	100491ba 	slli	r2,r2,6
 1017d58:	10c5883a 	add	r2,r2,r3
 1017d5c:	10800c04 	addi	r2,r2,48
 1017d60:	1080000b 	ldhu	r2,0(r2)
 1017d64:	20ffffcc 	andi	r3,r4,65535
 1017d68:	18e0001c 	xori	r3,r3,32768
 1017d6c:	18e00004 	addi	r3,r3,-32768
 1017d70:	10bfffcc 	andi	r2,r2,65535
 1017d74:	10a0001c 	xori	r2,r2,32768
 1017d78:	10a00004 	addi	r2,r2,-32768
 1017d7c:	1880031e 	bne	r3,r2,1017d8c <alt_up_sd_card_fopen+0x2dc>
									&& (active_files[file_record_index].file_record_sector_in_cluster
											== active_files[index].file_record_sector_in_cluster)
									&& (active_files[file_record_index].file_record_offset
											== active_files[index].file_record_offset)) {
								// file already in use.
								file_record_index = -2;
 1017d80:	00bfff84 	movi	r2,-2
 1017d84:	e0bfeb0d 	sth	r2,-84(fp)
								break;
 1017d88:	00002b06 	br	1017e38 <alt_up_sd_card_fopen+0x388>
					active_files[file_record_index].current_byte_position = 0;
					active_files[file_record_index].in_use = true;
					active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++) {
 1017d8c:	e0bfea17 	ldw	r2,-88(fp)
 1017d90:	10800044 	addi	r2,r2,1
 1017d94:	e0bfea15 	stw	r2,-88(fp)
 1017d98:	e0bfea17 	ldw	r2,-88(fp)
 1017d9c:	10800510 	cmplti	r2,r2,20
 1017da0:	103fb81e 	bne	r2,zero,1017c84 <alt_up_sd_card_fopen+0x1d4>
 1017da4:	00002406 	br	1017e38 <alt_up_sd_card_fopen+0x388>
								break;
							}
						}
					}

				} else if (create) {
 1017da8:	e0bffe17 	ldw	r2,-8(fp)
 1017dac:	1005003a 	cmpeq	r2,r2,zero
 1017db0:	10001f1e 	bne	r2,zero,1017e30 <alt_up_sd_card_fopen+0x380>
					/* Create file if needed. */
					if (create_file(name, &(active_files[file_record_index]),
 1017db4:	e0bfeb0f 	ldh	r2,-84(fp)
 1017db8:	100491ba 	slli	r2,r2,6
 1017dbc:	1007883a 	mov	r3,r2
 1017dc0:	008040b4 	movhi	r2,258
 1017dc4:	108f0404 	addi	r2,r2,15376
 1017dc8:	188b883a 	add	r5,r3,r2
 1017dcc:	e1bfed04 	addi	r6,fp,-76
 1017dd0:	e13ffd17 	ldw	r4,-12(fp)
 1017dd4:	10170040 	call	1017004 <create_file>
 1017dd8:	1005003a 	cmpeq	r2,r2,zero
 1017ddc:	1000111e 	bne	r2,zero,1017e24 <alt_up_sd_card_fopen+0x374>
							&home_dir)) {
						active_files[file_record_index].in_use = true;
 1017de0:	e0bfeb0f 	ldh	r2,-84(fp)
 1017de4:	00c040b4 	movhi	r3,258
 1017de8:	18cf0404 	addi	r3,r3,15376
 1017dec:	100491ba 	slli	r2,r2,6
 1017df0:	10c5883a 	add	r2,r2,r3
 1017df4:	10c00f04 	addi	r3,r2,60
 1017df8:	00800044 	movi	r2,1
 1017dfc:	18800015 	stw	r2,0(r3)
						active_files[file_record_index].modified = true;
 1017e00:	e0bfeb0f 	ldh	r2,-84(fp)
 1017e04:	00c040b4 	movhi	r3,258
 1017e08:	18cf0404 	addi	r3,r3,15376
 1017e0c:	100491ba 	slli	r2,r2,6
 1017e10:	10c5883a 	add	r2,r2,r3
 1017e14:	10c00e04 	addi	r3,r2,56
 1017e18:	00800044 	movi	r2,1
 1017e1c:	18800015 	stw	r2,0(r3)
 1017e20:	00000506 	br	1017e38 <alt_up_sd_card_fopen+0x388>
					} else {
						/* If file creation fails then return an invalid file handle. */
						file_record_index = -1;
 1017e24:	00bfffc4 	movi	r2,-1
 1017e28:	e0bfeb0d 	sth	r2,-84(fp)
 1017e2c:	00000206 	br	1017e38 <alt_up_sd_card_fopen+0x388>
					}
				} else {
					/* Otherwise the file could not be opened.*/
					file_record_index = -1;
 1017e30:	00bfffc4 	movi	r2,-1
 1017e34:	e0bfeb0d 	sth	r2,-84(fp)
				}
			}
		}
	}

	return file_record_index;
 1017e38:	e0bfeb0f 	ldh	r2,-84(fp)
 1017e3c:	e0bfff15 	stw	r2,-4(fp)
 1017e40:	e0bfff17 	ldw	r2,-4(fp)
}
 1017e44:	e037883a 	mov	sp,fp
 1017e48:	dfc00117 	ldw	ra,4(sp)
 1017e4c:	df000017 	ldw	fp,0(sp)
 1017e50:	dec00204 	addi	sp,sp,8
 1017e54:	f800283a 	ret

01017e58 <alt_up_sd_card_set_attributes>:

void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
 1017e58:	defffd04 	addi	sp,sp,-12
 1017e5c:	df000215 	stw	fp,8(sp)
 1017e60:	df000204 	addi	fp,sp,8
 1017e64:	e13ffe0d 	sth	r4,-8(fp)
 1017e68:	e17fff0d 	sth	r5,-4(fp)
	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
 1017e6c:	e0bffe0f 	ldh	r2,-8(fp)
 1017e70:	1004803a 	cmplt	r2,r2,zero
 1017e74:	1000181e 	bne	r2,zero,1017ed8 <alt_up_sd_card_set_attributes+0x80>
 1017e78:	e0bffe0f 	ldh	r2,-8(fp)
 1017e7c:	10800508 	cmpgei	r2,r2,20
 1017e80:	1000151e 	bne	r2,zero,1017ed8 <alt_up_sd_card_set_attributes+0x80>
		if (active_files[file_handle].in_use) {
 1017e84:	e0bffe0f 	ldh	r2,-8(fp)
 1017e88:	00c040b4 	movhi	r3,258
 1017e8c:	18cf0404 	addi	r3,r3,15376
 1017e90:	100491ba 	slli	r2,r2,6
 1017e94:	10c5883a 	add	r2,r2,r3
 1017e98:	10800f04 	addi	r2,r2,60
 1017e9c:	10800017 	ldw	r2,0(r2)
 1017ea0:	1005003a 	cmpeq	r2,r2,zero
 1017ea4:	10000c1e 	bne	r2,zero,1017ed8 <alt_up_sd_card_set_attributes+0x80>
			active_files[file_handle].attributes =
 1017ea8:	e17ffe0f 	ldh	r5,-8(fp)
 1017eac:	e0bfff0b 	ldhu	r2,-4(fp)
 1017eb0:	1007883a 	mov	r3,r2
 1017eb4:	00bfffc4 	movi	r2,-1
 1017eb8:	1884703a 	and	r2,r3,r2
 1017ebc:	1009883a 	mov	r4,r2
 1017ec0:	00c040b4 	movhi	r3,258
 1017ec4:	18cf0404 	addi	r3,r3,15376
 1017ec8:	280491ba 	slli	r2,r5,6
 1017ecc:	10c5883a 	add	r2,r2,r3
 1017ed0:	10800204 	addi	r2,r2,8
 1017ed4:	110000c5 	stb	r4,3(r2)
					((char) (attributes & 0x00ff));
		}
	}
}
 1017ed8:	e037883a 	mov	sp,fp
 1017edc:	df000017 	ldw	fp,0(sp)
 1017ee0:	dec00104 	addi	sp,sp,4
 1017ee4:	f800283a 	ret

01017ee8 <alt_up_sd_card_get_attributes>:

short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
 1017ee8:	defffd04 	addi	sp,sp,-12
 1017eec:	df000215 	stw	fp,8(sp)
 1017ef0:	df000204 	addi	fp,sp,8
 1017ef4:	e13fff0d 	sth	r4,-4(fp)
	short int result = -1;
 1017ef8:	00bfffc4 	movi	r2,-1
 1017efc:	e0bffe0d 	sth	r2,-8(fp)
	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
 1017f00:	e0bfff0f 	ldh	r2,-4(fp)
 1017f04:	1004803a 	cmplt	r2,r2,zero
 1017f08:	1000151e 	bne	r2,zero,1017f60 <alt_up_sd_card_get_attributes+0x78>
 1017f0c:	e0bfff0f 	ldh	r2,-4(fp)
 1017f10:	10800508 	cmpgei	r2,r2,20
 1017f14:	1000121e 	bne	r2,zero,1017f60 <alt_up_sd_card_get_attributes+0x78>
		if (active_files[file_handle].in_use) {
 1017f18:	e0bfff0f 	ldh	r2,-4(fp)
 1017f1c:	00c040b4 	movhi	r3,258
 1017f20:	18cf0404 	addi	r3,r3,15376
 1017f24:	100491ba 	slli	r2,r2,6
 1017f28:	10c5883a 	add	r2,r2,r3
 1017f2c:	10800f04 	addi	r2,r2,60
 1017f30:	10800017 	ldw	r2,0(r2)
 1017f34:	1005003a 	cmpeq	r2,r2,zero
 1017f38:	1000091e 	bne	r2,zero,1017f60 <alt_up_sd_card_get_attributes+0x78>
			result = ((active_files[file_handle].attributes) & 0x00ff);
 1017f3c:	e0bfff0f 	ldh	r2,-4(fp)
 1017f40:	00c040b4 	movhi	r3,258
 1017f44:	18cf0404 	addi	r3,r3,15376
 1017f48:	100491ba 	slli	r2,r2,6
 1017f4c:	10c5883a 	add	r2,r2,r3
 1017f50:	10800204 	addi	r2,r2,8
 1017f54:	108000c3 	ldbu	r2,3(r2)
 1017f58:	10803fcc 	andi	r2,r2,255
 1017f5c:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
 1017f60:	e0bffe0f 	ldh	r2,-8(fp)
}
 1017f64:	e037883a 	mov	sp,fp
 1017f68:	df000017 	ldw	fp,0(sp)
 1017f6c:	dec00104 	addi	sp,sp,4
 1017f70:	f800283a 	ret

01017f74 <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
 1017f74:	defffa04 	addi	sp,sp,-24
 1017f78:	dfc00515 	stw	ra,20(sp)
 1017f7c:	df000415 	stw	fp,16(sp)
 1017f80:	df000404 	addi	fp,sp,16
 1017f84:	e13ffe0d 	sth	r4,-8(fp)
	short int ch = -1;
 1017f88:	00bfffc4 	movi	r2,-1
 1017f8c:	e0bffd0d 	sth	r2,-12(fp)

	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
 1017f90:	e0bffe0f 	ldh	r2,-8(fp)
 1017f94:	1004803a 	cmplt	r2,r2,zero
 1017f98:	1000d31e 	bne	r2,zero,10182e8 <alt_up_sd_card_read+0x374>
 1017f9c:	e0bffe0f 	ldh	r2,-8(fp)
 1017fa0:	10800508 	cmpgei	r2,r2,20
 1017fa4:	1000d01e 	bne	r2,zero,10182e8 <alt_up_sd_card_read+0x374>
		if (active_files[file_handle].in_use) {
 1017fa8:	e0bffe0f 	ldh	r2,-8(fp)
 1017fac:	00c040b4 	movhi	r3,258
 1017fb0:	18cf0404 	addi	r3,r3,15376
 1017fb4:	100491ba 	slli	r2,r2,6
 1017fb8:	10c5883a 	add	r2,r2,r3
 1017fbc:	10800f04 	addi	r2,r2,60
 1017fc0:	10800017 	ldw	r2,0(r2)
 1017fc4:	1005003a 	cmpeq	r2,r2,zero
 1017fc8:	1000c71e 	bne	r2,zero,10182e8 <alt_up_sd_card_read+0x374>
			if (active_files[file_handle].current_byte_position
 1017fcc:	e0bffe0f 	ldh	r2,-8(fp)
 1017fd0:	00c040b4 	movhi	r3,258
 1017fd4:	18cf0404 	addi	r3,r3,15376
 1017fd8:	100491ba 	slli	r2,r2,6
 1017fdc:	10c5883a 	add	r2,r2,r3
 1017fe0:	10800904 	addi	r2,r2,36
 1017fe4:	11000017 	ldw	r4,0(r2)
 1017fe8:	e0bffe0f 	ldh	r2,-8(fp)
 1017fec:	00c040b4 	movhi	r3,258
 1017ff0:	18cf0404 	addi	r3,r3,15376
 1017ff4:	100491ba 	slli	r2,r2,6
 1017ff8:	10c5883a 	add	r2,r2,r3
 1017ffc:	10800604 	addi	r2,r2,24
 1018000:	10800017 	ldw	r2,0(r2)
 1018004:	2080b82e 	bgeu	r4,r2,10182e8 <alt_up_sd_card_read+0x374>
					< active_files[file_handle].file_size_in_bytes) {
				int data_sector = boot_sector_data.data_sector_offset
						+ (active_files[file_handle].current_cluster_index - 2)
								* boot_sector_data.sectors_per_cluster
						+ active_files[file_handle].current_sector_in_cluster;
 1018008:	008040b4 	movhi	r2,258
 101800c:	108eef04 	addi	r2,r2,15292
 1018010:	11001417 	ldw	r4,80(r2)
 1018014:	e0bffe0f 	ldh	r2,-8(fp)
 1018018:	00c040b4 	movhi	r3,258
 101801c:	18cf0404 	addi	r3,r3,15376
 1018020:	100491ba 	slli	r2,r2,6
 1018024:	10c5883a 	add	r2,r2,r3
 1018028:	10800704 	addi	r2,r2,28
 101802c:	10800017 	ldw	r2,0(r2)
 1018030:	10ffff84 	addi	r3,r2,-2
 1018034:	008040b4 	movhi	r2,258
 1018038:	108eef04 	addi	r2,r2,15292
 101803c:	10800383 	ldbu	r2,14(r2)
 1018040:	10803fcc 	andi	r2,r2,255
 1018044:	1885383a 	mul	r2,r3,r2
 1018048:	2089883a 	add	r4,r4,r2
 101804c:	e0bffe0f 	ldh	r2,-8(fp)
 1018050:	00c040b4 	movhi	r3,258
 1018054:	18cf0404 	addi	r3,r3,15376
 1018058:	100491ba 	slli	r2,r2,6
 101805c:	10c5883a 	add	r2,r2,r3
 1018060:	10800804 	addi	r2,r2,32
 1018064:	10800017 	ldw	r2,0(r2)
 1018068:	2085883a 	add	r2,r4,r2
 101806c:	e0bffc15 	stw	r2,-16(fp)

				if ((active_files[file_handle].current_byte_position > 0)
 1018070:	e0bffe0f 	ldh	r2,-8(fp)
 1018074:	00c040b4 	movhi	r3,258
 1018078:	18cf0404 	addi	r3,r3,15376
 101807c:	100491ba 	slli	r2,r2,6
 1018080:	10c5883a 	add	r2,r2,r3
 1018084:	10800904 	addi	r2,r2,36
 1018088:	10800017 	ldw	r2,0(r2)
 101808c:	1005003a 	cmpeq	r2,r2,zero
 1018090:	10006a1e 	bne	r2,zero,101823c <alt_up_sd_card_read+0x2c8>
 1018094:	e0bffe0f 	ldh	r2,-8(fp)
 1018098:	00c040b4 	movhi	r3,258
 101809c:	18cf0404 	addi	r3,r3,15376
 10180a0:	100491ba 	slli	r2,r2,6
 10180a4:	10c5883a 	add	r2,r2,r3
 10180a8:	10800904 	addi	r2,r2,36
 10180ac:	10800017 	ldw	r2,0(r2)
 10180b0:	10807fcc 	andi	r2,r2,511
 10180b4:	1004c03a 	cmpne	r2,r2,zero
 10180b8:	1000601e 	bne	r2,zero,101823c <alt_up_sd_card_read+0x2c8>
						&& ((active_files[file_handle].current_byte_position
								% 512) == 0)) {
					// Read in a new sector of data.
					if (active_files[file_handle].current_sector_in_cluster
 10180bc:	e0bffe0f 	ldh	r2,-8(fp)
 10180c0:	00c040b4 	movhi	r3,258
 10180c4:	18cf0404 	addi	r3,r3,15376
 10180c8:	100491ba 	slli	r2,r2,6
 10180cc:	10c5883a 	add	r2,r2,r3
 10180d0:	10800804 	addi	r2,r2,32
 10180d4:	10c00017 	ldw	r3,0(r2)
 10180d8:	008040b4 	movhi	r2,258
 10180dc:	108eef04 	addi	r2,r2,15292
 10180e0:	10800383 	ldbu	r2,14(r2)
 10180e4:	10803fcc 	andi	r2,r2,255
 10180e8:	10bfffc4 	addi	r2,r2,-1
 10180ec:	1880411e 	bne	r3,r2,10181f4 <alt_up_sd_card_read+0x280>
							== boot_sector_data.sectors_per_cluster - 1) {
						// Go to the next cluster.
						unsigned short int next_cluster;
						if (get_cluster_flag(
 10180f0:	e0bffe0f 	ldh	r2,-8(fp)
 10180f4:	00c040b4 	movhi	r3,258
 10180f8:	18cf0404 	addi	r3,r3,15376
 10180fc:	100491ba 	slli	r2,r2,6
 1018100:	10c5883a 	add	r2,r2,r3
 1018104:	10800704 	addi	r2,r2,28
 1018108:	11000017 	ldw	r4,0(r2)
 101810c:	e17ffd84 	addi	r5,fp,-10
 1018110:	10148d80 	call	10148d8 <get_cluster_flag>
 1018114:	1005003a 	cmpeq	r2,r2,zero
 1018118:	1000331e 	bne	r2,zero,10181e8 <alt_up_sd_card_read+0x274>
								active_files[file_handle].current_cluster_index,
								&next_cluster)) {
							if ((next_cluster & 0x0000fff8) == 0x0000fff8) {
 101811c:	e0bffd8b 	ldhu	r2,-10(fp)
 1018120:	10bfffcc 	andi	r2,r2,65535
 1018124:	10fffe0c 	andi	r3,r2,65528
 1018128:	00bffe14 	movui	r2,65528
 101812c:	1880031e 	bne	r3,r2,101813c <alt_up_sd_card_read+0x1c8>
								/* End of file */
								return -1;
 1018130:	00bfffc4 	movi	r2,-1
 1018134:	e0bfff15 	stw	r2,-4(fp)
 1018138:	00006d06 	br	10182f0 <alt_up_sd_card_read+0x37c>
							} else {
								active_files[file_handle].current_cluster_index =
 101813c:	e13ffe0f 	ldh	r4,-8(fp)
 1018140:	e0bffd8b 	ldhu	r2,-10(fp)
 1018144:	117fffcc 	andi	r5,r2,65535
 1018148:	00c040b4 	movhi	r3,258
 101814c:	18cf0404 	addi	r3,r3,15376
 1018150:	200491ba 	slli	r2,r4,6
 1018154:	10c5883a 	add	r2,r2,r3
 1018158:	10800704 	addi	r2,r2,28
 101815c:	11400015 	stw	r5,0(r2)
										next_cluster;
								active_files[file_handle].current_sector_in_cluster =
 1018160:	e0bffe0f 	ldh	r2,-8(fp)
 1018164:	00c040b4 	movhi	r3,258
 1018168:	18cf0404 	addi	r3,r3,15376
 101816c:	100491ba 	slli	r2,r2,6
 1018170:	10c5883a 	add	r2,r2,r3
 1018174:	10800804 	addi	r2,r2,32
 1018178:	10000015 	stw	zero,0(r2)
										0;
								data_sector =
 101817c:	008040b4 	movhi	r2,258
 1018180:	108eef04 	addi	r2,r2,15292
 1018184:	11001417 	ldw	r4,80(r2)
 1018188:	e0bffe0f 	ldh	r2,-8(fp)
 101818c:	00c040b4 	movhi	r3,258
 1018190:	18cf0404 	addi	r3,r3,15376
 1018194:	100491ba 	slli	r2,r2,6
 1018198:	10c5883a 	add	r2,r2,r3
 101819c:	10800704 	addi	r2,r2,28
 10181a0:	10800017 	ldw	r2,0(r2)
 10181a4:	10ffff84 	addi	r3,r2,-2
 10181a8:	008040b4 	movhi	r2,258
 10181ac:	108eef04 	addi	r2,r2,15292
 10181b0:	10800383 	ldbu	r2,14(r2)
 10181b4:	10803fcc 	andi	r2,r2,255
 10181b8:	1885383a 	mul	r2,r3,r2
 10181bc:	2089883a 	add	r4,r4,r2
 10181c0:	e0bffe0f 	ldh	r2,-8(fp)
 10181c4:	00c040b4 	movhi	r3,258
 10181c8:	18cf0404 	addi	r3,r3,15376
 10181cc:	100491ba 	slli	r2,r2,6
 10181d0:	10c5883a 	add	r2,r2,r3
 10181d4:	10800804 	addi	r2,r2,32
 10181d8:	10800017 	ldw	r2,0(r2)
 10181dc:	2085883a 	add	r2,r4,r2
 10181e0:	e0bffc15 	stw	r2,-16(fp)
 10181e4:	00001506 	br	101823c <alt_up_sd_card_read+0x2c8>
														- 2)
														* boot_sector_data.sectors_per_cluster
												+ active_files[file_handle].current_sector_in_cluster;
							}
						} else {
							return -2;
 10181e8:	00bfff84 	movi	r2,-2
 10181ec:	e0bfff15 	stw	r2,-4(fp)
 10181f0:	00003f06 	br	10182f0 <alt_up_sd_card_read+0x37c>
						}
					} else {
						active_files[file_handle].current_sector_in_cluster =
 10181f4:	e17ffe0f 	ldh	r5,-8(fp)
 10181f8:	e0bffe0f 	ldh	r2,-8(fp)
 10181fc:	00c040b4 	movhi	r3,258
 1018200:	18cf0404 	addi	r3,r3,15376
 1018204:	100491ba 	slli	r2,r2,6
 1018208:	10c5883a 	add	r2,r2,r3
 101820c:	10800804 	addi	r2,r2,32
 1018210:	10800017 	ldw	r2,0(r2)
 1018214:	11000044 	addi	r4,r2,1
 1018218:	00c040b4 	movhi	r3,258
 101821c:	18cf0404 	addi	r3,r3,15376
 1018220:	280491ba 	slli	r2,r5,6
 1018224:	10c5883a 	add	r2,r2,r3
 1018228:	10800804 	addi	r2,r2,32
 101822c:	11000015 	stw	r4,0(r2)
								active_files[file_handle].current_sector_in_cluster
										+ 1;
						data_sector = data_sector + 1;
 1018230:	e0bffc17 	ldw	r2,-16(fp)
 1018234:	10800044 	addi	r2,r2,1
 1018238:	e0bffc15 	stw	r2,-16(fp)
					}
				}
				// Reading te first byte of the file.
				if (current_sector_index
 101823c:	d0e7d617 	ldw	r3,-24744(gp)
 1018240:	e0bffc17 	ldw	r2,-16(fp)
 1018244:	1885883a 	add	r2,r3,r2
 1018248:	1007883a 	mov	r3,r2
 101824c:	d0a7da17 	ldw	r2,-24728(gp)
 1018250:	18800826 	beq	r3,r2,1018274 <alt_up_sd_card_read+0x300>
						!= (data_sector
								+ fat_partition_offset_in_512_byte_sectors)) {
					if (!Read_Sector_Data(data_sector,
 1018254:	d167d617 	ldw	r5,-24744(gp)
 1018258:	e13ffc17 	ldw	r4,-16(fp)
 101825c:	10147dc0 	call	10147dc <Read_Sector_Data>
 1018260:	1004c03a 	cmpne	r2,r2,zero
 1018264:	1000031e 	bne	r2,zero,1018274 <alt_up_sd_card_read+0x300>
							fat_partition_offset_in_512_byte_sectors)) {
						return -2;
 1018268:	00bfff84 	movi	r2,-2
 101826c:	e0bfff15 	stw	r2,-4(fp)
 1018270:	00001f06 	br	10182f0 <alt_up_sd_card_read+0x37c>
					}
				}

				ch =
 1018274:	e0bffe0f 	ldh	r2,-8(fp)
 1018278:	00c040b4 	movhi	r3,258
 101827c:	18cf0404 	addi	r3,r3,15376
 1018280:	100491ba 	slli	r2,r2,6
 1018284:	10c5883a 	add	r2,r2,r3
 1018288:	10800904 	addi	r2,r2,36
 101828c:	10800017 	ldw	r2,0(r2)
 1018290:	10807fcc 	andi	r2,r2,511
 1018294:	1007883a 	mov	r3,r2
 1018298:	d0a7d517 	ldw	r2,-24748(gp)
 101829c:	1885883a 	add	r2,r3,r2
 10182a0:	10800023 	ldbuio	r2,0(r2)
 10182a4:	10803fcc 	andi	r2,r2,255
 10182a8:	e0bffd0d 	sth	r2,-12(fp)
						(unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
				active_files[file_handle].current_byte_position =
 10182ac:	e17ffe0f 	ldh	r5,-8(fp)
 10182b0:	e0bffe0f 	ldh	r2,-8(fp)
 10182b4:	00c040b4 	movhi	r3,258
 10182b8:	18cf0404 	addi	r3,r3,15376
 10182bc:	100491ba 	slli	r2,r2,6
 10182c0:	10c5883a 	add	r2,r2,r3
 10182c4:	10800904 	addi	r2,r2,36
 10182c8:	10800017 	ldw	r2,0(r2)
 10182cc:	11000044 	addi	r4,r2,1
 10182d0:	00c040b4 	movhi	r3,258
 10182d4:	18cf0404 	addi	r3,r3,15376
 10182d8:	280491ba 	slli	r2,r5,6
 10182dc:	10c5883a 	add	r2,r2,r3
 10182e0:	10800904 	addi	r2,r2,36
 10182e4:	11000015 	stw	r4,0(r2)
						active_files[file_handle].current_byte_position + 1;
			}
		}
	}

	return ch;
 10182e8:	e0bffd0f 	ldh	r2,-12(fp)
 10182ec:	e0bfff15 	stw	r2,-4(fp)
 10182f0:	e0bfff17 	ldw	r2,-4(fp)
}
 10182f4:	e037883a 	mov	sp,fp
 10182f8:	dfc00117 	ldw	ra,4(sp)
 10182fc:	df000017 	ldw	fp,0(sp)
 1018300:	dec00204 	addi	sp,sp,8
 1018304:	f800283a 	ret

01018308 <alt_up_sd_card_write>:

bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
 1018308:	defff504 	addi	sp,sp,-44
 101830c:	dfc00a15 	stw	ra,40(sp)
 1018310:	df000915 	stw	fp,36(sp)
 1018314:	dc000815 	stw	r16,32(sp)
 1018318:	df000804 	addi	fp,sp,32
 101831c:	e13ffd0d 	sth	r4,-12(fp)
 1018320:	e17ffe05 	stb	r5,-8(fp)
	bool result = false;
 1018324:	e03ffa15 	stw	zero,-24(fp)

	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
 1018328:	e0bffd0f 	ldh	r2,-12(fp)
 101832c:	1004803a 	cmplt	r2,r2,zero
 1018330:	10017b1e 	bne	r2,zero,1018920 <alt_up_sd_card_write+0x618>
 1018334:	e0bffd0f 	ldh	r2,-12(fp)
 1018338:	10800508 	cmpgei	r2,r2,20
 101833c:	1001781e 	bne	r2,zero,1018920 <alt_up_sd_card_write+0x618>
		if (active_files[file_handle].in_use) {
 1018340:	e0bffd0f 	ldh	r2,-12(fp)
 1018344:	00c040b4 	movhi	r3,258
 1018348:	18cf0404 	addi	r3,r3,15376
 101834c:	100491ba 	slli	r2,r2,6
 1018350:	10c5883a 	add	r2,r2,r3
 1018354:	10800f04 	addi	r2,r2,60
 1018358:	10800017 	ldw	r2,0(r2)
 101835c:	1005003a 	cmpeq	r2,r2,zero
 1018360:	10016f1e 	bne	r2,zero,1018920 <alt_up_sd_card_write+0x618>
			int data_sector = boot_sector_data.data_sector_offset
					+ (active_files[file_handle].current_cluster_index - 2)
							* boot_sector_data.sectors_per_cluster
					+ active_files[file_handle].current_sector_in_cluster;
 1018364:	008040b4 	movhi	r2,258
 1018368:	108eef04 	addi	r2,r2,15292
 101836c:	11001417 	ldw	r4,80(r2)
 1018370:	e0bffd0f 	ldh	r2,-12(fp)
 1018374:	00c040b4 	movhi	r3,258
 1018378:	18cf0404 	addi	r3,r3,15376
 101837c:	100491ba 	slli	r2,r2,6
 1018380:	10c5883a 	add	r2,r2,r3
 1018384:	10800704 	addi	r2,r2,28
 1018388:	10800017 	ldw	r2,0(r2)
 101838c:	10ffff84 	addi	r3,r2,-2
 1018390:	008040b4 	movhi	r2,258
 1018394:	108eef04 	addi	r2,r2,15292
 1018398:	10800383 	ldbu	r2,14(r2)
 101839c:	10803fcc 	andi	r2,r2,255
 10183a0:	1885383a 	mul	r2,r3,r2
 10183a4:	2089883a 	add	r4,r4,r2
 10183a8:	e0bffd0f 	ldh	r2,-12(fp)
 10183ac:	00c040b4 	movhi	r3,258
 10183b0:	18cf0404 	addi	r3,r3,15376
 10183b4:	100491ba 	slli	r2,r2,6
 10183b8:	10c5883a 	add	r2,r2,r3
 10183bc:	10800804 	addi	r2,r2,32
 10183c0:	10800017 	ldw	r2,0(r2)
 10183c4:	2085883a 	add	r2,r4,r2
 10183c8:	e0bff915 	stw	r2,-28(fp)
			short int buffer_offset =
					active_files[file_handle].current_byte_position
							% boot_sector_data.sector_size_in_bytes;
 10183cc:	e0bffd0f 	ldh	r2,-12(fp)
 10183d0:	00c040b4 	movhi	r3,258
 10183d4:	18cf0404 	addi	r3,r3,15376
 10183d8:	100491ba 	slli	r2,r2,6
 10183dc:	10c5883a 	add	r2,r2,r3
 10183e0:	10800904 	addi	r2,r2,36
 10183e4:	11000017 	ldw	r4,0(r2)
 10183e8:	008040b4 	movhi	r2,258
 10183ec:	108eef04 	addi	r2,r2,15292
 10183f0:	1080030b 	ldhu	r2,12(r2)
 10183f4:	117fffcc 	andi	r5,r2,65535
 10183f8:	10057780 	call	1005778 <__umodsi3>
 10183fc:	e0bff80d 	sth	r2,-32(fp)

			if (active_files[file_handle].current_byte_position
 1018400:	e0bffd0f 	ldh	r2,-12(fp)
 1018404:	00c040b4 	movhi	r3,258
 1018408:	18cf0404 	addi	r3,r3,15376
 101840c:	100491ba 	slli	r2,r2,6
 1018410:	10c5883a 	add	r2,r2,r3
 1018414:	10800904 	addi	r2,r2,36
 1018418:	11000017 	ldw	r4,0(r2)
 101841c:	e0bffd0f 	ldh	r2,-12(fp)
 1018420:	00c040b4 	movhi	r3,258
 1018424:	18cf0404 	addi	r3,r3,15376
 1018428:	100491ba 	slli	r2,r2,6
 101842c:	10c5883a 	add	r2,r2,r3
 1018430:	10800604 	addi	r2,r2,24
 1018434:	10800017 	ldw	r2,0(r2)
 1018438:	2080682e 	bgeu	r4,r2,10185dc <alt_up_sd_card_write+0x2d4>
					< active_files[file_handle].file_size_in_bytes) {
				if ((active_files[file_handle].current_byte_position > 0)
 101843c:	e0bffd0f 	ldh	r2,-12(fp)
 1018440:	00c040b4 	movhi	r3,258
 1018444:	18cf0404 	addi	r3,r3,15376
 1018448:	100491ba 	slli	r2,r2,6
 101844c:	10c5883a 	add	r2,r2,r3
 1018450:	10800904 	addi	r2,r2,36
 1018454:	10800017 	ldw	r2,0(r2)
 1018458:	1005003a 	cmpeq	r2,r2,zero
 101845c:	1000e41e 	bne	r2,zero,10187f0 <alt_up_sd_card_write+0x4e8>
 1018460:	e0bff80f 	ldh	r2,-32(fp)
 1018464:	1004c03a 	cmpne	r2,r2,zero
 1018468:	1000e11e 	bne	r2,zero,10187f0 <alt_up_sd_card_write+0x4e8>
						&& (buffer_offset == 0)) {
					// Read in a new sector of data.
					if (active_files[file_handle].current_sector_in_cluster
 101846c:	e0bffd0f 	ldh	r2,-12(fp)
 1018470:	00c040b4 	movhi	r3,258
 1018474:	18cf0404 	addi	r3,r3,15376
 1018478:	100491ba 	slli	r2,r2,6
 101847c:	10c5883a 	add	r2,r2,r3
 1018480:	10800804 	addi	r2,r2,32
 1018484:	10c00017 	ldw	r3,0(r2)
 1018488:	008040b4 	movhi	r2,258
 101848c:	108eef04 	addi	r2,r2,15292
 1018490:	10800383 	ldbu	r2,14(r2)
 1018494:	10803fcc 	andi	r2,r2,255
 1018498:	10bfffc4 	addi	r2,r2,-1
 101849c:	18803c1e 	bne	r3,r2,1018590 <alt_up_sd_card_write+0x288>
							== boot_sector_data.sectors_per_cluster - 1) {
						// Go to the next cluster.
						unsigned short int next_cluster;
						if (get_cluster_flag(
 10184a0:	e0bffd0f 	ldh	r2,-12(fp)
 10184a4:	00c040b4 	movhi	r3,258
 10184a8:	18cf0404 	addi	r3,r3,15376
 10184ac:	100491ba 	slli	r2,r2,6
 10184b0:	10c5883a 	add	r2,r2,r3
 10184b4:	10800704 	addi	r2,r2,28
 10184b8:	11000017 	ldw	r4,0(r2)
 10184bc:	e17ffb04 	addi	r5,fp,-20
 10184c0:	10148d80 	call	10148d8 <get_cluster_flag>
 10184c4:	1005003a 	cmpeq	r2,r2,zero
 10184c8:	10002f1e 	bne	r2,zero,1018588 <alt_up_sd_card_write+0x280>
								active_files[file_handle].current_cluster_index,
								&next_cluster)) {
							if (next_cluster < 0x0000fff8) {
 10184cc:	e0bffb0b 	ldhu	r2,-20(fp)
 10184d0:	10ffffcc 	andi	r3,r2,65535
 10184d4:	00bffdd4 	movui	r2,65527
 10184d8:	10c0c536 	bltu	r2,r3,10187f0 <alt_up_sd_card_write+0x4e8>
								active_files[file_handle].current_cluster_index =
 10184dc:	e13ffd0f 	ldh	r4,-12(fp)
 10184e0:	e0bffb0b 	ldhu	r2,-20(fp)
 10184e4:	117fffcc 	andi	r5,r2,65535
 10184e8:	00c040b4 	movhi	r3,258
 10184ec:	18cf0404 	addi	r3,r3,15376
 10184f0:	200491ba 	slli	r2,r4,6
 10184f4:	10c5883a 	add	r2,r2,r3
 10184f8:	10800704 	addi	r2,r2,28
 10184fc:	11400015 	stw	r5,0(r2)
										next_cluster;
								active_files[file_handle].current_sector_in_cluster =
 1018500:	e0bffd0f 	ldh	r2,-12(fp)
 1018504:	00c040b4 	movhi	r3,258
 1018508:	18cf0404 	addi	r3,r3,15376
 101850c:	100491ba 	slli	r2,r2,6
 1018510:	10c5883a 	add	r2,r2,r3
 1018514:	10800804 	addi	r2,r2,32
 1018518:	10000015 	stw	zero,0(r2)
										0;
								data_sector =
 101851c:	008040b4 	movhi	r2,258
 1018520:	108eef04 	addi	r2,r2,15292
 1018524:	11001417 	ldw	r4,80(r2)
 1018528:	e0bffd0f 	ldh	r2,-12(fp)
 101852c:	00c040b4 	movhi	r3,258
 1018530:	18cf0404 	addi	r3,r3,15376
 1018534:	100491ba 	slli	r2,r2,6
 1018538:	10c5883a 	add	r2,r2,r3
 101853c:	10800704 	addi	r2,r2,28
 1018540:	10800017 	ldw	r2,0(r2)
 1018544:	10ffff84 	addi	r3,r2,-2
 1018548:	008040b4 	movhi	r2,258
 101854c:	108eef04 	addi	r2,r2,15292
 1018550:	10800383 	ldbu	r2,14(r2)
 1018554:	10803fcc 	andi	r2,r2,255
 1018558:	1885383a 	mul	r2,r3,r2
 101855c:	2089883a 	add	r4,r4,r2
 1018560:	e0bffd0f 	ldh	r2,-12(fp)
 1018564:	00c040b4 	movhi	r3,258
 1018568:	18cf0404 	addi	r3,r3,15376
 101856c:	100491ba 	slli	r2,r2,6
 1018570:	10c5883a 	add	r2,r2,r3
 1018574:	10800804 	addi	r2,r2,32
 1018578:	10800017 	ldw	r2,0(r2)
 101857c:	2085883a 	add	r2,r4,r2
 1018580:	e0bff915 	stw	r2,-28(fp)
 1018584:	00009a06 	br	10187f0 <alt_up_sd_card_write+0x4e8>
														- 2)
														* boot_sector_data.sectors_per_cluster
												+ active_files[file_handle].current_sector_in_cluster;
							}
						} else {
							return false;
 1018588:	e03fff15 	stw	zero,-4(fp)
 101858c:	0000e606 	br	1018928 <alt_up_sd_card_write+0x620>
						}
					} else {
						active_files[file_handle].current_sector_in_cluster
 1018590:	e17ffd0f 	ldh	r5,-12(fp)
 1018594:	e0bffd0f 	ldh	r2,-12(fp)
 1018598:	00c040b4 	movhi	r3,258
 101859c:	18cf0404 	addi	r3,r3,15376
 10185a0:	100491ba 	slli	r2,r2,6
 10185a4:	10c5883a 	add	r2,r2,r3
 10185a8:	10800804 	addi	r2,r2,32
 10185ac:	10800017 	ldw	r2,0(r2)
 10185b0:	11000044 	addi	r4,r2,1
 10185b4:	00c040b4 	movhi	r3,258
 10185b8:	18cf0404 	addi	r3,r3,15376
 10185bc:	280491ba 	slli	r2,r5,6
 10185c0:	10c5883a 	add	r2,r2,r3
 10185c4:	10800804 	addi	r2,r2,32
 10185c8:	11000015 	stw	r4,0(r2)
										+ 1;
//						active_files[file_handle].current_sector_in_cluster =
//								(active_files[file_handle].current_byte_position
//										/ boot_sector_data.sector_size_in_bytes)
//										% boot_sector_data.sectors_per_cluster;
						data_sector = data_sector + 1;
 10185cc:	e0bff917 	ldw	r2,-28(fp)
 10185d0:	10800044 	addi	r2,r2,1
 10185d4:	e0bff915 	stw	r2,-28(fp)
 10185d8:	00008506 	br	10187f0 <alt_up_sd_card_write+0x4e8>
					}
				}
			} else {
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0)
 10185dc:	e0bffd0f 	ldh	r2,-12(fp)
 10185e0:	00c040b4 	movhi	r3,258
 10185e4:	18cf0404 	addi	r3,r3,15376
 10185e8:	100491ba 	slli	r2,r2,6
 10185ec:	10c5883a 	add	r2,r2,r3
 10185f0:	10800904 	addi	r2,r2,36
 10185f4:	10800017 	ldw	r2,0(r2)
 10185f8:	1005003a 	cmpeq	r2,r2,zero
 10185fc:	10007c1e 	bne	r2,zero,10187f0 <alt_up_sd_card_write+0x4e8>
 1018600:	e0bff80f 	ldh	r2,-32(fp)
 1018604:	1004c03a 	cmpne	r2,r2,zero
 1018608:	1000791e 	bne	r2,zero,10187f0 <alt_up_sd_card_write+0x4e8>
						&& (buffer_offset == 0)) {
					if (active_files[file_handle].current_sector_in_cluster
 101860c:	e0bffd0f 	ldh	r2,-12(fp)
 1018610:	00c040b4 	movhi	r3,258
 1018614:	18cf0404 	addi	r3,r3,15376
 1018618:	100491ba 	slli	r2,r2,6
 101861c:	10c5883a 	add	r2,r2,r3
 1018620:	10800804 	addi	r2,r2,32
 1018624:	10c00017 	ldw	r3,0(r2)
 1018628:	008040b4 	movhi	r2,258
 101862c:	108eef04 	addi	r2,r2,15292
 1018630:	10800383 	ldbu	r2,14(r2)
 1018634:	10803fcc 	andi	r2,r2,255
 1018638:	10bfffc4 	addi	r2,r2,-1
 101863c:	1880381e 	bne	r3,r2,1018720 <alt_up_sd_card_write+0x418>
							== boot_sector_data.sectors_per_cluster - 1) {
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number)) {
 1018640:	e13ffc04 	addi	r4,fp,-16
 1018644:	10169300 	call	1016930 <find_first_empty_cluster>
 1018648:	1005003a 	cmpeq	r2,r2,zero
 101864c:	1000321e 	bne	r2,zero,1018718 <alt_up_sd_card_write+0x410>
							// mark clusters in both File Allocation Tables.
							mark_cluster(
 1018650:	e0bffd0f 	ldh	r2,-12(fp)
 1018654:	00c040b4 	movhi	r3,258
 1018658:	18cf0404 	addi	r3,r3,15376
 101865c:	100491ba 	slli	r2,r2,6
 1018660:	10c5883a 	add	r2,r2,r3
 1018664:	10800704 	addi	r2,r2,28
 1018668:	11000017 	ldw	r4,0(r2)
 101866c:	e0bffc17 	ldw	r2,-16(fp)
 1018670:	117fffcc 	andi	r5,r2,65535
 1018674:	2960001c 	xori	r5,r5,32768
 1018678:	29600004 	addi	r5,r5,-32768
 101867c:	01800044 	movi	r6,1
 1018680:	10149900 	call	1014990 <mark_cluster>
									active_files[file_handle].current_cluster_index,
									((unsigned short int) (cluster_number
											& 0x0000ffff)), true);
							mark_cluster(cluster_number, 0xffff, true);
 1018684:	e13ffc17 	ldw	r4,-16(fp)
 1018688:	017fffc4 	movi	r5,-1
 101868c:	01800044 	movi	r6,1
 1018690:	10149900 	call	1014990 <mark_cluster>
							mark_cluster(
 1018694:	e0bffd0f 	ldh	r2,-12(fp)
 1018698:	00c040b4 	movhi	r3,258
 101869c:	18cf0404 	addi	r3,r3,15376
 10186a0:	100491ba 	slli	r2,r2,6
 10186a4:	10c5883a 	add	r2,r2,r3
 10186a8:	10800704 	addi	r2,r2,28
 10186ac:	11000017 	ldw	r4,0(r2)
 10186b0:	e0bffc17 	ldw	r2,-16(fp)
 10186b4:	117fffcc 	andi	r5,r2,65535
 10186b8:	2960001c 	xori	r5,r5,32768
 10186bc:	29600004 	addi	r5,r5,-32768
 10186c0:	000d883a 	mov	r6,zero
 10186c4:	10149900 	call	1014990 <mark_cluster>
									active_files[file_handle].current_cluster_index,
									((unsigned short int) (cluster_number
											& 0x0000ffff)), false);
							mark_cluster(cluster_number, 0xffff, false);
 10186c8:	e13ffc17 	ldw	r4,-16(fp)
 10186cc:	017fffc4 	movi	r5,-1
 10186d0:	000d883a 	mov	r6,zero
 10186d4:	10149900 	call	1014990 <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index =
 10186d8:	e0bffd0f 	ldh	r2,-12(fp)
 10186dc:	e13ffc17 	ldw	r4,-16(fp)
 10186e0:	00c040b4 	movhi	r3,258
 10186e4:	18cf0404 	addi	r3,r3,15376
 10186e8:	100491ba 	slli	r2,r2,6
 10186ec:	10c5883a 	add	r2,r2,r3
 10186f0:	10800704 	addi	r2,r2,28
 10186f4:	11000015 	stw	r4,0(r2)
									cluster_number;
							active_files[file_handle].current_sector_in_cluster =
 10186f8:	e0bffd0f 	ldh	r2,-12(fp)
 10186fc:	00c040b4 	movhi	r3,258
 1018700:	18cf0404 	addi	r3,r3,15376
 1018704:	100491ba 	slli	r2,r2,6
 1018708:	10c5883a 	add	r2,r2,r3
 101870c:	10800804 	addi	r2,r2,32
 1018710:	10000015 	stw	zero,0(r2)
 1018714:	00001c06 	br	1018788 <alt_up_sd_card_write+0x480>
									0;
						} else {
							return false;
 1018718:	e03fff15 	stw	zero,-4(fp)
 101871c:	00008206 	br	1018928 <alt_up_sd_card_write+0x620>
						}
					} else {
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster =
 1018720:	e43ffd0f 	ldh	r16,-12(fp)
 1018724:	e0bffd0f 	ldh	r2,-12(fp)
 1018728:	00c040b4 	movhi	r3,258
 101872c:	18cf0404 	addi	r3,r3,15376
 1018730:	100491ba 	slli	r2,r2,6
 1018734:	10c5883a 	add	r2,r2,r3
 1018738:	10800904 	addi	r2,r2,36
 101873c:	11000017 	ldw	r4,0(r2)
 1018740:	008040b4 	movhi	r2,258
 1018744:	108eef04 	addi	r2,r2,15292
 1018748:	1080030b 	ldhu	r2,12(r2)
 101874c:	117fffcc 	andi	r5,r2,65535
 1018750:	10057700 	call	1005770 <__udivsi3>
 1018754:	1009883a 	mov	r4,r2
 1018758:	008040b4 	movhi	r2,258
 101875c:	108eef04 	addi	r2,r2,15292
 1018760:	10800383 	ldbu	r2,14(r2)
 1018764:	11403fcc 	andi	r5,r2,255
 1018768:	10057780 	call	1005778 <__umodsi3>
 101876c:	1009883a 	mov	r4,r2
 1018770:	00c040b4 	movhi	r3,258
 1018774:	18cf0404 	addi	r3,r3,15376
 1018778:	800491ba 	slli	r2,r16,6
 101877c:	10c5883a 	add	r2,r2,r3
 1018780:	10800804 	addi	r2,r2,32
 1018784:	11000015 	stw	r4,0(r2)
								(active_files[file_handle].current_byte_position
										/ boot_sector_data.sector_size_in_bytes) % boot_sector_data.sectors_per_cluster;
					}
					data_sector =
 1018788:	008040b4 	movhi	r2,258
 101878c:	108eef04 	addi	r2,r2,15292
 1018790:	11001417 	ldw	r4,80(r2)
 1018794:	e0bffd0f 	ldh	r2,-12(fp)
 1018798:	00c040b4 	movhi	r3,258
 101879c:	18cf0404 	addi	r3,r3,15376
 10187a0:	100491ba 	slli	r2,r2,6
 10187a4:	10c5883a 	add	r2,r2,r3
 10187a8:	10800704 	addi	r2,r2,28
 10187ac:	10800017 	ldw	r2,0(r2)
 10187b0:	10ffff84 	addi	r3,r2,-2
 10187b4:	008040b4 	movhi	r2,258
 10187b8:	108eef04 	addi	r2,r2,15292
 10187bc:	10800383 	ldbu	r2,14(r2)
 10187c0:	10803fcc 	andi	r2,r2,255
 10187c4:	1885383a 	mul	r2,r3,r2
 10187c8:	2089883a 	add	r4,r4,r2
 10187cc:	e0bffd0f 	ldh	r2,-12(fp)
 10187d0:	00c040b4 	movhi	r3,258
 10187d4:	18cf0404 	addi	r3,r3,15376
 10187d8:	100491ba 	slli	r2,r2,6
 10187dc:	10c5883a 	add	r2,r2,r3
 10187e0:	10800804 	addi	r2,r2,32
 10187e4:	10800017 	ldw	r2,0(r2)
 10187e8:	2085883a 	add	r2,r4,r2
 10187ec:	e0bff915 	stw	r2,-28(fp)
									+ active_files[file_handle].current_sector_in_cluster;
				}
			}
			// Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
			if (current_sector_index
 10187f0:	d0e7d617 	ldw	r3,-24744(gp)
 10187f4:	e0bff917 	ldw	r2,-28(fp)
 10187f8:	1885883a 	add	r2,r3,r2
 10187fc:	1007883a 	mov	r3,r2
 1018800:	d0a7da17 	ldw	r2,-24728(gp)
 1018804:	18800726 	beq	r3,r2,1018824 <alt_up_sd_card_write+0x51c>
					!= data_sector + fat_partition_offset_in_512_byte_sectors) {
				if (!Read_Sector_Data_Attempt_CRC(data_sector,
 1018808:	d167d617 	ldw	r5,-24744(gp)
 101880c:	e13ff917 	ldw	r4,-28(fp)
 1018810:	1018c380 	call	1018c38 <Read_Sector_Data_Attempt_CRC>
 1018814:	1004c03a 	cmpne	r2,r2,zero
 1018818:	1000021e 	bne	r2,zero,1018824 <alt_up_sd_card_write+0x51c>
						fat_partition_offset_in_512_byte_sectors)) {
					return false;
 101881c:	e03fff15 	stw	zero,-4(fp)
 1018820:	00004106 	br	1018928 <alt_up_sd_card_write+0x620>
				}
			}
			// Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
 1018824:	e0bff80f 	ldh	r2,-32(fp)
 1018828:	1007883a 	mov	r3,r2
 101882c:	d0a7d517 	ldw	r2,-24748(gp)
 1018830:	1885883a 	add	r2,r3,r2
 1018834:	e0fffe07 	ldb	r3,-8(fp)
 1018838:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position =
 101883c:	e17ffd0f 	ldh	r5,-12(fp)
 1018840:	e0bffd0f 	ldh	r2,-12(fp)
 1018844:	00c040b4 	movhi	r3,258
 1018848:	18cf0404 	addi	r3,r3,15376
 101884c:	100491ba 	slli	r2,r2,6
 1018850:	10c5883a 	add	r2,r2,r3
 1018854:	10800904 	addi	r2,r2,36
 1018858:	10800017 	ldw	r2,0(r2)
 101885c:	11000044 	addi	r4,r2,1
 1018860:	00c040b4 	movhi	r3,258
 1018864:	18cf0404 	addi	r3,r3,15376
 1018868:	280491ba 	slli	r2,r5,6
 101886c:	10c5883a 	add	r2,r2,r3
 1018870:	10800904 	addi	r2,r2,36
 1018874:	11000015 	stw	r4,0(r2)
					active_files[file_handle].current_byte_position + 1;

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position
 1018878:	e0bffd0f 	ldh	r2,-12(fp)
 101887c:	00c040b4 	movhi	r3,258
 1018880:	18cf0404 	addi	r3,r3,15376
 1018884:	100491ba 	slli	r2,r2,6
 1018888:	10c5883a 	add	r2,r2,r3
 101888c:	10800904 	addi	r2,r2,36
 1018890:	11000017 	ldw	r4,0(r2)
 1018894:	e0bffd0f 	ldh	r2,-12(fp)
 1018898:	00c040b4 	movhi	r3,258
 101889c:	18cf0404 	addi	r3,r3,15376
 10188a0:	100491ba 	slli	r2,r2,6
 10188a4:	10c5883a 	add	r2,r2,r3
 10188a8:	10800604 	addi	r2,r2,24
 10188ac:	10800017 	ldw	r2,0(r2)
 10188b0:	1100172e 	bgeu	r2,r4,1018910 <alt_up_sd_card_write+0x608>
					> active_files[file_handle].file_size_in_bytes) {
				active_files[file_handle].file_size_in_bytes =
 10188b4:	e17ffd0f 	ldh	r5,-12(fp)
 10188b8:	e0bffd0f 	ldh	r2,-12(fp)
 10188bc:	00c040b4 	movhi	r3,258
 10188c0:	18cf0404 	addi	r3,r3,15376
 10188c4:	100491ba 	slli	r2,r2,6
 10188c8:	10c5883a 	add	r2,r2,r3
 10188cc:	10800604 	addi	r2,r2,24
 10188d0:	10800017 	ldw	r2,0(r2)
 10188d4:	11000044 	addi	r4,r2,1
 10188d8:	00c040b4 	movhi	r3,258
 10188dc:	18cf0404 	addi	r3,r3,15376
 10188e0:	280491ba 	slli	r2,r5,6
 10188e4:	10c5883a 	add	r2,r2,r3
 10188e8:	10800604 	addi	r2,r2,24
 10188ec:	11000015 	stw	r4,0(r2)
						active_files[file_handle].file_size_in_bytes + 1;
				active_files[file_handle].modified = true;
 10188f0:	e0bffd0f 	ldh	r2,-12(fp)
 10188f4:	00c040b4 	movhi	r3,258
 10188f8:	18cf0404 	addi	r3,r3,15376
 10188fc:	100491ba 	slli	r2,r2,6
 1018900:	10c5883a 	add	r2,r2,r3
 1018904:	10c00e04 	addi	r3,r2,56
 1018908:	00800044 	movi	r2,1
 101890c:	18800015 	stw	r2,0(r3)
			}
			// Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
			current_sector_modified = true;
 1018910:	00800044 	movi	r2,1
 1018914:	d0a7d915 	stw	r2,-24732(gp)
			result = true;
 1018918:	00800044 	movi	r2,1
 101891c:	e0bffa15 	stw	r2,-24(fp)
		}
	}

	return result;
 1018920:	e0bffa17 	ldw	r2,-24(fp)
 1018924:	e0bfff15 	stw	r2,-4(fp)
 1018928:	e0bfff17 	ldw	r2,-4(fp)
}
 101892c:	e037883a 	mov	sp,fp
 1018930:	dfc00217 	ldw	ra,8(sp)
 1018934:	df000117 	ldw	fp,4(sp)
 1018938:	dc000017 	ldw	r16,0(sp)
 101893c:	dec00304 	addi	sp,sp,12
 1018940:	f800283a 	ret

01018944 <alt_up_sd_card_fclose>:

bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
 1018944:	defffb04 	addi	sp,sp,-20
 1018948:	dfc00415 	stw	ra,16(sp)
 101894c:	df000315 	stw	fp,12(sp)
 1018950:	df000304 	addi	fp,sp,12
 1018954:	e13fff0d 	sth	r4,-4(fp)
	assert(file_handle >= 0);
 1018958:	e0bfff0f 	ldh	r2,-4(fp)
 101895c:	1004403a 	cmpge	r2,r2,zero
 1018960:	1000081e 	bne	r2,zero,1018984 <alt_up_sd_card_fclose+0x40>
 1018964:	010040b4 	movhi	r4,258
 1018968:	213e6704 	addi	r4,r4,-1636
 101896c:	0141bf04 	movi	r5,1788
 1018970:	018040b4 	movhi	r6,258
 1018974:	31be6104 	addi	r6,r6,-1660
 1018978:	01c040b4 	movhi	r7,258
 101897c:	39fe7404 	addi	r7,r7,-1584
 1018980:	101cfbc0 	call	101cfbc <__assert_func>

	bool result = false;
 1018984:	e03ffe15 	stw	zero,-8(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
 1018988:	10174f00 	call	10174f0 <alt_up_sd_card_is_Present>
 101898c:	1005003a 	cmpeq	r2,r2,zero
 1018990:	1000641e 	bne	r2,zero,1018b24 <alt_up_sd_card_fclose+0x1e0>
 1018994:	d0a7cf17 	ldw	r2,-24772(gp)
 1018998:	1005003a 	cmpeq	r2,r2,zero
 101899c:	1000611e 	bne	r2,zero,1018b24 <alt_up_sd_card_fclose+0x1e0>
		if (active_files[file_handle].in_use) {
 10189a0:	e0bfff0f 	ldh	r2,-4(fp)
 10189a4:	00c040b4 	movhi	r3,258
 10189a8:	18cf0404 	addi	r3,r3,15376
 10189ac:	100491ba 	slli	r2,r2,6
 10189b0:	10c5883a 	add	r2,r2,r3
 10189b4:	10800f04 	addi	r2,r2,60
 10189b8:	10800017 	ldw	r2,0(r2)
 10189bc:	1005003a 	cmpeq	r2,r2,zero
 10189c0:	1000581e 	bne	r2,zero,1018b24 <alt_up_sd_card_fclose+0x1e0>
			if (active_files[file_handle].modified) {
 10189c4:	e0bfff0f 	ldh	r2,-4(fp)
 10189c8:	00c040b4 	movhi	r3,258
 10189cc:	18cf0404 	addi	r3,r3,15376
 10189d0:	100491ba 	slli	r2,r2,6
 10189d4:	10c5883a 	add	r2,r2,r3
 10189d8:	10800e04 	addi	r2,r2,56
 10189dc:	10800017 	ldw	r2,0(r2)
 10189e0:	1005003a 	cmpeq	r2,r2,zero
 10189e4:	1000461e 	bne	r2,zero,1018b00 <alt_up_sd_card_fclose+0x1bc>
				unsigned int record_sector =
						active_files[file_handle].file_record_sector_in_cluster;
 10189e8:	e0bfff0f 	ldh	r2,-4(fp)
 10189ec:	00c040b4 	movhi	r3,258
 10189f0:	18cf0404 	addi	r3,r3,15376
 10189f4:	100491ba 	slli	r2,r2,6
 10189f8:	10c5883a 	add	r2,r2,r3
 10189fc:	10800b04 	addi	r2,r2,44
 1018a00:	10800017 	ldw	r2,0(r2)
 1018a04:	e0bffd15 	stw	r2,-12(fp)
				if (active_files[file_handle].file_record_cluster == 0) {
 1018a08:	e0bfff0f 	ldh	r2,-4(fp)
 1018a0c:	00c040b4 	movhi	r3,258
 1018a10:	18cf0404 	addi	r3,r3,15376
 1018a14:	100491ba 	slli	r2,r2,6
 1018a18:	10c5883a 	add	r2,r2,r3
 1018a1c:	10800a04 	addi	r2,r2,40
 1018a20:	10800017 	ldw	r2,0(r2)
 1018a24:	1004c03a 	cmpne	r2,r2,zero
 1018a28:	1000071e 	bne	r2,zero,1018a48 <alt_up_sd_card_fclose+0x104>
					record_sector = record_sector
 1018a2c:	008040b4 	movhi	r2,258
 1018a30:	108eef04 	addi	r2,r2,15292
 1018a34:	10c01317 	ldw	r3,76(r2)
 1018a38:	e0bffd17 	ldw	r2,-12(fp)
 1018a3c:	10c5883a 	add	r2,r2,r3
 1018a40:	e0bffd15 	stw	r2,-12(fp)
 1018a44:	00001406 	br	1018a98 <alt_up_sd_card_fclose+0x154>
							+ boot_sector_data.root_directory_sector_offset;
				} else {
					record_sector =
 1018a48:	008040b4 	movhi	r2,258
 1018a4c:	108eef04 	addi	r2,r2,15292
 1018a50:	10c01417 	ldw	r3,80(r2)
 1018a54:	e0bffd17 	ldw	r2,-12(fp)
 1018a58:	1889883a 	add	r4,r3,r2
 1018a5c:	e0bfff0f 	ldh	r2,-4(fp)
 1018a60:	00c040b4 	movhi	r3,258
 1018a64:	18cf0404 	addi	r3,r3,15376
 1018a68:	100491ba 	slli	r2,r2,6
 1018a6c:	10c5883a 	add	r2,r2,r3
 1018a70:	10800a04 	addi	r2,r2,40
 1018a74:	10800017 	ldw	r2,0(r2)
 1018a78:	10ffff84 	addi	r3,r2,-2
 1018a7c:	008040b4 	movhi	r2,258
 1018a80:	108eef04 	addi	r2,r2,15292
 1018a84:	10800383 	ldbu	r2,14(r2)
 1018a88:	10803fcc 	andi	r2,r2,255
 1018a8c:	1885383a 	mul	r2,r3,r2
 1018a90:	2085883a 	add	r2,r4,r2
 1018a94:	e0bffd15 	stw	r2,-12(fp)
							record_sector + boot_sector_data.data_sector_offset
									+ (active_files[file_handle].file_record_cluster
											- 2)
											* boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector,
 1018a98:	e13ffd17 	ldw	r4,-12(fp)
 1018a9c:	d167d617 	ldw	r5,-24744(gp)
 1018aa0:	10147dc0 	call	10147dc <Read_Sector_Data>
 1018aa4:	1005003a 	cmpeq	r2,r2,zero
 1018aa8:	1000151e 	bne	r2,zero,1018b00 <alt_up_sd_card_fclose+0x1bc>
						fat_partition_offset_in_512_byte_sectors)) {
					if (Write_File_Record_At_Offset(
 1018aac:	e0bfff0f 	ldh	r2,-4(fp)
 1018ab0:	00c040b4 	movhi	r3,258
 1018ab4:	18cf0404 	addi	r3,r3,15376
 1018ab8:	100491ba 	slli	r2,r2,6
 1018abc:	10c5883a 	add	r2,r2,r3
 1018ac0:	10800c04 	addi	r2,r2,48
 1018ac4:	1080000b 	ldhu	r2,0(r2)
 1018ac8:	113fffcc 	andi	r4,r2,65535
 1018acc:	2120001c 	xori	r4,r4,32768
 1018ad0:	21200004 	addi	r4,r4,-32768
 1018ad4:	e0bfff0f 	ldh	r2,-4(fp)
 1018ad8:	100491ba 	slli	r2,r2,6
 1018adc:	1007883a 	mov	r3,r2
 1018ae0:	008040b4 	movhi	r2,258
 1018ae4:	108f0404 	addi	r2,r2,15376
 1018ae8:	188b883a 	add	r5,r3,r2
 1018aec:	1014ea80 	call	1014ea8 <Write_File_Record_At_Offset>
 1018af0:	1005003a 	cmpeq	r2,r2,zero
 1018af4:	1000021e 	bne	r2,zero,1018b00 <alt_up_sd_card_fclose+0x1bc>
							active_files[file_handle].file_record_offset,
							&(active_files[file_handle]))) {
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
 1018af8:	101478c0 	call	101478c <Save_Modified_Sector>
 1018afc:	e0bffe15 	stw	r2,-8(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
 1018b00:	e0bfff0f 	ldh	r2,-4(fp)
 1018b04:	00c040b4 	movhi	r3,258
 1018b08:	18cf0404 	addi	r3,r3,15376
 1018b0c:	100491ba 	slli	r2,r2,6
 1018b10:	10c5883a 	add	r2,r2,r3
 1018b14:	10800f04 	addi	r2,r2,60
 1018b18:	10000015 	stw	zero,0(r2)
			result = true;
 1018b1c:	00800044 	movi	r2,1
 1018b20:	e0bffe15 	stw	r2,-8(fp)
		}
	}

	return result;
 1018b24:	e0bffe17 	ldw	r2,-8(fp)
}
 1018b28:	e037883a 	mov	sp,fp
 1018b2c:	dfc00117 	ldw	ra,4(sp)
 1018b30:	df000017 	ldw	fp,0(sp)
 1018b34:	dec00204 	addi	sp,sp,8
 1018b38:	f800283a 	ret

01018b3c <Read_Sector_Data_CRC>:

bool Read_Sector_Data_CRC(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
 1018b3c:	defff904 	addi	sp,sp,-28
 1018b40:	dfc00615 	stw	ra,24(sp)
 1018b44:	df000515 	stw	fp,20(sp)
 1018b48:	df000504 	addi	fp,sp,20
 1018b4c:	e13ffd15 	stw	r4,-12(fp)
 1018b50:	e17ffe15 	stw	r5,-8(fp)
	bool result = false;
 1018b54:	e03ffc15 	stw	zero,-16(fp)

	if (alt_up_sd_card_is_Present()) {
 1018b58:	10174f00 	call	10174f0 <alt_up_sd_card_is_Present>
 1018b5c:	1005003a 	cmpeq	r2,r2,zero
 1018b60:	10002d1e 	bne	r2,zero,1018c18 <Read_Sector_Data_CRC+0xdc>
		short int reg_state = 0xff;
 1018b64:	00803fc4 	movi	r2,255
 1018b68:	e0bffb0d 	sth	r2,-20(fp)

		/* Write data to the SD card if the current buffer is out of date. */
		if (current_sector_modified) {
 1018b6c:	d0a7d917 	ldw	r2,-24732(gp)
 1018b70:	1005003a 	cmpeq	r2,r2,zero
 1018b74:	1000081e 	bne	r2,zero,1018b98 <Read_Sector_Data_CRC+0x5c>
			if (Write_Sector_Data(current_sector_index, 0) == false) {
 1018b78:	d0a7da17 	ldw	r2,-24728(gp)
 1018b7c:	1009883a 	mov	r4,r2
 1018b80:	000b883a 	mov	r5,zero
 1018b84:	10146c40 	call	10146c4 <Write_Sector_Data>
 1018b88:	1004c03a 	cmpne	r2,r2,zero
 1018b8c:	1000021e 	bne	r2,zero,1018b98 <Read_Sector_Data_CRC+0x5c>
				return false;
 1018b90:	e03fff15 	stw	zero,-4(fp)
 1018b94:	00002206 	br	1018c20 <Read_Sector_Data_CRC+0xe4>
			}
		}
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0,
 1018b98:	d0a7d417 	ldw	r2,-24752(gp)
 1018b9c:	1009883a 	mov	r4,r2
 1018ba0:	e0fffd17 	ldw	r3,-12(fp)
 1018ba4:	e0bffe17 	ldw	r2,-8(fp)
 1018ba8:	1885883a 	add	r2,r3,r2
 1018bac:	1006927a 	slli	r3,r2,9
 1018bb0:	2005883a 	mov	r2,r4
 1018bb4:	10c00035 	stwio	r3,0(r2)
				(sector_index + partition_offset)*512);
		IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
 1018bb8:	d0a7d317 	ldw	r2,-24756(gp)
 1018bbc:	1007883a 	mov	r3,r2
 1018bc0:	00800444 	movi	r2,17
 1018bc4:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
 1018bc8:	d0a7d017 	ldw	r2,-24768(gp)
 1018bcc:	1080002b 	ldhuio	r2,0(r2)
 1018bd0:	e0bffb0d 	sth	r2,-20(fp)
		} while ((reg_state & 0x04) != 0);
 1018bd4:	e0bffb0b 	ldhu	r2,-20(fp)
 1018bd8:	10bfffcc 	andi	r2,r2,65535
 1018bdc:	1080010c 	andi	r2,r2,4
 1018be0:	1004c03a 	cmpne	r2,r2,zero
 1018be4:	103ff81e 	bne	r2,zero,1018bc8 <Read_Sector_Data_CRC+0x8c>
		// Make sure the request did not time out.
		if ((reg_state & 0x30) == 0) {
 1018be8:	e0bffb0b 	ldhu	r2,-20(fp)
 1018bec:	10bfffcc 	andi	r2,r2,65535
 1018bf0:	10800c0c 	andi	r2,r2,48
 1018bf4:	1004c03a 	cmpne	r2,r2,zero
 1018bf8:	1000071e 	bne	r2,zero,1018c18 <Read_Sector_Data_CRC+0xdc>
			result = true;
 1018bfc:	00800044 	movi	r2,1
 1018c00:	e0bffc15 	stw	r2,-16(fp)
			current_sector_modified = false;
 1018c04:	d027d915 	stw	zero,-24732(gp)
			current_sector_index = sector_index + partition_offset;
 1018c08:	e0fffd17 	ldw	r3,-12(fp)
 1018c0c:	e0bffe17 	ldw	r2,-8(fp)
 1018c10:	1885883a 	add	r2,r3,r2
 1018c14:	d0a7da15 	stw	r2,-24728(gp)
		}
	}
	return result;
 1018c18:	e0bffc17 	ldw	r2,-16(fp)
 1018c1c:	e0bfff15 	stw	r2,-4(fp)
 1018c20:	e0bfff17 	ldw	r2,-4(fp)
}
 1018c24:	e037883a 	mov	sp,fp
 1018c28:	dfc00117 	ldw	ra,4(sp)
 1018c2c:	df000017 	ldw	fp,0(sp)
 1018c30:	dec00204 	addi	sp,sp,8
 1018c34:	f800283a 	ret

01018c38 <Read_Sector_Data_Attempt_CRC>:

bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset) {
 1018c38:	defff804 	addi	sp,sp,-32
 1018c3c:	dfc00715 	stw	ra,28(sp)
 1018c40:	df000615 	stw	fp,24(sp)
 1018c44:	df000604 	addi	fp,sp,24
 1018c48:	e13ffd15 	stw	r4,-12(fp)
 1018c4c:	e17ffe15 	stw	r5,-8(fp)
	int i;
	bool correct;
	const int attempts = 100;
 1018c50:	00801904 	movi	r2,100
 1018c54:	e0bffa15 	stw	r2,-24(fp)

	for (i = 0; i < attempts; i++) {
 1018c58:	e03ffc15 	stw	zero,-16(fp)
 1018c5c:	00000d06 	br	1018c94 <Read_Sector_Data_Attempt_CRC+0x5c>
		correct = Read_Sector_Data_CRC(sector_index, partition_offset);
 1018c60:	e13ffd17 	ldw	r4,-12(fp)
 1018c64:	e17ffe17 	ldw	r5,-8(fp)
 1018c68:	1018b3c0 	call	1018b3c <Read_Sector_Data_CRC>
 1018c6c:	e0bffb15 	stw	r2,-20(fp)
		if (correct) {
 1018c70:	e0bffb17 	ldw	r2,-20(fp)
 1018c74:	1005003a 	cmpeq	r2,r2,zero
 1018c78:	1000031e 	bne	r2,zero,1018c88 <Read_Sector_Data_Attempt_CRC+0x50>
			return true;
 1018c7c:	00800044 	movi	r2,1
 1018c80:	e0bfff15 	stw	r2,-4(fp)
 1018c84:	00000a06 	br	1018cb0 <Read_Sector_Data_Attempt_CRC+0x78>
bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset) {
	int i;
	bool correct;
	const int attempts = 100;

	for (i = 0; i < attempts; i++) {
 1018c88:	e0bffc17 	ldw	r2,-16(fp)
 1018c8c:	10800044 	addi	r2,r2,1
 1018c90:	e0bffc15 	stw	r2,-16(fp)
 1018c94:	e0fffc17 	ldw	r3,-16(fp)
 1018c98:	e0bffa17 	ldw	r2,-24(fp)
 1018c9c:	18bff016 	blt	r3,r2,1018c60 <Read_Sector_Data_Attempt_CRC+0x28>
		correct = Read_Sector_Data_CRC(sector_index, partition_offset);
		if (correct) {
			return true;
		}
	}
	return Read_Sector_Data(sector_index, partition_offset);
 1018ca0:	e13ffd17 	ldw	r4,-12(fp)
 1018ca4:	e17ffe17 	ldw	r5,-8(fp)
 1018ca8:	10147dc0 	call	10147dc <Read_Sector_Data>
 1018cac:	e0bfff15 	stw	r2,-4(fp)
 1018cb0:	e0bfff17 	ldw	r2,-4(fp)
}
 1018cb4:	e037883a 	mov	sp,fp
 1018cb8:	dfc00117 	ldw	ra,4(sp)
 1018cbc:	df000017 	ldw	fp,0(sp)
 1018cc0:	dec00204 	addi	sp,sp,8
 1018cc4:	f800283a 	ret

01018cc8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 1018cc8:	defffa04 	addi	sp,sp,-24
 1018ccc:	dfc00515 	stw	ra,20(sp)
 1018cd0:	df000415 	stw	fp,16(sp)
 1018cd4:	df000404 	addi	fp,sp,16
 1018cd8:	e13ffd15 	stw	r4,-12(fp)
 1018cdc:	e17ffe15 	stw	r5,-8(fp)
 1018ce0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1018ce4:	e0bffd17 	ldw	r2,-12(fp)
 1018ce8:	10800017 	ldw	r2,0(r2)
 1018cec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 1018cf0:	e0bffc17 	ldw	r2,-16(fp)
 1018cf4:	11000a04 	addi	r4,r2,40
 1018cf8:	e0bffd17 	ldw	r2,-12(fp)
 1018cfc:	11c00217 	ldw	r7,8(r2)
 1018d00:	e17ffe17 	ldw	r5,-8(fp)
 1018d04:	e1bfff17 	ldw	r6,-4(fp)
 1018d08:	101930c0 	call	101930c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 1018d0c:	e037883a 	mov	sp,fp
 1018d10:	dfc00117 	ldw	ra,4(sp)
 1018d14:	df000017 	ldw	fp,0(sp)
 1018d18:	dec00204 	addi	sp,sp,8
 1018d1c:	f800283a 	ret

01018d20 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 1018d20:	defffa04 	addi	sp,sp,-24
 1018d24:	dfc00515 	stw	ra,20(sp)
 1018d28:	df000415 	stw	fp,16(sp)
 1018d2c:	df000404 	addi	fp,sp,16
 1018d30:	e13ffd15 	stw	r4,-12(fp)
 1018d34:	e17ffe15 	stw	r5,-8(fp)
 1018d38:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1018d3c:	e0bffd17 	ldw	r2,-12(fp)
 1018d40:	10800017 	ldw	r2,0(r2)
 1018d44:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 1018d48:	e0bffc17 	ldw	r2,-16(fp)
 1018d4c:	11000a04 	addi	r4,r2,40
 1018d50:	e0bffd17 	ldw	r2,-12(fp)
 1018d54:	11c00217 	ldw	r7,8(r2)
 1018d58:	e17ffe17 	ldw	r5,-8(fp)
 1018d5c:	e1bfff17 	ldw	r6,-4(fp)
 1018d60:	10195300 	call	1019530 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 1018d64:	e037883a 	mov	sp,fp
 1018d68:	dfc00117 	ldw	ra,4(sp)
 1018d6c:	df000017 	ldw	fp,0(sp)
 1018d70:	dec00204 	addi	sp,sp,8
 1018d74:	f800283a 	ret

01018d78 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 1018d78:	defffc04 	addi	sp,sp,-16
 1018d7c:	dfc00315 	stw	ra,12(sp)
 1018d80:	df000215 	stw	fp,8(sp)
 1018d84:	df000204 	addi	fp,sp,8
 1018d88:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1018d8c:	e0bfff17 	ldw	r2,-4(fp)
 1018d90:	10800017 	ldw	r2,0(r2)
 1018d94:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 1018d98:	e0bffe17 	ldw	r2,-8(fp)
 1018d9c:	11000a04 	addi	r4,r2,40
 1018da0:	e0bfff17 	ldw	r2,-4(fp)
 1018da4:	11400217 	ldw	r5,8(r2)
 1018da8:	10191a40 	call	10191a4 <altera_avalon_jtag_uart_close>
}
 1018dac:	e037883a 	mov	sp,fp
 1018db0:	dfc00117 	ldw	ra,4(sp)
 1018db4:	df000017 	ldw	fp,0(sp)
 1018db8:	dec00204 	addi	sp,sp,8
 1018dbc:	f800283a 	ret

01018dc0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 1018dc0:	defffa04 	addi	sp,sp,-24
 1018dc4:	dfc00515 	stw	ra,20(sp)
 1018dc8:	df000415 	stw	fp,16(sp)
 1018dcc:	df000404 	addi	fp,sp,16
 1018dd0:	e13ffd15 	stw	r4,-12(fp)
 1018dd4:	e17ffe15 	stw	r5,-8(fp)
 1018dd8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 1018ddc:	e0bffd17 	ldw	r2,-12(fp)
 1018de0:	10800017 	ldw	r2,0(r2)
 1018de4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 1018de8:	e0bffc17 	ldw	r2,-16(fp)
 1018dec:	11000a04 	addi	r4,r2,40
 1018df0:	e17ffe17 	ldw	r5,-8(fp)
 1018df4:	e1bfff17 	ldw	r6,-4(fp)
 1018df8:	10192180 	call	1019218 <altera_avalon_jtag_uart_ioctl>
}
 1018dfc:	e037883a 	mov	sp,fp
 1018e00:	dfc00117 	ldw	ra,4(sp)
 1018e04:	df000017 	ldw	fp,0(sp)
 1018e08:	dec00204 	addi	sp,sp,8
 1018e0c:	f800283a 	ret

01018e10 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 1018e10:	defffb04 	addi	sp,sp,-20
 1018e14:	dfc00415 	stw	ra,16(sp)
 1018e18:	df000315 	stw	fp,12(sp)
 1018e1c:	df000304 	addi	fp,sp,12
 1018e20:	e13ffd15 	stw	r4,-12(fp)
 1018e24:	e17ffe15 	stw	r5,-8(fp)
 1018e28:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1018e2c:	e0fffd17 	ldw	r3,-12(fp)
 1018e30:	00800044 	movi	r2,1
 1018e34:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 1018e38:	e0bffd17 	ldw	r2,-12(fp)
 1018e3c:	10800017 	ldw	r2,0(r2)
 1018e40:	11000104 	addi	r4,r2,4
 1018e44:	e0bffd17 	ldw	r2,-12(fp)
 1018e48:	10800817 	ldw	r2,32(r2)
 1018e4c:	1007883a 	mov	r3,r2
 1018e50:	2005883a 	mov	r2,r4
 1018e54:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 1018e58:	e13fff17 	ldw	r4,-4(fp)
 1018e5c:	e17ffd17 	ldw	r5,-12(fp)
 1018e60:	018040b4 	movhi	r6,258
 1018e64:	31a3b204 	addi	r6,r6,-28984
 1018e68:	101c8b00 	call	101c8b0 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 1018e6c:	e0bffd17 	ldw	r2,-12(fp)
 1018e70:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 1018e74:	e0bffd17 	ldw	r2,-12(fp)
 1018e78:	11000204 	addi	r4,r2,8
 1018e7c:	008040b4 	movhi	r2,258
 1018e80:	108e8e04 	addi	r2,r2,14904
 1018e84:	10800017 	ldw	r2,0(r2)
 1018e88:	100b883a 	mov	r5,r2
 1018e8c:	018040b4 	movhi	r6,258
 1018e90:	31a43d04 	addi	r6,r6,-28428
 1018e94:	e1fffd17 	ldw	r7,-12(fp)
 1018e98:	101c1f00 	call	101c1f0 <alt_alarm_start>
 1018e9c:	1004403a 	cmpge	r2,r2,zero
 1018ea0:	1000041e 	bne	r2,zero,1018eb4 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 1018ea4:	e0fffd17 	ldw	r3,-12(fp)
 1018ea8:	00a00034 	movhi	r2,32768
 1018eac:	10bfffc4 	addi	r2,r2,-1
 1018eb0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 1018eb4:	e037883a 	mov	sp,fp
 1018eb8:	dfc00117 	ldw	ra,4(sp)
 1018ebc:	df000017 	ldw	fp,0(sp)
 1018ec0:	dec00204 	addi	sp,sp,8
 1018ec4:	f800283a 	ret

01018ec8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 1018ec8:	defff704 	addi	sp,sp,-36
 1018ecc:	df000815 	stw	fp,32(sp)
 1018ed0:	df000804 	addi	fp,sp,32
 1018ed4:	e13ffe15 	stw	r4,-8(fp)
 1018ed8:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 1018edc:	e0bffe17 	ldw	r2,-8(fp)
 1018ee0:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 1018ee4:	e0bffd17 	ldw	r2,-12(fp)
 1018ee8:	10800017 	ldw	r2,0(r2)
 1018eec:	e0bffc15 	stw	r2,-16(fp)
 1018ef0:	00000006 	br	1018ef4 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1018ef4:	e0bffc17 	ldw	r2,-16(fp)
 1018ef8:	10800104 	addi	r2,r2,4
 1018efc:	10800037 	ldwio	r2,0(r2)
 1018f00:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 1018f04:	e0bffb17 	ldw	r2,-20(fp)
 1018f08:	1080c00c 	andi	r2,r2,768
 1018f0c:	1005003a 	cmpeq	r2,r2,zero
 1018f10:	1000741e 	bne	r2,zero,10190e4 <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 1018f14:	e0bffb17 	ldw	r2,-20(fp)
 1018f18:	1080400c 	andi	r2,r2,256
 1018f1c:	1005003a 	cmpeq	r2,r2,zero
 1018f20:	1000351e 	bne	r2,zero,1018ff8 <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 1018f24:	00800074 	movhi	r2,1
 1018f28:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1018f2c:	e0bffd17 	ldw	r2,-12(fp)
 1018f30:	10800a17 	ldw	r2,40(r2)
 1018f34:	10800044 	addi	r2,r2,1
 1018f38:	1081ffcc 	andi	r2,r2,2047
 1018f3c:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
 1018f40:	e0bffd17 	ldw	r2,-12(fp)
 1018f44:	10c00b17 	ldw	r3,44(r2)
 1018f48:	e0bff917 	ldw	r2,-28(fp)
 1018f4c:	18801626 	beq	r3,r2,1018fa8 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 1018f50:	e0bffc17 	ldw	r2,-16(fp)
 1018f54:	10800037 	ldwio	r2,0(r2)
 1018f58:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 1018f5c:	e0bffa17 	ldw	r2,-24(fp)
 1018f60:	10a0000c 	andi	r2,r2,32768
 1018f64:	1005003a 	cmpeq	r2,r2,zero
 1018f68:	10000f1e 	bne	r2,zero,1018fa8 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 1018f6c:	e0bffd17 	ldw	r2,-12(fp)
 1018f70:	10c00a17 	ldw	r3,40(r2)
 1018f74:	e0bffa17 	ldw	r2,-24(fp)
 1018f78:	1009883a 	mov	r4,r2
 1018f7c:	e0bffd17 	ldw	r2,-12(fp)
 1018f80:	1885883a 	add	r2,r3,r2
 1018f84:	10800e04 	addi	r2,r2,56
 1018f88:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1018f8c:	e0bffd17 	ldw	r2,-12(fp)
 1018f90:	10800a17 	ldw	r2,40(r2)
 1018f94:	10800044 	addi	r2,r2,1
 1018f98:	10c1ffcc 	andi	r3,r2,2047
 1018f9c:	e0bffd17 	ldw	r2,-12(fp)
 1018fa0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 1018fa4:	003fe106 	br	1018f2c <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 1018fa8:	e0bffa17 	ldw	r2,-24(fp)
 1018fac:	10bfffec 	andhi	r2,r2,65535
 1018fb0:	1005003a 	cmpeq	r2,r2,zero
 1018fb4:	1000101e 	bne	r2,zero,1018ff8 <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1018fb8:	e0bffd17 	ldw	r2,-12(fp)
 1018fbc:	10c00817 	ldw	r3,32(r2)
 1018fc0:	00bfff84 	movi	r2,-2
 1018fc4:	1886703a 	and	r3,r3,r2
 1018fc8:	e0bffd17 	ldw	r2,-12(fp)
 1018fcc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 1018fd0:	e0bffc17 	ldw	r2,-16(fp)
 1018fd4:	11000104 	addi	r4,r2,4
 1018fd8:	e0bffd17 	ldw	r2,-12(fp)
 1018fdc:	10800817 	ldw	r2,32(r2)
 1018fe0:	1007883a 	mov	r3,r2
 1018fe4:	2005883a 	mov	r2,r4
 1018fe8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1018fec:	e0bffc17 	ldw	r2,-16(fp)
 1018ff0:	10800104 	addi	r2,r2,4
 1018ff4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 1018ff8:	e0bffb17 	ldw	r2,-20(fp)
 1018ffc:	1080800c 	andi	r2,r2,512
 1019000:	1005003a 	cmpeq	r2,r2,zero
 1019004:	103fbb1e 	bne	r2,zero,1018ef4 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 1019008:	e0bffb17 	ldw	r2,-20(fp)
 101900c:	10bfffec 	andhi	r2,r2,65535
 1019010:	1004d43a 	srli	r2,r2,16
 1019014:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 1019018:	00001506 	br	1019070 <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 101901c:	e13ffc17 	ldw	r4,-16(fp)
 1019020:	e0bffd17 	ldw	r2,-12(fp)
 1019024:	10c00d17 	ldw	r3,52(r2)
 1019028:	e0bffd17 	ldw	r2,-12(fp)
 101902c:	1885883a 	add	r2,r3,r2
 1019030:	10820e04 	addi	r2,r2,2104
 1019034:	10800003 	ldbu	r2,0(r2)
 1019038:	10c03fcc 	andi	r3,r2,255
 101903c:	18c0201c 	xori	r3,r3,128
 1019040:	18ffe004 	addi	r3,r3,-128
 1019044:	2005883a 	mov	r2,r4
 1019048:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 101904c:	e0bffd17 	ldw	r2,-12(fp)
 1019050:	10800d17 	ldw	r2,52(r2)
 1019054:	10800044 	addi	r2,r2,1
 1019058:	10c1ffcc 	andi	r3,r2,2047
 101905c:	e0bffd17 	ldw	r2,-12(fp)
 1019060:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 1019064:	e0bff817 	ldw	r2,-32(fp)
 1019068:	10bfffc4 	addi	r2,r2,-1
 101906c:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 1019070:	e0bff817 	ldw	r2,-32(fp)
 1019074:	1005003a 	cmpeq	r2,r2,zero
 1019078:	1000051e 	bne	r2,zero,1019090 <altera_avalon_jtag_uart_irq+0x1c8>
 101907c:	e0bffd17 	ldw	r2,-12(fp)
 1019080:	10c00d17 	ldw	r3,52(r2)
 1019084:	e0bffd17 	ldw	r2,-12(fp)
 1019088:	10800c17 	ldw	r2,48(r2)
 101908c:	18bfe31e 	bne	r3,r2,101901c <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 1019090:	e0bff817 	ldw	r2,-32(fp)
 1019094:	1005003a 	cmpeq	r2,r2,zero
 1019098:	103f961e 	bne	r2,zero,1018ef4 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 101909c:	e0bffd17 	ldw	r2,-12(fp)
 10190a0:	10c00817 	ldw	r3,32(r2)
 10190a4:	00bfff44 	movi	r2,-3
 10190a8:	1886703a 	and	r3,r3,r2
 10190ac:	e0bffd17 	ldw	r2,-12(fp)
 10190b0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 10190b4:	e0bffd17 	ldw	r2,-12(fp)
 10190b8:	10800017 	ldw	r2,0(r2)
 10190bc:	11000104 	addi	r4,r2,4
 10190c0:	e0bffd17 	ldw	r2,-12(fp)
 10190c4:	10800817 	ldw	r2,32(r2)
 10190c8:	1007883a 	mov	r3,r2
 10190cc:	2005883a 	mov	r2,r4
 10190d0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 10190d4:	e0bffc17 	ldw	r2,-16(fp)
 10190d8:	10800104 	addi	r2,r2,4
 10190dc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 10190e0:	003f8406 	br	1018ef4 <altera_avalon_jtag_uart_irq+0x2c>
}
 10190e4:	e037883a 	mov	sp,fp
 10190e8:	df000017 	ldw	fp,0(sp)
 10190ec:	dec00104 	addi	sp,sp,4
 10190f0:	f800283a 	ret

010190f4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 10190f4:	defffc04 	addi	sp,sp,-16
 10190f8:	df000315 	stw	fp,12(sp)
 10190fc:	df000304 	addi	fp,sp,12
 1019100:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 1019104:	e0bfff17 	ldw	r2,-4(fp)
 1019108:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 101910c:	e0bffe17 	ldw	r2,-8(fp)
 1019110:	10800017 	ldw	r2,0(r2)
 1019114:	10800104 	addi	r2,r2,4
 1019118:	10800037 	ldwio	r2,0(r2)
 101911c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 1019120:	e0bffd17 	ldw	r2,-12(fp)
 1019124:	1081000c 	andi	r2,r2,1024
 1019128:	1005003a 	cmpeq	r2,r2,zero
 101912c:	10000c1e 	bne	r2,zero,1019160 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 1019130:	e0bffe17 	ldw	r2,-8(fp)
 1019134:	10800017 	ldw	r2,0(r2)
 1019138:	11000104 	addi	r4,r2,4
 101913c:	e0bffe17 	ldw	r2,-8(fp)
 1019140:	10800817 	ldw	r2,32(r2)
 1019144:	10810014 	ori	r2,r2,1024
 1019148:	1007883a 	mov	r3,r2
 101914c:	2005883a 	mov	r2,r4
 1019150:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 1019154:	e0bffe17 	ldw	r2,-8(fp)
 1019158:	10000915 	stw	zero,36(r2)
 101915c:	00000a06 	br	1019188 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 1019160:	e0bffe17 	ldw	r2,-8(fp)
 1019164:	10c00917 	ldw	r3,36(r2)
 1019168:	00a00034 	movhi	r2,32768
 101916c:	10bfff04 	addi	r2,r2,-4
 1019170:	10c00536 	bltu	r2,r3,1019188 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 1019174:	e0bffe17 	ldw	r2,-8(fp)
 1019178:	10800917 	ldw	r2,36(r2)
 101917c:	10c00044 	addi	r3,r2,1
 1019180:	e0bffe17 	ldw	r2,-8(fp)
 1019184:	10c00915 	stw	r3,36(r2)
 1019188:	008040b4 	movhi	r2,258
 101918c:	108e8e04 	addi	r2,r2,14904
 1019190:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 1019194:	e037883a 	mov	sp,fp
 1019198:	df000017 	ldw	fp,0(sp)
 101919c:	dec00104 	addi	sp,sp,4
 10191a0:	f800283a 	ret

010191a4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 10191a4:	defffc04 	addi	sp,sp,-16
 10191a8:	df000315 	stw	fp,12(sp)
 10191ac:	df000304 	addi	fp,sp,12
 10191b0:	e13ffd15 	stw	r4,-12(fp)
 10191b4:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 10191b8:	00000706 	br	10191d8 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 10191bc:	e0bffe17 	ldw	r2,-8(fp)
 10191c0:	1090000c 	andi	r2,r2,16384
 10191c4:	1005003a 	cmpeq	r2,r2,zero
 10191c8:	1000031e 	bne	r2,zero,10191d8 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 10191cc:	00bffd44 	movi	r2,-11
 10191d0:	e0bfff15 	stw	r2,-4(fp)
 10191d4:	00000b06 	br	1019204 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 10191d8:	e0bffd17 	ldw	r2,-12(fp)
 10191dc:	10c00d17 	ldw	r3,52(r2)
 10191e0:	e0bffd17 	ldw	r2,-12(fp)
 10191e4:	10800c17 	ldw	r2,48(r2)
 10191e8:	18800526 	beq	r3,r2,1019200 <altera_avalon_jtag_uart_close+0x5c>
 10191ec:	e0bffd17 	ldw	r2,-12(fp)
 10191f0:	10c00917 	ldw	r3,36(r2)
 10191f4:	e0bffd17 	ldw	r2,-12(fp)
 10191f8:	10800117 	ldw	r2,4(r2)
 10191fc:	18bfef36 	bltu	r3,r2,10191bc <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 1019200:	e03fff15 	stw	zero,-4(fp)
 1019204:	e0bfff17 	ldw	r2,-4(fp)
}
 1019208:	e037883a 	mov	sp,fp
 101920c:	df000017 	ldw	fp,0(sp)
 1019210:	dec00104 	addi	sp,sp,4
 1019214:	f800283a 	ret

01019218 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 1019218:	defff804 	addi	sp,sp,-32
 101921c:	df000715 	stw	fp,28(sp)
 1019220:	df000704 	addi	fp,sp,28
 1019224:	e13ffb15 	stw	r4,-20(fp)
 1019228:	e17ffc15 	stw	r5,-16(fp)
 101922c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 1019230:	00bff9c4 	movi	r2,-25
 1019234:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 1019238:	e0bffc17 	ldw	r2,-16(fp)
 101923c:	e0bfff15 	stw	r2,-4(fp)
 1019240:	e0ffff17 	ldw	r3,-4(fp)
 1019244:	189a8060 	cmpeqi	r2,r3,27137
 1019248:	1000041e 	bne	r2,zero,101925c <altera_avalon_jtag_uart_ioctl+0x44>
 101924c:	e0ffff17 	ldw	r3,-4(fp)
 1019250:	189a80a0 	cmpeqi	r2,r3,27138
 1019254:	10001b1e 	bne	r2,zero,10192c4 <altera_avalon_jtag_uart_ioctl+0xac>
 1019258:	00002706 	br	10192f8 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 101925c:	e0bffb17 	ldw	r2,-20(fp)
 1019260:	10c00117 	ldw	r3,4(r2)
 1019264:	00a00034 	movhi	r2,32768
 1019268:	10bfffc4 	addi	r2,r2,-1
 101926c:	18802226 	beq	r3,r2,10192f8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 1019270:	e0bffd17 	ldw	r2,-12(fp)
 1019274:	10800017 	ldw	r2,0(r2)
 1019278:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 101927c:	e0bff917 	ldw	r2,-28(fp)
 1019280:	10800090 	cmplti	r2,r2,2
 1019284:	1000071e 	bne	r2,zero,10192a4 <altera_avalon_jtag_uart_ioctl+0x8c>
 1019288:	e0fff917 	ldw	r3,-28(fp)
 101928c:	00a00034 	movhi	r2,32768
 1019290:	10bfffc4 	addi	r2,r2,-1
 1019294:	18800326 	beq	r3,r2,10192a4 <altera_avalon_jtag_uart_ioctl+0x8c>
 1019298:	e0bff917 	ldw	r2,-28(fp)
 101929c:	e0bffe15 	stw	r2,-8(fp)
 10192a0:	00000306 	br	10192b0 <altera_avalon_jtag_uart_ioctl+0x98>
 10192a4:	00e00034 	movhi	r3,32768
 10192a8:	18ffff84 	addi	r3,r3,-2
 10192ac:	e0fffe15 	stw	r3,-8(fp)
 10192b0:	e0bffb17 	ldw	r2,-20(fp)
 10192b4:	e0fffe17 	ldw	r3,-8(fp)
 10192b8:	10c00115 	stw	r3,4(r2)
      rc = 0;
 10192bc:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 10192c0:	00000d06 	br	10192f8 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 10192c4:	e0bffb17 	ldw	r2,-20(fp)
 10192c8:	10c00117 	ldw	r3,4(r2)
 10192cc:	00a00034 	movhi	r2,32768
 10192d0:	10bfffc4 	addi	r2,r2,-1
 10192d4:	18800826 	beq	r3,r2,10192f8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 10192d8:	e13ffd17 	ldw	r4,-12(fp)
 10192dc:	e0bffb17 	ldw	r2,-20(fp)
 10192e0:	10c00917 	ldw	r3,36(r2)
 10192e4:	e0bffb17 	ldw	r2,-20(fp)
 10192e8:	10800117 	ldw	r2,4(r2)
 10192ec:	1885803a 	cmpltu	r2,r3,r2
 10192f0:	20800015 	stw	r2,0(r4)
      rc = 0;
 10192f4:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 10192f8:	e0bffa17 	ldw	r2,-24(fp)
}
 10192fc:	e037883a 	mov	sp,fp
 1019300:	df000017 	ldw	fp,0(sp)
 1019304:	dec00104 	addi	sp,sp,4
 1019308:	f800283a 	ret

0101930c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 101930c:	defff204 	addi	sp,sp,-56
 1019310:	dfc00d15 	stw	ra,52(sp)
 1019314:	df000c15 	stw	fp,48(sp)
 1019318:	df000c04 	addi	fp,sp,48
 101931c:	e13ffb15 	stw	r4,-20(fp)
 1019320:	e17ffc15 	stw	r5,-16(fp)
 1019324:	e1bffd15 	stw	r6,-12(fp)
 1019328:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 101932c:	e0bffc17 	ldw	r2,-16(fp)
 1019330:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1019334:	00004806 	br	1019458 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 1019338:	e0bffb17 	ldw	r2,-20(fp)
 101933c:	10800a17 	ldw	r2,40(r2)
 1019340:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 1019344:	e0bffb17 	ldw	r2,-20(fp)
 1019348:	10800b17 	ldw	r2,44(r2)
 101934c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 1019350:	e0fff717 	ldw	r3,-36(fp)
 1019354:	e0bff617 	ldw	r2,-40(fp)
 1019358:	18800536 	bltu	r3,r2,1019370 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 101935c:	e0bff717 	ldw	r2,-36(fp)
 1019360:	e0fff617 	ldw	r3,-40(fp)
 1019364:	10c5c83a 	sub	r2,r2,r3
 1019368:	e0bff815 	stw	r2,-32(fp)
 101936c:	00000406 	br	1019380 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 1019370:	00820004 	movi	r2,2048
 1019374:	e0fff617 	ldw	r3,-40(fp)
 1019378:	10c5c83a 	sub	r2,r2,r3
 101937c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 1019380:	e0bff817 	ldw	r2,-32(fp)
 1019384:	1005003a 	cmpeq	r2,r2,zero
 1019388:	10001f1e 	bne	r2,zero,1019408 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 101938c:	e0fffd17 	ldw	r3,-12(fp)
 1019390:	e0bff817 	ldw	r2,-32(fp)
 1019394:	1880022e 	bgeu	r3,r2,10193a0 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 1019398:	e0bffd17 	ldw	r2,-12(fp)
 101939c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 10193a0:	e0bffb17 	ldw	r2,-20(fp)
 10193a4:	10c00e04 	addi	r3,r2,56
 10193a8:	e0bff617 	ldw	r2,-40(fp)
 10193ac:	1887883a 	add	r3,r3,r2
 10193b0:	e0bffa17 	ldw	r2,-24(fp)
 10193b4:	1009883a 	mov	r4,r2
 10193b8:	180b883a 	mov	r5,r3
 10193bc:	e1bff817 	ldw	r6,-32(fp)
 10193c0:	100cf780 	call	100cf78 <memcpy>
      ptr   += n;
 10193c4:	e0fff817 	ldw	r3,-32(fp)
 10193c8:	e0bffa17 	ldw	r2,-24(fp)
 10193cc:	10c5883a 	add	r2,r2,r3
 10193d0:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 10193d4:	e0fffd17 	ldw	r3,-12(fp)
 10193d8:	e0bff817 	ldw	r2,-32(fp)
 10193dc:	1885c83a 	sub	r2,r3,r2
 10193e0:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10193e4:	e0fff617 	ldw	r3,-40(fp)
 10193e8:	e0bff817 	ldw	r2,-32(fp)
 10193ec:	1885883a 	add	r2,r3,r2
 10193f0:	10c1ffcc 	andi	r3,r2,2047
 10193f4:	e0bffb17 	ldw	r2,-20(fp)
 10193f8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 10193fc:	e0bffd17 	ldw	r2,-12(fp)
 1019400:	10800048 	cmpgei	r2,r2,1
 1019404:	103fcc1e 	bne	r2,zero,1019338 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 1019408:	e0fffa17 	ldw	r3,-24(fp)
 101940c:	e0bffc17 	ldw	r2,-16(fp)
 1019410:	1880141e 	bne	r3,r2,1019464 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 1019414:	e0bffe17 	ldw	r2,-8(fp)
 1019418:	1090000c 	andi	r2,r2,16384
 101941c:	1004c03a 	cmpne	r2,r2,zero
 1019420:	1000101e 	bne	r2,zero,1019464 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 1019424:	e0bffb17 	ldw	r2,-20(fp)
 1019428:	10c00a17 	ldw	r3,40(r2)
 101942c:	e0bff717 	ldw	r2,-36(fp)
 1019430:	1880051e 	bne	r3,r2,1019448 <altera_avalon_jtag_uart_read+0x13c>
 1019434:	e0bffb17 	ldw	r2,-20(fp)
 1019438:	10c00917 	ldw	r3,36(r2)
 101943c:	e0bffb17 	ldw	r2,-20(fp)
 1019440:	10800117 	ldw	r2,4(r2)
 1019444:	18bff736 	bltu	r3,r2,1019424 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 1019448:	e0bffb17 	ldw	r2,-20(fp)
 101944c:	10c00a17 	ldw	r3,40(r2)
 1019450:	e0bff717 	ldw	r2,-36(fp)
 1019454:	18800326 	beq	r3,r2,1019464 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1019458:	e0bffd17 	ldw	r2,-12(fp)
 101945c:	10800048 	cmpgei	r2,r2,1
 1019460:	103fb51e 	bne	r2,zero,1019338 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 1019464:	e0fffa17 	ldw	r3,-24(fp)
 1019468:	e0bffc17 	ldw	r2,-16(fp)
 101946c:	18801926 	beq	r3,r2,10194d4 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1019470:	0005303a 	rdctl	r2,status
 1019474:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1019478:	e0fff517 	ldw	r3,-44(fp)
 101947c:	00bfff84 	movi	r2,-2
 1019480:	1884703a 	and	r2,r3,r2
 1019484:	1001703a 	wrctl	status,r2
  
  return context;
 1019488:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 101948c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1019490:	e0bffb17 	ldw	r2,-20(fp)
 1019494:	10800817 	ldw	r2,32(r2)
 1019498:	10c00054 	ori	r3,r2,1
 101949c:	e0bffb17 	ldw	r2,-20(fp)
 10194a0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 10194a4:	e0bffb17 	ldw	r2,-20(fp)
 10194a8:	10800017 	ldw	r2,0(r2)
 10194ac:	11000104 	addi	r4,r2,4
 10194b0:	e0bffb17 	ldw	r2,-20(fp)
 10194b4:	10800817 	ldw	r2,32(r2)
 10194b8:	1007883a 	mov	r3,r2
 10194bc:	2005883a 	mov	r2,r4
 10194c0:	10c00035 	stwio	r3,0(r2)
 10194c4:	e0bff917 	ldw	r2,-28(fp)
 10194c8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10194cc:	e0bff417 	ldw	r2,-48(fp)
 10194d0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 10194d4:	e0fffa17 	ldw	r3,-24(fp)
 10194d8:	e0bffc17 	ldw	r2,-16(fp)
 10194dc:	18800526 	beq	r3,r2,10194f4 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 10194e0:	e0fffa17 	ldw	r3,-24(fp)
 10194e4:	e0bffc17 	ldw	r2,-16(fp)
 10194e8:	1887c83a 	sub	r3,r3,r2
 10194ec:	e0ffff15 	stw	r3,-4(fp)
 10194f0:	00000906 	br	1019518 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 10194f4:	e0bffe17 	ldw	r2,-8(fp)
 10194f8:	1090000c 	andi	r2,r2,16384
 10194fc:	1005003a 	cmpeq	r2,r2,zero
 1019500:	1000031e 	bne	r2,zero,1019510 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 1019504:	00bffd44 	movi	r2,-11
 1019508:	e0bfff15 	stw	r2,-4(fp)
 101950c:	00000206 	br	1019518 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 1019510:	00bffec4 	movi	r2,-5
 1019514:	e0bfff15 	stw	r2,-4(fp)
 1019518:	e0bfff17 	ldw	r2,-4(fp)
}
 101951c:	e037883a 	mov	sp,fp
 1019520:	dfc00117 	ldw	ra,4(sp)
 1019524:	df000017 	ldw	fp,0(sp)
 1019528:	dec00204 	addi	sp,sp,8
 101952c:	f800283a 	ret

01019530 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 1019530:	defff204 	addi	sp,sp,-56
 1019534:	dfc00d15 	stw	ra,52(sp)
 1019538:	df000c15 	stw	fp,48(sp)
 101953c:	df000c04 	addi	fp,sp,48
 1019540:	e13ffb15 	stw	r4,-20(fp)
 1019544:	e17ffc15 	stw	r5,-16(fp)
 1019548:	e1bffd15 	stw	r6,-12(fp)
 101954c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 1019550:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 1019554:	e0bffc17 	ldw	r2,-16(fp)
 1019558:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 101955c:	00003a06 	br	1019648 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 1019560:	e0bffb17 	ldw	r2,-20(fp)
 1019564:	10800c17 	ldw	r2,48(r2)
 1019568:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 101956c:	e0bffb17 	ldw	r2,-20(fp)
 1019570:	10800d17 	ldw	r2,52(r2)
 1019574:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 1019578:	e0fffa17 	ldw	r3,-24(fp)
 101957c:	e0bff917 	ldw	r2,-28(fp)
 1019580:	1880062e 	bgeu	r3,r2,101959c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 1019584:	e0fff917 	ldw	r3,-28(fp)
 1019588:	e0bffa17 	ldw	r2,-24(fp)
 101958c:	1885c83a 	sub	r2,r3,r2
 1019590:	10bfffc4 	addi	r2,r2,-1
 1019594:	e0bff815 	stw	r2,-32(fp)
 1019598:	00000c06 	br	10195cc <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 101959c:	e0bff917 	ldw	r2,-28(fp)
 10195a0:	1005003a 	cmpeq	r2,r2,zero
 10195a4:	1000051e 	bne	r2,zero,10195bc <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 10195a8:	00820004 	movi	r2,2048
 10195ac:	e0fffa17 	ldw	r3,-24(fp)
 10195b0:	10c5c83a 	sub	r2,r2,r3
 10195b4:	e0bff815 	stw	r2,-32(fp)
 10195b8:	00000406 	br	10195cc <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 10195bc:	0081ffc4 	movi	r2,2047
 10195c0:	e0fffa17 	ldw	r3,-24(fp)
 10195c4:	10c5c83a 	sub	r2,r2,r3
 10195c8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 10195cc:	e0bff817 	ldw	r2,-32(fp)
 10195d0:	1005003a 	cmpeq	r2,r2,zero
 10195d4:	10001f1e 	bne	r2,zero,1019654 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 10195d8:	e0fffd17 	ldw	r3,-12(fp)
 10195dc:	e0bff817 	ldw	r2,-32(fp)
 10195e0:	1880022e 	bgeu	r3,r2,10195ec <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 10195e4:	e0bffd17 	ldw	r2,-12(fp)
 10195e8:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 10195ec:	e0bffb17 	ldw	r2,-20(fp)
 10195f0:	10c20e04 	addi	r3,r2,2104
 10195f4:	e0bffa17 	ldw	r2,-24(fp)
 10195f8:	1885883a 	add	r2,r3,r2
 10195fc:	e0fffc17 	ldw	r3,-16(fp)
 1019600:	1009883a 	mov	r4,r2
 1019604:	180b883a 	mov	r5,r3
 1019608:	e1bff817 	ldw	r6,-32(fp)
 101960c:	100cf780 	call	100cf78 <memcpy>
      ptr   += n;
 1019610:	e0fff817 	ldw	r3,-32(fp)
 1019614:	e0bffc17 	ldw	r2,-16(fp)
 1019618:	10c5883a 	add	r2,r2,r3
 101961c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 1019620:	e0fffd17 	ldw	r3,-12(fp)
 1019624:	e0bff817 	ldw	r2,-32(fp)
 1019628:	1885c83a 	sub	r2,r3,r2
 101962c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1019630:	e0fffa17 	ldw	r3,-24(fp)
 1019634:	e0bff817 	ldw	r2,-32(fp)
 1019638:	1885883a 	add	r2,r3,r2
 101963c:	10c1ffcc 	andi	r3,r2,2047
 1019640:	e0bffb17 	ldw	r2,-20(fp)
 1019644:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1019648:	e0bffd17 	ldw	r2,-12(fp)
 101964c:	10800048 	cmpgei	r2,r2,1
 1019650:	103fc31e 	bne	r2,zero,1019560 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1019654:	0005303a 	rdctl	r2,status
 1019658:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101965c:	e0fff517 	ldw	r3,-44(fp)
 1019660:	00bfff84 	movi	r2,-2
 1019664:	1884703a 	and	r2,r3,r2
 1019668:	1001703a 	wrctl	status,r2
  
  return context;
 101966c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 1019670:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1019674:	e0bffb17 	ldw	r2,-20(fp)
 1019678:	10800817 	ldw	r2,32(r2)
 101967c:	10c00094 	ori	r3,r2,2
 1019680:	e0bffb17 	ldw	r2,-20(fp)
 1019684:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1019688:	e0bffb17 	ldw	r2,-20(fp)
 101968c:	10800017 	ldw	r2,0(r2)
 1019690:	11000104 	addi	r4,r2,4
 1019694:	e0bffb17 	ldw	r2,-20(fp)
 1019698:	10800817 	ldw	r2,32(r2)
 101969c:	1007883a 	mov	r3,r2
 10196a0:	2005883a 	mov	r2,r4
 10196a4:	10c00035 	stwio	r3,0(r2)
 10196a8:	e0bff717 	ldw	r2,-36(fp)
 10196ac:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10196b0:	e0bff417 	ldw	r2,-48(fp)
 10196b4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 10196b8:	e0bffd17 	ldw	r2,-12(fp)
 10196bc:	10800050 	cmplti	r2,r2,1
 10196c0:	1000111e 	bne	r2,zero,1019708 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 10196c4:	e0bffe17 	ldw	r2,-8(fp)
 10196c8:	1090000c 	andi	r2,r2,16384
 10196cc:	1004c03a 	cmpne	r2,r2,zero
 10196d0:	1000101e 	bne	r2,zero,1019714 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 10196d4:	e0bffb17 	ldw	r2,-20(fp)
 10196d8:	10c00d17 	ldw	r3,52(r2)
 10196dc:	e0bff917 	ldw	r2,-28(fp)
 10196e0:	1880051e 	bne	r3,r2,10196f8 <altera_avalon_jtag_uart_write+0x1c8>
 10196e4:	e0bffb17 	ldw	r2,-20(fp)
 10196e8:	10c00917 	ldw	r3,36(r2)
 10196ec:	e0bffb17 	ldw	r2,-20(fp)
 10196f0:	10800117 	ldw	r2,4(r2)
 10196f4:	18bff736 	bltu	r3,r2,10196d4 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 10196f8:	e0bffb17 	ldw	r2,-20(fp)
 10196fc:	10c00d17 	ldw	r3,52(r2)
 1019700:	e0bff917 	ldw	r2,-28(fp)
 1019704:	18800326 	beq	r3,r2,1019714 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
 1019708:	e0bffd17 	ldw	r2,-12(fp)
 101970c:	10800048 	cmpgei	r2,r2,1
 1019710:	103fcd1e 	bne	r2,zero,1019648 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 1019714:	e0fffc17 	ldw	r3,-16(fp)
 1019718:	e0bff617 	ldw	r2,-40(fp)
 101971c:	18800526 	beq	r3,r2,1019734 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 1019720:	e0fffc17 	ldw	r3,-16(fp)
 1019724:	e0bff617 	ldw	r2,-40(fp)
 1019728:	1887c83a 	sub	r3,r3,r2
 101972c:	e0ffff15 	stw	r3,-4(fp)
 1019730:	00000906 	br	1019758 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 1019734:	e0bffe17 	ldw	r2,-8(fp)
 1019738:	1090000c 	andi	r2,r2,16384
 101973c:	1005003a 	cmpeq	r2,r2,zero
 1019740:	1000031e 	bne	r2,zero,1019750 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 1019744:	00bffd44 	movi	r2,-11
 1019748:	e0bfff15 	stw	r2,-4(fp)
 101974c:	00000206 	br	1019758 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 1019750:	00bffec4 	movi	r2,-5
 1019754:	e0bfff15 	stw	r2,-4(fp)
 1019758:	e0bfff17 	ldw	r2,-4(fp)
}
 101975c:	e037883a 	mov	sp,fp
 1019760:	dfc00117 	ldw	ra,4(sp)
 1019764:	df000017 	ldw	fp,0(sp)
 1019768:	dec00204 	addi	sp,sp,8
 101976c:	f800283a 	ret

01019770 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 1019770:	defffc04 	addi	sp,sp,-16
 1019774:	df000315 	stw	fp,12(sp)
 1019778:	df000304 	addi	fp,sp,12
 101977c:	e13ffe15 	stw	r4,-8(fp)
 1019780:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 1019784:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 1019788:	e0bfff17 	ldw	r2,-4(fp)
 101978c:	1004c03a 	cmpne	r2,r2,zero
 1019790:	1000061e 	bne	r2,zero,10197ac <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
 1019794:	e0bffe17 	ldw	r2,-8(fp)
 1019798:	1007883a 	mov	r3,r2
 101979c:	e0bffd03 	ldbu	r2,-12(fp)
 10197a0:	10c4b03a 	or	r2,r2,r3
 10197a4:	e0bffd05 	stb	r2,-12(fp)
 10197a8:	00000806 	br	10197cc <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
 10197ac:	e0bffe17 	ldw	r2,-8(fp)
 10197b0:	1007883a 	mov	r3,r2
 10197b4:	e0bffd03 	ldbu	r2,-12(fp)
 10197b8:	10c4b03a 	or	r2,r2,r3
 10197bc:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 10197c0:	e0bffd03 	ldbu	r2,-12(fp)
 10197c4:	10801014 	ori	r2,r2,64
 10197c8:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 10197cc:	e0fffd03 	ldbu	r3,-12(fp)
 10197d0:	00bfe004 	movi	r2,-128
 10197d4:	1884b03a 	or	r2,r3,r2
 10197d8:	10803fcc 	andi	r2,r2,255
}
 10197dc:	e037883a 	mov	sp,fp
 10197e0:	df000017 	ldw	fp,0(sp)
 10197e4:	dec00104 	addi	sp,sp,4
 10197e8:	f800283a 	ret

010197ec <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 10197ec:	defffd04 	addi	sp,sp,-12
 10197f0:	df000215 	stw	fp,8(sp)
 10197f4:	df000204 	addi	fp,sp,8
 10197f8:	e13ffe15 	stw	r4,-8(fp)
 10197fc:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 1019800:	e0bffe17 	ldw	r2,-8(fp)
 1019804:	10800a17 	ldw	r2,40(r2)
 1019808:	e0ffff03 	ldbu	r3,-4(fp)
 101980c:	10c00025 	stbio	r3,0(r2)
}
 1019810:	e037883a 	mov	sp,fp
 1019814:	df000017 	ldw	fp,0(sp)
 1019818:	dec00104 	addi	sp,sp,4
 101981c:	f800283a 	ret

01019820 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 1019820:	defffe04 	addi	sp,sp,-8
 1019824:	df000115 	stw	fp,4(sp)
 1019828:	df000104 	addi	fp,sp,4
 101982c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 1019830:	e0bfff17 	ldw	r2,-4(fp)
 1019834:	10800a17 	ldw	r2,40(r2)
 1019838:	1007883a 	mov	r3,r2
 101983c:	00800044 	movi	r2,1
 1019840:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 1019844:	e037883a 	mov	sp,fp
 1019848:	df000017 	ldw	fp,0(sp)
 101984c:	dec00104 	addi	sp,sp,4
 1019850:	f800283a 	ret

01019854 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 1019854:	defffc04 	addi	sp,sp,-16
 1019858:	dfc00315 	stw	ra,12(sp)
 101985c:	df000215 	stw	fp,8(sp)
 1019860:	df000204 	addi	fp,sp,8
 1019864:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 1019868:	e13fff17 	ldw	r4,-4(fp)
 101986c:	014040b4 	movhi	r5,258
 1019870:	2946cb04 	addi	r5,r5,6956
 1019874:	101c6b00 	call	101c6b0 <alt_find_dev>
 1019878:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 101987c:	e0bffe17 	ldw	r2,-8(fp)
}
 1019880:	e037883a 	mov	sp,fp
 1019884:	dfc00117 	ldw	ra,4(sp)
 1019888:	df000017 	ldw	fp,0(sp)
 101988c:	dec00204 	addi	sp,sp,8
 1019890:	f800283a 	ret

01019894 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 1019894:	defffb04 	addi	sp,sp,-20
 1019898:	df000415 	stw	fp,16(sp)
 101989c:	df000404 	addi	fp,sp,16
 10198a0:	e13ffd15 	stw	r4,-12(fp)
 10198a4:	e17ffe15 	stw	r5,-8(fp)
 10198a8:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 10198ac:	e03ffc15 	stw	zero,-16(fp)
 10198b0:	00000f06 	br	10198f0 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 10198b4:	e0bffd17 	ldw	r2,-12(fp)
 10198b8:	10800a17 	ldw	r2,40(r2)
 10198bc:	11000044 	addi	r4,r2,1
 10198c0:	e0fffc17 	ldw	r3,-16(fp)
 10198c4:	e0bffe17 	ldw	r2,-8(fp)
 10198c8:	1885883a 	add	r2,r3,r2
 10198cc:	10800003 	ldbu	r2,0(r2)
 10198d0:	10c03fcc 	andi	r3,r2,255
 10198d4:	18c0201c 	xori	r3,r3,128
 10198d8:	18ffe004 	addi	r3,r3,-128
 10198dc:	2005883a 	mov	r2,r4
 10198e0:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 10198e4:	e0bffc17 	ldw	r2,-16(fp)
 10198e8:	10800044 	addi	r2,r2,1
 10198ec:	e0bffc15 	stw	r2,-16(fp)
 10198f0:	e0fffc17 	ldw	r3,-16(fp)
 10198f4:	e0bfff17 	ldw	r2,-4(fp)
 10198f8:	18bfee36 	bltu	r3,r2,10198b4 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 10198fc:	e037883a 	mov	sp,fp
 1019900:	df000017 	ldw	fp,0(sp)
 1019904:	dec00104 	addi	sp,sp,4
 1019908:	f800283a 	ret

0101990c <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 101990c:	defffd04 	addi	sp,sp,-12
 1019910:	df000215 	stw	fp,8(sp)
 1019914:	df000204 	addi	fp,sp,8
 1019918:	e13ffe15 	stw	r4,-8(fp)
 101991c:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 1019920:	00000d06 	br	1019958 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 1019924:	e0bffe17 	ldw	r2,-8(fp)
 1019928:	10800a17 	ldw	r2,40(r2)
 101992c:	11000044 	addi	r4,r2,1
 1019930:	e0bfff17 	ldw	r2,-4(fp)
 1019934:	10800003 	ldbu	r2,0(r2)
 1019938:	10c03fcc 	andi	r3,r2,255
 101993c:	18c0201c 	xori	r3,r3,128
 1019940:	18ffe004 	addi	r3,r3,-128
 1019944:	2005883a 	mov	r2,r4
 1019948:	10c00025 	stbio	r3,0(r2)
		++ptr;
 101994c:	e0bfff17 	ldw	r2,-4(fp)
 1019950:	10800044 	addi	r2,r2,1
 1019954:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 1019958:	e0bfff17 	ldw	r2,-4(fp)
 101995c:	10800003 	ldbu	r2,0(r2)
 1019960:	10803fcc 	andi	r2,r2,255
 1019964:	1080201c 	xori	r2,r2,128
 1019968:	10bfe004 	addi	r2,r2,-128
 101996c:	1004c03a 	cmpne	r2,r2,zero
 1019970:	103fec1e 	bne	r2,zero,1019924 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 1019974:	e037883a 	mov	sp,fp
 1019978:	df000017 	ldw	fp,0(sp)
 101997c:	dec00104 	addi	sp,sp,4
 1019980:	f800283a 	ret

01019984 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 1019984:	defffb04 	addi	sp,sp,-20
 1019988:	dfc00415 	stw	ra,16(sp)
 101998c:	df000315 	stw	fp,12(sp)
 1019990:	df000304 	addi	fp,sp,12
 1019994:	e13ffd15 	stw	r4,-12(fp)
 1019998:	e17ffe15 	stw	r5,-8(fp)
 101999c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 10199a0:	e0bffd17 	ldw	r2,-12(fp)
 10199a4:	10800017 	ldw	r2,0(r2)
 10199a8:	1009883a 	mov	r4,r2
 10199ac:	e1bfff17 	ldw	r6,-4(fp)
 10199b0:	e17ffe17 	ldw	r5,-8(fp)
 10199b4:	10198940 	call	1019894 <alt_up_character_lcd_write>
	return 0;
 10199b8:	0005883a 	mov	r2,zero
}
 10199bc:	e037883a 	mov	sp,fp
 10199c0:	dfc00117 	ldw	ra,4(sp)
 10199c4:	df000017 	ldw	fp,0(sp)
 10199c8:	dec00204 	addi	sp,sp,8
 10199cc:	f800283a 	ret

010199d0 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 10199d0:	defff904 	addi	sp,sp,-28
 10199d4:	dfc00615 	stw	ra,24(sp)
 10199d8:	df000515 	stw	fp,20(sp)
 10199dc:	df000504 	addi	fp,sp,20
 10199e0:	e13ffc15 	stw	r4,-16(fp)
 10199e4:	e17ffd15 	stw	r5,-12(fp)
 10199e8:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 10199ec:	e0bffd17 	ldw	r2,-12(fp)
 10199f0:	10800a28 	cmpgeui	r2,r2,40
 10199f4:	1000031e 	bne	r2,zero,1019a04 <alt_up_character_lcd_set_cursor_pos+0x34>
 10199f8:	e0bffe17 	ldw	r2,-8(fp)
 10199fc:	108000b0 	cmpltui	r2,r2,2
 1019a00:	1000031e 	bne	r2,zero,1019a10 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
 1019a04:	00bfffc4 	movi	r2,-1
 1019a08:	e0bfff15 	stw	r2,-4(fp)
 1019a0c:	00000806 	br	1019a30 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 1019a10:	e13ffd17 	ldw	r4,-12(fp)
 1019a14:	e17ffe17 	ldw	r5,-8(fp)
 1019a18:	10197700 	call	1019770 <get_DDRAM_addr>
 1019a1c:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 1019a20:	e17ffb03 	ldbu	r5,-20(fp)
 1019a24:	e13ffc17 	ldw	r4,-16(fp)
 1019a28:	10197ec0 	call	10197ec <alt_up_character_lcd_send_cmd>
	return 0;
 1019a2c:	e03fff15 	stw	zero,-4(fp)
 1019a30:	e0bfff17 	ldw	r2,-4(fp)
}
 1019a34:	e037883a 	mov	sp,fp
 1019a38:	dfc00117 	ldw	ra,4(sp)
 1019a3c:	df000017 	ldw	fp,0(sp)
 1019a40:	dec00204 	addi	sp,sp,8
 1019a44:	f800283a 	ret

01019a48 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 1019a48:	defff904 	addi	sp,sp,-28
 1019a4c:	dfc00615 	stw	ra,24(sp)
 1019a50:	df000515 	stw	fp,20(sp)
 1019a54:	df000504 	addi	fp,sp,20
 1019a58:	e13ffc15 	stw	r4,-16(fp)
 1019a5c:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 1019a60:	e0bffd17 	ldw	r2,-12(fp)
 1019a64:	1005003a 	cmpeq	r2,r2,zero
 1019a68:	10001e1e 	bne	r2,zero,1019ae4 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
 1019a6c:	e0bffd17 	ldw	r2,-12(fp)
 1019a70:	10800050 	cmplti	r2,r2,1
 1019a74:	1000031e 	bne	r2,zero,1019a84 <alt_up_character_lcd_shift_cursor+0x3c>
 1019a78:	00800504 	movi	r2,20
 1019a7c:	e0bfff05 	stb	r2,-4(fp)
 1019a80:	00000206 	br	1019a8c <alt_up_character_lcd_shift_cursor+0x44>
 1019a84:	00c00404 	movi	r3,16
 1019a88:	e0ffff05 	stb	r3,-4(fp)
 1019a8c:	e0bfff03 	ldbu	r2,-4(fp)
 1019a90:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 1019a94:	e0fffd17 	ldw	r3,-12(fp)
 1019a98:	e0fffe15 	stw	r3,-8(fp)
 1019a9c:	e0fffe17 	ldw	r3,-8(fp)
 1019aa0:	1804403a 	cmpge	r2,r3,zero
 1019aa4:	1000031e 	bne	r2,zero,1019ab4 <alt_up_character_lcd_shift_cursor+0x6c>
 1019aa8:	e0bffe17 	ldw	r2,-8(fp)
 1019aac:	0085c83a 	sub	r2,zero,r2
 1019ab0:	e0bffe15 	stw	r2,-8(fp)
 1019ab4:	e0fffe17 	ldw	r3,-8(fp)
 1019ab8:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 1019abc:	00000306 	br	1019acc <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 1019ac0:	e17ffb43 	ldbu	r5,-19(fp)
 1019ac4:	e13ffc17 	ldw	r4,-16(fp)
 1019ac8:	10197ec0 	call	10197ec <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 1019acc:	e0bffb03 	ldbu	r2,-20(fp)
 1019ad0:	10bfffc4 	addi	r2,r2,-1
 1019ad4:	e0bffb05 	stb	r2,-20(fp)
 1019ad8:	e0bffb03 	ldbu	r2,-20(fp)
 1019adc:	10803fd8 	cmpnei	r2,r2,255
 1019ae0:	103ff71e 	bne	r2,zero,1019ac0 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 1019ae4:	e037883a 	mov	sp,fp
 1019ae8:	dfc00117 	ldw	ra,4(sp)
 1019aec:	df000017 	ldw	fp,0(sp)
 1019af0:	dec00204 	addi	sp,sp,8
 1019af4:	f800283a 	ret

01019af8 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 1019af8:	defff904 	addi	sp,sp,-28
 1019afc:	dfc00615 	stw	ra,24(sp)
 1019b00:	df000515 	stw	fp,20(sp)
 1019b04:	df000504 	addi	fp,sp,20
 1019b08:	e13ffc15 	stw	r4,-16(fp)
 1019b0c:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 1019b10:	e0bffd17 	ldw	r2,-12(fp)
 1019b14:	1005003a 	cmpeq	r2,r2,zero
 1019b18:	10001e1e 	bne	r2,zero,1019b94 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
 1019b1c:	e0bffd17 	ldw	r2,-12(fp)
 1019b20:	10800050 	cmplti	r2,r2,1
 1019b24:	1000031e 	bne	r2,zero,1019b34 <alt_up_character_lcd_shift_display+0x3c>
 1019b28:	00800704 	movi	r2,28
 1019b2c:	e0bfff05 	stb	r2,-4(fp)
 1019b30:	00000206 	br	1019b3c <alt_up_character_lcd_shift_display+0x44>
 1019b34:	00c00604 	movi	r3,24
 1019b38:	e0ffff05 	stb	r3,-4(fp)
 1019b3c:	e0bfff03 	ldbu	r2,-4(fp)
 1019b40:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 1019b44:	e0fffd17 	ldw	r3,-12(fp)
 1019b48:	e0fffe15 	stw	r3,-8(fp)
 1019b4c:	e0fffe17 	ldw	r3,-8(fp)
 1019b50:	1804403a 	cmpge	r2,r3,zero
 1019b54:	1000031e 	bne	r2,zero,1019b64 <alt_up_character_lcd_shift_display+0x6c>
 1019b58:	e0bffe17 	ldw	r2,-8(fp)
 1019b5c:	0085c83a 	sub	r2,zero,r2
 1019b60:	e0bffe15 	stw	r2,-8(fp)
 1019b64:	e0fffe17 	ldw	r3,-8(fp)
 1019b68:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 1019b6c:	00000306 	br	1019b7c <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 1019b70:	e17ffb43 	ldbu	r5,-19(fp)
 1019b74:	e13ffc17 	ldw	r4,-16(fp)
 1019b78:	10197ec0 	call	10197ec <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 1019b7c:	e0bffb03 	ldbu	r2,-20(fp)
 1019b80:	10bfffc4 	addi	r2,r2,-1
 1019b84:	e0bffb05 	stb	r2,-20(fp)
 1019b88:	e0bffb03 	ldbu	r2,-20(fp)
 1019b8c:	10803fd8 	cmpnei	r2,r2,255
 1019b90:	103ff71e 	bne	r2,zero,1019b70 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 1019b94:	e037883a 	mov	sp,fp
 1019b98:	dfc00117 	ldw	ra,4(sp)
 1019b9c:	df000017 	ldw	fp,0(sp)
 1019ba0:	dec00204 	addi	sp,sp,8
 1019ba4:	f800283a 	ret

01019ba8 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 1019ba8:	defff904 	addi	sp,sp,-28
 1019bac:	dfc00615 	stw	ra,24(sp)
 1019bb0:	df000515 	stw	fp,20(sp)
 1019bb4:	df000504 	addi	fp,sp,20
 1019bb8:	e13ffc15 	stw	r4,-16(fp)
 1019bbc:	e17ffd15 	stw	r5,-12(fp)
 1019bc0:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 1019bc4:	e0bffd17 	ldw	r2,-12(fp)
 1019bc8:	10800a28 	cmpgeui	r2,r2,40
 1019bcc:	1000031e 	bne	r2,zero,1019bdc <alt_up_character_lcd_erase_pos+0x34>
 1019bd0:	e0bffe17 	ldw	r2,-8(fp)
 1019bd4:	108000b0 	cmpltui	r2,r2,2
 1019bd8:	1000031e 	bne	r2,zero,1019be8 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
 1019bdc:	00bfffc4 	movi	r2,-1
 1019be0:	e0bfff15 	stw	r2,-4(fp)
 1019be4:	00000e06 	br	1019c20 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 1019be8:	e13ffd17 	ldw	r4,-12(fp)
 1019bec:	e17ffe17 	ldw	r5,-8(fp)
 1019bf0:	10197700 	call	1019770 <get_DDRAM_addr>
 1019bf4:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 1019bf8:	e17ffb03 	ldbu	r5,-20(fp)
 1019bfc:	e13ffc17 	ldw	r4,-16(fp)
 1019c00:	10197ec0 	call	10197ec <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 1019c04:	e0bffc17 	ldw	r2,-16(fp)
 1019c08:	10800a17 	ldw	r2,40(r2)
 1019c0c:	10800044 	addi	r2,r2,1
 1019c10:	1007883a 	mov	r3,r2
 1019c14:	00800084 	movi	r2,2
 1019c18:	18800025 	stbio	r2,0(r3)
	return 0;
 1019c1c:	e03fff15 	stw	zero,-4(fp)
 1019c20:	e0bfff17 	ldw	r2,-4(fp)
}
 1019c24:	e037883a 	mov	sp,fp
 1019c28:	dfc00117 	ldw	ra,4(sp)
 1019c2c:	df000017 	ldw	fp,0(sp)
 1019c30:	dec00204 	addi	sp,sp,8
 1019c34:	f800283a 	ret

01019c38 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 1019c38:	defffd04 	addi	sp,sp,-12
 1019c3c:	dfc00215 	stw	ra,8(sp)
 1019c40:	df000115 	stw	fp,4(sp)
 1019c44:	df000104 	addi	fp,sp,4
 1019c48:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 1019c4c:	e13fff17 	ldw	r4,-4(fp)
 1019c50:	01400304 	movi	r5,12
 1019c54:	10197ec0 	call	10197ec <alt_up_character_lcd_send_cmd>
}
 1019c58:	e037883a 	mov	sp,fp
 1019c5c:	dfc00117 	ldw	ra,4(sp)
 1019c60:	df000017 	ldw	fp,0(sp)
 1019c64:	dec00204 	addi	sp,sp,8
 1019c68:	f800283a 	ret

01019c6c <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 1019c6c:	defffd04 	addi	sp,sp,-12
 1019c70:	dfc00215 	stw	ra,8(sp)
 1019c74:	df000115 	stw	fp,4(sp)
 1019c78:	df000104 	addi	fp,sp,4
 1019c7c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 1019c80:	e13fff17 	ldw	r4,-4(fp)
 1019c84:	014003c4 	movi	r5,15
 1019c88:	10197ec0 	call	10197ec <alt_up_character_lcd_send_cmd>
}
 1019c8c:	e037883a 	mov	sp,fp
 1019c90:	dfc00117 	ldw	ra,4(sp)
 1019c94:	df000017 	ldw	fp,0(sp)
 1019c98:	dec00204 	addi	sp,sp,8
 1019c9c:	f800283a 	ret

01019ca0 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
 1019ca0:	defffd04 	addi	sp,sp,-12
 1019ca4:	df000215 	stw	fp,8(sp)
 1019ca8:	df000204 	addi	fp,sp,8
 1019cac:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
 1019cb0:	e0bfff17 	ldw	r2,-4(fp)
 1019cb4:	1080400c 	andi	r2,r2,256
 1019cb8:	1004d23a 	srli	r2,r2,8
 1019cbc:	e0bffe05 	stb	r2,-8(fp)
	return ri;
 1019cc0:	e0bffe03 	ldbu	r2,-8(fp)
}
 1019cc4:	e037883a 	mov	sp,fp
 1019cc8:	df000017 	ldw	fp,0(sp)
 1019ccc:	dec00104 	addi	sp,sp,4
 1019cd0:	f800283a 	ret

01019cd4 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
 1019cd4:	defffd04 	addi	sp,sp,-12
 1019cd8:	df000215 	stw	fp,8(sp)
 1019cdc:	df000204 	addi	fp,sp,8
 1019ce0:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
 1019ce4:	e0bfff17 	ldw	r2,-4(fp)
 1019ce8:	1080004c 	andi	r2,r2,1
 1019cec:	e0bffe05 	stb	r2,-8(fp)
	return re;
 1019cf0:	e0bffe03 	ldbu	r2,-8(fp)
}
 1019cf4:	e037883a 	mov	sp,fp
 1019cf8:	df000017 	ldw	fp,0(sp)
 1019cfc:	dec00104 	addi	sp,sp,4
 1019d00:	f800283a 	ret

01019d04 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
 1019d04:	defffd04 	addi	sp,sp,-12
 1019d08:	df000215 	stw	fp,8(sp)
 1019d0c:	df000204 	addi	fp,sp,8
 1019d10:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
 1019d14:	e0bfff17 	ldw	r2,-4(fp)
 1019d18:	1081000c 	andi	r2,r2,1024
 1019d1c:	1004d2ba 	srli	r2,r2,10
 1019d20:	e0bffe05 	stb	r2,-8(fp)
	return re;
 1019d24:	e0bffe03 	ldbu	r2,-8(fp)
}
 1019d28:	e037883a 	mov	sp,fp
 1019d2c:	df000017 	ldw	fp,0(sp)
 1019d30:	dec00104 	addi	sp,sp,4
 1019d34:	f800283a 	ret

01019d38 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
 1019d38:	defffd04 	addi	sp,sp,-12
 1019d3c:	df000215 	stw	fp,8(sp)
 1019d40:	df000204 	addi	fp,sp,8
 1019d44:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
 1019d48:	e0bfff17 	ldw	r2,-4(fp)
 1019d4c:	10bfffec 	andhi	r2,r2,65535
 1019d50:	1004d43a 	srli	r2,r2,16
 1019d54:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
 1019d58:	e0bffe0b 	ldhu	r2,-8(fp)
}
 1019d5c:	e037883a 	mov	sp,fp
 1019d60:	df000017 	ldw	fp,0(sp)
 1019d64:	dec00104 	addi	sp,sp,4
 1019d68:	f800283a 	ret

01019d6c <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
 1019d6c:	defffd04 	addi	sp,sp,-12
 1019d70:	df000215 	stw	fp,8(sp)
 1019d74:	df000204 	addi	fp,sp,8
 1019d78:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
 1019d7c:	e0bfff17 	ldw	r2,-4(fp)
 1019d80:	10a0000c 	andi	r2,r2,32768
 1019d84:	1004d3fa 	srli	r2,r2,15
 1019d88:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
 1019d8c:	e0bffe03 	ldbu	r2,-8(fp)
}
 1019d90:	e037883a 	mov	sp,fp
 1019d94:	df000017 	ldw	fp,0(sp)
 1019d98:	dec00104 	addi	sp,sp,4
 1019d9c:	f800283a 	ret

01019da0 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
 1019da0:	defffd04 	addi	sp,sp,-12
 1019da4:	df000215 	stw	fp,8(sp)
 1019da8:	df000204 	addi	fp,sp,8
 1019dac:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
 1019db0:	e0bfff17 	ldw	r2,-4(fp)
 1019db4:	e0bffe05 	stb	r2,-8(fp)
	return data;
 1019db8:	e0bffe03 	ldbu	r2,-8(fp)
}
 1019dbc:	e037883a 	mov	sp,fp
 1019dc0:	df000017 	ldw	fp,0(sp)
 1019dc4:	dec00104 	addi	sp,sp,4
 1019dc8:	f800283a 	ret

01019dcc <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
 1019dcc:	defffb04 	addi	sp,sp,-20
 1019dd0:	dfc00415 	stw	ra,16(sp)
 1019dd4:	df000315 	stw	fp,12(sp)
 1019dd8:	df000304 	addi	fp,sp,12
 1019ddc:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
 1019de0:	e13fff17 	ldw	r4,-4(fp)
 1019de4:	01403fc4 	movi	r5,255
 1019de8:	101a02c0 	call	101a02c <alt_up_ps2_write_data_byte_with_ack>
 1019dec:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
 1019df0:	e0bffd17 	ldw	r2,-12(fp)
 1019df4:	1004c03a 	cmpne	r2,r2,zero
 1019df8:	1000221e 	bne	r2,zero,1019e84 <alt_up_ps2_init+0xb8>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
 1019dfc:	e17ffe04 	addi	r5,fp,-8
 1019e00:	e13fff17 	ldw	r4,-4(fp)
 1019e04:	101a0980 	call	101a098 <alt_up_ps2_read_data_byte_timeout>
 1019e08:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
 1019e0c:	e0bffd17 	ldw	r2,-12(fp)
 1019e10:	1004c03a 	cmpne	r2,r2,zero
 1019e14:	10001b1e 	bne	r2,zero,1019e84 <alt_up_ps2_init+0xb8>
 1019e18:	e0bffe03 	ldbu	r2,-8(fp)
 1019e1c:	10803fcc 	andi	r2,r2,255
 1019e20:	10802a98 	cmpnei	r2,r2,170
 1019e24:	1000171e 	bne	r2,zero,1019e84 <alt_up_ps2_init+0xb8>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
 1019e28:	e17ffe04 	addi	r5,fp,-8
 1019e2c:	e13fff17 	ldw	r4,-4(fp)
 1019e30:	101a0980 	call	101a098 <alt_up_ps2_read_data_byte_timeout>
 1019e34:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
 1019e38:	e0bffd17 	ldw	r2,-12(fp)
 1019e3c:	10bfe318 	cmpnei	r2,r2,-116
 1019e40:	1000041e 	bne	r2,zero,1019e54 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
 1019e44:	e0ffff17 	ldw	r3,-4(fp)
 1019e48:	00800044 	movi	r2,1
 1019e4c:	18800d15 	stw	r2,52(r3)
 1019e50:	00000c06 	br	1019e84 <alt_up_ps2_init+0xb8>
			}
			else if (status == 0 && byte == 0x00)
 1019e54:	e0bffd17 	ldw	r2,-12(fp)
 1019e58:	1004c03a 	cmpne	r2,r2,zero
 1019e5c:	1000091e 	bne	r2,zero,1019e84 <alt_up_ps2_init+0xb8>
 1019e60:	e0bffe03 	ldbu	r2,-8(fp)
 1019e64:	10803fcc 	andi	r2,r2,255
 1019e68:	1004c03a 	cmpne	r2,r2,zero
 1019e6c:	1000051e 	bne	r2,zero,1019e84 <alt_up_ps2_init+0xb8>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
 1019e70:	e0bfff17 	ldw	r2,-4(fp)
 1019e74:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
 1019e78:	e13fff17 	ldw	r4,-4(fp)
 1019e7c:	01403d04 	movi	r5,244
 1019e80:	1019f440 	call	1019f44 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
 1019e84:	e037883a 	mov	sp,fp
 1019e88:	dfc00117 	ldw	ra,4(sp)
 1019e8c:	df000017 	ldw	fp,0(sp)
 1019e90:	dec00204 	addi	sp,sp,8
 1019e94:	f800283a 	ret

01019e98 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
 1019e98:	defffd04 	addi	sp,sp,-12
 1019e9c:	df000215 	stw	fp,8(sp)
 1019ea0:	df000204 	addi	fp,sp,8
 1019ea4:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
 1019ea8:	e0bfff17 	ldw	r2,-4(fp)
 1019eac:	10800a17 	ldw	r2,40(r2)
 1019eb0:	10800104 	addi	r2,r2,4
 1019eb4:	10800037 	ldwio	r2,0(r2)
 1019eb8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
 1019ebc:	e0bffe17 	ldw	r2,-8(fp)
 1019ec0:	10800054 	ori	r2,r2,1
 1019ec4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
 1019ec8:	e0bfff17 	ldw	r2,-4(fp)
 1019ecc:	10800a17 	ldw	r2,40(r2)
 1019ed0:	10800104 	addi	r2,r2,4
 1019ed4:	e0fffe17 	ldw	r3,-8(fp)
 1019ed8:	10c00035 	stwio	r3,0(r2)
}
 1019edc:	e037883a 	mov	sp,fp
 1019ee0:	df000017 	ldw	fp,0(sp)
 1019ee4:	dec00104 	addi	sp,sp,4
 1019ee8:	f800283a 	ret

01019eec <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
 1019eec:	defffd04 	addi	sp,sp,-12
 1019ef0:	df000215 	stw	fp,8(sp)
 1019ef4:	df000204 	addi	fp,sp,8
 1019ef8:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
 1019efc:	e0bfff17 	ldw	r2,-4(fp)
 1019f00:	10800a17 	ldw	r2,40(r2)
 1019f04:	10800104 	addi	r2,r2,4
 1019f08:	10800037 	ldwio	r2,0(r2)
 1019f0c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
 1019f10:	e0fffe17 	ldw	r3,-8(fp)
 1019f14:	00bfff84 	movi	r2,-2
 1019f18:	1884703a 	and	r2,r3,r2
 1019f1c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
 1019f20:	e0bfff17 	ldw	r2,-4(fp)
 1019f24:	10800a17 	ldw	r2,40(r2)
 1019f28:	10800104 	addi	r2,r2,4
 1019f2c:	e0fffe17 	ldw	r3,-8(fp)
 1019f30:	10c00035 	stwio	r3,0(r2)
}
 1019f34:	e037883a 	mov	sp,fp
 1019f38:	df000017 	ldw	fp,0(sp)
 1019f3c:	dec00104 	addi	sp,sp,4
 1019f40:	f800283a 	ret

01019f44 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
 1019f44:	defffa04 	addi	sp,sp,-24
 1019f48:	dfc00515 	stw	ra,20(sp)
 1019f4c:	df000415 	stw	fp,16(sp)
 1019f50:	df000404 	addi	fp,sp,16
 1019f54:	e13ffd15 	stw	r4,-12(fp)
 1019f58:	e17ffe05 	stb	r5,-8(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
 1019f5c:	e0bffd17 	ldw	r2,-12(fp)
 1019f60:	10800a17 	ldw	r2,40(r2)
 1019f64:	e0fffe03 	ldbu	r3,-8(fp)
 1019f68:	10c00025 	stbio	r3,0(r2)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
 1019f6c:	e0bffd17 	ldw	r2,-12(fp)
 1019f70:	10800a17 	ldw	r2,40(r2)
 1019f74:	10800104 	addi	r2,r2,4
 1019f78:	10800037 	ldwio	r2,0(r2)
 1019f7c:	e0bffc15 	stw	r2,-16(fp)
	if (read_CE_bit(ctrl_reg))
 1019f80:	e13ffc17 	ldw	r4,-16(fp)
 1019f84:	1019d040 	call	1019d04 <read_CE_bit>
 1019f88:	10803fcc 	andi	r2,r2,255
 1019f8c:	1005003a 	cmpeq	r2,r2,zero
 1019f90:	1000031e 	bne	r2,zero,1019fa0 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
 1019f94:	00bffec4 	movi	r2,-5
 1019f98:	e0bfff15 	stw	r2,-4(fp)
 1019f9c:	00000106 	br	1019fa4 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
 1019fa0:	e03fff15 	stw	zero,-4(fp)
 1019fa4:	e0bfff17 	ldw	r2,-4(fp)
}
 1019fa8:	e037883a 	mov	sp,fp
 1019fac:	dfc00117 	ldw	ra,4(sp)
 1019fb0:	df000017 	ldw	fp,0(sp)
 1019fb4:	dec00204 	addi	sp,sp,8
 1019fb8:	f800283a 	ret

01019fbc <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
 1019fbc:	defffb04 	addi	sp,sp,-20
 1019fc0:	dfc00415 	stw	ra,16(sp)
 1019fc4:	df000315 	stw	fp,12(sp)
 1019fc8:	df000304 	addi	fp,sp,12
 1019fcc:	e13ffe15 	stw	r4,-8(fp)
	unsigned char data = 0;
 1019fd0:	e03ffd45 	stb	zero,-11(fp)
	unsigned char status = 0;
 1019fd4:	e03ffd05 	stb	zero,-12(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
 1019fd8:	e17ffd44 	addi	r5,fp,-11
 1019fdc:	e13ffe17 	ldw	r4,-8(fp)
 1019fe0:	101a0980 	call	101a098 <alt_up_ps2_read_data_byte_timeout>
 1019fe4:	e0bffd05 	stb	r2,-12(fp)
		if ( status == 0)
 1019fe8:	e0bffd03 	ldbu	r2,-12(fp)
 1019fec:	1004c03a 	cmpne	r2,r2,zero
 1019ff0:	1000061e 	bne	r2,zero,101a00c <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
 1019ff4:	e0bffd43 	ldbu	r2,-11(fp)
 1019ff8:	10803fcc 	andi	r2,r2,255
 1019ffc:	10803e98 	cmpnei	r2,r2,250
 101a000:	103ff51e 	bne	r2,zero,1019fd8 <alt_up_ps2_wait_for_ack+0x1c>
				return 0;
 101a004:	e03fff15 	stw	zero,-4(fp)
 101a008:	00000206 	br	101a014 <alt_up_ps2_wait_for_ack+0x58>
		}
		else 
		{
			return status;
 101a00c:	e0bffd03 	ldbu	r2,-12(fp)
 101a010:	e0bfff15 	stw	r2,-4(fp)
 101a014:	e0bfff17 	ldw	r2,-4(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
 101a018:	e037883a 	mov	sp,fp
 101a01c:	dfc00117 	ldw	ra,4(sp)
 101a020:	df000017 	ldw	fp,0(sp)
 101a024:	dec00204 	addi	sp,sp,8
 101a028:	f800283a 	ret

0101a02c <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
 101a02c:	defff904 	addi	sp,sp,-28
 101a030:	dfc00615 	stw	ra,24(sp)
 101a034:	df000515 	stw	fp,20(sp)
 101a038:	df000504 	addi	fp,sp,20
 101a03c:	e13ffd15 	stw	r4,-12(fp)
 101a040:	e17ffe05 	stb	r5,-8(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
 101a044:	e17ffe03 	ldbu	r5,-8(fp)
 101a048:	e13ffd17 	ldw	r4,-12(fp)
 101a04c:	1019f440 	call	1019f44 <alt_up_ps2_write_data_byte>
 101a050:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
 101a054:	e0bffc17 	ldw	r2,-16(fp)
 101a058:	1005003a 	cmpeq	r2,r2,zero
 101a05c:	1000031e 	bne	r2,zero,101a06c <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
 101a060:	e0bffc17 	ldw	r2,-16(fp)
 101a064:	e0bfff15 	stw	r2,-4(fp)
 101a068:	00000506 	br	101a080 <alt_up_ps2_write_data_byte_with_ack+0x54>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
 101a06c:	e13ffd17 	ldw	r4,-12(fp)
 101a070:	1019fbc0 	call	1019fbc <alt_up_ps2_wait_for_ack>
 101a074:	e0bffb15 	stw	r2,-20(fp)
	return ack_status;
 101a078:	e0bffb17 	ldw	r2,-20(fp)
 101a07c:	e0bfff15 	stw	r2,-4(fp)
 101a080:	e0bfff17 	ldw	r2,-4(fp)
}
 101a084:	e037883a 	mov	sp,fp
 101a088:	dfc00117 	ldw	ra,4(sp)
 101a08c:	df000017 	ldw	fp,0(sp)
 101a090:	dec00204 	addi	sp,sp,8
 101a094:	f800283a 	ret

0101a098 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
 101a098:	defff904 	addi	sp,sp,-28
 101a09c:	dfc00615 	stw	ra,24(sp)
 101a0a0:	df000515 	stw	fp,20(sp)
 101a0a4:	df000504 	addi	fp,sp,20
 101a0a8:	e13ffd15 	stw	r4,-12(fp)
 101a0ac:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
 101a0b0:	e03ffc15 	stw	zero,-16(fp)
	unsigned int count = 0;
 101a0b4:	e03ffb15 	stw	zero,-20(fp)
 101a0b8:	00000006 	br	101a0bc <alt_up_ps2_read_data_byte_timeout+0x24>
	do {
		count++;
 101a0bc:	e0bffb17 	ldw	r2,-20(fp)
 101a0c0:	10800044 	addi	r2,r2,1
 101a0c4:	e0bffb15 	stw	r2,-20(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
 101a0c8:	e0bffd17 	ldw	r2,-12(fp)
 101a0cc:	10800a17 	ldw	r2,40(r2)
 101a0d0:	10800037 	ldwio	r2,0(r2)
 101a0d4:	e0bffc15 	stw	r2,-16(fp)
		if (read_data_valid(data_reg))
 101a0d8:	e13ffc17 	ldw	r4,-16(fp)
 101a0dc:	1019d6c0 	call	1019d6c <read_data_valid>
 101a0e0:	10803fcc 	andi	r2,r2,255
 101a0e4:	1005003a 	cmpeq	r2,r2,zero
 101a0e8:	1000071e 	bne	r2,zero,101a108 <alt_up_ps2_read_data_byte_timeout+0x70>
		{
			*byte = read_data_byte(data_reg);
 101a0ec:	e13ffc17 	ldw	r4,-16(fp)
 101a0f0:	1019da00 	call	1019da0 <read_data_byte>
 101a0f4:	1007883a 	mov	r3,r2
 101a0f8:	e0bffe17 	ldw	r2,-8(fp)
 101a0fc:	10c00005 	stb	r3,0(r2)
			return 0;
 101a100:	e03fff15 	stw	zero,-4(fp)
 101a104:	00000a06 	br	101a130 <alt_up_ps2_read_data_byte_timeout+0x98>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
 101a108:	e0bffd17 	ldw	r2,-12(fp)
 101a10c:	10800c17 	ldw	r2,48(r2)
 101a110:	1005003a 	cmpeq	r2,r2,zero
 101a114:	103fe91e 	bne	r2,zero,101a0bc <alt_up_ps2_read_data_byte_timeout+0x24>
 101a118:	e0bffd17 	ldw	r2,-12(fp)
 101a11c:	10c00c17 	ldw	r3,48(r2)
 101a120:	e0bffb17 	ldw	r2,-20(fp)
 101a124:	18bfe52e 	bgeu	r3,r2,101a0bc <alt_up_ps2_read_data_byte_timeout+0x24>
		{
			return -ETIMEDOUT;
 101a128:	00bfe304 	movi	r2,-116
 101a12c:	e0bfff15 	stw	r2,-4(fp)
		}
	} while (1);
 101a130:	e0bfff17 	ldw	r2,-4(fp)
}
 101a134:	e037883a 	mov	sp,fp
 101a138:	dfc00117 	ldw	ra,4(sp)
 101a13c:	df000017 	ldw	fp,0(sp)
 101a140:	dec00204 	addi	sp,sp,8
 101a144:	f800283a 	ret

0101a148 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
 101a148:	defffa04 	addi	sp,sp,-24
 101a14c:	dfc00515 	stw	ra,20(sp)
 101a150:	df000415 	stw	fp,16(sp)
 101a154:	df000404 	addi	fp,sp,16
 101a158:	e13ffd15 	stw	r4,-12(fp)
 101a15c:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
 101a160:	e03ffc15 	stw	zero,-16(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
 101a164:	e0bffd17 	ldw	r2,-12(fp)
 101a168:	10800a17 	ldw	r2,40(r2)
 101a16c:	10800037 	ldwio	r2,0(r2)
 101a170:	e0bffc15 	stw	r2,-16(fp)
	if (read_data_valid(data_reg))
 101a174:	e13ffc17 	ldw	r4,-16(fp)
 101a178:	1019d6c0 	call	1019d6c <read_data_valid>
 101a17c:	10803fcc 	andi	r2,r2,255
 101a180:	1005003a 	cmpeq	r2,r2,zero
 101a184:	1000071e 	bne	r2,zero,101a1a4 <alt_up_ps2_read_data_byte+0x5c>
	{
		*byte = read_data_byte(data_reg);
 101a188:	e13ffc17 	ldw	r4,-16(fp)
 101a18c:	1019da00 	call	1019da0 <read_data_byte>
 101a190:	1007883a 	mov	r3,r2
 101a194:	e0bffe17 	ldw	r2,-8(fp)
 101a198:	10c00005 	stb	r3,0(r2)
		return 0;
 101a19c:	e03fff15 	stw	zero,-4(fp)
 101a1a0:	00000206 	br	101a1ac <alt_up_ps2_read_data_byte+0x64>
	}
	return -1;
 101a1a4:	00bfffc4 	movi	r2,-1
 101a1a8:	e0bfff15 	stw	r2,-4(fp)
 101a1ac:	e0bfff17 	ldw	r2,-4(fp)
}
 101a1b0:	e037883a 	mov	sp,fp
 101a1b4:	dfc00117 	ldw	ra,4(sp)
 101a1b8:	df000017 	ldw	fp,0(sp)
 101a1bc:	dec00204 	addi	sp,sp,8
 101a1c0:	f800283a 	ret

0101a1c4 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
 101a1c4:	defffb04 	addi	sp,sp,-20
 101a1c8:	dfc00415 	stw	ra,16(sp)
 101a1cc:	df000315 	stw	fp,12(sp)
 101a1d0:	df000304 	addi	fp,sp,12
 101a1d4:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
 101a1d8:	e03ffe0d 	sth	zero,-8(fp)
	unsigned int data_reg = 0;
 101a1dc:	e03ffd15 	stw	zero,-12(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
 101a1e0:	e0bfff17 	ldw	r2,-4(fp)
 101a1e4:	10800a17 	ldw	r2,40(r2)
 101a1e8:	10800037 	ldwio	r2,0(r2)
 101a1ec:	e0bffd15 	stw	r2,-12(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
 101a1f0:	e13ffd17 	ldw	r4,-12(fp)
 101a1f4:	1019d380 	call	1019d38 <read_num_bytes_available>
 101a1f8:	e0bffe0d 	sth	r2,-8(fp)
	} while (num > 0);
 101a1fc:	e0bffe0b 	ldhu	r2,-8(fp)
 101a200:	1004c03a 	cmpne	r2,r2,zero
 101a204:	103ff61e 	bne	r2,zero,101a1e0 <alt_up_ps2_clear_fifo+0x1c>
}
 101a208:	e037883a 	mov	sp,fp
 101a20c:	dfc00117 	ldw	ra,4(sp)
 101a210:	df000017 	ldw	fp,0(sp)
 101a214:	dec00204 	addi	sp,sp,8
 101a218:	f800283a 	ret

0101a21c <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
 101a21c:	defff704 	addi	sp,sp,-36
 101a220:	dfc00815 	stw	ra,32(sp)
 101a224:	df000715 	stw	fp,28(sp)
 101a228:	df000704 	addi	fp,sp,28
 101a22c:	e13ffc15 	stw	r4,-16(fp)
 101a230:	e17ffd15 	stw	r5,-12(fp)
 101a234:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
 101a238:	e0bffc17 	ldw	r2,-16(fp)
 101a23c:	10800017 	ldw	r2,0(r2)
 101a240:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
 101a244:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
 101a248:	e03ff915 	stw	zero,-28(fp)
	while (count < len);
 101a24c:	e0fff917 	ldw	r3,-28(fp)
 101a250:	e0bffe17 	ldw	r2,-8(fp)
 101a254:	18bffd16 	blt	r3,r2,101a24c <alt_up_ps2_read_fd+0x30>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, ptr++);
 101a258:	e17ffd17 	ldw	r5,-12(fp)
 101a25c:	e0bffd17 	ldw	r2,-12(fp)
 101a260:	10800044 	addi	r2,r2,1
 101a264:	e0bffd15 	stw	r2,-12(fp)
 101a268:	e13ffb17 	ldw	r4,-20(fp)
 101a26c:	101a0980 	call	101a098 <alt_up_ps2_read_data_byte_timeout>
 101a270:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
 101a274:	e0bffa17 	ldw	r2,-24(fp)
 101a278:	1005003a 	cmpeq	r2,r2,zero
 101a27c:	1000031e 	bne	r2,zero,101a28c <alt_up_ps2_read_fd+0x70>
			return count;
 101a280:	e0bff917 	ldw	r2,-28(fp)
 101a284:	e0bfff15 	stw	r2,-4(fp)
 101a288:	00000506 	br	101a2a0 <alt_up_ps2_read_fd+0x84>
		count++;
 101a28c:	e0bff917 	ldw	r2,-28(fp)
 101a290:	10800044 	addi	r2,r2,1
 101a294:	e0bff915 	stw	r2,-28(fp)
	} 
	return count;
 101a298:	e0bff917 	ldw	r2,-28(fp)
 101a29c:	e0bfff15 	stw	r2,-4(fp)
 101a2a0:	e0bfff17 	ldw	r2,-4(fp)
}
 101a2a4:	e037883a 	mov	sp,fp
 101a2a8:	dfc00117 	ldw	ra,4(sp)
 101a2ac:	df000017 	ldw	fp,0(sp)
 101a2b0:	dec00204 	addi	sp,sp,8
 101a2b4:	f800283a 	ret

0101a2b8 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
 101a2b8:	defff704 	addi	sp,sp,-36
 101a2bc:	dfc00815 	stw	ra,32(sp)
 101a2c0:	df000715 	stw	fp,28(sp)
 101a2c4:	df000704 	addi	fp,sp,28
 101a2c8:	e13ffc15 	stw	r4,-16(fp)
 101a2cc:	e17ffd15 	stw	r5,-12(fp)
 101a2d0:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
 101a2d4:	e0bffc17 	ldw	r2,-16(fp)
 101a2d8:	10800017 	ldw	r2,0(r2)
 101a2dc:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
 101a2e0:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
 101a2e4:	e03ff915 	stw	zero,-28(fp)
	while (count < len)
 101a2e8:	00001206 	br	101a334 <alt_up_ps2_write_fd+0x7c>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
 101a2ec:	e0bffd17 	ldw	r2,-12(fp)
 101a2f0:	10800003 	ldbu	r2,0(r2)
 101a2f4:	11403fcc 	andi	r5,r2,255
 101a2f8:	e0bffd17 	ldw	r2,-12(fp)
 101a2fc:	10800044 	addi	r2,r2,1
 101a300:	e0bffd15 	stw	r2,-12(fp)
 101a304:	e13ffb17 	ldw	r4,-20(fp)
 101a308:	1019f440 	call	1019f44 <alt_up_ps2_write_data_byte>
 101a30c:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
 101a310:	e0bffa17 	ldw	r2,-24(fp)
 101a314:	1005003a 	cmpeq	r2,r2,zero
 101a318:	1000031e 	bne	r2,zero,101a328 <alt_up_ps2_write_fd+0x70>
			return count;
 101a31c:	e0bff917 	ldw	r2,-28(fp)
 101a320:	e0bfff15 	stw	r2,-4(fp)
 101a324:	00000806 	br	101a348 <alt_up_ps2_write_fd+0x90>
		count++;
 101a328:	e0bff917 	ldw	r2,-28(fp)
 101a32c:	10800044 	addi	r2,r2,1
 101a330:	e0bff915 	stw	r2,-28(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
 101a334:	e0fff917 	ldw	r3,-28(fp)
 101a338:	e0bffe17 	ldw	r2,-8(fp)
 101a33c:	18bfeb16 	blt	r3,r2,101a2ec <alt_up_ps2_write_fd+0x34>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
 101a340:	e0bff917 	ldw	r2,-28(fp)
 101a344:	e0bfff15 	stw	r2,-4(fp)
 101a348:	e0bfff17 	ldw	r2,-4(fp)
}
 101a34c:	e037883a 	mov	sp,fp
 101a350:	dfc00117 	ldw	ra,4(sp)
 101a354:	df000017 	ldw	fp,0(sp)
 101a358:	dec00204 	addi	sp,sp,8
 101a35c:	f800283a 	ret

0101a360 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
 101a360:	defffc04 	addi	sp,sp,-16
 101a364:	dfc00315 	stw	ra,12(sp)
 101a368:	df000215 	stw	fp,8(sp)
 101a36c:	df000204 	addi	fp,sp,8
 101a370:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
 101a374:	e13fff17 	ldw	r4,-4(fp)
 101a378:	014040b4 	movhi	r5,258
 101a37c:	2946cb04 	addi	r5,r5,6956
 101a380:	101c6b00 	call	101c6b0 <alt_find_dev>
 101a384:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 101a388:	e0bffe17 	ldw	r2,-8(fp)
}
 101a38c:	e037883a 	mov	sp,fp
 101a390:	dfc00117 	ldw	ra,4(sp)
 101a394:	df000017 	ldw	fp,0(sp)
 101a398:	dec00204 	addi	sp,sp,8
 101a39c:	f800283a 	ret

0101a3a0 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
 101a3a0:	defffc04 	addi	sp,sp,-16
 101a3a4:	dfc00315 	stw	ra,12(sp)
 101a3a8:	df000215 	stw	fp,8(sp)
 101a3ac:	df000204 	addi	fp,sp,8
 101a3b0:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
 101a3b4:	e0bfff17 	ldw	r2,-4(fp)
 101a3b8:	10800217 	ldw	r2,8(r2)
 101a3bc:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
 101a3c0:	00000c06 	br	101a3f4 <alt_up_char_buffer_init+0x54>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
 101a3c4:	e13ffe17 	ldw	r4,-8(fp)
 101a3c8:	014040b4 	movhi	r5,258
 101a3cc:	297e7904 	addi	r5,r5,-1564
 101a3d0:	100ebdc0 	call	100ebdc <strcmp>
 101a3d4:	1004c03a 	cmpne	r2,r2,zero
 101a3d8:	1000031e 	bne	r2,zero,101a3e8 <alt_up_char_buffer_init+0x48>
			(*name) = '\0';
 101a3dc:	e0bffe17 	ldw	r2,-8(fp)
 101a3e0:	10000005 	stb	zero,0(r2)
			break;
 101a3e4:	00000a06 	br	101a410 <alt_up_char_buffer_init+0x70>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
 101a3e8:	e0bffe17 	ldw	r2,-8(fp)
 101a3ec:	10800044 	addi	r2,r2,1
 101a3f0:	e0bffe15 	stw	r2,-8(fp)
 101a3f4:	e0bffe17 	ldw	r2,-8(fp)
 101a3f8:	10800003 	ldbu	r2,0(r2)
 101a3fc:	10803fcc 	andi	r2,r2,255
 101a400:	1080201c 	xori	r2,r2,128
 101a404:	10bfe004 	addi	r2,r2,-128
 101a408:	1004c03a 	cmpne	r2,r2,zero
 101a40c:	103fed1e 	bne	r2,zero,101a3c4 <alt_up_char_buffer_init+0x24>
			break;
		}
	}
	
	return;
}
 101a410:	e037883a 	mov	sp,fp
 101a414:	dfc00117 	ldw	ra,4(sp)
 101a418:	df000017 	ldw	fp,0(sp)
 101a41c:	dec00204 	addi	sp,sp,8
 101a420:	f800283a 	ret

0101a424 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
 101a424:	defffc04 	addi	sp,sp,-16
 101a428:	dfc00315 	stw	ra,12(sp)
 101a42c:	df000215 	stw	fp,8(sp)
 101a430:	df000204 	addi	fp,sp,8
 101a434:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
 101a438:	e13fff17 	ldw	r4,-4(fp)
 101a43c:	014040b4 	movhi	r5,258
 101a440:	2946cb04 	addi	r5,r5,6956
 101a444:	101c6b00 	call	101c6b0 <alt_find_dev>
 101a448:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 101a44c:	e0bffe17 	ldw	r2,-8(fp)
}
 101a450:	e037883a 	mov	sp,fp
 101a454:	dfc00117 	ldw	ra,4(sp)
 101a458:	df000017 	ldw	fp,0(sp)
 101a45c:	dec00204 	addi	sp,sp,8
 101a460:	f800283a 	ret

0101a464 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
 101a464:	defff904 	addi	sp,sp,-28
 101a468:	df000615 	stw	fp,24(sp)
 101a46c:	df000604 	addi	fp,sp,24
 101a470:	e13ffb15 	stw	r4,-20(fp)
 101a474:	e1bffd15 	stw	r6,-12(fp)
 101a478:	e1fffe15 	stw	r7,-8(fp)
 101a47c:	e17ffc05 	stb	r5,-16(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 101a480:	e0bffb17 	ldw	r2,-20(fp)
 101a484:	10c00c17 	ldw	r3,48(r2)
 101a488:	e0bffd17 	ldw	r2,-12(fp)
 101a48c:	10c0042e 	bgeu	r2,r3,101a4a0 <alt_up_char_buffer_draw+0x3c>
 101a490:	e0bffb17 	ldw	r2,-20(fp)
 101a494:	10c00d17 	ldw	r3,52(r2)
 101a498:	e0bffe17 	ldw	r2,-8(fp)
 101a49c:	10c00336 	bltu	r2,r3,101a4ac <alt_up_char_buffer_draw+0x48>
		return -1;
 101a4a0:	00bfffc4 	movi	r2,-1
 101a4a4:	e0bfff15 	stw	r2,-4(fp)
 101a4a8:	00001d06 	br	101a520 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
 101a4ac:	e03ffa15 	stw	zero,-24(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
 101a4b0:	e0bffb17 	ldw	r2,-20(fp)
 101a4b4:	10c00f17 	ldw	r3,60(r2)
 101a4b8:	e0bffd17 	ldw	r2,-12(fp)
 101a4bc:	1886703a 	and	r3,r3,r2
 101a4c0:	e0bffb17 	ldw	r2,-20(fp)
 101a4c4:	10800e17 	ldw	r2,56(r2)
 101a4c8:	1886983a 	sll	r3,r3,r2
 101a4cc:	e0bffa17 	ldw	r2,-24(fp)
 101a4d0:	10c4b03a 	or	r2,r2,r3
 101a4d4:	e0bffa15 	stw	r2,-24(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
 101a4d8:	e0bffb17 	ldw	r2,-20(fp)
 101a4dc:	10c01117 	ldw	r3,68(r2)
 101a4e0:	e0bffe17 	ldw	r2,-8(fp)
 101a4e4:	1886703a 	and	r3,r3,r2
 101a4e8:	e0bffb17 	ldw	r2,-20(fp)
 101a4ec:	10801017 	ldw	r2,64(r2)
 101a4f0:	1886983a 	sll	r3,r3,r2
 101a4f4:	e0bffa17 	ldw	r2,-24(fp)
 101a4f8:	10c4b03a 	or	r2,r2,r3
 101a4fc:	e0bffa15 	stw	r2,-24(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
 101a500:	e0bffb17 	ldw	r2,-20(fp)
 101a504:	10800b17 	ldw	r2,44(r2)
 101a508:	1007883a 	mov	r3,r2
 101a50c:	e0bffa17 	ldw	r2,-24(fp)
 101a510:	1885883a 	add	r2,r3,r2
 101a514:	e0fffc03 	ldbu	r3,-16(fp)
 101a518:	10c00025 	stbio	r3,0(r2)

	return 0;
 101a51c:	e03fff15 	stw	zero,-4(fp)
 101a520:	e0bfff17 	ldw	r2,-4(fp)
}
 101a524:	e037883a 	mov	sp,fp
 101a528:	df000017 	ldw	fp,0(sp)
 101a52c:	dec00104 	addi	sp,sp,4
 101a530:	f800283a 	ret

0101a534 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
 101a534:	defff904 	addi	sp,sp,-28
 101a538:	df000615 	stw	fp,24(sp)
 101a53c:	df000604 	addi	fp,sp,24
 101a540:	e13ffb15 	stw	r4,-20(fp)
 101a544:	e17ffc15 	stw	r5,-16(fp)
 101a548:	e1bffd15 	stw	r6,-12(fp)
 101a54c:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 101a550:	e0bffb17 	ldw	r2,-20(fp)
 101a554:	10c00c17 	ldw	r3,48(r2)
 101a558:	e0bffd17 	ldw	r2,-12(fp)
 101a55c:	10c0042e 	bgeu	r2,r3,101a570 <alt_up_char_buffer_string+0x3c>
 101a560:	e0bffb17 	ldw	r2,-20(fp)
 101a564:	10c00d17 	ldw	r3,52(r2)
 101a568:	e0bffe17 	ldw	r2,-8(fp)
 101a56c:	10c00336 	bltu	r2,r3,101a57c <alt_up_char_buffer_string+0x48>
		return -1;
 101a570:	00bfffc4 	movi	r2,-1
 101a574:	e0bfff15 	stw	r2,-4(fp)
 101a578:	00002e06 	br	101a634 <alt_up_char_buffer_string+0x100>
	
	unsigned int offset = 0;
 101a57c:	e03ffa15 	stw	zero,-24(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
 101a580:	e0bffb17 	ldw	r2,-20(fp)
 101a584:	10801017 	ldw	r2,64(r2)
 101a588:	1007883a 	mov	r3,r2
 101a58c:	e0bffe17 	ldw	r2,-8(fp)
 101a590:	10c6983a 	sll	r3,r2,r3
 101a594:	e0bffd17 	ldw	r2,-12(fp)
 101a598:	1885883a 	add	r2,r3,r2
 101a59c:	e0bffa15 	stw	r2,-24(fp)

	while ( *ptr )
 101a5a0:	00001c06 	br	101a614 <alt_up_char_buffer_string+0xe0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
 101a5a4:	e0bffb17 	ldw	r2,-20(fp)
 101a5a8:	10800b17 	ldw	r2,44(r2)
 101a5ac:	1007883a 	mov	r3,r2
 101a5b0:	e0bffa17 	ldw	r2,-24(fp)
 101a5b4:	1889883a 	add	r4,r3,r2
 101a5b8:	e0bffc17 	ldw	r2,-16(fp)
 101a5bc:	10800003 	ldbu	r2,0(r2)
 101a5c0:	10c03fcc 	andi	r3,r2,255
 101a5c4:	18c0201c 	xori	r3,r3,128
 101a5c8:	18ffe004 	addi	r3,r3,-128
 101a5cc:	2005883a 	mov	r2,r4
 101a5d0:	10c00025 	stbio	r3,0(r2)
		++ptr;
 101a5d4:	e0bffc17 	ldw	r2,-16(fp)
 101a5d8:	10800044 	addi	r2,r2,1
 101a5dc:	e0bffc15 	stw	r2,-16(fp)
		if (++x >= char_buffer->x_resolution)
 101a5e0:	e0bffd17 	ldw	r2,-12(fp)
 101a5e4:	10800044 	addi	r2,r2,1
 101a5e8:	e0bffd15 	stw	r2,-12(fp)
 101a5ec:	e0bffb17 	ldw	r2,-20(fp)
 101a5f0:	10c00c17 	ldw	r3,48(r2)
 101a5f4:	e0bffd17 	ldw	r2,-12(fp)
 101a5f8:	10c00336 	bltu	r2,r3,101a608 <alt_up_char_buffer_string+0xd4>
			return -1;
 101a5fc:	00bfffc4 	movi	r2,-1
 101a600:	e0bfff15 	stw	r2,-4(fp)
 101a604:	00000b06 	br	101a634 <alt_up_char_buffer_string+0x100>
		++offset;
 101a608:	e0bffa17 	ldw	r2,-24(fp)
 101a60c:	10800044 	addi	r2,r2,1
 101a610:	e0bffa15 	stw	r2,-24(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
 101a614:	e0bffc17 	ldw	r2,-16(fp)
 101a618:	10800003 	ldbu	r2,0(r2)
 101a61c:	10803fcc 	andi	r2,r2,255
 101a620:	1080201c 	xori	r2,r2,128
 101a624:	10bfe004 	addi	r2,r2,-128
 101a628:	1004c03a 	cmpne	r2,r2,zero
 101a62c:	103fdd1e 	bne	r2,zero,101a5a4 <alt_up_char_buffer_string+0x70>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
 101a630:	e03fff15 	stw	zero,-4(fp)
 101a634:	e0bfff17 	ldw	r2,-4(fp)
}
 101a638:	e037883a 	mov	sp,fp
 101a63c:	df000017 	ldw	fp,0(sp)
 101a640:	dec00104 	addi	sp,sp,4
 101a644:	f800283a 	ret

0101a648 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
 101a648:	defffe04 	addi	sp,sp,-8
 101a64c:	df000115 	stw	fp,4(sp)
 101a650:	df000104 	addi	fp,sp,4
 101a654:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
 101a658:	e0bfff17 	ldw	r2,-4(fp)
 101a65c:	10800a17 	ldw	r2,40(r2)
 101a660:	10800084 	addi	r2,r2,2
 101a664:	1007883a 	mov	r3,r2
 101a668:	00800044 	movi	r2,1
 101a66c:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
 101a670:	e0bfff17 	ldw	r2,-4(fp)
 101a674:	10800a17 	ldw	r2,40(r2)
 101a678:	10800084 	addi	r2,r2,2
 101a67c:	10800023 	ldbuio	r2,0(r2)
 101a680:	1080004c 	andi	r2,r2,1
 101a684:	10803fcc 	andi	r2,r2,255
 101a688:	1004c03a 	cmpne	r2,r2,zero
 101a68c:	103ff81e 	bne	r2,zero,101a670 <alt_up_char_buffer_clear+0x28>
	return 0;
 101a690:	0005883a 	mov	r2,zero
}
 101a694:	e037883a 	mov	sp,fp
 101a698:	df000017 	ldw	fp,0(sp)
 101a69c:	dec00104 	addi	sp,sp,4
 101a6a0:	f800283a 	ret

0101a6a4 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
 101a6a4:	defffc04 	addi	sp,sp,-16
 101a6a8:	dfc00315 	stw	ra,12(sp)
 101a6ac:	df000215 	stw	fp,8(sp)
 101a6b0:	df000204 	addi	fp,sp,8
 101a6b4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
 101a6b8:	e13fff17 	ldw	r4,-4(fp)
 101a6bc:	014040b4 	movhi	r5,258
 101a6c0:	2946cb04 	addi	r5,r5,6956
 101a6c4:	101c6b00 	call	101c6b0 <alt_find_dev>
 101a6c8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 101a6cc:	e0bffe17 	ldw	r2,-8(fp)
}
 101a6d0:	e037883a 	mov	sp,fp
 101a6d4:	dfc00117 	ldw	ra,4(sp)
 101a6d8:	df000017 	ldw	fp,0(sp)
 101a6dc:	dec00204 	addi	sp,sp,8
 101a6e0:	f800283a 	ret

0101a6e4 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
 101a6e4:	defff904 	addi	sp,sp,-28
 101a6e8:	df000615 	stw	fp,24(sp)
 101a6ec:	df000604 	addi	fp,sp,24
 101a6f0:	e13ffb15 	stw	r4,-20(fp)
 101a6f4:	e17ffc15 	stw	r5,-16(fp)
 101a6f8:	e1bffd15 	stw	r6,-12(fp)
 101a6fc:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
 101a700:	e0bffb17 	ldw	r2,-20(fp)
 101a704:	10c00f17 	ldw	r3,60(r2)
 101a708:	e0bffd17 	ldw	r2,-12(fp)
 101a70c:	10c0042e 	bgeu	r2,r3,101a720 <alt_up_pixel_buffer_dma_draw+0x3c>
 101a710:	e0bffb17 	ldw	r2,-20(fp)
 101a714:	10c01017 	ldw	r3,64(r2)
 101a718:	e0bffe17 	ldw	r2,-8(fp)
 101a71c:	10c00336 	bltu	r2,r3,101a72c <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
 101a720:	00bfffc4 	movi	r2,-1
 101a724:	e0bfff15 	stw	r2,-4(fp)
 101a728:	00005106 	br	101a870 <alt_up_pixel_buffer_dma_draw+0x18c>

	unsigned int addr = 0;
 101a72c:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 101a730:	e0bffb17 	ldw	r2,-20(fp)
 101a734:	10800d17 	ldw	r2,52(r2)
 101a738:	1004c03a 	cmpne	r2,r2,zero
 101a73c:	1000151e 	bne	r2,zero,101a794 <alt_up_pixel_buffer_dma_draw+0xb0>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 101a740:	e0bffb17 	ldw	r2,-20(fp)
 101a744:	10c01217 	ldw	r3,72(r2)
 101a748:	e0bffd17 	ldw	r2,-12(fp)
 101a74c:	1886703a 	and	r3,r3,r2
 101a750:	e0bffb17 	ldw	r2,-20(fp)
 101a754:	10801117 	ldw	r2,68(r2)
 101a758:	1886983a 	sll	r3,r3,r2
 101a75c:	e0bffa17 	ldw	r2,-24(fp)
 101a760:	10c4b03a 	or	r2,r2,r3
 101a764:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
 101a768:	e0bffb17 	ldw	r2,-20(fp)
 101a76c:	10c01417 	ldw	r3,80(r2)
 101a770:	e0bffe17 	ldw	r2,-8(fp)
 101a774:	1886703a 	and	r3,r3,r2
 101a778:	e0bffb17 	ldw	r2,-20(fp)
 101a77c:	10801317 	ldw	r2,76(r2)
 101a780:	1886983a 	sll	r3,r3,r2
 101a784:	e0bffa17 	ldw	r2,-24(fp)
 101a788:	10c4b03a 	or	r2,r2,r3
 101a78c:	e0bffa15 	stw	r2,-24(fp)
 101a790:	00001706 	br	101a7f0 <alt_up_pixel_buffer_dma_draw+0x10c>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 101a794:	e0bffb17 	ldw	r2,-20(fp)
 101a798:	10c01217 	ldw	r3,72(r2)
 101a79c:	e0bffd17 	ldw	r2,-12(fp)
 101a7a0:	1886703a 	and	r3,r3,r2
 101a7a4:	e0bffb17 	ldw	r2,-20(fp)
 101a7a8:	10801117 	ldw	r2,68(r2)
 101a7ac:	1886983a 	sll	r3,r3,r2
 101a7b0:	e0bffa17 	ldw	r2,-24(fp)
 101a7b4:	10c5883a 	add	r2,r2,r3
 101a7b8:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
 101a7bc:	e0bffb17 	ldw	r2,-20(fp)
 101a7c0:	10c01417 	ldw	r3,80(r2)
 101a7c4:	e0bffe17 	ldw	r2,-8(fp)
 101a7c8:	1886703a 	and	r3,r3,r2
 101a7cc:	e0bffb17 	ldw	r2,-20(fp)
 101a7d0:	10800f17 	ldw	r2,60(r2)
 101a7d4:	1887383a 	mul	r3,r3,r2
 101a7d8:	e0bffb17 	ldw	r2,-20(fp)
 101a7dc:	10801117 	ldw	r2,68(r2)
 101a7e0:	1886983a 	sll	r3,r3,r2
 101a7e4:	e0bffa17 	ldw	r2,-24(fp)
 101a7e8:	10c5883a 	add	r2,r2,r3
 101a7ec:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 101a7f0:	e0bffb17 	ldw	r2,-20(fp)
 101a7f4:	10800e17 	ldw	r2,56(r2)
 101a7f8:	10800058 	cmpnei	r2,r2,1
 101a7fc:	1000081e 	bne	r2,zero,101a820 <alt_up_pixel_buffer_dma_draw+0x13c>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 101a800:	e0bffb17 	ldw	r2,-20(fp)
 101a804:	10800c17 	ldw	r2,48(r2)
 101a808:	1007883a 	mov	r3,r2
 101a80c:	e0bffa17 	ldw	r2,-24(fp)
 101a810:	1885883a 	add	r2,r3,r2
 101a814:	e0fffc17 	ldw	r3,-16(fp)
 101a818:	10c00025 	stbio	r3,0(r2)
 101a81c:	00001306 	br	101a86c <alt_up_pixel_buffer_dma_draw+0x188>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 101a820:	e0bffb17 	ldw	r2,-20(fp)
 101a824:	10800e17 	ldw	r2,56(r2)
 101a828:	10800098 	cmpnei	r2,r2,2
 101a82c:	1000081e 	bne	r2,zero,101a850 <alt_up_pixel_buffer_dma_draw+0x16c>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 101a830:	e0bffb17 	ldw	r2,-20(fp)
 101a834:	10800c17 	ldw	r2,48(r2)
 101a838:	1007883a 	mov	r3,r2
 101a83c:	e0bffa17 	ldw	r2,-24(fp)
 101a840:	1885883a 	add	r2,r3,r2
 101a844:	e0fffc17 	ldw	r3,-16(fp)
 101a848:	10c0002d 	sthio	r3,0(r2)
 101a84c:	00000706 	br	101a86c <alt_up_pixel_buffer_dma_draw+0x188>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 101a850:	e0bffb17 	ldw	r2,-20(fp)
 101a854:	10800c17 	ldw	r2,48(r2)
 101a858:	1007883a 	mov	r3,r2
 101a85c:	e0bffa17 	ldw	r2,-24(fp)
 101a860:	1885883a 	add	r2,r3,r2
 101a864:	e0fffc17 	ldw	r3,-16(fp)
 101a868:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
 101a86c:	e03fff15 	stw	zero,-4(fp)
 101a870:	e0bfff17 	ldw	r2,-4(fp)
}
 101a874:	e037883a 	mov	sp,fp
 101a878:	df000017 	ldw	fp,0(sp)
 101a87c:	dec00104 	addi	sp,sp,4
 101a880:	f800283a 	ret

0101a884 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
 101a884:	defffd04 	addi	sp,sp,-12
 101a888:	df000215 	stw	fp,8(sp)
 101a88c:	df000204 	addi	fp,sp,8
 101a890:	e13ffe15 	stw	r4,-8(fp)
 101a894:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
 101a898:	e0bffe17 	ldw	r2,-8(fp)
 101a89c:	10800a17 	ldw	r2,40(r2)
 101a8a0:	10800104 	addi	r2,r2,4
 101a8a4:	e0ffff17 	ldw	r3,-4(fp)
 101a8a8:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
 101a8ac:	e0bffe17 	ldw	r2,-8(fp)
 101a8b0:	10800a17 	ldw	r2,40(r2)
 101a8b4:	10800104 	addi	r2,r2,4
 101a8b8:	10800037 	ldwio	r2,0(r2)
 101a8bc:	1007883a 	mov	r3,r2
 101a8c0:	e0bffe17 	ldw	r2,-8(fp)
 101a8c4:	10c00c15 	stw	r3,48(r2)
	return 0;
 101a8c8:	0005883a 	mov	r2,zero
}
 101a8cc:	e037883a 	mov	sp,fp
 101a8d0:	df000017 	ldw	fp,0(sp)
 101a8d4:	dec00104 	addi	sp,sp,4
 101a8d8:	f800283a 	ret

0101a8dc <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
 101a8dc:	defffe04 	addi	sp,sp,-8
 101a8e0:	df000115 	stw	fp,4(sp)
 101a8e4:	df000104 	addi	fp,sp,4
 101a8e8:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
 101a8ec:	e0bfff17 	ldw	r2,-4(fp)
 101a8f0:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
 101a8f4:	e0bfff17 	ldw	r2,-4(fp)
 101a8f8:	10800a17 	ldw	r2,40(r2)
 101a8fc:	1007883a 	mov	r3,r2
 101a900:	00800044 	movi	r2,1
 101a904:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
 101a908:	e0bfff17 	ldw	r2,-4(fp)
 101a90c:	10c00b17 	ldw	r3,44(r2)
 101a910:	e0bfff17 	ldw	r2,-4(fp)
 101a914:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
 101a918:	e0bfff17 	ldw	r2,-4(fp)
 101a91c:	11000b15 	stw	r4,44(r2)
	return 0;
 101a920:	0005883a 	mov	r2,zero
}
 101a924:	e037883a 	mov	sp,fp
 101a928:	df000017 	ldw	fp,0(sp)
 101a92c:	dec00104 	addi	sp,sp,4
 101a930:	f800283a 	ret

0101a934 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
 101a934:	defffe04 	addi	sp,sp,-8
 101a938:	df000115 	stw	fp,4(sp)
 101a93c:	df000104 	addi	fp,sp,4
 101a940:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
 101a944:	e0bfff17 	ldw	r2,-4(fp)
 101a948:	10800a17 	ldw	r2,40(r2)
 101a94c:	10800304 	addi	r2,r2,12
 101a950:	10800037 	ldwio	r2,0(r2)
 101a954:	1080004c 	andi	r2,r2,1
}
 101a958:	e037883a 	mov	sp,fp
 101a95c:	df000017 	ldw	fp,0(sp)
 101a960:	dec00104 	addi	sp,sp,4
 101a964:	f800283a 	ret

0101a968 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
 101a968:	defff604 	addi	sp,sp,-40
 101a96c:	df000915 	stw	fp,36(sp)
 101a970:	df000904 	addi	fp,sp,36
 101a974:	e13ff715 	stw	r4,-36(fp)
 101a978:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 101a97c:	e0bff817 	ldw	r2,-32(fp)
 101a980:	10800058 	cmpnei	r2,r2,1
 101a984:	1000041e 	bne	r2,zero,101a998 <alt_up_pixel_buffer_dma_clear_screen+0x30>
		addr = pixel_buffer->back_buffer_start_address;
 101a988:	e0bff717 	ldw	r2,-36(fp)
 101a98c:	10800c17 	ldw	r2,48(r2)
 101a990:	e0bfff15 	stw	r2,-4(fp)
 101a994:	00000306 	br	101a9a4 <alt_up_pixel_buffer_dma_clear_screen+0x3c>
	else
		addr = pixel_buffer->buffer_start_address;
 101a998:	e0bff717 	ldw	r2,-36(fp)
 101a99c:	10800b17 	ldw	r2,44(r2)
 101a9a0:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
 101a9a4:	e0bff717 	ldw	r2,-36(fp)
 101a9a8:	10800f17 	ldw	r2,60(r2)
 101a9ac:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 101a9b0:	e0bff717 	ldw	r2,-36(fp)
 101a9b4:	10800e17 	ldw	r2,56(r2)
 101a9b8:	10800098 	cmpnei	r2,r2,2
 101a9bc:	1000051e 	bne	r2,zero,101a9d4 <alt_up_pixel_buffer_dma_clear_screen+0x6c>
		limit_x = limit_x << 1;
 101a9c0:	e0fffe17 	ldw	r3,-8(fp)
 101a9c4:	e0fffe17 	ldw	r3,-8(fp)
 101a9c8:	18c5883a 	add	r2,r3,r3
 101a9cc:	e0bffe15 	stw	r2,-8(fp)
 101a9d0:	00000506 	br	101a9e8 <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
 101a9d4:	e13ffe17 	ldw	r4,-8(fp)
 101a9d8:	e13ffe17 	ldw	r4,-8(fp)
 101a9dc:	2105883a 	add	r2,r4,r4
 101a9e0:	1085883a 	add	r2,r2,r2
 101a9e4:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
 101a9e8:	e0bff717 	ldw	r2,-36(fp)
 101a9ec:	10801017 	ldw	r2,64(r2)
 101a9f0:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 101a9f4:	e0bff717 	ldw	r2,-36(fp)
 101a9f8:	10800d17 	ldw	r2,52(r2)
 101a9fc:	1004c03a 	cmpne	r2,r2,zero
 101aa00:	10001e1e 	bne	r2,zero,101aa7c <alt_up_pixel_buffer_dma_clear_screen+0x114>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 101aa04:	e0bff717 	ldw	r2,-36(fp)
 101aa08:	10801317 	ldw	r2,76(r2)
 101aa0c:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
 101aa10:	e03ffb15 	stw	zero,-20(fp)
 101aa14:	00001506 	br	101aa6c <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			for (x = 0; x < limit_x; x = x + 4)
 101aa18:	e03ffc15 	stw	zero,-16(fp)
 101aa1c:	00000706 	br	101aa3c <alt_up_pixel_buffer_dma_clear_screen+0xd4>
			{
				IOWR_32DIRECT(addr, x, 0);
 101aa20:	e0ffff17 	ldw	r3,-4(fp)
 101aa24:	e0bffc17 	ldw	r2,-16(fp)
 101aa28:	1885883a 	add	r2,r3,r2
 101aa2c:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
 101aa30:	e0bffc17 	ldw	r2,-16(fp)
 101aa34:	10800104 	addi	r2,r2,4
 101aa38:	e0bffc15 	stw	r2,-16(fp)
 101aa3c:	e0fffc17 	ldw	r3,-16(fp)
 101aa40:	e13ffe17 	ldw	r4,-8(fp)
 101aa44:	193ff636 	bltu	r3,r4,101aa20 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
 101aa48:	e0fffa17 	ldw	r3,-24(fp)
 101aa4c:	00800044 	movi	r2,1
 101aa50:	10c4983a 	sll	r2,r2,r3
 101aa54:	e0ffff17 	ldw	r3,-4(fp)
 101aa58:	1887883a 	add	r3,r3,r2
 101aa5c:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
 101aa60:	e13ffb17 	ldw	r4,-20(fp)
 101aa64:	21000044 	addi	r4,r4,1
 101aa68:	e13ffb15 	stw	r4,-20(fp)
 101aa6c:	e0bffb17 	ldw	r2,-20(fp)
 101aa70:	e0fffd17 	ldw	r3,-12(fp)
 101aa74:	10ffe836 	bltu	r2,r3,101aa18 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
 101aa78:	00001006 	br	101aabc <alt_up_pixel_buffer_dma_clear_screen+0x154>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
 101aa7c:	e13ffd17 	ldw	r4,-12(fp)
 101aa80:	e0bffe17 	ldw	r2,-8(fp)
 101aa84:	2089383a 	mul	r4,r4,r2
 101aa88:	e13ffd15 	stw	r4,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
 101aa8c:	e03ff915 	stw	zero,-28(fp)
 101aa90:	00000706 	br	101aab0 <alt_up_pixel_buffer_dma_clear_screen+0x148>
		{
			IOWR_32DIRECT(addr, x, 0);
 101aa94:	e0ffff17 	ldw	r3,-4(fp)
 101aa98:	e0bff917 	ldw	r2,-28(fp)
 101aa9c:	1885883a 	add	r2,r3,r2
 101aaa0:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
 101aaa4:	e0fff917 	ldw	r3,-28(fp)
 101aaa8:	18c00104 	addi	r3,r3,4
 101aaac:	e0fff915 	stw	r3,-28(fp)
 101aab0:	e0bff917 	ldw	r2,-28(fp)
 101aab4:	e13ffd17 	ldw	r4,-12(fp)
 101aab8:	113ff636 	bltu	r2,r4,101aa94 <alt_up_pixel_buffer_dma_clear_screen+0x12c>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 101aabc:	e037883a 	mov	sp,fp
 101aac0:	df000017 	ldw	fp,0(sp)
 101aac4:	dec00104 	addi	sp,sp,4
 101aac8:	f800283a 	ret

0101aacc <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
 101aacc:	deffed04 	addi	sp,sp,-76
 101aad0:	df001215 	stw	fp,72(sp)
 101aad4:	df001204 	addi	fp,sp,72
 101aad8:	e13fee15 	stw	r4,-72(fp)
 101aadc:	e17fef15 	stw	r5,-68(fp)
 101aae0:	e1bff015 	stw	r6,-64(fp)
 101aae4:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 101aae8:	e0bfee17 	ldw	r2,-72(fp)
 101aaec:	10800f17 	ldw	r2,60(r2)
 101aaf0:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 101aaf4:	e0bfee17 	ldw	r2,-72(fp)
 101aaf8:	10801017 	ldw	r2,64(r2)
 101aafc:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
 101ab00:	e0bfef17 	ldw	r2,-68(fp)
 101ab04:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
 101ab08:	e0fff117 	ldw	r3,-60(fp)
 101ab0c:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
 101ab10:	e13ff017 	ldw	r4,-64(fp)
 101ab14:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
 101ab18:	e0800117 	ldw	r2,4(fp)
 101ab1c:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
 101ab20:	e0c00217 	ldw	r3,8(fp)
 101ab24:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 101ab28:	e13ffa17 	ldw	r4,-24(fp)
 101ab2c:	e0bffb17 	ldw	r2,-20(fp)
 101ab30:	2080062e 	bgeu	r4,r2,101ab4c <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = l_x;
 101ab34:	e0fffb17 	ldw	r3,-20(fp)
 101ab38:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
 101ab3c:	e13ffa17 	ldw	r4,-24(fp)
 101ab40:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
 101ab44:	e0bffc17 	ldw	r2,-16(fp)
 101ab48:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
 101ab4c:	e0fff817 	ldw	r3,-32(fp)
 101ab50:	e13ff917 	ldw	r4,-28(fp)
 101ab54:	1900062e 	bgeu	r3,r4,101ab70 <alt_up_pixel_buffer_dma_draw_box+0xa4>
	{
		temp = t_y;
 101ab58:	e0bff917 	ldw	r2,-28(fp)
 101ab5c:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
 101ab60:	e0fff817 	ldw	r3,-32(fp)
 101ab64:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
 101ab68:	e13ffc17 	ldw	r4,-16(fp)
 101ab6c:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
 101ab70:	e0bffb17 	ldw	r2,-20(fp)
 101ab74:	e0fffe17 	ldw	r3,-8(fp)
 101ab78:	10c10d2e 	bgeu	r2,r3,101afb0 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
 101ab7c:	e13ff917 	ldw	r4,-28(fp)
 101ab80:	e0bffd17 	ldw	r2,-12(fp)
 101ab84:	20800136 	bltu	r4,r2,101ab8c <alt_up_pixel_buffer_dma_draw_box+0xc0>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 101ab88:	00010906 	br	101afb0 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 101ab8c:	e0fffa17 	ldw	r3,-24(fp)
 101ab90:	e13ffe17 	ldw	r4,-8(fp)
 101ab94:	19000336 	bltu	r3,r4,101aba4 <alt_up_pixel_buffer_dma_draw_box+0xd8>
	{
		r_x = limit_x - 1;
 101ab98:	e0bffe17 	ldw	r2,-8(fp)
 101ab9c:	10bfffc4 	addi	r2,r2,-1
 101aba0:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 101aba4:	e0fff817 	ldw	r3,-32(fp)
 101aba8:	e13ffd17 	ldw	r4,-12(fp)
 101abac:	19000336 	bltu	r3,r4,101abbc <alt_up_pixel_buffer_dma_draw_box+0xf0>
	{
		b_y = limit_y - 1;
 101abb0:	e0bffd17 	ldw	r2,-12(fp)
 101abb4:	10bfffc4 	addi	r2,r2,-1
 101abb8:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 101abbc:	e0800317 	ldw	r2,12(fp)
 101abc0:	10800058 	cmpnei	r2,r2,1
 101abc4:	1000041e 	bne	r2,zero,101abd8 <alt_up_pixel_buffer_dma_draw_box+0x10c>
		addr = pixel_buffer->back_buffer_start_address;
 101abc8:	e0bfee17 	ldw	r2,-72(fp)
 101abcc:	10800c17 	ldw	r2,48(r2)
 101abd0:	e0bfff15 	stw	r2,-4(fp)
 101abd4:	00000306 	br	101abe4 <alt_up_pixel_buffer_dma_draw_box+0x118>
	else
		addr = pixel_buffer->buffer_start_address;
 101abd8:	e0bfee17 	ldw	r2,-72(fp)
 101abdc:	10800b17 	ldw	r2,44(r2)
 101abe0:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 101abe4:	e0bfee17 	ldw	r2,-72(fp)
 101abe8:	10800d17 	ldw	r2,52(r2)
 101abec:	1004c03a 	cmpne	r2,r2,zero
 101abf0:	1000721e 	bne	r2,zero,101adbc <alt_up_pixel_buffer_dma_draw_box+0x2f0>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 101abf4:	e0bfee17 	ldw	r2,-72(fp)
 101abf8:	10801317 	ldw	r2,76(r2)
 101abfc:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
 101ac00:	e0bff417 	ldw	r2,-48(fp)
 101ac04:	e0fff917 	ldw	r3,-28(fp)
 101ac08:	1884983a 	sll	r2,r3,r2
 101ac0c:	e13fff17 	ldw	r4,-4(fp)
 101ac10:	2089883a 	add	r4,r4,r2
 101ac14:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 101ac18:	e0bfee17 	ldw	r2,-72(fp)
 101ac1c:	10800e17 	ldw	r2,56(r2)
 101ac20:	10800058 	cmpnei	r2,r2,1
 101ac24:	10001e1e 	bne	r2,zero,101aca0 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
			for (y = t_y; y <= b_y; y++)
 101ac28:	e0bff917 	ldw	r2,-28(fp)
 101ac2c:	e0bff515 	stw	r2,-44(fp)
 101ac30:	00001706 	br	101ac90 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
			{
				for (x = l_x; x <= r_x; x++)
 101ac34:	e0fffb17 	ldw	r3,-20(fp)
 101ac38:	e0fff615 	stw	r3,-40(fp)
 101ac3c:	00000806 	br	101ac60 <alt_up_pixel_buffer_dma_draw_box+0x194>
				{
					IOWR_8DIRECT(addr, x, local_color);
 101ac40:	e0ffff17 	ldw	r3,-4(fp)
 101ac44:	e0bff617 	ldw	r2,-40(fp)
 101ac48:	1885883a 	add	r2,r3,r2
 101ac4c:	e0fff717 	ldw	r3,-36(fp)
 101ac50:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 101ac54:	e13ff617 	ldw	r4,-40(fp)
 101ac58:	21000044 	addi	r4,r4,1
 101ac5c:	e13ff615 	stw	r4,-40(fp)
 101ac60:	e0bffa17 	ldw	r2,-24(fp)
 101ac64:	e0fff617 	ldw	r3,-40(fp)
 101ac68:	10fff52e 	bgeu	r2,r3,101ac40 <alt_up_pixel_buffer_dma_draw_box+0x174>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
 101ac6c:	e0fff417 	ldw	r3,-48(fp)
 101ac70:	00800044 	movi	r2,1
 101ac74:	10c4983a 	sll	r2,r2,r3
 101ac78:	e13fff17 	ldw	r4,-4(fp)
 101ac7c:	2089883a 	add	r4,r4,r2
 101ac80:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 101ac84:	e0bff517 	ldw	r2,-44(fp)
 101ac88:	10800044 	addi	r2,r2,1
 101ac8c:	e0bff515 	stw	r2,-44(fp)
 101ac90:	e0fff817 	ldw	r3,-32(fp)
 101ac94:	e13ff517 	ldw	r4,-44(fp)
 101ac98:	193fe62e 	bgeu	r3,r4,101ac34 <alt_up_pixel_buffer_dma_draw_box+0x168>
 101ac9c:	0000c406 	br	101afb0 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 101aca0:	e0bfee17 	ldw	r2,-72(fp)
 101aca4:	10800e17 	ldw	r2,56(r2)
 101aca8:	10800098 	cmpnei	r2,r2,2
 101acac:	1000211e 	bne	r2,zero,101ad34 <alt_up_pixel_buffer_dma_draw_box+0x268>
			for (y = t_y; y <= b_y; y++)
 101acb0:	e0bff917 	ldw	r2,-28(fp)
 101acb4:	e0bff515 	stw	r2,-44(fp)
 101acb8:	00001a06 	br	101ad24 <alt_up_pixel_buffer_dma_draw_box+0x258>
			{
				for (x = l_x; x <= r_x; x++)
 101acbc:	e0fffb17 	ldw	r3,-20(fp)
 101acc0:	e0fff615 	stw	r3,-40(fp)
 101acc4:	00000b06 	br	101acf4 <alt_up_pixel_buffer_dma_draw_box+0x228>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 101acc8:	e13ff617 	ldw	r4,-40(fp)
 101accc:	e13ff617 	ldw	r4,-40(fp)
 101acd0:	2105883a 	add	r2,r4,r4
 101acd4:	1007883a 	mov	r3,r2
 101acd8:	e0bfff17 	ldw	r2,-4(fp)
 101acdc:	1885883a 	add	r2,r3,r2
 101ace0:	e0fff717 	ldw	r3,-36(fp)
 101ace4:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 101ace8:	e0bff617 	ldw	r2,-40(fp)
 101acec:	10800044 	addi	r2,r2,1
 101acf0:	e0bff615 	stw	r2,-40(fp)
 101acf4:	e0fffa17 	ldw	r3,-24(fp)
 101acf8:	e13ff617 	ldw	r4,-40(fp)
 101acfc:	193ff22e 	bgeu	r3,r4,101acc8 <alt_up_pixel_buffer_dma_draw_box+0x1fc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
 101ad00:	e0fff417 	ldw	r3,-48(fp)
 101ad04:	00800044 	movi	r2,1
 101ad08:	10c4983a 	sll	r2,r2,r3
 101ad0c:	e0ffff17 	ldw	r3,-4(fp)
 101ad10:	1887883a 	add	r3,r3,r2
 101ad14:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 101ad18:	e13ff517 	ldw	r4,-44(fp)
 101ad1c:	21000044 	addi	r4,r4,1
 101ad20:	e13ff515 	stw	r4,-44(fp)
 101ad24:	e0bff817 	ldw	r2,-32(fp)
 101ad28:	e0fff517 	ldw	r3,-44(fp)
 101ad2c:	10ffe32e 	bgeu	r2,r3,101acbc <alt_up_pixel_buffer_dma_draw_box+0x1f0>
 101ad30:	00009f06 	br	101afb0 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 101ad34:	e13ff917 	ldw	r4,-28(fp)
 101ad38:	e13ff515 	stw	r4,-44(fp)
 101ad3c:	00001b06 	br	101adac <alt_up_pixel_buffer_dma_draw_box+0x2e0>
			{
				for (x = l_x; x <= r_x; x++)
 101ad40:	e0bffb17 	ldw	r2,-20(fp)
 101ad44:	e0bff615 	stw	r2,-40(fp)
 101ad48:	00000c06 	br	101ad7c <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 101ad4c:	e0fff617 	ldw	r3,-40(fp)
 101ad50:	e0fff617 	ldw	r3,-40(fp)
 101ad54:	18c5883a 	add	r2,r3,r3
 101ad58:	1085883a 	add	r2,r2,r2
 101ad5c:	1007883a 	mov	r3,r2
 101ad60:	e0bfff17 	ldw	r2,-4(fp)
 101ad64:	1885883a 	add	r2,r3,r2
 101ad68:	e0fff717 	ldw	r3,-36(fp)
 101ad6c:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 101ad70:	e13ff617 	ldw	r4,-40(fp)
 101ad74:	21000044 	addi	r4,r4,1
 101ad78:	e13ff615 	stw	r4,-40(fp)
 101ad7c:	e0bffa17 	ldw	r2,-24(fp)
 101ad80:	e0fff617 	ldw	r3,-40(fp)
 101ad84:	10fff12e 	bgeu	r2,r3,101ad4c <alt_up_pixel_buffer_dma_draw_box+0x280>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
 101ad88:	e0fff417 	ldw	r3,-48(fp)
 101ad8c:	00800044 	movi	r2,1
 101ad90:	10c4983a 	sll	r2,r2,r3
 101ad94:	e13fff17 	ldw	r4,-4(fp)
 101ad98:	2089883a 	add	r4,r4,r2
 101ad9c:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 101ada0:	e0bff517 	ldw	r2,-44(fp)
 101ada4:	10800044 	addi	r2,r2,1
 101ada8:	e0bff515 	stw	r2,-44(fp)
 101adac:	e0fff817 	ldw	r3,-32(fp)
 101adb0:	e13ff517 	ldw	r4,-44(fp)
 101adb4:	193fe22e 	bgeu	r3,r4,101ad40 <alt_up_pixel_buffer_dma_draw_box+0x274>
 101adb8:	00007d06 	br	101afb0 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 101adbc:	e0bfee17 	ldw	r2,-72(fp)
 101adc0:	10800e17 	ldw	r2,56(r2)
 101adc4:	10800058 	cmpnei	r2,r2,1
 101adc8:	1000221e 	bne	r2,zero,101ae54 <alt_up_pixel_buffer_dma_draw_box+0x388>
			addr = addr + t_y * limit_x;
 101adcc:	e0fff917 	ldw	r3,-28(fp)
 101add0:	e13ffe17 	ldw	r4,-8(fp)
 101add4:	1905383a 	mul	r2,r3,r4
 101add8:	e0ffff17 	ldw	r3,-4(fp)
 101addc:	1887883a 	add	r3,r3,r2
 101ade0:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 101ade4:	e13ff917 	ldw	r4,-28(fp)
 101ade8:	e13ff215 	stw	r4,-56(fp)
 101adec:	00001506 	br	101ae44 <alt_up_pixel_buffer_dma_draw_box+0x378>
			{
				for (x = l_x; x <= r_x; x++)
 101adf0:	e0bffb17 	ldw	r2,-20(fp)
 101adf4:	e0bff315 	stw	r2,-52(fp)
 101adf8:	00000806 	br	101ae1c <alt_up_pixel_buffer_dma_draw_box+0x350>
				{
					IOWR_8DIRECT(addr, x, local_color);
 101adfc:	e0ffff17 	ldw	r3,-4(fp)
 101ae00:	e0bff317 	ldw	r2,-52(fp)
 101ae04:	1885883a 	add	r2,r3,r2
 101ae08:	e0fff717 	ldw	r3,-36(fp)
 101ae0c:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 101ae10:	e0fff317 	ldw	r3,-52(fp)
 101ae14:	18c00044 	addi	r3,r3,1
 101ae18:	e0fff315 	stw	r3,-52(fp)
 101ae1c:	e13ffa17 	ldw	r4,-24(fp)
 101ae20:	e0bff317 	ldw	r2,-52(fp)
 101ae24:	20bff52e 	bgeu	r4,r2,101adfc <alt_up_pixel_buffer_dma_draw_box+0x330>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
 101ae28:	e0ffff17 	ldw	r3,-4(fp)
 101ae2c:	e13ffe17 	ldw	r4,-8(fp)
 101ae30:	1907883a 	add	r3,r3,r4
 101ae34:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 101ae38:	e0bff217 	ldw	r2,-56(fp)
 101ae3c:	10800044 	addi	r2,r2,1
 101ae40:	e0bff215 	stw	r2,-56(fp)
 101ae44:	e0fff817 	ldw	r3,-32(fp)
 101ae48:	e13ff217 	ldw	r4,-56(fp)
 101ae4c:	193fe82e 	bgeu	r3,r4,101adf0 <alt_up_pixel_buffer_dma_draw_box+0x324>
 101ae50:	00005706 	br	101afb0 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 101ae54:	e0bfee17 	ldw	r2,-72(fp)
 101ae58:	10800e17 	ldw	r2,56(r2)
 101ae5c:	10800098 	cmpnei	r2,r2,2
 101ae60:	1000291e 	bne	r2,zero,101af08 <alt_up_pixel_buffer_dma_draw_box+0x43c>
			limit_x = limit_x << 1;
 101ae64:	e0fffe17 	ldw	r3,-8(fp)
 101ae68:	e0fffe17 	ldw	r3,-8(fp)
 101ae6c:	18c5883a 	add	r2,r3,r3
 101ae70:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 101ae74:	e13ff917 	ldw	r4,-28(fp)
 101ae78:	e0fffe17 	ldw	r3,-8(fp)
 101ae7c:	20c5383a 	mul	r2,r4,r3
 101ae80:	e13fff17 	ldw	r4,-4(fp)
 101ae84:	2089883a 	add	r4,r4,r2
 101ae88:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
 101ae8c:	e0bff917 	ldw	r2,-28(fp)
 101ae90:	e0bff215 	stw	r2,-56(fp)
 101ae94:	00001806 	br	101aef8 <alt_up_pixel_buffer_dma_draw_box+0x42c>
			{
				for (x = l_x; x <= r_x; x++)
 101ae98:	e0fffb17 	ldw	r3,-20(fp)
 101ae9c:	e0fff315 	stw	r3,-52(fp)
 101aea0:	00000b06 	br	101aed0 <alt_up_pixel_buffer_dma_draw_box+0x404>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 101aea4:	e13ff317 	ldw	r4,-52(fp)
 101aea8:	e13ff317 	ldw	r4,-52(fp)
 101aeac:	2105883a 	add	r2,r4,r4
 101aeb0:	1007883a 	mov	r3,r2
 101aeb4:	e0bfff17 	ldw	r2,-4(fp)
 101aeb8:	1885883a 	add	r2,r3,r2
 101aebc:	e0fff717 	ldw	r3,-36(fp)
 101aec0:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 101aec4:	e0bff317 	ldw	r2,-52(fp)
 101aec8:	10800044 	addi	r2,r2,1
 101aecc:	e0bff315 	stw	r2,-52(fp)
 101aed0:	e0fffa17 	ldw	r3,-24(fp)
 101aed4:	e13ff317 	ldw	r4,-52(fp)
 101aed8:	193ff22e 	bgeu	r3,r4,101aea4 <alt_up_pixel_buffer_dma_draw_box+0x3d8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
 101aedc:	e0bfff17 	ldw	r2,-4(fp)
 101aee0:	e0fffe17 	ldw	r3,-8(fp)
 101aee4:	10c5883a 	add	r2,r2,r3
 101aee8:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 101aeec:	e13ff217 	ldw	r4,-56(fp)
 101aef0:	21000044 	addi	r4,r4,1
 101aef4:	e13ff215 	stw	r4,-56(fp)
 101aef8:	e0bff817 	ldw	r2,-32(fp)
 101aefc:	e0fff217 	ldw	r3,-56(fp)
 101af00:	10ffe52e 	bgeu	r2,r3,101ae98 <alt_up_pixel_buffer_dma_draw_box+0x3cc>
 101af04:	00002a06 	br	101afb0 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 101af08:	e13ffe17 	ldw	r4,-8(fp)
 101af0c:	e13ffe17 	ldw	r4,-8(fp)
 101af10:	2105883a 	add	r2,r4,r4
 101af14:	1085883a 	add	r2,r2,r2
 101af18:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 101af1c:	e0fff917 	ldw	r3,-28(fp)
 101af20:	e13ffe17 	ldw	r4,-8(fp)
 101af24:	1905383a 	mul	r2,r3,r4
 101af28:	e0ffff17 	ldw	r3,-4(fp)
 101af2c:	1887883a 	add	r3,r3,r2
 101af30:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 101af34:	e13ff917 	ldw	r4,-28(fp)
 101af38:	e13ff215 	stw	r4,-56(fp)
 101af3c:	00001906 	br	101afa4 <alt_up_pixel_buffer_dma_draw_box+0x4d8>
			{
				for (x = l_x; x <= r_x; x++)
 101af40:	e0bffb17 	ldw	r2,-20(fp)
 101af44:	e0bff315 	stw	r2,-52(fp)
 101af48:	00000c06 	br	101af7c <alt_up_pixel_buffer_dma_draw_box+0x4b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 101af4c:	e0fff317 	ldw	r3,-52(fp)
 101af50:	e0fff317 	ldw	r3,-52(fp)
 101af54:	18c5883a 	add	r2,r3,r3
 101af58:	1085883a 	add	r2,r2,r2
 101af5c:	1007883a 	mov	r3,r2
 101af60:	e0bfff17 	ldw	r2,-4(fp)
 101af64:	1885883a 	add	r2,r3,r2
 101af68:	e0fff717 	ldw	r3,-36(fp)
 101af6c:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 101af70:	e13ff317 	ldw	r4,-52(fp)
 101af74:	21000044 	addi	r4,r4,1
 101af78:	e13ff315 	stw	r4,-52(fp)
 101af7c:	e0bffa17 	ldw	r2,-24(fp)
 101af80:	e0fff317 	ldw	r3,-52(fp)
 101af84:	10fff12e 	bgeu	r2,r3,101af4c <alt_up_pixel_buffer_dma_draw_box+0x480>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
 101af88:	e13fff17 	ldw	r4,-4(fp)
 101af8c:	e0bffe17 	ldw	r2,-8(fp)
 101af90:	2089883a 	add	r4,r4,r2
 101af94:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 101af98:	e0fff217 	ldw	r3,-56(fp)
 101af9c:	18c00044 	addi	r3,r3,1
 101afa0:	e0fff215 	stw	r3,-56(fp)
 101afa4:	e13ff817 	ldw	r4,-32(fp)
 101afa8:	e0bff217 	ldw	r2,-56(fp)
 101afac:	20bfe42e 	bgeu	r4,r2,101af40 <alt_up_pixel_buffer_dma_draw_box+0x474>
				}
				addr = addr + limit_x;
			}
		}
	}
}
 101afb0:	e037883a 	mov	sp,fp
 101afb4:	df000017 	ldw	fp,0(sp)
 101afb8:	dec00104 	addi	sp,sp,4
 101afbc:	f800283a 	ret

0101afc0 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
 101afc0:	defff204 	addi	sp,sp,-56
 101afc4:	df000d15 	stw	fp,52(sp)
 101afc8:	df000d04 	addi	fp,sp,52
 101afcc:	e13ff315 	stw	r4,-52(fp)
 101afd0:	e17ff415 	stw	r5,-48(fp)
 101afd4:	e1bff515 	stw	r6,-44(fp)
 101afd8:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 101afdc:	e0bff317 	ldw	r2,-52(fp)
 101afe0:	10800f17 	ldw	r2,60(r2)
 101afe4:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 101afe8:	e0bff317 	ldw	r2,-52(fp)
 101afec:	10801017 	ldw	r2,64(r2)
 101aff0:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
 101aff4:	e0bff417 	ldw	r2,-48(fp)
 101aff8:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
 101affc:	e0fff517 	ldw	r3,-44(fp)
 101b000:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
 101b004:	e13ff617 	ldw	r4,-40(fp)
 101b008:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
 101b00c:	e0800117 	ldw	r2,4(fp)
 101b010:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 101b014:	e0fffb17 	ldw	r3,-20(fp)
 101b018:	e13ffc17 	ldw	r4,-16(fp)
 101b01c:	1900042e 	bgeu	r3,r4,101b030 <alt_up_pixel_buffer_dma_draw_hline+0x70>
	{
		temp = l_x;
 101b020:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
 101b024:	e0fffb17 	ldw	r3,-20(fp)
 101b028:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
 101b02c:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
 101b030:	e13ffc17 	ldw	r4,-16(fp)
 101b034:	e0bffe17 	ldw	r2,-8(fp)
 101b038:	2080b12e 	bgeu	r4,r2,101b300 <alt_up_pixel_buffer_dma_draw_hline+0x340>
 101b03c:	e0fffa17 	ldw	r3,-24(fp)
 101b040:	e13ffd17 	ldw	r4,-12(fp)
 101b044:	19000136 	bltu	r3,r4,101b04c <alt_up_pixel_buffer_dma_draw_hline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 101b048:	0000ad06 	br	101b300 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 101b04c:	e0bffb17 	ldw	r2,-20(fp)
 101b050:	e0fffe17 	ldw	r3,-8(fp)
 101b054:	10c00336 	bltu	r2,r3,101b064 <alt_up_pixel_buffer_dma_draw_hline+0xa4>
	{
		r_x = limit_x - 1;
 101b058:	e13ffe17 	ldw	r4,-8(fp)
 101b05c:	213fffc4 	addi	r4,r4,-1
 101b060:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 101b064:	e0800217 	ldw	r2,8(fp)
 101b068:	10800058 	cmpnei	r2,r2,1
 101b06c:	1000041e 	bne	r2,zero,101b080 <alt_up_pixel_buffer_dma_draw_hline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
 101b070:	e0bff317 	ldw	r2,-52(fp)
 101b074:	10800c17 	ldw	r2,48(r2)
 101b078:	e0bfff15 	stw	r2,-4(fp)
 101b07c:	00000306 	br	101b08c <alt_up_pixel_buffer_dma_draw_hline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
 101b080:	e0bff317 	ldw	r2,-52(fp)
 101b084:	10800b17 	ldw	r2,44(r2)
 101b088:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 101b08c:	e0bff317 	ldw	r2,-52(fp)
 101b090:	10800d17 	ldw	r2,52(r2)
 101b094:	1004c03a 	cmpne	r2,r2,zero
 101b098:	1000431e 	bne	r2,zero,101b1a8 <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 101b09c:	e0bff317 	ldw	r2,-52(fp)
 101b0a0:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
 101b0a4:	e0fffa17 	ldw	r3,-24(fp)
 101b0a8:	1884983a 	sll	r2,r3,r2
 101b0ac:	e13fff17 	ldw	r4,-4(fp)
 101b0b0:	2089883a 	add	r4,r4,r2
 101b0b4:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 101b0b8:	e0bff317 	ldw	r2,-52(fp)
 101b0bc:	10800e17 	ldw	r2,56(r2)
 101b0c0:	10800058 	cmpnei	r2,r2,1
 101b0c4:	10000f1e 	bne	r2,zero,101b104 <alt_up_pixel_buffer_dma_draw_hline+0x144>
			for (x = l_x; x <= r_x; x++)
 101b0c8:	e0bffc17 	ldw	r2,-16(fp)
 101b0cc:	e0bff815 	stw	r2,-32(fp)
 101b0d0:	00000806 	br	101b0f4 <alt_up_pixel_buffer_dma_draw_hline+0x134>
			{
				IOWR_8DIRECT(addr, x, local_color);
 101b0d4:	e0ffff17 	ldw	r3,-4(fp)
 101b0d8:	e0bff817 	ldw	r2,-32(fp)
 101b0dc:	1885883a 	add	r2,r3,r2
 101b0e0:	e0fff917 	ldw	r3,-28(fp)
 101b0e4:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 101b0e8:	e0fff817 	ldw	r3,-32(fp)
 101b0ec:	18c00044 	addi	r3,r3,1
 101b0f0:	e0fff815 	stw	r3,-32(fp)
 101b0f4:	e13ffb17 	ldw	r4,-20(fp)
 101b0f8:	e0bff817 	ldw	r2,-32(fp)
 101b0fc:	20bff52e 	bgeu	r4,r2,101b0d4 <alt_up_pixel_buffer_dma_draw_hline+0x114>
 101b100:	00007f06 	br	101b300 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 101b104:	e0bff317 	ldw	r2,-52(fp)
 101b108:	10800e17 	ldw	r2,56(r2)
 101b10c:	10800098 	cmpnei	r2,r2,2
 101b110:	1000121e 	bne	r2,zero,101b15c <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			for (x = l_x; x <= r_x; x++)
 101b114:	e0fffc17 	ldw	r3,-16(fp)
 101b118:	e0fff815 	stw	r3,-32(fp)
 101b11c:	00000b06 	br	101b14c <alt_up_pixel_buffer_dma_draw_hline+0x18c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 101b120:	e13ff817 	ldw	r4,-32(fp)
 101b124:	e13ff817 	ldw	r4,-32(fp)
 101b128:	2105883a 	add	r2,r4,r4
 101b12c:	1007883a 	mov	r3,r2
 101b130:	e0bfff17 	ldw	r2,-4(fp)
 101b134:	1885883a 	add	r2,r3,r2
 101b138:	e0fff917 	ldw	r3,-28(fp)
 101b13c:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 101b140:	e0bff817 	ldw	r2,-32(fp)
 101b144:	10800044 	addi	r2,r2,1
 101b148:	e0bff815 	stw	r2,-32(fp)
 101b14c:	e0fffb17 	ldw	r3,-20(fp)
 101b150:	e13ff817 	ldw	r4,-32(fp)
 101b154:	193ff22e 	bgeu	r3,r4,101b120 <alt_up_pixel_buffer_dma_draw_hline+0x160>
 101b158:	00006906 	br	101b300 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 101b15c:	e0bffc17 	ldw	r2,-16(fp)
 101b160:	e0bff815 	stw	r2,-32(fp)
 101b164:	00000c06 	br	101b198 <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 101b168:	e0fff817 	ldw	r3,-32(fp)
 101b16c:	e0fff817 	ldw	r3,-32(fp)
 101b170:	18c5883a 	add	r2,r3,r3
 101b174:	1085883a 	add	r2,r2,r2
 101b178:	1007883a 	mov	r3,r2
 101b17c:	e0bfff17 	ldw	r2,-4(fp)
 101b180:	1885883a 	add	r2,r3,r2
 101b184:	e0fff917 	ldw	r3,-28(fp)
 101b188:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 101b18c:	e13ff817 	ldw	r4,-32(fp)
 101b190:	21000044 	addi	r4,r4,1
 101b194:	e13ff815 	stw	r4,-32(fp)
 101b198:	e0bffb17 	ldw	r2,-20(fp)
 101b19c:	e0fff817 	ldw	r3,-32(fp)
 101b1a0:	10fff12e 	bgeu	r2,r3,101b168 <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
 101b1a4:	00005606 	br	101b300 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 101b1a8:	e0bff317 	ldw	r2,-52(fp)
 101b1ac:	10800e17 	ldw	r2,56(r2)
 101b1b0:	10800058 	cmpnei	r2,r2,1
 101b1b4:	1000151e 	bne	r2,zero,101b20c <alt_up_pixel_buffer_dma_draw_hline+0x24c>
			addr = addr + line_y * limit_x;
 101b1b8:	e13ffa17 	ldw	r4,-24(fp)
 101b1bc:	e0fffe17 	ldw	r3,-8(fp)
 101b1c0:	20c5383a 	mul	r2,r4,r3
 101b1c4:	e13fff17 	ldw	r4,-4(fp)
 101b1c8:	2089883a 	add	r4,r4,r2
 101b1cc:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
 101b1d0:	e0bffc17 	ldw	r2,-16(fp)
 101b1d4:	e0bff715 	stw	r2,-36(fp)
 101b1d8:	00000806 	br	101b1fc <alt_up_pixel_buffer_dma_draw_hline+0x23c>
			{
				IOWR_8DIRECT(addr, x, local_color);
 101b1dc:	e0ffff17 	ldw	r3,-4(fp)
 101b1e0:	e0bff717 	ldw	r2,-36(fp)
 101b1e4:	1885883a 	add	r2,r3,r2
 101b1e8:	e0fff917 	ldw	r3,-28(fp)
 101b1ec:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 101b1f0:	e0fff717 	ldw	r3,-36(fp)
 101b1f4:	18c00044 	addi	r3,r3,1
 101b1f8:	e0fff715 	stw	r3,-36(fp)
 101b1fc:	e13ffb17 	ldw	r4,-20(fp)
 101b200:	e0bff717 	ldw	r2,-36(fp)
 101b204:	20bff52e 	bgeu	r4,r2,101b1dc <alt_up_pixel_buffer_dma_draw_hline+0x21c>
 101b208:	00003d06 	br	101b300 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 101b20c:	e0bff317 	ldw	r2,-52(fp)
 101b210:	10800e17 	ldw	r2,56(r2)
 101b214:	10800098 	cmpnei	r2,r2,2
 101b218:	10001c1e 	bne	r2,zero,101b28c <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
			limit_x = limit_x << 1;
 101b21c:	e0fffe17 	ldw	r3,-8(fp)
 101b220:	e0fffe17 	ldw	r3,-8(fp)
 101b224:	18c5883a 	add	r2,r3,r3
 101b228:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
 101b22c:	e13ffa17 	ldw	r4,-24(fp)
 101b230:	e0fffe17 	ldw	r3,-8(fp)
 101b234:	20c5383a 	mul	r2,r4,r3
 101b238:	e13fff17 	ldw	r4,-4(fp)
 101b23c:	2089883a 	add	r4,r4,r2
 101b240:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
 101b244:	e0bffc17 	ldw	r2,-16(fp)
 101b248:	e0bff715 	stw	r2,-36(fp)
 101b24c:	00000b06 	br	101b27c <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 101b250:	e0fff717 	ldw	r3,-36(fp)
 101b254:	e0fff717 	ldw	r3,-36(fp)
 101b258:	18c5883a 	add	r2,r3,r3
 101b25c:	1007883a 	mov	r3,r2
 101b260:	e0bfff17 	ldw	r2,-4(fp)
 101b264:	1885883a 	add	r2,r3,r2
 101b268:	e0fff917 	ldw	r3,-28(fp)
 101b26c:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 101b270:	e13ff717 	ldw	r4,-36(fp)
 101b274:	21000044 	addi	r4,r4,1
 101b278:	e13ff715 	stw	r4,-36(fp)
 101b27c:	e0bffb17 	ldw	r2,-20(fp)
 101b280:	e0fff717 	ldw	r3,-36(fp)
 101b284:	10fff22e 	bgeu	r2,r3,101b250 <alt_up_pixel_buffer_dma_draw_hline+0x290>
 101b288:	00001d06 	br	101b300 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
 101b28c:	e13ffe17 	ldw	r4,-8(fp)
 101b290:	e13ffe17 	ldw	r4,-8(fp)
 101b294:	2105883a 	add	r2,r4,r4
 101b298:	1085883a 	add	r2,r2,r2
 101b29c:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
 101b2a0:	e0fffa17 	ldw	r3,-24(fp)
 101b2a4:	e13ffe17 	ldw	r4,-8(fp)
 101b2a8:	1905383a 	mul	r2,r3,r4
 101b2ac:	e0ffff17 	ldw	r3,-4(fp)
 101b2b0:	1887883a 	add	r3,r3,r2
 101b2b4:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
 101b2b8:	e13ffc17 	ldw	r4,-16(fp)
 101b2bc:	e13ff715 	stw	r4,-36(fp)
 101b2c0:	00000c06 	br	101b2f4 <alt_up_pixel_buffer_dma_draw_hline+0x334>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 101b2c4:	e0fff717 	ldw	r3,-36(fp)
 101b2c8:	e0fff717 	ldw	r3,-36(fp)
 101b2cc:	18c5883a 	add	r2,r3,r3
 101b2d0:	1085883a 	add	r2,r2,r2
 101b2d4:	1007883a 	mov	r3,r2
 101b2d8:	e0bfff17 	ldw	r2,-4(fp)
 101b2dc:	1885883a 	add	r2,r3,r2
 101b2e0:	e0fff917 	ldw	r3,-28(fp)
 101b2e4:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 101b2e8:	e13ff717 	ldw	r4,-36(fp)
 101b2ec:	21000044 	addi	r4,r4,1
 101b2f0:	e13ff715 	stw	r4,-36(fp)
 101b2f4:	e0bffb17 	ldw	r2,-20(fp)
 101b2f8:	e0fff717 	ldw	r3,-36(fp)
 101b2fc:	10fff12e 	bgeu	r2,r3,101b2c4 <alt_up_pixel_buffer_dma_draw_hline+0x304>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
 101b300:	e037883a 	mov	sp,fp
 101b304:	df000017 	ldw	fp,0(sp)
 101b308:	dec00104 	addi	sp,sp,4
 101b30c:	f800283a 	ret

0101b310 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
 101b310:	defff104 	addi	sp,sp,-60
 101b314:	df000e15 	stw	fp,56(sp)
 101b318:	df000e04 	addi	fp,sp,56
 101b31c:	e13ff215 	stw	r4,-56(fp)
 101b320:	e17ff315 	stw	r5,-52(fp)
 101b324:	e1bff415 	stw	r6,-48(fp)
 101b328:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 101b32c:	e0bff217 	ldw	r2,-56(fp)
 101b330:	10800f17 	ldw	r2,60(r2)
 101b334:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 101b338:	e0bff217 	ldw	r2,-56(fp)
 101b33c:	10801017 	ldw	r2,64(r2)
 101b340:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
 101b344:	e0bff317 	ldw	r2,-52(fp)
 101b348:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
 101b34c:	e0fff417 	ldw	r3,-48(fp)
 101b350:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
 101b354:	e13ff517 	ldw	r4,-44(fp)
 101b358:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
 101b35c:	e0800117 	ldw	r2,4(fp)
 101b360:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
 101b364:	e0fffa17 	ldw	r3,-24(fp)
 101b368:	e13ffb17 	ldw	r4,-20(fp)
 101b36c:	1900042e 	bgeu	r3,r4,101b380 <alt_up_pixel_buffer_dma_draw_vline+0x70>
	{
		temp = t_y;
 101b370:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
 101b374:	e0fffa17 	ldw	r3,-24(fp)
 101b378:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
 101b37c:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
 101b380:	e13ffc17 	ldw	r4,-16(fp)
 101b384:	e0bffe17 	ldw	r2,-8(fp)
 101b388:	2080d12e 	bgeu	r4,r2,101b6d0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
 101b38c:	e0fffb17 	ldw	r3,-20(fp)
 101b390:	e13ffd17 	ldw	r4,-12(fp)
 101b394:	19000136 	bltu	r3,r4,101b39c <alt_up_pixel_buffer_dma_draw_vline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 101b398:	0000cd06 	br	101b6d0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 101b39c:	e0bffa17 	ldw	r2,-24(fp)
 101b3a0:	e0fffd17 	ldw	r3,-12(fp)
 101b3a4:	10c00336 	bltu	r2,r3,101b3b4 <alt_up_pixel_buffer_dma_draw_vline+0xa4>
	{
		b_y = limit_y - 1;
 101b3a8:	e13ffd17 	ldw	r4,-12(fp)
 101b3ac:	213fffc4 	addi	r4,r4,-1
 101b3b0:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 101b3b4:	e0800217 	ldw	r2,8(fp)
 101b3b8:	10800058 	cmpnei	r2,r2,1
 101b3bc:	1000041e 	bne	r2,zero,101b3d0 <alt_up_pixel_buffer_dma_draw_vline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
 101b3c0:	e0bff217 	ldw	r2,-56(fp)
 101b3c4:	10800c17 	ldw	r2,48(r2)
 101b3c8:	e0bfff15 	stw	r2,-4(fp)
 101b3cc:	00000306 	br	101b3dc <alt_up_pixel_buffer_dma_draw_vline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
 101b3d0:	e0bff217 	ldw	r2,-56(fp)
 101b3d4:	10800b17 	ldw	r2,44(r2)
 101b3d8:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 101b3dc:	e0bff217 	ldw	r2,-56(fp)
 101b3e0:	10800d17 	ldw	r2,52(r2)
 101b3e4:	1004c03a 	cmpne	r2,r2,zero
 101b3e8:	1000571e 	bne	r2,zero,101b548 <alt_up_pixel_buffer_dma_draw_vline+0x238>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 101b3ec:	e0bff217 	ldw	r2,-56(fp)
 101b3f0:	10801317 	ldw	r2,76(r2)
 101b3f4:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
 101b3f8:	e0bff717 	ldw	r2,-36(fp)
 101b3fc:	e0fffb17 	ldw	r3,-20(fp)
 101b400:	1884983a 	sll	r2,r3,r2
 101b404:	e13fff17 	ldw	r4,-4(fp)
 101b408:	2089883a 	add	r4,r4,r2
 101b40c:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 101b410:	e0bff217 	ldw	r2,-56(fp)
 101b414:	10800e17 	ldw	r2,56(r2)
 101b418:	10800058 	cmpnei	r2,r2,1
 101b41c:	1000151e 	bne	r2,zero,101b474 <alt_up_pixel_buffer_dma_draw_vline+0x164>
			for (y = t_y; y <= b_y; y++)
 101b420:	e0bffb17 	ldw	r2,-20(fp)
 101b424:	e0bff815 	stw	r2,-32(fp)
 101b428:	00000e06 	br	101b464 <alt_up_pixel_buffer_dma_draw_vline+0x154>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 101b42c:	e0ffff17 	ldw	r3,-4(fp)
 101b430:	e0bffc17 	ldw	r2,-16(fp)
 101b434:	1885883a 	add	r2,r3,r2
 101b438:	e0fff917 	ldw	r3,-28(fp)
 101b43c:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
 101b440:	e0fff717 	ldw	r3,-36(fp)
 101b444:	00800044 	movi	r2,1
 101b448:	10c4983a 	sll	r2,r2,r3
 101b44c:	e0ffff17 	ldw	r3,-4(fp)
 101b450:	1887883a 	add	r3,r3,r2
 101b454:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 101b458:	e13ff817 	ldw	r4,-32(fp)
 101b45c:	21000044 	addi	r4,r4,1
 101b460:	e13ff815 	stw	r4,-32(fp)
 101b464:	e0bffa17 	ldw	r2,-24(fp)
 101b468:	e0fff817 	ldw	r3,-32(fp)
 101b46c:	10ffef2e 	bgeu	r2,r3,101b42c <alt_up_pixel_buffer_dma_draw_vline+0x11c>
 101b470:	00009706 	br	101b6d0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 101b474:	e0bff217 	ldw	r2,-56(fp)
 101b478:	10800e17 	ldw	r2,56(r2)
 101b47c:	10800098 	cmpnei	r2,r2,2
 101b480:	1000181e 	bne	r2,zero,101b4e4 <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
			for (y = t_y; y <= b_y; y++)
 101b484:	e13ffb17 	ldw	r4,-20(fp)
 101b488:	e13ff815 	stw	r4,-32(fp)
 101b48c:	00001106 	br	101b4d4 <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 101b490:	e0fffc17 	ldw	r3,-16(fp)
 101b494:	e0fffc17 	ldw	r3,-16(fp)
 101b498:	18c5883a 	add	r2,r3,r3
 101b49c:	1007883a 	mov	r3,r2
 101b4a0:	e0bfff17 	ldw	r2,-4(fp)
 101b4a4:	1885883a 	add	r2,r3,r2
 101b4a8:	e0fff917 	ldw	r3,-28(fp)
 101b4ac:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
 101b4b0:	e0fff717 	ldw	r3,-36(fp)
 101b4b4:	00800044 	movi	r2,1
 101b4b8:	10c4983a 	sll	r2,r2,r3
 101b4bc:	e13fff17 	ldw	r4,-4(fp)
 101b4c0:	2089883a 	add	r4,r4,r2
 101b4c4:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 101b4c8:	e0bff817 	ldw	r2,-32(fp)
 101b4cc:	10800044 	addi	r2,r2,1
 101b4d0:	e0bff815 	stw	r2,-32(fp)
 101b4d4:	e0fffa17 	ldw	r3,-24(fp)
 101b4d8:	e13ff817 	ldw	r4,-32(fp)
 101b4dc:	193fec2e 	bgeu	r3,r4,101b490 <alt_up_pixel_buffer_dma_draw_vline+0x180>
 101b4e0:	00007b06 	br	101b6d0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 101b4e4:	e0bffb17 	ldw	r2,-20(fp)
 101b4e8:	e0bff815 	stw	r2,-32(fp)
 101b4ec:	00001206 	br	101b538 <alt_up_pixel_buffer_dma_draw_vline+0x228>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 101b4f0:	e0fffc17 	ldw	r3,-16(fp)
 101b4f4:	e0fffc17 	ldw	r3,-16(fp)
 101b4f8:	18c5883a 	add	r2,r3,r3
 101b4fc:	1085883a 	add	r2,r2,r2
 101b500:	1007883a 	mov	r3,r2
 101b504:	e0bfff17 	ldw	r2,-4(fp)
 101b508:	1885883a 	add	r2,r3,r2
 101b50c:	e0fff917 	ldw	r3,-28(fp)
 101b510:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
 101b514:	e0fff717 	ldw	r3,-36(fp)
 101b518:	00800044 	movi	r2,1
 101b51c:	10c4983a 	sll	r2,r2,r3
 101b520:	e13fff17 	ldw	r4,-4(fp)
 101b524:	2089883a 	add	r4,r4,r2
 101b528:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 101b52c:	e0bff817 	ldw	r2,-32(fp)
 101b530:	10800044 	addi	r2,r2,1
 101b534:	e0bff815 	stw	r2,-32(fp)
 101b538:	e0fffa17 	ldw	r3,-24(fp)
 101b53c:	e13ff817 	ldw	r4,-32(fp)
 101b540:	193feb2e 	bgeu	r3,r4,101b4f0 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
 101b544:	00006206 	br	101b6d0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 101b548:	e0bff217 	ldw	r2,-56(fp)
 101b54c:	10800e17 	ldw	r2,56(r2)
 101b550:	10800058 	cmpnei	r2,r2,1
 101b554:	1000191e 	bne	r2,zero,101b5bc <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
			addr = addr + t_y * limit_x;
 101b558:	e0fffb17 	ldw	r3,-20(fp)
 101b55c:	e13ffe17 	ldw	r4,-8(fp)
 101b560:	1905383a 	mul	r2,r3,r4
 101b564:	e0ffff17 	ldw	r3,-4(fp)
 101b568:	1887883a 	add	r3,r3,r2
 101b56c:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 101b570:	e13ffb17 	ldw	r4,-20(fp)
 101b574:	e13ff615 	stw	r4,-40(fp)
 101b578:	00000c06 	br	101b5ac <alt_up_pixel_buffer_dma_draw_vline+0x29c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 101b57c:	e0ffff17 	ldw	r3,-4(fp)
 101b580:	e0bffc17 	ldw	r2,-16(fp)
 101b584:	1885883a 	add	r2,r3,r2
 101b588:	e0fff917 	ldw	r3,-28(fp)
 101b58c:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
 101b590:	e0bfff17 	ldw	r2,-4(fp)
 101b594:	e0fffe17 	ldw	r3,-8(fp)
 101b598:	10c5883a 	add	r2,r2,r3
 101b59c:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 101b5a0:	e13ff617 	ldw	r4,-40(fp)
 101b5a4:	21000044 	addi	r4,r4,1
 101b5a8:	e13ff615 	stw	r4,-40(fp)
 101b5ac:	e0bffa17 	ldw	r2,-24(fp)
 101b5b0:	e0fff617 	ldw	r3,-40(fp)
 101b5b4:	10fff12e 	bgeu	r2,r3,101b57c <alt_up_pixel_buffer_dma_draw_vline+0x26c>
 101b5b8:	00004506 	br	101b6d0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 101b5bc:	e0bff217 	ldw	r2,-56(fp)
 101b5c0:	10800e17 	ldw	r2,56(r2)
 101b5c4:	10800098 	cmpnei	r2,r2,2
 101b5c8:	1000201e 	bne	r2,zero,101b64c <alt_up_pixel_buffer_dma_draw_vline+0x33c>
			limit_x = limit_x << 1;
 101b5cc:	e13ffe17 	ldw	r4,-8(fp)
 101b5d0:	e13ffe17 	ldw	r4,-8(fp)
 101b5d4:	2105883a 	add	r2,r4,r4
 101b5d8:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 101b5dc:	e0fffb17 	ldw	r3,-20(fp)
 101b5e0:	e13ffe17 	ldw	r4,-8(fp)
 101b5e4:	1905383a 	mul	r2,r3,r4
 101b5e8:	e0ffff17 	ldw	r3,-4(fp)
 101b5ec:	1887883a 	add	r3,r3,r2
 101b5f0:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 101b5f4:	e13ffb17 	ldw	r4,-20(fp)
 101b5f8:	e13ff615 	stw	r4,-40(fp)
 101b5fc:	00000f06 	br	101b63c <alt_up_pixel_buffer_dma_draw_vline+0x32c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 101b600:	e0fffc17 	ldw	r3,-16(fp)
 101b604:	e0fffc17 	ldw	r3,-16(fp)
 101b608:	18c5883a 	add	r2,r3,r3
 101b60c:	1007883a 	mov	r3,r2
 101b610:	e0bfff17 	ldw	r2,-4(fp)
 101b614:	1885883a 	add	r2,r3,r2
 101b618:	e0fff917 	ldw	r3,-28(fp)
 101b61c:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
 101b620:	e13fff17 	ldw	r4,-4(fp)
 101b624:	e0bffe17 	ldw	r2,-8(fp)
 101b628:	2089883a 	add	r4,r4,r2
 101b62c:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 101b630:	e0fff617 	ldw	r3,-40(fp)
 101b634:	18c00044 	addi	r3,r3,1
 101b638:	e0fff615 	stw	r3,-40(fp)
 101b63c:	e13ffa17 	ldw	r4,-24(fp)
 101b640:	e0bff617 	ldw	r2,-40(fp)
 101b644:	20bfee2e 	bgeu	r4,r2,101b600 <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
 101b648:	00002106 	br	101b6d0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 101b64c:	e0fffe17 	ldw	r3,-8(fp)
 101b650:	e0fffe17 	ldw	r3,-8(fp)
 101b654:	18c5883a 	add	r2,r3,r3
 101b658:	1085883a 	add	r2,r2,r2
 101b65c:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 101b660:	e13ffb17 	ldw	r4,-20(fp)
 101b664:	e0fffe17 	ldw	r3,-8(fp)
 101b668:	20c5383a 	mul	r2,r4,r3
 101b66c:	e13fff17 	ldw	r4,-4(fp)
 101b670:	2089883a 	add	r4,r4,r2
 101b674:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
 101b678:	e0bffb17 	ldw	r2,-20(fp)
 101b67c:	e0bff615 	stw	r2,-40(fp)
 101b680:	00001006 	br	101b6c4 <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 101b684:	e0fffc17 	ldw	r3,-16(fp)
 101b688:	e0fffc17 	ldw	r3,-16(fp)
 101b68c:	18c5883a 	add	r2,r3,r3
 101b690:	1085883a 	add	r2,r2,r2
 101b694:	1007883a 	mov	r3,r2
 101b698:	e0bfff17 	ldw	r2,-4(fp)
 101b69c:	1885883a 	add	r2,r3,r2
 101b6a0:	e0fff917 	ldw	r3,-28(fp)
 101b6a4:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
 101b6a8:	e13fff17 	ldw	r4,-4(fp)
 101b6ac:	e0bffe17 	ldw	r2,-8(fp)
 101b6b0:	2089883a 	add	r4,r4,r2
 101b6b4:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 101b6b8:	e0fff617 	ldw	r3,-40(fp)
 101b6bc:	18c00044 	addi	r3,r3,1
 101b6c0:	e0fff615 	stw	r3,-40(fp)
 101b6c4:	e13ffa17 	ldw	r4,-24(fp)
 101b6c8:	e0bff617 	ldw	r2,-40(fp)
 101b6cc:	20bfed2e 	bgeu	r4,r2,101b684 <alt_up_pixel_buffer_dma_draw_vline+0x374>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
 101b6d0:	e037883a 	mov	sp,fp
 101b6d4:	df000017 	ldw	fp,0(sp)
 101b6d8:	dec00104 	addi	sp,sp,4
 101b6dc:	f800283a 	ret

0101b6e0 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
 101b6e0:	defff804 	addi	sp,sp,-32
 101b6e4:	dfc00715 	stw	ra,28(sp)
 101b6e8:	df000615 	stw	fp,24(sp)
 101b6ec:	df000604 	addi	fp,sp,24
 101b6f0:	e13ffc15 	stw	r4,-16(fp)
 101b6f4:	e17ffd15 	stw	r5,-12(fp)
 101b6f8:	e1bffe15 	stw	r6,-8(fp)
 101b6fc:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
 101b700:	e0800317 	ldw	r2,12(fp)
 101b704:	d8800015 	stw	r2,0(sp)
 101b708:	e0800417 	ldw	r2,16(fp)
 101b70c:	d8800115 	stw	r2,4(sp)
 101b710:	e13ffc17 	ldw	r4,-16(fp)
 101b714:	e17ffd17 	ldw	r5,-12(fp)
 101b718:	e1bfff17 	ldw	r6,-4(fp)
 101b71c:	e1fffe17 	ldw	r7,-8(fp)
 101b720:	101afc00 	call	101afc0 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
 101b724:	e0800317 	ldw	r2,12(fp)
 101b728:	d8800015 	stw	r2,0(sp)
 101b72c:	e0800417 	ldw	r2,16(fp)
 101b730:	d8800115 	stw	r2,4(sp)
 101b734:	e13ffc17 	ldw	r4,-16(fp)
 101b738:	e17ffd17 	ldw	r5,-12(fp)
 101b73c:	e1bfff17 	ldw	r6,-4(fp)
 101b740:	e1c00217 	ldw	r7,8(fp)
 101b744:	101afc00 	call	101afc0 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
 101b748:	e0800317 	ldw	r2,12(fp)
 101b74c:	d8800015 	stw	r2,0(sp)
 101b750:	e0800417 	ldw	r2,16(fp)
 101b754:	d8800115 	stw	r2,4(sp)
 101b758:	e13ffc17 	ldw	r4,-16(fp)
 101b75c:	e17ffd17 	ldw	r5,-12(fp)
 101b760:	e1bffe17 	ldw	r6,-8(fp)
 101b764:	e1c00217 	ldw	r7,8(fp)
 101b768:	101b3100 	call	101b310 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
 101b76c:	e0800317 	ldw	r2,12(fp)
 101b770:	d8800015 	stw	r2,0(sp)
 101b774:	e0800417 	ldw	r2,16(fp)
 101b778:	d8800115 	stw	r2,4(sp)
 101b77c:	e13ffc17 	ldw	r4,-16(fp)
 101b780:	e17fff17 	ldw	r5,-4(fp)
 101b784:	e1bffe17 	ldw	r6,-8(fp)
 101b788:	e1c00217 	ldw	r7,8(fp)
 101b78c:	101b3100 	call	101b310 <alt_up_pixel_buffer_dma_draw_vline>
}
 101b790:	e037883a 	mov	sp,fp
 101b794:	dfc00117 	ldw	ra,4(sp)
 101b798:	df000017 	ldw	fp,0(sp)
 101b79c:	dec00204 	addi	sp,sp,8
 101b7a0:	f800283a 	ret

0101b7a4 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
 101b7a4:	defffb04 	addi	sp,sp,-20
 101b7a8:	df000415 	stw	fp,16(sp)
 101b7ac:	df000404 	addi	fp,sp,16
 101b7b0:	e13ffc15 	stw	r4,-16(fp)
 101b7b4:	e17ffd15 	stw	r5,-12(fp)
 101b7b8:	e1bffe15 	stw	r6,-8(fp)
 101b7bc:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
 101b7c0:	e0c00217 	ldw	r3,8(fp)
 101b7c4:	1804c03a 	cmpne	r2,r3,zero
 101b7c8:	10000b1e 	bne	r2,zero,101b7f8 <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
 101b7cc:	e13ffd17 	ldw	r4,-12(fp)
 101b7d0:	e0ffff17 	ldw	r3,-4(fp)
 101b7d4:	20c5383a 	mul	r2,r4,r3
 101b7d8:	e13ffe17 	ldw	r4,-8(fp)
 101b7dc:	1105883a 	add	r2,r2,r4
 101b7e0:	1007883a 	mov	r3,r2
 101b7e4:	e0bffc17 	ldw	r2,-16(fp)
 101b7e8:	1885883a 	add	r2,r3,r2
 101b7ec:	e0c00117 	ldw	r3,4(fp)
 101b7f0:	10c00025 	stbio	r3,0(r2)
 101b7f4:	00001b06 	br	101b864 <helper_plot_pixel+0xc0>
	else if (mode == 1)
 101b7f8:	e1000217 	ldw	r4,8(fp)
 101b7fc:	20800058 	cmpnei	r2,r4,1
 101b800:	10000c1e 	bne	r2,zero,101b834 <helper_plot_pixel+0x90>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
 101b804:	e0fffd17 	ldw	r3,-12(fp)
 101b808:	e13fff17 	ldw	r4,-4(fp)
 101b80c:	1905383a 	mul	r2,r3,r4
 101b810:	e0fffe17 	ldw	r3,-8(fp)
 101b814:	10c5883a 	add	r2,r2,r3
 101b818:	1085883a 	add	r2,r2,r2
 101b81c:	1007883a 	mov	r3,r2
 101b820:	e0bffc17 	ldw	r2,-16(fp)
 101b824:	1885883a 	add	r2,r3,r2
 101b828:	e1000117 	ldw	r4,4(fp)
 101b82c:	1100002d 	sthio	r4,0(r2)
 101b830:	00000c06 	br	101b864 <helper_plot_pixel+0xc0>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
 101b834:	e0fffd17 	ldw	r3,-12(fp)
 101b838:	e13fff17 	ldw	r4,-4(fp)
 101b83c:	1905383a 	mul	r2,r3,r4
 101b840:	e0fffe17 	ldw	r3,-8(fp)
 101b844:	10c5883a 	add	r2,r2,r3
 101b848:	1085883a 	add	r2,r2,r2
 101b84c:	1085883a 	add	r2,r2,r2
 101b850:	1007883a 	mov	r3,r2
 101b854:	e0bffc17 	ldw	r2,-16(fp)
 101b858:	1885883a 	add	r2,r3,r2
 101b85c:	e1000117 	ldw	r4,4(fp)
 101b860:	11000035 	stwio	r4,0(r2)
}
 101b864:	e037883a 	mov	sp,fp
 101b868:	df000017 	ldw	fp,0(sp)
 101b86c:	dec00104 	addi	sp,sp,4
 101b870:	f800283a 	ret

0101b874 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
 101b874:	deffe404 	addi	sp,sp,-112
 101b878:	dfc01b15 	stw	ra,108(sp)
 101b87c:	df001a15 	stw	fp,104(sp)
 101b880:	df001a04 	addi	fp,sp,104
 101b884:	e13fe815 	stw	r4,-96(fp)
 101b888:	e17fe915 	stw	r5,-92(fp)
 101b88c:	e1bfea15 	stw	r6,-88(fp)
 101b890:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
 101b894:	e0bfe917 	ldw	r2,-92(fp)
 101b898:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
 101b89c:	e0ffea17 	ldw	r3,-88(fp)
 101b8a0:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
 101b8a4:	e13feb17 	ldw	r4,-84(fp)
 101b8a8:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
 101b8ac:	e0800217 	ldw	r2,8(fp)
 101b8b0:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
 101b8b4:	e0fff717 	ldw	r3,-36(fp)
 101b8b8:	e13ff917 	ldw	r4,-28(fp)
 101b8bc:	1905c83a 	sub	r2,r3,r4
 101b8c0:	e0bfff15 	stw	r2,-4(fp)
 101b8c4:	e0ffff17 	ldw	r3,-4(fp)
 101b8c8:	1804403a 	cmpge	r2,r3,zero
 101b8cc:	1000031e 	bne	r2,zero,101b8dc <alt_up_pixel_buffer_dma_draw_line+0x68>
 101b8d0:	e13fff17 	ldw	r4,-4(fp)
 101b8d4:	0109c83a 	sub	r4,zero,r4
 101b8d8:	e13fff15 	stw	r4,-4(fp)
 101b8dc:	e0fff817 	ldw	r3,-32(fp)
 101b8e0:	e13ffa17 	ldw	r4,-24(fp)
 101b8e4:	1905c83a 	sub	r2,r3,r4
 101b8e8:	e0bffe15 	stw	r2,-8(fp)
 101b8ec:	e0fffe17 	ldw	r3,-8(fp)
 101b8f0:	1804403a 	cmpge	r2,r3,zero
 101b8f4:	1000031e 	bne	r2,zero,101b904 <alt_up_pixel_buffer_dma_draw_line+0x90>
 101b8f8:	e13ffe17 	ldw	r4,-8(fp)
 101b8fc:	0109c83a 	sub	r4,zero,r4
 101b900:	e13ffe15 	stw	r4,-8(fp)
 101b904:	e0fffe17 	ldw	r3,-8(fp)
 101b908:	e13fff17 	ldw	r4,-4(fp)
 101b90c:	1904803a 	cmplt	r2,r3,r4
 101b910:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
 101b914:	e0bfe817 	ldw	r2,-96(fp)
 101b918:	10800e17 	ldw	r2,56(r2)
 101b91c:	10800060 	cmpeqi	r2,r2,1
 101b920:	10000c1e 	bne	r2,zero,101b954 <alt_up_pixel_buffer_dma_draw_line+0xe0>
 101b924:	e0bfe817 	ldw	r2,-96(fp)
 101b928:	10800e17 	ldw	r2,56(r2)
 101b92c:	10800098 	cmpnei	r2,r2,2
 101b930:	1000031e 	bne	r2,zero,101b940 <alt_up_pixel_buffer_dma_draw_line+0xcc>
 101b934:	00800044 	movi	r2,1
 101b938:	e0bffc15 	stw	r2,-16(fp)
 101b93c:	00000206 	br	101b948 <alt_up_pixel_buffer_dma_draw_line+0xd4>
 101b940:	00c00084 	movi	r3,2
 101b944:	e0fffc15 	stw	r3,-16(fp)
 101b948:	e13ffc17 	ldw	r4,-16(fp)
 101b94c:	e13ffd15 	stw	r4,-12(fp)
 101b950:	00000106 	br	101b958 <alt_up_pixel_buffer_dma_draw_line+0xe4>
 101b954:	e03ffd15 	stw	zero,-12(fp)
 101b958:	e0bffd17 	ldw	r2,-12(fp)
 101b95c:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
 101b960:	e0c00317 	ldw	r3,12(fp)
 101b964:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
 101b968:	e0bfe817 	ldw	r2,-96(fp)
 101b96c:	10800d17 	ldw	r2,52(r2)
 101b970:	1004c03a 	cmpne	r2,r2,zero
 101b974:	1000091e 	bne	r2,zero,101b99c <alt_up_pixel_buffer_dma_draw_line+0x128>
 101b978:	e0bfe817 	ldw	r2,-96(fp)
 101b97c:	10c01317 	ldw	r3,76(r2)
 101b980:	e0bfef17 	ldw	r2,-68(fp)
 101b984:	1885c83a 	sub	r2,r3,r2
 101b988:	1007883a 	mov	r3,r2
 101b98c:	00800044 	movi	r2,1
 101b990:	10c4983a 	sll	r2,r2,r3
 101b994:	e0bffb15 	stw	r2,-20(fp)
 101b998:	00000306 	br	101b9a8 <alt_up_pixel_buffer_dma_draw_line+0x134>
 101b99c:	e0bfe817 	ldw	r2,-96(fp)
 101b9a0:	10800f17 	ldw	r2,60(r2)
 101b9a4:	e0bffb15 	stw	r2,-20(fp)
 101b9a8:	e13ffb17 	ldw	r4,-20(fp)
 101b9ac:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
 101b9b0:	e0800417 	ldw	r2,16(fp)
 101b9b4:	10800058 	cmpnei	r2,r2,1
 101b9b8:	1000041e 	bne	r2,zero,101b9cc <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
 101b9bc:	e0bfe817 	ldw	r2,-96(fp)
 101b9c0:	10800c17 	ldw	r2,48(r2)
 101b9c4:	e0bfed15 	stw	r2,-76(fp)
 101b9c8:	00000306 	br	101b9d8 <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
 101b9cc:	e0bfe817 	ldw	r2,-96(fp)
 101b9d0:	10800b17 	ldw	r2,44(r2)
 101b9d4:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
 101b9d8:	e0fff603 	ldbu	r3,-40(fp)
 101b9dc:	18803fcc 	andi	r2,r3,255
 101b9e0:	1080201c 	xori	r2,r2,128
 101b9e4:	10bfe004 	addi	r2,r2,-128
 101b9e8:	10800050 	cmplti	r2,r2,1
 101b9ec:	10000c1e 	bne	r2,zero,101ba20 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
 101b9f0:	e13ffa17 	ldw	r4,-24(fp)
 101b9f4:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
 101b9f8:	e0bff917 	ldw	r2,-28(fp)
 101b9fc:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
 101ba00:	e0fff317 	ldw	r3,-52(fp)
 101ba04:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
 101ba08:	e13ff817 	ldw	r4,-32(fp)
 101ba0c:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
 101ba10:	e0bff717 	ldw	r2,-36(fp)
 101ba14:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
 101ba18:	e0fff317 	ldw	r3,-52(fp)
 101ba1c:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
 101ba20:	e13ff817 	ldw	r4,-32(fp)
 101ba24:	e0bffa17 	ldw	r2,-24(fp)
 101ba28:	20800c0e 	bge	r4,r2,101ba5c <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
 101ba2c:	e0fffa17 	ldw	r3,-24(fp)
 101ba30:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
 101ba34:	e13ff817 	ldw	r4,-32(fp)
 101ba38:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
 101ba3c:	e0bff317 	ldw	r2,-52(fp)
 101ba40:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
 101ba44:	e0fff917 	ldw	r3,-28(fp)
 101ba48:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
 101ba4c:	e13ff717 	ldw	r4,-36(fp)
 101ba50:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
 101ba54:	e0bff317 	ldw	r2,-52(fp)
 101ba58:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
 101ba5c:	e0fff817 	ldw	r3,-32(fp)
 101ba60:	e13ffa17 	ldw	r4,-24(fp)
 101ba64:	1907c83a 	sub	r3,r3,r4
 101ba68:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
 101ba6c:	e0fff717 	ldw	r3,-36(fp)
 101ba70:	e13ff917 	ldw	r4,-28(fp)
 101ba74:	1905c83a 	sub	r2,r3,r4
 101ba78:	e0bff415 	stw	r2,-48(fp)
 101ba7c:	e0fff417 	ldw	r3,-48(fp)
 101ba80:	1804403a 	cmpge	r2,r3,zero
 101ba84:	1000031e 	bne	r2,zero,101ba94 <alt_up_pixel_buffer_dma_draw_line+0x220>
 101ba88:	e13ff417 	ldw	r4,-48(fp)
 101ba8c:	0109c83a 	sub	r4,zero,r4
 101ba90:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
 101ba94:	e0fff517 	ldw	r3,-44(fp)
 101ba98:	1804d7fa 	srli	r2,r3,31
 101ba9c:	e13ff517 	ldw	r4,-44(fp)
 101baa0:	1105883a 	add	r2,r2,r4
 101baa4:	1005d07a 	srai	r2,r2,1
 101baa8:	0085c83a 	sub	r2,zero,r2
 101baac:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
 101bab0:	e0bff917 	ldw	r2,-28(fp)
 101bab4:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
 101bab8:	e0fff917 	ldw	r3,-28(fp)
 101babc:	e13ff717 	ldw	r4,-36(fp)
 101bac0:	1900030e 	bge	r3,r4,101bad0 <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
 101bac4:	00800044 	movi	r2,1
 101bac8:	e0bff215 	stw	r2,-56(fp)
 101bacc:	00000206 	br	101bad8 <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
 101bad0:	00ffffc4 	movi	r3,-1
 101bad4:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
 101bad8:	e13ff603 	ldbu	r4,-40(fp)
 101badc:	20803fcc 	andi	r2,r4,255
 101bae0:	1080201c 	xori	r2,r2,128
 101bae4:	10bfe004 	addi	r2,r2,-128
 101bae8:	10800058 	cmpnei	r2,r2,1
 101baec:	1000221e 	bne	r2,zero,101bb78 <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
 101baf0:	e0bffa17 	ldw	r2,-24(fp)
 101baf4:	e0bff115 	stw	r2,-60(fp)
 101baf8:	00001b06 	br	101bb68 <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
 101bafc:	e0ffee17 	ldw	r3,-72(fp)
 101bb00:	d8c00015 	stw	r3,0(sp)
 101bb04:	e13fef17 	ldw	r4,-68(fp)
 101bb08:	d9000115 	stw	r4,4(sp)
 101bb0c:	e13fed17 	ldw	r4,-76(fp)
 101bb10:	e17fec17 	ldw	r5,-80(fp)
 101bb14:	e1bff017 	ldw	r6,-64(fp)
 101bb18:	e1fff117 	ldw	r7,-60(fp)
 101bb1c:	101b7a40 	call	101b7a4 <helper_plot_pixel>
			error = error + deltay;
 101bb20:	e0bff317 	ldw	r2,-52(fp)
 101bb24:	e0fff417 	ldw	r3,-48(fp)
 101bb28:	10c5883a 	add	r2,r2,r3
 101bb2c:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
 101bb30:	e13ff317 	ldw	r4,-52(fp)
 101bb34:	20800050 	cmplti	r2,r4,1
 101bb38:	1000081e 	bne	r2,zero,101bb5c <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
 101bb3c:	e0bff017 	ldw	r2,-64(fp)
 101bb40:	e0fff217 	ldw	r3,-56(fp)
 101bb44:	10c5883a 	add	r2,r2,r3
 101bb48:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
 101bb4c:	e13ff317 	ldw	r4,-52(fp)
 101bb50:	e0bff517 	ldw	r2,-44(fp)
 101bb54:	2089c83a 	sub	r4,r4,r2
 101bb58:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
 101bb5c:	e0fff117 	ldw	r3,-60(fp)
 101bb60:	18c00044 	addi	r3,r3,1
 101bb64:	e0fff115 	stw	r3,-60(fp)
 101bb68:	e13ff817 	ldw	r4,-32(fp)
 101bb6c:	e0bff117 	ldw	r2,-60(fp)
 101bb70:	20bfe20e 	bge	r4,r2,101bafc <alt_up_pixel_buffer_dma_draw_line+0x288>
 101bb74:	00002106 	br	101bbfc <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 101bb78:	e0fffa17 	ldw	r3,-24(fp)
 101bb7c:	e0fff115 	stw	r3,-60(fp)
 101bb80:	00001b06 	br	101bbf0 <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
 101bb84:	e13fee17 	ldw	r4,-72(fp)
 101bb88:	d9000015 	stw	r4,0(sp)
 101bb8c:	e0bfef17 	ldw	r2,-68(fp)
 101bb90:	d8800115 	stw	r2,4(sp)
 101bb94:	e13fed17 	ldw	r4,-76(fp)
 101bb98:	e17fec17 	ldw	r5,-80(fp)
 101bb9c:	e1bff117 	ldw	r6,-60(fp)
 101bba0:	e1fff017 	ldw	r7,-64(fp)
 101bba4:	101b7a40 	call	101b7a4 <helper_plot_pixel>
			error = error + deltay;
 101bba8:	e0fff317 	ldw	r3,-52(fp)
 101bbac:	e13ff417 	ldw	r4,-48(fp)
 101bbb0:	1907883a 	add	r3,r3,r4
 101bbb4:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
 101bbb8:	e0fff317 	ldw	r3,-52(fp)
 101bbbc:	18800050 	cmplti	r2,r3,1
 101bbc0:	1000081e 	bne	r2,zero,101bbe4 <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
 101bbc4:	e13ff017 	ldw	r4,-64(fp)
 101bbc8:	e0bff217 	ldw	r2,-56(fp)
 101bbcc:	2089883a 	add	r4,r4,r2
 101bbd0:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
 101bbd4:	e0fff317 	ldw	r3,-52(fp)
 101bbd8:	e13ff517 	ldw	r4,-44(fp)
 101bbdc:	1907c83a 	sub	r3,r3,r4
 101bbe0:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 101bbe4:	e0bff117 	ldw	r2,-60(fp)
 101bbe8:	10800044 	addi	r2,r2,1
 101bbec:	e0bff115 	stw	r2,-60(fp)
 101bbf0:	e0fff817 	ldw	r3,-32(fp)
 101bbf4:	e13ff117 	ldw	r4,-60(fp)
 101bbf8:	193fe20e 	bge	r3,r4,101bb84 <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 101bbfc:	e037883a 	mov	sp,fp
 101bc00:	dfc00117 	ldw	ra,4(sp)
 101bc04:	df000017 	ldw	fp,0(sp)
 101bc08:	dec00204 	addi	sp,sp,8
 101bc0c:	f800283a 	ret

0101bc10 <get_multi_byte_make_code_index>:
	STATE_DONE 
} DECODE_STATE;

//helper function for get_next_state
unsigned get_multi_byte_make_code_index(alt_u8 code)
{
 101bc10:	defffc04 	addi	sp,sp,-16
 101bc14:	df000315 	stw	fp,12(sp)
 101bc18:	df000304 	addi	fp,sp,12
 101bc1c:	e13ffe05 	stb	r4,-8(fp)
	unsigned i;
	for (i = 0; i < SCAN_CODE_NUM; i++ )
 101bc20:	e03ffd15 	stw	zero,-12(fp)
 101bc24:	00000e06 	br	101bc60 <get_multi_byte_make_code_index+0x50>
	{
		if ( multi_byte_make_code[i] == code )
 101bc28:	e0fffd17 	ldw	r3,-12(fp)
 101bc2c:	008040b4 	movhi	r2,258
 101bc30:	1086a804 	addi	r2,r2,6816
 101bc34:	10c5883a 	add	r2,r2,r3
 101bc38:	10800003 	ldbu	r2,0(r2)
 101bc3c:	10c03fcc 	andi	r3,r2,255
 101bc40:	e0bffe03 	ldbu	r2,-8(fp)
 101bc44:	1880031e 	bne	r3,r2,101bc54 <get_multi_byte_make_code_index+0x44>
			return i;
 101bc48:	e0bffd17 	ldw	r2,-12(fp)
 101bc4c:	e0bfff15 	stw	r2,-4(fp)
 101bc50:	00000806 	br	101bc74 <get_multi_byte_make_code_index+0x64>

//helper function for get_next_state
unsigned get_multi_byte_make_code_index(alt_u8 code)
{
	unsigned i;
	for (i = 0; i < SCAN_CODE_NUM; i++ )
 101bc54:	e0bffd17 	ldw	r2,-12(fp)
 101bc58:	10800044 	addi	r2,r2,1
 101bc5c:	e0bffd15 	stw	r2,-12(fp)
 101bc60:	e0bffd17 	ldw	r2,-12(fp)
 101bc64:	108019b0 	cmpltui	r2,r2,102
 101bc68:	103fef1e 	bne	r2,zero,101bc28 <get_multi_byte_make_code_index+0x18>
	{
		if ( multi_byte_make_code[i] == code )
			return i;
	}
	return SCAN_CODE_NUM;
 101bc6c:	00801984 	movi	r2,102
 101bc70:	e0bfff15 	stw	r2,-4(fp)
 101bc74:	e0bfff17 	ldw	r2,-4(fp)
}
 101bc78:	e037883a 	mov	sp,fp
 101bc7c:	df000017 	ldw	fp,0(sp)
 101bc80:	dec00104 	addi	sp,sp,4
 101bc84:	f800283a 	ret

0101bc88 <get_single_byte_make_code_index>:

//helper function for get_next_state
unsigned get_single_byte_make_code_index(alt_u8 code)
{
 101bc88:	defffc04 	addi	sp,sp,-16
 101bc8c:	df000315 	stw	fp,12(sp)
 101bc90:	df000304 	addi	fp,sp,12
 101bc94:	e13ffe05 	stb	r4,-8(fp)
	unsigned i;
	for (i = 0; i < SCAN_CODE_NUM; i++ )
 101bc98:	e03ffd15 	stw	zero,-12(fp)
 101bc9c:	00000e06 	br	101bcd8 <get_single_byte_make_code_index+0x50>
	{
		if ( single_byte_make_code[i] == code )
 101bca0:	e0fffd17 	ldw	r3,-12(fp)
 101bca4:	008040b4 	movhi	r2,258
 101bca8:	10868e84 	addi	r2,r2,6714
 101bcac:	10c5883a 	add	r2,r2,r3
 101bcb0:	10800003 	ldbu	r2,0(r2)
 101bcb4:	10c03fcc 	andi	r3,r2,255
 101bcb8:	e0bffe03 	ldbu	r2,-8(fp)
 101bcbc:	1880031e 	bne	r3,r2,101bccc <get_single_byte_make_code_index+0x44>
			return i;
 101bcc0:	e0bffd17 	ldw	r2,-12(fp)
 101bcc4:	e0bfff15 	stw	r2,-4(fp)
 101bcc8:	00000806 	br	101bcec <get_single_byte_make_code_index+0x64>

//helper function for get_next_state
unsigned get_single_byte_make_code_index(alt_u8 code)
{
	unsigned i;
	for (i = 0; i < SCAN_CODE_NUM; i++ )
 101bccc:	e0bffd17 	ldw	r2,-12(fp)
 101bcd0:	10800044 	addi	r2,r2,1
 101bcd4:	e0bffd15 	stw	r2,-12(fp)
 101bcd8:	e0bffd17 	ldw	r2,-12(fp)
 101bcdc:	108019b0 	cmpltui	r2,r2,102
 101bce0:	103fef1e 	bne	r2,zero,101bca0 <get_single_byte_make_code_index+0x18>
	{
		if ( single_byte_make_code[i] == code )
			return i;
	}
	return SCAN_CODE_NUM;
 101bce4:	00801984 	movi	r2,102
 101bce8:	e0bfff15 	stw	r2,-4(fp)
 101bcec:	e0bfff17 	ldw	r2,-4(fp)
}
 101bcf0:	e037883a 	mov	sp,fp
 101bcf4:	df000017 	ldw	fp,0(sp)
 101bcf8:	dec00104 	addi	sp,sp,4
 101bcfc:	f800283a 	ret

0101bd00 <get_next_state>:
  |                               |
  +-------------------------------|

 */
DECODE_STATE get_next_state(DECODE_STATE state, alt_u8 byte, KB_CODE_TYPE *decode_mode, alt_u8 *buf, char *ascii)
{
 101bd00:	defff704 	addi	sp,sp,-36
 101bd04:	dfc00815 	stw	ra,32(sp)
 101bd08:	df000715 	stw	fp,28(sp)
 101bd0c:	df000704 	addi	fp,sp,28
 101bd10:	e13ffb15 	stw	r4,-20(fp)
 101bd14:	e1bffd15 	stw	r6,-12(fp)
 101bd18:	e1fffe15 	stw	r7,-8(fp)
 101bd1c:	e17ffc05 	stb	r5,-16(fp)
	DECODE_STATE next_state = STATE_INIT;
 101bd20:	e03ffa15 	stw	zero,-24(fp)
	unsigned idx = SCAN_CODE_NUM;
 101bd24:	00801984 	movi	r2,102
 101bd28:	e0bff915 	stw	r2,-28(fp)
	*ascii = 0;
 101bd2c:	e0800217 	ldw	r2,8(fp)
 101bd30:	10000005 	stb	zero,0(r2)
	switch (state)
 101bd34:	e0bffb17 	ldw	r2,-20(fp)
 101bd38:	e0bfff15 	stw	r2,-4(fp)
 101bd3c:	e0ffff17 	ldw	r3,-4(fp)
 101bd40:	18800060 	cmpeqi	r2,r3,1
 101bd44:	10003c1e 	bne	r2,zero,101be38 <get_next_state+0x138>
 101bd48:	e0ffff17 	ldw	r3,-4(fp)
 101bd4c:	18800070 	cmpltui	r2,r3,1
 101bd50:	1000071e 	bne	r2,zero,101bd70 <get_next_state+0x70>
 101bd54:	e0ffff17 	ldw	r3,-4(fp)
 101bd58:	188000a0 	cmpeqi	r2,r3,2
 101bd5c:	10004b1e 	bne	r2,zero,101be8c <get_next_state+0x18c>
 101bd60:	e0ffff17 	ldw	r3,-4(fp)
 101bd64:	188000e0 	cmpeqi	r2,r3,3
 101bd68:	10005d1e 	bne	r2,zero,101bee0 <get_next_state+0x1e0>
 101bd6c:	00007106 	br	101bf34 <get_next_state+0x234>
	{
		case STATE_INIT:
			if ( byte == 0xE0 )
 101bd70:	e0bffc03 	ldbu	r2,-16(fp)
 101bd74:	10803818 	cmpnei	r2,r2,224
 101bd78:	1000031e 	bne	r2,zero,101bd88 <get_next_state+0x88>
			{	
				// this could be a long break code or a long make code
				next_state = STATE_LONG_CODE;
 101bd7c:	00800044 	movi	r2,1
 101bd80:	e0bffa15 	stw	r2,-24(fp)
 101bd84:	00006f06 	br	101bf44 <get_next_state+0x244>
			}
			else if (byte == 0xF0)
 101bd88:	e0bffc03 	ldbu	r2,-16(fp)
 101bd8c:	10803c18 	cmpnei	r2,r2,240
 101bd90:	1000031e 	bne	r2,zero,101bda0 <get_next_state+0xa0>
			{
				// it is a break code
				next_state = STATE_BREAK_CODE;
 101bd94:	00800084 	movi	r2,2
 101bd98:	e0bffa15 	stw	r2,-24(fp)
 101bd9c:	00006906 	br	101bf44 <get_next_state+0x244>
			}
			else
			{
				// it is a normal make code
				idx = get_single_byte_make_code_index(byte);
 101bda0:	e13ffc03 	ldbu	r4,-16(fp)
 101bda4:	101bc880 	call	101bc88 <get_single_byte_make_code_index>
 101bda8:	e0bff915 	stw	r2,-28(fp)
				if ( (idx < 40 || idx == 68 || idx > 79) && ( idx != SCAN_CODE_NUM ) )
 101bdac:	e0bff917 	ldw	r2,-28(fp)
 101bdb0:	10800a30 	cmpltui	r2,r2,40
 101bdb4:	1000061e 	bne	r2,zero,101bdd0 <get_next_state+0xd0>
 101bdb8:	e0bff917 	ldw	r2,-28(fp)
 101bdbc:	10801120 	cmpeqi	r2,r2,68
 101bdc0:	1000031e 	bne	r2,zero,101bdd0 <get_next_state+0xd0>
 101bdc4:	e0bff917 	ldw	r2,-28(fp)
 101bdc8:	10801430 	cmpltui	r2,r2,80
 101bdcc:	1000111e 	bne	r2,zero,101be14 <get_next_state+0x114>
 101bdd0:	e0bff917 	ldw	r2,-28(fp)
 101bdd4:	108019a0 	cmpeqi	r2,r2,102
 101bdd8:	10000e1e 	bne	r2,zero,101be14 <get_next_state+0x114>
				{
					*decode_mode = KB_ASCII_MAKE_CODE;
 101bddc:	e0fffd17 	ldw	r3,-12(fp)
 101bde0:	00800044 	movi	r2,1
 101bde4:	18800015 	stw	r2,0(r3)
					*ascii = ascii_codes[idx];
 101bde8:	e0fff917 	ldw	r3,-28(fp)
 101bdec:	008040b4 	movhi	r2,258
 101bdf0:	10867504 	addi	r2,r2,6612
 101bdf4:	10c5883a 	add	r2,r2,r3
 101bdf8:	10c00003 	ldbu	r3,0(r2)
 101bdfc:	e0800217 	ldw	r2,8(fp)
 101be00:	10c00005 	stb	r3,0(r2)
					*buf = byte;
 101be04:	e0fffe17 	ldw	r3,-8(fp)
 101be08:	e0bffc03 	ldbu	r2,-16(fp)
 101be0c:	18800005 	stb	r2,0(r3)
			}
			else
			{
				// it is a normal make code
				idx = get_single_byte_make_code_index(byte);
				if ( (idx < 40 || idx == 68 || idx > 79) && ( idx != SCAN_CODE_NUM ) )
 101be10:	00000606 	br	101be2c <get_next_state+0x12c>
					*ascii = ascii_codes[idx];
					*buf = byte;
				}
				else 
				{
					*decode_mode = KB_BINARY_MAKE_CODE;
 101be14:	e0fffd17 	ldw	r3,-12(fp)
 101be18:	00800084 	movi	r2,2
 101be1c:	18800015 	stw	r2,0(r3)
					*buf = byte;
 101be20:	e0fffe17 	ldw	r3,-8(fp)
 101be24:	e0bffc03 	ldbu	r2,-16(fp)
 101be28:	18800005 	stb	r2,0(r3)
				}
				next_state = STATE_DONE;
 101be2c:	00800104 	movi	r2,4
 101be30:	e0bffa15 	stw	r2,-24(fp)
			}
			break;
 101be34:	00004306 	br	101bf44 <get_next_state+0x244>
		case STATE_LONG_CODE:
			if ( byte != 0xF0 && byte!= 0xE0)
 101be38:	e0bffc03 	ldbu	r2,-16(fp)
 101be3c:	10803c20 	cmpeqi	r2,r2,240
 101be40:	10000c1e 	bne	r2,zero,101be74 <get_next_state+0x174>
 101be44:	e0bffc03 	ldbu	r2,-16(fp)
 101be48:	10803820 	cmpeqi	r2,r2,224
 101be4c:	1000091e 	bne	r2,zero,101be74 <get_next_state+0x174>
			{
				*decode_mode = KB_LONG_BINARY_MAKE_CODE;
 101be50:	e0fffd17 	ldw	r3,-12(fp)
 101be54:	008000c4 	movi	r2,3
 101be58:	18800015 	stw	r2,0(r3)
				*buf = byte;
 101be5c:	e0fffe17 	ldw	r3,-8(fp)
 101be60:	e0bffc03 	ldbu	r2,-16(fp)
 101be64:	18800005 	stb	r2,0(r3)
				next_state = STATE_DONE;
 101be68:	00800104 	movi	r2,4
 101be6c:	e0bffa15 	stw	r2,-24(fp)
				}
				next_state = STATE_DONE;
			}
			break;
		case STATE_LONG_CODE:
			if ( byte != 0xF0 && byte!= 0xE0)
 101be70:	00003406 	br	101bf44 <get_next_state+0x244>
				*buf = byte;
				next_state = STATE_DONE;
			}
			else
			{
				*decode_mode = KB_BREAK_CODE;
 101be74:	e0bffd17 	ldw	r2,-12(fp)
 101be78:	00c00104 	movi	r3,4
 101be7c:	10c00015 	stw	r3,0(r2)
				next_state = STATE_LONG_BREAK_CODE;
 101be80:	008000c4 	movi	r2,3
 101be84:	e0bffa15 	stw	r2,-24(fp)
			}
			break;
 101be88:	00002e06 	br	101bf44 <get_next_state+0x244>
		case STATE_BREAK_CODE:
			if ( byte != 0xF0 && byte != 0xE0)
 101be8c:	e0bffc03 	ldbu	r2,-16(fp)
 101be90:	10803c20 	cmpeqi	r2,r2,240
 101be94:	10000c1e 	bne	r2,zero,101bec8 <get_next_state+0x1c8>
 101be98:	e0bffc03 	ldbu	r2,-16(fp)
 101be9c:	10803820 	cmpeqi	r2,r2,224
 101bea0:	1000091e 	bne	r2,zero,101bec8 <get_next_state+0x1c8>
			{
				*decode_mode = KB_BREAK_CODE;
 101bea4:	e0fffd17 	ldw	r3,-12(fp)
 101bea8:	00800104 	movi	r2,4
 101beac:	18800015 	stw	r2,0(r3)
				*buf = byte;
 101beb0:	e0fffe17 	ldw	r3,-8(fp)
 101beb4:	e0bffc03 	ldbu	r2,-16(fp)
 101beb8:	18800005 	stb	r2,0(r3)
				next_state = STATE_DONE;
 101bebc:	00800104 	movi	r2,4
 101bec0:	e0bffa15 	stw	r2,-24(fp)
				*decode_mode = KB_BREAK_CODE;
				next_state = STATE_LONG_BREAK_CODE;
			}
			break;
		case STATE_BREAK_CODE:
			if ( byte != 0xF0 && byte != 0xE0)
 101bec4:	00001f06 	br	101bf44 <get_next_state+0x244>
				*buf = byte;
				next_state = STATE_DONE;
			}
			else
			{
				next_state = STATE_BREAK_CODE;
 101bec8:	00800084 	movi	r2,2
 101becc:	e0bffa15 	stw	r2,-24(fp)
				*decode_mode = KB_BREAK_CODE;
 101bed0:	e0fffd17 	ldw	r3,-12(fp)
 101bed4:	00800104 	movi	r2,4
 101bed8:	18800015 	stw	r2,0(r3)
			}
			break;
 101bedc:	00001906 	br	101bf44 <get_next_state+0x244>
		case STATE_LONG_BREAK_CODE:
			if ( byte != 0xF0 && byte != 0xE0)
 101bee0:	e0bffc03 	ldbu	r2,-16(fp)
 101bee4:	10803c20 	cmpeqi	r2,r2,240
 101bee8:	10000c1e 	bne	r2,zero,101bf1c <get_next_state+0x21c>
 101beec:	e0bffc03 	ldbu	r2,-16(fp)
 101bef0:	10803820 	cmpeqi	r2,r2,224
 101bef4:	1000091e 	bne	r2,zero,101bf1c <get_next_state+0x21c>
			{
				*decode_mode = KB_LONG_BREAK_CODE;
 101bef8:	e0fffd17 	ldw	r3,-12(fp)
 101befc:	00800144 	movi	r2,5
 101bf00:	18800015 	stw	r2,0(r3)
				*buf = byte;
 101bf04:	e0fffe17 	ldw	r3,-8(fp)
 101bf08:	e0bffc03 	ldbu	r2,-16(fp)
 101bf0c:	18800005 	stb	r2,0(r3)
				next_state = STATE_DONE;
 101bf10:	00800104 	movi	r2,4
 101bf14:	e0bffa15 	stw	r2,-24(fp)
				next_state = STATE_BREAK_CODE;
				*decode_mode = KB_BREAK_CODE;
			}
			break;
		case STATE_LONG_BREAK_CODE:
			if ( byte != 0xF0 && byte != 0xE0)
 101bf18:	00000a06 	br	101bf44 <get_next_state+0x244>
				*buf = byte;
				next_state = STATE_DONE;
			}
			else
			{
				next_state = STATE_LONG_BREAK_CODE;
 101bf1c:	008000c4 	movi	r2,3
 101bf20:	e0bffa15 	stw	r2,-24(fp)
				*decode_mode = KB_LONG_BREAK_CODE;
 101bf24:	e0fffd17 	ldw	r3,-12(fp)
 101bf28:	00800144 	movi	r2,5
 101bf2c:	18800015 	stw	r2,0(r3)
			}
			break;
 101bf30:	00000406 	br	101bf44 <get_next_state+0x244>
		default:
			*decode_mode = KB_INVALID_CODE;
 101bf34:	e0fffd17 	ldw	r3,-12(fp)
 101bf38:	00800184 	movi	r2,6
 101bf3c:	18800015 	stw	r2,0(r3)
			next_state = STATE_INIT;
 101bf40:	e03ffa15 	stw	zero,-24(fp)
	}
	return next_state;
 101bf44:	e0bffa17 	ldw	r2,-24(fp)
}
 101bf48:	e037883a 	mov	sp,fp
 101bf4c:	dfc00117 	ldw	ra,4(sp)
 101bf50:	df000017 	ldw	fp,0(sp)
 101bf54:	dec00204 	addi	sp,sp,8
 101bf58:	f800283a 	ret

0101bf5c <decode_scancode>:

int decode_scancode(alt_up_ps2_dev *ps2, KB_CODE_TYPE *decode_mode, alt_u8 *buf, char *ascii)
{
 101bf5c:	defff504 	addi	sp,sp,-44
 101bf60:	dfc00a15 	stw	ra,40(sp)
 101bf64:	df000915 	stw	fp,36(sp)
 101bf68:	df000904 	addi	fp,sp,36
 101bf6c:	e13ffb15 	stw	r4,-20(fp)
 101bf70:	e17ffc15 	stw	r5,-16(fp)
 101bf74:	e1bffd15 	stw	r6,-12(fp)
 101bf78:	e1fffe15 	stw	r7,-8(fp)
	alt_u8 byte = 0;
 101bf7c:	e03ffa05 	stb	zero,-24(fp)
	int status_read =0;
 101bf80:	e03ff915 	stw	zero,-28(fp)
	*decode_mode = KB_INVALID_CODE;
 101bf84:	e0fffc17 	ldw	r3,-16(fp)
 101bf88:	00800184 	movi	r2,6
 101bf8c:	18800015 	stw	r2,0(r3)
	DECODE_STATE state = STATE_INIT;
 101bf90:	e03ff815 	stw	zero,-32(fp)
	do
	{
		status_read = alt_up_ps2_read_data_byte(ps2, &byte);
 101bf94:	e17ffa04 	addi	r5,fp,-24
 101bf98:	e13ffb17 	ldw	r4,-20(fp)
 101bf9c:	101a1480 	call	101a148 <alt_up_ps2_read_data_byte>
 101bfa0:	e0bff915 	stw	r2,-28(fp)
		//FIXME: When the user press the keyboard extremely fast, data may get
		//occasionally get lost 

		if (status_read != 0)
 101bfa4:	e0bff917 	ldw	r2,-28(fp)
 101bfa8:	1005003a 	cmpeq	r2,r2,zero
 101bfac:	1000031e 	bne	r2,zero,101bfbc <decode_scancode+0x60>
			return status_read;
 101bfb0:	e0bff917 	ldw	r2,-28(fp)
 101bfb4:	e0bfff15 	stw	r2,-4(fp)
 101bfb8:	00000d06 	br	101bff0 <decode_scancode+0x94>

		state = get_next_state(state, byte, decode_mode, buf, ascii);
 101bfbc:	e0bffa03 	ldbu	r2,-24(fp)
 101bfc0:	11403fcc 	andi	r5,r2,255
 101bfc4:	e0bffe17 	ldw	r2,-8(fp)
 101bfc8:	d8800015 	stw	r2,0(sp)
 101bfcc:	e13ff817 	ldw	r4,-32(fp)
 101bfd0:	e1bffc17 	ldw	r6,-16(fp)
 101bfd4:	e1fffd17 	ldw	r7,-12(fp)
 101bfd8:	101bd000 	call	101bd00 <get_next_state>
 101bfdc:	e0bff815 	stw	r2,-32(fp)
	} while ( state != STATE_DONE );
 101bfe0:	e0bff817 	ldw	r2,-32(fp)
 101bfe4:	10800118 	cmpnei	r2,r2,4
 101bfe8:	103fea1e 	bne	r2,zero,101bf94 <decode_scancode+0x38>

	return 0;
 101bfec:	e03fff15 	stw	zero,-4(fp)
 101bff0:	e0bfff17 	ldw	r2,-4(fp)
}
 101bff4:	e037883a 	mov	sp,fp
 101bff8:	dfc00117 	ldw	ra,4(sp)
 101bffc:	df000017 	ldw	fp,0(sp)
 101c000:	dec00204 	addi	sp,sp,8
 101c004:	f800283a 	ret

0101c008 <set_keyboard_rate>:

alt_u32 set_keyboard_rate(alt_up_ps2_dev *ps2, alt_u8 rate)
{
 101c008:	defffb04 	addi	sp,sp,-20
 101c00c:	dfc00415 	stw	ra,16(sp)
 101c010:	df000315 	stw	fp,12(sp)
 101c014:	df000304 	addi	fp,sp,12
 101c018:	e13ffe15 	stw	r4,-8(fp)
 101c01c:	e17fff05 	stb	r5,-4(fp)
	// send the set keyboard rate command
	int status_send = alt_up_ps2_write_data_byte_with_ack(ps2, 0xF3);
 101c020:	e13ffe17 	ldw	r4,-8(fp)
 101c024:	01403cc4 	movi	r5,243
 101c028:	101a02c0 	call	101a02c <alt_up_ps2_write_data_byte_with_ack>
 101c02c:	e0bffd15 	stw	r2,-12(fp)
	if ( status_send == 0)
 101c030:	e0bffd17 	ldw	r2,-12(fp)
 101c034:	1004c03a 	cmpne	r2,r2,zero
 101c038:	1000051e 	bne	r2,zero,101c050 <set_keyboard_rate+0x48>
	{
		// we received ACK, so send out the desired rate now
		status_send = alt_up_ps2_write_data_byte_with_ack(ps2, rate & 0x1F);
 101c03c:	e0bfff03 	ldbu	r2,-4(fp)
 101c040:	114007cc 	andi	r5,r2,31
 101c044:	e13ffe17 	ldw	r4,-8(fp)
 101c048:	101a02c0 	call	101a02c <alt_up_ps2_write_data_byte_with_ack>
 101c04c:	e0bffd15 	stw	r2,-12(fp)
	}
	return status_send;
 101c050:	e0bffd17 	ldw	r2,-12(fp)
}
 101c054:	e037883a 	mov	sp,fp
 101c058:	dfc00117 	ldw	ra,4(sp)
 101c05c:	df000017 	ldw	fp,0(sp)
 101c060:	dec00204 	addi	sp,sp,8
 101c064:	f800283a 	ret

0101c068 <translate_make_code>:

void translate_make_code(KB_CODE_TYPE decode_mode, alt_u8 makecode, char *str)
{
 101c068:	defff904 	addi	sp,sp,-28
 101c06c:	dfc00615 	stw	ra,24(sp)
 101c070:	df000515 	stw	fp,20(sp)
 101c074:	df000504 	addi	fp,sp,20
 101c078:	e13ffc15 	stw	r4,-16(fp)
 101c07c:	e1bffe15 	stw	r6,-8(fp)
 101c080:	e17ffd05 	stb	r5,-12(fp)
	unsigned idx;
	switch (decode_mode)
 101c084:	e0bffc17 	ldw	r2,-16(fp)
 101c088:	e0bfff15 	stw	r2,-4(fp)
 101c08c:	e0ffff17 	ldw	r3,-4(fp)
 101c090:	188000a0 	cmpeqi	r2,r3,2
 101c094:	1000141e 	bne	r2,zero,101c0e8 <translate_make_code+0x80>
 101c098:	e0ffff17 	ldw	r3,-4(fp)
 101c09c:	188000e0 	cmpeqi	r2,r3,3
 101c0a0:	10001e1e 	bne	r2,zero,101c11c <translate_make_code+0xb4>
 101c0a4:	e0ffff17 	ldw	r3,-4(fp)
 101c0a8:	18800060 	cmpeqi	r2,r3,1
 101c0ac:	1000011e 	bne	r2,zero,101c0b4 <translate_make_code+0x4c>
 101c0b0:	00002706 	br	101c150 <translate_make_code+0xe8>
	{
		case KB_ASCII_MAKE_CODE:
			idx = get_single_byte_make_code_index(makecode);
 101c0b4:	e13ffd03 	ldbu	r4,-12(fp)
 101c0b8:	101bc880 	call	101bc88 <get_single_byte_make_code_index>
 101c0bc:	e0bffb15 	stw	r2,-20(fp)
			strcpy(str, key_table[idx]);
 101c0c0:	e0bffb17 	ldw	r2,-20(fp)
 101c0c4:	00c040b4 	movhi	r3,258
 101c0c8:	18c60f04 	addi	r3,r3,6204
 101c0cc:	1085883a 	add	r2,r2,r2
 101c0d0:	1085883a 	add	r2,r2,r2
 101c0d4:	10c5883a 	add	r2,r2,r3
 101c0d8:	11400017 	ldw	r5,0(r2)
 101c0dc:	e13ffe17 	ldw	r4,-8(fp)
 101c0e0:	101d1600 	call	101d160 <strcpy>
			break;
 101c0e4:	00001d06 	br	101c15c <translate_make_code+0xf4>
		case KB_BINARY_MAKE_CODE:
			idx = get_single_byte_make_code_index(makecode);
 101c0e8:	e13ffd03 	ldbu	r4,-12(fp)
 101c0ec:	101bc880 	call	101bc88 <get_single_byte_make_code_index>
 101c0f0:	e0bffb15 	stw	r2,-20(fp)
			strcpy(str, key_table[idx]);
 101c0f4:	e0bffb17 	ldw	r2,-20(fp)
 101c0f8:	00c040b4 	movhi	r3,258
 101c0fc:	18c60f04 	addi	r3,r3,6204
 101c100:	1085883a 	add	r2,r2,r2
 101c104:	1085883a 	add	r2,r2,r2
 101c108:	10c5883a 	add	r2,r2,r3
 101c10c:	11400017 	ldw	r5,0(r2)
 101c110:	e13ffe17 	ldw	r4,-8(fp)
 101c114:	101d1600 	call	101d160 <strcpy>
			break;
 101c118:	00001006 	br	101c15c <translate_make_code+0xf4>
		case KB_LONG_BINARY_MAKE_CODE:
			idx = get_multi_byte_make_code_index(makecode);
 101c11c:	e13ffd03 	ldbu	r4,-12(fp)
 101c120:	101bc100 	call	101bc10 <get_multi_byte_make_code_index>
 101c124:	e0bffb15 	stw	r2,-20(fp)
			strcpy(str, key_table[idx]);
 101c128:	e0bffb17 	ldw	r2,-20(fp)
 101c12c:	00c040b4 	movhi	r3,258
 101c130:	18c60f04 	addi	r3,r3,6204
 101c134:	1085883a 	add	r2,r2,r2
 101c138:	1085883a 	add	r2,r2,r2
 101c13c:	10c5883a 	add	r2,r2,r3
 101c140:	11400017 	ldw	r5,0(r2)
 101c144:	e13ffe17 	ldw	r4,-8(fp)
 101c148:	101d1600 	call	101d160 <strcpy>
			break;
 101c14c:	00000306 	br	101c15c <translate_make_code+0xf4>
		default:
			str = "";
 101c150:	008040b4 	movhi	r2,258
 101c154:	10bf0e04 	addi	r2,r2,-968
 101c158:	e0bffe15 	stw	r2,-8(fp)
			break;
	}
}
 101c15c:	e037883a 	mov	sp,fp
 101c160:	dfc00117 	ldw	ra,4(sp)
 101c164:	df000017 	ldw	fp,0(sp)
 101c168:	dec00204 	addi	sp,sp,8
 101c16c:	f800283a 	ret

0101c170 <reset_keyboard>:


alt_u32 reset_keyboard(alt_up_ps2_dev *ps2)
{
 101c170:	defffb04 	addi	sp,sp,-20
 101c174:	dfc00415 	stw	ra,16(sp)
 101c178:	df000315 	stw	fp,12(sp)
 101c17c:	df000304 	addi	fp,sp,12
 101c180:	e13fff15 	stw	r4,-4(fp)
	alt_u8 byte;
	// send out the reset command
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff); 
 101c184:	e13fff17 	ldw	r4,-4(fp)
 101c188:	01403fc4 	movi	r5,255
 101c18c:	101a02c0 	call	101a02c <alt_up_ps2_write_data_byte_with_ack>
 101c190:	e0bffd15 	stw	r2,-12(fp)
	if ( status == 0)
 101c194:	e0bffd17 	ldw	r2,-12(fp)
 101c198:	1004c03a 	cmpne	r2,r2,zero
 101c19c:	10000e1e 	bne	r2,zero,101c1d8 <reset_keyboard+0x68>
	{
		// received the ACK for reset, now check the BAT result
		status = alt_up_ps2_read_data_byte(ps2, &byte);
 101c1a0:	e17ffe04 	addi	r5,fp,-8
 101c1a4:	e13fff17 	ldw	r4,-4(fp)
 101c1a8:	101a1480 	call	101a148 <alt_up_ps2_read_data_byte>
 101c1ac:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
 101c1b0:	e0bffd17 	ldw	r2,-12(fp)
 101c1b4:	1004c03a 	cmpne	r2,r2,zero
 101c1b8:	1000051e 	bne	r2,zero,101c1d0 <reset_keyboard+0x60>
 101c1bc:	e0bffe03 	ldbu	r2,-8(fp)
 101c1c0:	10803fcc 	andi	r2,r2,255
 101c1c4:	10802a98 	cmpnei	r2,r2,170
 101c1c8:	1000011e 	bne	r2,zero,101c1d0 <reset_keyboard+0x60>
 101c1cc:	00000206 	br	101c1d8 <reset_keyboard+0x68>
			// BAT succeed
		}
		else
		{
			// BAT failed
			status = -1;
 101c1d0:	00bfffc4 	movi	r2,-1
 101c1d4:	e0bffd15 	stw	r2,-12(fp)
		}
	}	
	return status;
 101c1d8:	e0bffd17 	ldw	r2,-12(fp)
}
 101c1dc:	e037883a 	mov	sp,fp
 101c1e0:	dfc00117 	ldw	ra,4(sp)
 101c1e4:	df000017 	ldw	fp,0(sp)
 101c1e8:	dec00204 	addi	sp,sp,8
 101c1ec:	f800283a 	ret

0101c1f0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 101c1f0:	defff404 	addi	sp,sp,-48
 101c1f4:	df000b15 	stw	fp,44(sp)
 101c1f8:	df000b04 	addi	fp,sp,44
 101c1fc:	e13ffb15 	stw	r4,-20(fp)
 101c200:	e17ffc15 	stw	r5,-16(fp)
 101c204:	e1bffd15 	stw	r6,-12(fp)
 101c208:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 101c20c:	e03ff915 	stw	zero,-28(fp)
 101c210:	008040b4 	movhi	r2,258
 101c214:	108e8e04 	addi	r2,r2,14904
 101c218:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 101c21c:	1005003a 	cmpeq	r2,r2,zero
 101c220:	1000411e 	bne	r2,zero,101c328 <alt_alarm_start+0x138>
  {
    if (alarm)
 101c224:	e0bffb17 	ldw	r2,-20(fp)
 101c228:	1005003a 	cmpeq	r2,r2,zero
 101c22c:	10003b1e 	bne	r2,zero,101c31c <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 101c230:	e0fffb17 	ldw	r3,-20(fp)
 101c234:	e0bffd17 	ldw	r2,-12(fp)
 101c238:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 101c23c:	e0fffb17 	ldw	r3,-20(fp)
 101c240:	e0bffe17 	ldw	r2,-8(fp)
 101c244:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101c248:	0005303a 	rdctl	r2,status
 101c24c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101c250:	e0fff817 	ldw	r3,-32(fp)
 101c254:	00bfff84 	movi	r2,-2
 101c258:	1884703a 	and	r2,r3,r2
 101c25c:	1001703a 	wrctl	status,r2
  
  return context;
 101c260:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 101c264:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 101c268:	008040b4 	movhi	r2,258
 101c26c:	108e8f04 	addi	r2,r2,14908
 101c270:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 101c274:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 101c278:	e0fffc17 	ldw	r3,-16(fp)
 101c27c:	e0bff917 	ldw	r2,-28(fp)
 101c280:	1885883a 	add	r2,r3,r2
 101c284:	10c00044 	addi	r3,r2,1
 101c288:	e0bffb17 	ldw	r2,-20(fp)
 101c28c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 101c290:	e0bffb17 	ldw	r2,-20(fp)
 101c294:	10c00217 	ldw	r3,8(r2)
 101c298:	e0bff917 	ldw	r2,-28(fp)
 101c29c:	1880042e 	bgeu	r3,r2,101c2b0 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 101c2a0:	e0fffb17 	ldw	r3,-20(fp)
 101c2a4:	00800044 	movi	r2,1
 101c2a8:	18800405 	stb	r2,16(r3)
 101c2ac:	00000206 	br	101c2b8 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 101c2b0:	e0bffb17 	ldw	r2,-20(fp)
 101c2b4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 101c2b8:	e0fffb17 	ldw	r3,-20(fp)
 101c2bc:	008040b4 	movhi	r2,258
 101c2c0:	1086d004 	addi	r2,r2,6976
 101c2c4:	e0bff615 	stw	r2,-40(fp)
 101c2c8:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 101c2cc:	e0fff717 	ldw	r3,-36(fp)
 101c2d0:	e0bff617 	ldw	r2,-40(fp)
 101c2d4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 101c2d8:	e0bff617 	ldw	r2,-40(fp)
 101c2dc:	10c00017 	ldw	r3,0(r2)
 101c2e0:	e0bff717 	ldw	r2,-36(fp)
 101c2e4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 101c2e8:	e0bff617 	ldw	r2,-40(fp)
 101c2ec:	10c00017 	ldw	r3,0(r2)
 101c2f0:	e0bff717 	ldw	r2,-36(fp)
 101c2f4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 101c2f8:	e0fff617 	ldw	r3,-40(fp)
 101c2fc:	e0bff717 	ldw	r2,-36(fp)
 101c300:	18800015 	stw	r2,0(r3)
 101c304:	e0bffa17 	ldw	r2,-24(fp)
 101c308:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101c30c:	e0bff517 	ldw	r2,-44(fp)
 101c310:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 101c314:	e03fff15 	stw	zero,-4(fp)
 101c318:	00000506 	br	101c330 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 101c31c:	00bffa84 	movi	r2,-22
 101c320:	e0bfff15 	stw	r2,-4(fp)
 101c324:	00000206 	br	101c330 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 101c328:	00bfde84 	movi	r2,-134
 101c32c:	e0bfff15 	stw	r2,-4(fp)
 101c330:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 101c334:	e037883a 	mov	sp,fp
 101c338:	df000017 	ldw	fp,0(sp)
 101c33c:	dec00104 	addi	sp,sp,4
 101c340:	f800283a 	ret

0101c344 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 101c344:	defffa04 	addi	sp,sp,-24
 101c348:	dfc00515 	stw	ra,20(sp)
 101c34c:	df000415 	stw	fp,16(sp)
 101c350:	df000404 	addi	fp,sp,16
 101c354:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 101c358:	008000c4 	movi	r2,3
 101c35c:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
 101c360:	e0fffc17 	ldw	r3,-16(fp)
 101c364:	008003f4 	movhi	r2,15
 101c368:	10909004 	addi	r2,r2,16960
 101c36c:	188b383a 	mul	r5,r3,r2
 101c370:	0100bef4 	movhi	r4,763
 101c374:	213c2004 	addi	r4,r4,-3968
 101c378:	10057700 	call	1005770 <__udivsi3>
 101c37c:	100b883a 	mov	r5,r2
 101c380:	01200034 	movhi	r4,32768
 101c384:	213fffc4 	addi	r4,r4,-1
 101c388:	10057700 	call	1005770 <__udivsi3>
 101c38c:	100b883a 	mov	r5,r2
 101c390:	e13fff17 	ldw	r4,-4(fp)
 101c394:	10057700 	call	1005770 <__udivsi3>
 101c398:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 101c39c:	e0bffd17 	ldw	r2,-12(fp)
 101c3a0:	1005003a 	cmpeq	r2,r2,zero
 101c3a4:	1000281e 	bne	r2,zero,101c448 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
 101c3a8:	e03ffe15 	stw	zero,-8(fp)
 101c3ac:	00001606 	br	101c408 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 101c3b0:	00a00034 	movhi	r2,32768
 101c3b4:	10bfffc4 	addi	r2,r2,-1
 101c3b8:	10bfffc4 	addi	r2,r2,-1
 101c3bc:	103ffe1e 	bne	r2,zero,101c3b8 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 101c3c0:	e0fffc17 	ldw	r3,-16(fp)
 101c3c4:	008003f4 	movhi	r2,15
 101c3c8:	10909004 	addi	r2,r2,16960
 101c3cc:	188b383a 	mul	r5,r3,r2
 101c3d0:	0100bef4 	movhi	r4,763
 101c3d4:	213c2004 	addi	r4,r4,-3968
 101c3d8:	10057700 	call	1005770 <__udivsi3>
 101c3dc:	100b883a 	mov	r5,r2
 101c3e0:	01200034 	movhi	r4,32768
 101c3e4:	213fffc4 	addi	r4,r4,-1
 101c3e8:	10057700 	call	1005770 <__udivsi3>
 101c3ec:	1007883a 	mov	r3,r2
 101c3f0:	e0bfff17 	ldw	r2,-4(fp)
 101c3f4:	10c5c83a 	sub	r2,r2,r3
 101c3f8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 101c3fc:	e0bffe17 	ldw	r2,-8(fp)
 101c400:	10800044 	addi	r2,r2,1
 101c404:	e0bffe15 	stw	r2,-8(fp)
 101c408:	e0fffe17 	ldw	r3,-8(fp)
 101c40c:	e0bffd17 	ldw	r2,-12(fp)
 101c410:	18bfe716 	blt	r3,r2,101c3b0 <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 101c414:	e0fffc17 	ldw	r3,-16(fp)
 101c418:	008003f4 	movhi	r2,15
 101c41c:	10909004 	addi	r2,r2,16960
 101c420:	188b383a 	mul	r5,r3,r2
 101c424:	0100bef4 	movhi	r4,763
 101c428:	213c2004 	addi	r4,r4,-3968
 101c42c:	10057700 	call	1005770 <__udivsi3>
 101c430:	1007883a 	mov	r3,r2
 101c434:	e0bfff17 	ldw	r2,-4(fp)
 101c438:	1885383a 	mul	r2,r3,r2
 101c43c:	10bfffc4 	addi	r2,r2,-1
 101c440:	103ffe1e 	bne	r2,zero,101c43c <alt_busy_sleep+0xf8>
 101c444:	00000c06 	br	101c478 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 101c448:	e0fffc17 	ldw	r3,-16(fp)
 101c44c:	008003f4 	movhi	r2,15
 101c450:	10909004 	addi	r2,r2,16960
 101c454:	188b383a 	mul	r5,r3,r2
 101c458:	0100bef4 	movhi	r4,763
 101c45c:	213c2004 	addi	r4,r4,-3968
 101c460:	10057700 	call	1005770 <__udivsi3>
 101c464:	1007883a 	mov	r3,r2
 101c468:	e0bfff17 	ldw	r2,-4(fp)
 101c46c:	1885383a 	mul	r2,r3,r2
 101c470:	10bfffc4 	addi	r2,r2,-1
 101c474:	00bffe16 	blt	zero,r2,101c470 <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 101c478:	0005883a 	mov	r2,zero
}
 101c47c:	e037883a 	mov	sp,fp
 101c480:	dfc00117 	ldw	ra,4(sp)
 101c484:	df000017 	ldw	fp,0(sp)
 101c488:	dec00204 	addi	sp,sp,8
 101c48c:	f800283a 	ret

0101c490 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 101c490:	defffe04 	addi	sp,sp,-8
 101c494:	df000115 	stw	fp,4(sp)
 101c498:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 101c49c:	e03fff15 	stw	zero,-4(fp)
 101c4a0:	00000506 	br	101c4b8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 101c4a4:	e0bfff17 	ldw	r2,-4(fp)
 101c4a8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 101c4ac:	e0bfff17 	ldw	r2,-4(fp)
 101c4b0:	10800804 	addi	r2,r2,32
 101c4b4:	e0bfff15 	stw	r2,-4(fp)
 101c4b8:	e0bfff17 	ldw	r2,-4(fp)
 101c4bc:	10820030 	cmpltui	r2,r2,2048
 101c4c0:	103ff81e 	bne	r2,zero,101c4a4 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 101c4c4:	e037883a 	mov	sp,fp
 101c4c8:	df000017 	ldw	fp,0(sp)
 101c4cc:	dec00104 	addi	sp,sp,4
 101c4d0:	f800283a 	ret

0101c4d4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 101c4d4:	defff904 	addi	sp,sp,-28
 101c4d8:	dfc00615 	stw	ra,24(sp)
 101c4dc:	df000515 	stw	fp,20(sp)
 101c4e0:	df000504 	addi	fp,sp,20
 101c4e4:	e13ffd15 	stw	r4,-12(fp)
 101c4e8:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 101c4ec:	e0bffd17 	ldw	r2,-12(fp)
 101c4f0:	1005003a 	cmpeq	r2,r2,zero
 101c4f4:	1000041e 	bne	r2,zero,101c508 <alt_dev_llist_insert+0x34>
 101c4f8:	e0bffd17 	ldw	r2,-12(fp)
 101c4fc:	10800217 	ldw	r2,8(r2)
 101c500:	1004c03a 	cmpne	r2,r2,zero
 101c504:	1000071e 	bne	r2,zero,101c524 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 101c508:	101c5880 	call	101c588 <alt_get_errno>
 101c50c:	1007883a 	mov	r3,r2
 101c510:	00800584 	movi	r2,22
 101c514:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 101c518:	00bffa84 	movi	r2,-22
 101c51c:	e0bfff15 	stw	r2,-4(fp)
 101c520:	00001306 	br	101c570 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 101c524:	e0fffd17 	ldw	r3,-12(fp)
 101c528:	e0bffe17 	ldw	r2,-8(fp)
 101c52c:	e0bffb15 	stw	r2,-20(fp)
 101c530:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 101c534:	e0fffc17 	ldw	r3,-16(fp)
 101c538:	e0bffb17 	ldw	r2,-20(fp)
 101c53c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 101c540:	e0bffb17 	ldw	r2,-20(fp)
 101c544:	10c00017 	ldw	r3,0(r2)
 101c548:	e0bffc17 	ldw	r2,-16(fp)
 101c54c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 101c550:	e0bffb17 	ldw	r2,-20(fp)
 101c554:	10c00017 	ldw	r3,0(r2)
 101c558:	e0bffc17 	ldw	r2,-16(fp)
 101c55c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 101c560:	e0fffb17 	ldw	r3,-20(fp)
 101c564:	e0bffc17 	ldw	r2,-16(fp)
 101c568:	18800015 	stw	r2,0(r3)

  return 0;  
 101c56c:	e03fff15 	stw	zero,-4(fp)
 101c570:	e0bfff17 	ldw	r2,-4(fp)
}
 101c574:	e037883a 	mov	sp,fp
 101c578:	dfc00117 	ldw	ra,4(sp)
 101c57c:	df000017 	ldw	fp,0(sp)
 101c580:	dec00204 	addi	sp,sp,8
 101c584:	f800283a 	ret

0101c588 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 101c588:	defffd04 	addi	sp,sp,-12
 101c58c:	dfc00215 	stw	ra,8(sp)
 101c590:	df000115 	stw	fp,4(sp)
 101c594:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 101c598:	008040b4 	movhi	r2,258
 101c59c:	1086ce04 	addi	r2,r2,6968
 101c5a0:	10800017 	ldw	r2,0(r2)
 101c5a4:	1005003a 	cmpeq	r2,r2,zero
 101c5a8:	1000061e 	bne	r2,zero,101c5c4 <alt_get_errno+0x3c>
 101c5ac:	008040b4 	movhi	r2,258
 101c5b0:	1086ce04 	addi	r2,r2,6968
 101c5b4:	10800017 	ldw	r2,0(r2)
 101c5b8:	103ee83a 	callr	r2
 101c5bc:	e0bfff15 	stw	r2,-4(fp)
 101c5c0:	00000306 	br	101c5d0 <alt_get_errno+0x48>
 101c5c4:	008040b4 	movhi	r2,258
 101c5c8:	108e8304 	addi	r2,r2,14860
 101c5cc:	e0bfff15 	stw	r2,-4(fp)
 101c5d0:	e0bfff17 	ldw	r2,-4(fp)
}
 101c5d4:	e037883a 	mov	sp,fp
 101c5d8:	dfc00117 	ldw	ra,4(sp)
 101c5dc:	df000017 	ldw	fp,0(sp)
 101c5e0:	dec00204 	addi	sp,sp,8
 101c5e4:	f800283a 	ret

0101c5e8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 101c5e8:	defffd04 	addi	sp,sp,-12
 101c5ec:	dfc00215 	stw	ra,8(sp)
 101c5f0:	df000115 	stw	fp,4(sp)
 101c5f4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 101c5f8:	00bfff04 	movi	r2,-4
 101c5fc:	00c040b4 	movhi	r3,258
 101c600:	18fae704 	addi	r3,r3,-5220
 101c604:	1885883a 	add	r2,r3,r2
 101c608:	e0bfff15 	stw	r2,-4(fp)
 101c60c:	00000606 	br	101c628 <_do_ctors+0x40>
        (*ctor) (); 
 101c610:	e0bfff17 	ldw	r2,-4(fp)
 101c614:	10800017 	ldw	r2,0(r2)
 101c618:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 101c61c:	e0bfff17 	ldw	r2,-4(fp)
 101c620:	10bfff04 	addi	r2,r2,-4
 101c624:	e0bfff15 	stw	r2,-4(fp)
 101c628:	e0ffff17 	ldw	r3,-4(fp)
 101c62c:	008040b4 	movhi	r2,258
 101c630:	10bae604 	addi	r2,r2,-5224
 101c634:	18bff62e 	bgeu	r3,r2,101c610 <_do_ctors+0x28>
        (*ctor) (); 
}
 101c638:	e037883a 	mov	sp,fp
 101c63c:	dfc00117 	ldw	ra,4(sp)
 101c640:	df000017 	ldw	fp,0(sp)
 101c644:	dec00204 	addi	sp,sp,8
 101c648:	f800283a 	ret

0101c64c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 101c64c:	defffd04 	addi	sp,sp,-12
 101c650:	dfc00215 	stw	ra,8(sp)
 101c654:	df000115 	stw	fp,4(sp)
 101c658:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 101c65c:	00bfff04 	movi	r2,-4
 101c660:	00c040b4 	movhi	r3,258
 101c664:	18fae704 	addi	r3,r3,-5220
 101c668:	1885883a 	add	r2,r3,r2
 101c66c:	e0bfff15 	stw	r2,-4(fp)
 101c670:	00000606 	br	101c68c <_do_dtors+0x40>
        (*dtor) (); 
 101c674:	e0bfff17 	ldw	r2,-4(fp)
 101c678:	10800017 	ldw	r2,0(r2)
 101c67c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 101c680:	e0bfff17 	ldw	r2,-4(fp)
 101c684:	10bfff04 	addi	r2,r2,-4
 101c688:	e0bfff15 	stw	r2,-4(fp)
 101c68c:	e0ffff17 	ldw	r3,-4(fp)
 101c690:	008040b4 	movhi	r2,258
 101c694:	10bae704 	addi	r2,r2,-5220
 101c698:	18bff62e 	bgeu	r3,r2,101c674 <_do_dtors+0x28>
        (*dtor) (); 
}
 101c69c:	e037883a 	mov	sp,fp
 101c6a0:	dfc00117 	ldw	ra,4(sp)
 101c6a4:	df000017 	ldw	fp,0(sp)
 101c6a8:	dec00204 	addi	sp,sp,8
 101c6ac:	f800283a 	ret

0101c6b0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 101c6b0:	defff904 	addi	sp,sp,-28
 101c6b4:	dfc00615 	stw	ra,24(sp)
 101c6b8:	df000515 	stw	fp,20(sp)
 101c6bc:	df000504 	addi	fp,sp,20
 101c6c0:	e13ffd15 	stw	r4,-12(fp)
 101c6c4:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 101c6c8:	e0bffe17 	ldw	r2,-8(fp)
 101c6cc:	10800017 	ldw	r2,0(r2)
 101c6d0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 101c6d4:	e13ffd17 	ldw	r4,-12(fp)
 101c6d8:	10068940 	call	1006894 <strlen>
 101c6dc:	10800044 	addi	r2,r2,1
 101c6e0:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 101c6e4:	00000d06 	br	101c71c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 101c6e8:	e0bffc17 	ldw	r2,-16(fp)
 101c6ec:	11000217 	ldw	r4,8(r2)
 101c6f0:	e1bffb17 	ldw	r6,-20(fp)
 101c6f4:	e17ffd17 	ldw	r5,-12(fp)
 101c6f8:	101d0ec0 	call	101d0ec <memcmp>
 101c6fc:	1004c03a 	cmpne	r2,r2,zero
 101c700:	1000031e 	bne	r2,zero,101c710 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 101c704:	e0bffc17 	ldw	r2,-16(fp)
 101c708:	e0bfff15 	stw	r2,-4(fp)
 101c70c:	00000706 	br	101c72c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 101c710:	e0bffc17 	ldw	r2,-16(fp)
 101c714:	10800017 	ldw	r2,0(r2)
 101c718:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 101c71c:	e0fffe17 	ldw	r3,-8(fp)
 101c720:	e0bffc17 	ldw	r2,-16(fp)
 101c724:	10fff01e 	bne	r2,r3,101c6e8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 101c728:	e03fff15 	stw	zero,-4(fp)
 101c72c:	e0bfff17 	ldw	r2,-4(fp)
}
 101c730:	e037883a 	mov	sp,fp
 101c734:	dfc00117 	ldw	ra,4(sp)
 101c738:	df000017 	ldw	fp,0(sp)
 101c73c:	dec00204 	addi	sp,sp,8
 101c740:	f800283a 	ret

0101c744 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 101c744:	defffe04 	addi	sp,sp,-8
 101c748:	dfc00115 	stw	ra,4(sp)
 101c74c:	df000015 	stw	fp,0(sp)
 101c750:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 101c754:	0009883a 	mov	r4,zero
 101c758:	01440004 	movi	r5,4096
 101c75c:	101cf2c0 	call	101cf2c <alt_icache_flush>
#endif
}
 101c760:	e037883a 	mov	sp,fp
 101c764:	dfc00117 	ldw	ra,4(sp)
 101c768:	df000017 	ldw	fp,0(sp)
 101c76c:	dec00204 	addi	sp,sp,8
 101c770:	f800283a 	ret

0101c774 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 101c774:	defff904 	addi	sp,sp,-28
 101c778:	dfc00615 	stw	ra,24(sp)
 101c77c:	df000515 	stw	fp,20(sp)
 101c780:	df000504 	addi	fp,sp,20
 101c784:	e13ffc15 	stw	r4,-16(fp)
 101c788:	e17ffd15 	stw	r5,-12(fp)
 101c78c:	e1bffe15 	stw	r6,-8(fp)
 101c790:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 101c794:	e13ffd17 	ldw	r4,-12(fp)
 101c798:	e17ffe17 	ldw	r5,-8(fp)
 101c79c:	e1bfff17 	ldw	r6,-4(fp)
 101c7a0:	101cb4c0 	call	101cb4c <open>
 101c7a4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 101c7a8:	e0bffb17 	ldw	r2,-20(fp)
 101c7ac:	1004803a 	cmplt	r2,r2,zero
 101c7b0:	10001c1e 	bne	r2,zero,101c824 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 101c7b4:	e0bffb17 	ldw	r2,-20(fp)
 101c7b8:	00c040b4 	movhi	r3,258
 101c7bc:	18c14004 	addi	r3,r3,1280
 101c7c0:	10800324 	muli	r2,r2,12
 101c7c4:	10c5883a 	add	r2,r2,r3
 101c7c8:	10c00017 	ldw	r3,0(r2)
 101c7cc:	e0bffc17 	ldw	r2,-16(fp)
 101c7d0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 101c7d4:	e0bffb17 	ldw	r2,-20(fp)
 101c7d8:	00c040b4 	movhi	r3,258
 101c7dc:	18c14004 	addi	r3,r3,1280
 101c7e0:	10800324 	muli	r2,r2,12
 101c7e4:	10c5883a 	add	r2,r2,r3
 101c7e8:	10800104 	addi	r2,r2,4
 101c7ec:	10c00017 	ldw	r3,0(r2)
 101c7f0:	e0bffc17 	ldw	r2,-16(fp)
 101c7f4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 101c7f8:	e0bffb17 	ldw	r2,-20(fp)
 101c7fc:	00c040b4 	movhi	r3,258
 101c800:	18c14004 	addi	r3,r3,1280
 101c804:	10800324 	muli	r2,r2,12
 101c808:	10c5883a 	add	r2,r2,r3
 101c80c:	10800204 	addi	r2,r2,8
 101c810:	10c00017 	ldw	r3,0(r2)
 101c814:	e0bffc17 	ldw	r2,-16(fp)
 101c818:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 101c81c:	e13ffb17 	ldw	r4,-20(fp)
 101c820:	1013e840 	call	1013e84 <alt_release_fd>
  }
} 
 101c824:	e037883a 	mov	sp,fp
 101c828:	dfc00117 	ldw	ra,4(sp)
 101c82c:	df000017 	ldw	fp,0(sp)
 101c830:	dec00204 	addi	sp,sp,8
 101c834:	f800283a 	ret

0101c838 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 101c838:	defffb04 	addi	sp,sp,-20
 101c83c:	dfc00415 	stw	ra,16(sp)
 101c840:	df000315 	stw	fp,12(sp)
 101c844:	df000304 	addi	fp,sp,12
 101c848:	e13ffd15 	stw	r4,-12(fp)
 101c84c:	e17ffe15 	stw	r5,-8(fp)
 101c850:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 101c854:	010040b4 	movhi	r4,258
 101c858:	21014304 	addi	r4,r4,1292
 101c85c:	e17ffd17 	ldw	r5,-12(fp)
 101c860:	01800044 	movi	r6,1
 101c864:	01c07fc4 	movi	r7,511
 101c868:	101c7740 	call	101c774 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 101c86c:	010040b4 	movhi	r4,258
 101c870:	21014004 	addi	r4,r4,1280
 101c874:	e17ffe17 	ldw	r5,-8(fp)
 101c878:	000d883a 	mov	r6,zero
 101c87c:	01c07fc4 	movi	r7,511
 101c880:	101c7740 	call	101c774 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 101c884:	010040b4 	movhi	r4,258
 101c888:	21014604 	addi	r4,r4,1304
 101c88c:	e17fff17 	ldw	r5,-4(fp)
 101c890:	01800044 	movi	r6,1
 101c894:	01c07fc4 	movi	r7,511
 101c898:	101c7740 	call	101c774 <alt_open_fd>
}  
 101c89c:	e037883a 	mov	sp,fp
 101c8a0:	dfc00117 	ldw	ra,4(sp)
 101c8a4:	df000017 	ldw	fp,0(sp)
 101c8a8:	dec00204 	addi	sp,sp,8
 101c8ac:	f800283a 	ret

0101c8b0 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 101c8b0:	deffef04 	addi	sp,sp,-68
 101c8b4:	df001015 	stw	fp,64(sp)
 101c8b8:	df001004 	addi	fp,sp,64
 101c8bc:	e13ffc15 	stw	r4,-16(fp)
 101c8c0:	e17ffd15 	stw	r5,-12(fp)
 101c8c4:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
 101c8c8:	00bffa84 	movi	r2,-22
 101c8cc:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 101c8d0:	e0bffc17 	ldw	r2,-16(fp)
 101c8d4:	10800828 	cmpgeui	r2,r2,32
 101c8d8:	1000601e 	bne	r2,zero,101ca5c <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101c8dc:	0005303a 	rdctl	r2,status
 101c8e0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101c8e4:	e0fff917 	ldw	r3,-28(fp)
 101c8e8:	00bfff84 	movi	r2,-2
 101c8ec:	1884703a 	and	r2,r3,r2
 101c8f0:	1001703a 	wrctl	status,r2
  
  return context;
 101c8f4:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 101c8f8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
 101c8fc:	e0bffc17 	ldw	r2,-16(fp)
 101c900:	00c040b4 	movhi	r3,258
 101c904:	18d04404 	addi	r3,r3,16656
 101c908:	100490fa 	slli	r2,r2,3
 101c90c:	10c7883a 	add	r3,r2,r3
 101c910:	e0bffe17 	ldw	r2,-8(fp)
 101c914:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
 101c918:	e0bffc17 	ldw	r2,-16(fp)
 101c91c:	00c040b4 	movhi	r3,258
 101c920:	18d04404 	addi	r3,r3,16656
 101c924:	100490fa 	slli	r2,r2,3
 101c928:	10c5883a 	add	r2,r2,r3
 101c92c:	10c00104 	addi	r3,r2,4
 101c930:	e0bffd17 	ldw	r2,-12(fp)
 101c934:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 101c938:	e0bffe17 	ldw	r2,-8(fp)
 101c93c:	1005003a 	cmpeq	r2,r2,zero
 101c940:	1000201e 	bne	r2,zero,101c9c4 <alt_irq_register+0x114>
 101c944:	e0bffc17 	ldw	r2,-16(fp)
 101c948:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101c94c:	0005303a 	rdctl	r2,status
 101c950:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101c954:	e0fff617 	ldw	r3,-40(fp)
 101c958:	00bfff84 	movi	r2,-2
 101c95c:	1884703a 	and	r2,r3,r2
 101c960:	1001703a 	wrctl	status,r2
  
  return context;
 101c964:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 101c968:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 101c96c:	e0fff717 	ldw	r3,-36(fp)
 101c970:	00800044 	movi	r2,1
 101c974:	10c4983a 	sll	r2,r2,r3
 101c978:	1007883a 	mov	r3,r2
 101c97c:	008040b4 	movhi	r2,258
 101c980:	108e9f04 	addi	r2,r2,14972
 101c984:	10800017 	ldw	r2,0(r2)
 101c988:	1886b03a 	or	r3,r3,r2
 101c98c:	008040b4 	movhi	r2,258
 101c990:	108e9f04 	addi	r2,r2,14972
 101c994:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 101c998:	008040b4 	movhi	r2,258
 101c99c:	108e9f04 	addi	r2,r2,14972
 101c9a0:	10800017 	ldw	r2,0(r2)
 101c9a4:	100170fa 	wrctl	ienable,r2
 101c9a8:	e0bff817 	ldw	r2,-32(fp)
 101c9ac:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101c9b0:	e0bff517 	ldw	r2,-44(fp)
 101c9b4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 101c9b8:	0005883a 	mov	r2,zero
 101c9bc:	e0bfff15 	stw	r2,-4(fp)
 101c9c0:	00002006 	br	101ca44 <alt_irq_register+0x194>
 101c9c4:	e0bffc17 	ldw	r2,-16(fp)
 101c9c8:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101c9cc:	0005303a 	rdctl	r2,status
 101c9d0:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101c9d4:	e0fff217 	ldw	r3,-56(fp)
 101c9d8:	00bfff84 	movi	r2,-2
 101c9dc:	1884703a 	and	r2,r3,r2
 101c9e0:	1001703a 	wrctl	status,r2
  
  return context;
 101c9e4:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 101c9e8:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
 101c9ec:	e0fff317 	ldw	r3,-52(fp)
 101c9f0:	00800044 	movi	r2,1
 101c9f4:	10c4983a 	sll	r2,r2,r3
 101c9f8:	0084303a 	nor	r2,zero,r2
 101c9fc:	1007883a 	mov	r3,r2
 101ca00:	008040b4 	movhi	r2,258
 101ca04:	108e9f04 	addi	r2,r2,14972
 101ca08:	10800017 	ldw	r2,0(r2)
 101ca0c:	1886703a 	and	r3,r3,r2
 101ca10:	008040b4 	movhi	r2,258
 101ca14:	108e9f04 	addi	r2,r2,14972
 101ca18:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 101ca1c:	008040b4 	movhi	r2,258
 101ca20:	108e9f04 	addi	r2,r2,14972
 101ca24:	10800017 	ldw	r2,0(r2)
 101ca28:	100170fa 	wrctl	ienable,r2
 101ca2c:	e0bff417 	ldw	r2,-48(fp)
 101ca30:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101ca34:	e0bff117 	ldw	r2,-60(fp)
 101ca38:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 101ca3c:	0005883a 	mov	r2,zero
 101ca40:	e0bfff15 	stw	r2,-4(fp)
 101ca44:	e0bfff17 	ldw	r2,-4(fp)
 101ca48:	e0bffb15 	stw	r2,-20(fp)
 101ca4c:	e0bffa17 	ldw	r2,-24(fp)
 101ca50:	e0bff015 	stw	r2,-64(fp)
 101ca54:	e0bff017 	ldw	r2,-64(fp)
 101ca58:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 101ca5c:	e0bffb17 	ldw	r2,-20(fp)
}
 101ca60:	e037883a 	mov	sp,fp
 101ca64:	df000017 	ldw	fp,0(sp)
 101ca68:	dec00104 	addi	sp,sp,4
 101ca6c:	f800283a 	ret

0101ca70 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 101ca70:	defffc04 	addi	sp,sp,-16
 101ca74:	df000315 	stw	fp,12(sp)
 101ca78:	df000304 	addi	fp,sp,12
 101ca7c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 101ca80:	e0bffe17 	ldw	r2,-8(fp)
 101ca84:	10800217 	ldw	r2,8(r2)
 101ca88:	10d00034 	orhi	r3,r2,16384
 101ca8c:	e0bffe17 	ldw	r2,-8(fp)
 101ca90:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 101ca94:	e03ffd15 	stw	zero,-12(fp)
 101ca98:	00002006 	br	101cb1c <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 101ca9c:	e0bffd17 	ldw	r2,-12(fp)
 101caa0:	00c040b4 	movhi	r3,258
 101caa4:	18c14004 	addi	r3,r3,1280
 101caa8:	10800324 	muli	r2,r2,12
 101caac:	10c5883a 	add	r2,r2,r3
 101cab0:	10c00017 	ldw	r3,0(r2)
 101cab4:	e0bffe17 	ldw	r2,-8(fp)
 101cab8:	10800017 	ldw	r2,0(r2)
 101cabc:	1880141e 	bne	r3,r2,101cb10 <alt_file_locked+0xa0>
 101cac0:	e0bffd17 	ldw	r2,-12(fp)
 101cac4:	00c040b4 	movhi	r3,258
 101cac8:	18c14004 	addi	r3,r3,1280
 101cacc:	10800324 	muli	r2,r2,12
 101cad0:	10c5883a 	add	r2,r2,r3
 101cad4:	10800204 	addi	r2,r2,8
 101cad8:	10800017 	ldw	r2,0(r2)
 101cadc:	1004403a 	cmpge	r2,r2,zero
 101cae0:	10000b1e 	bne	r2,zero,101cb10 <alt_file_locked+0xa0>
 101cae4:	e0bffd17 	ldw	r2,-12(fp)
 101cae8:	10800324 	muli	r2,r2,12
 101caec:	1007883a 	mov	r3,r2
 101caf0:	008040b4 	movhi	r2,258
 101caf4:	10814004 	addi	r2,r2,1280
 101caf8:	1887883a 	add	r3,r3,r2
 101cafc:	e0bffe17 	ldw	r2,-8(fp)
 101cb00:	18800326 	beq	r3,r2,101cb10 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 101cb04:	00bffcc4 	movi	r2,-13
 101cb08:	e0bfff15 	stw	r2,-4(fp)
 101cb0c:	00000a06 	br	101cb38 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 101cb10:	e0bffd17 	ldw	r2,-12(fp)
 101cb14:	10800044 	addi	r2,r2,1
 101cb18:	e0bffd15 	stw	r2,-12(fp)
 101cb1c:	008040b4 	movhi	r2,258
 101cb20:	1086cd04 	addi	r2,r2,6964
 101cb24:	10800017 	ldw	r2,0(r2)
 101cb28:	1007883a 	mov	r3,r2
 101cb2c:	e0bffd17 	ldw	r2,-12(fp)
 101cb30:	18bfda2e 	bgeu	r3,r2,101ca9c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 101cb34:	e03fff15 	stw	zero,-4(fp)
 101cb38:	e0bfff17 	ldw	r2,-4(fp)
}
 101cb3c:	e037883a 	mov	sp,fp
 101cb40:	df000017 	ldw	fp,0(sp)
 101cb44:	dec00104 	addi	sp,sp,4
 101cb48:	f800283a 	ret

0101cb4c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 101cb4c:	defff404 	addi	sp,sp,-48
 101cb50:	dfc00b15 	stw	ra,44(sp)
 101cb54:	df000a15 	stw	fp,40(sp)
 101cb58:	df000a04 	addi	fp,sp,40
 101cb5c:	e13ffb15 	stw	r4,-20(fp)
 101cb60:	e17ffc15 	stw	r5,-16(fp)
 101cb64:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 101cb68:	00bfffc4 	movi	r2,-1
 101cb6c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 101cb70:	00bffb44 	movi	r2,-19
 101cb74:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 101cb78:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 101cb7c:	e13ffb17 	ldw	r4,-20(fp)
 101cb80:	014040b4 	movhi	r5,258
 101cb84:	2946cb04 	addi	r5,r5,6956
 101cb88:	101c6b00 	call	101c6b0 <alt_find_dev>
 101cb8c:	e0bffa15 	stw	r2,-24(fp)
 101cb90:	e0bffa17 	ldw	r2,-24(fp)
 101cb94:	1004c03a 	cmpne	r2,r2,zero
 101cb98:	1000051e 	bne	r2,zero,101cbb0 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 101cb9c:	e13ffb17 	ldw	r4,-20(fp)
 101cba0:	101cd540 	call	101cd54 <alt_find_file>
 101cba4:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 101cba8:	00800044 	movi	r2,1
 101cbac:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 101cbb0:	e0bffa17 	ldw	r2,-24(fp)
 101cbb4:	1005003a 	cmpeq	r2,r2,zero
 101cbb8:	1000301e 	bne	r2,zero,101cc7c <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 101cbbc:	e13ffa17 	ldw	r4,-24(fp)
 101cbc0:	101ce740 	call	101ce74 <alt_get_fd>
 101cbc4:	e0bff815 	stw	r2,-32(fp)
 101cbc8:	e0bff817 	ldw	r2,-32(fp)
 101cbcc:	1004403a 	cmpge	r2,r2,zero
 101cbd0:	1000031e 	bne	r2,zero,101cbe0 <open+0x94>
    {
      status = index;
 101cbd4:	e0bff817 	ldw	r2,-32(fp)
 101cbd8:	e0bff715 	stw	r2,-36(fp)
 101cbdc:	00002906 	br	101cc84 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 101cbe0:	e0bff817 	ldw	r2,-32(fp)
 101cbe4:	10800324 	muli	r2,r2,12
 101cbe8:	1007883a 	mov	r3,r2
 101cbec:	008040b4 	movhi	r2,258
 101cbf0:	10814004 	addi	r2,r2,1280
 101cbf4:	1885883a 	add	r2,r3,r2
 101cbf8:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 101cbfc:	e0fffc17 	ldw	r3,-16(fp)
 101cc00:	00900034 	movhi	r2,16384
 101cc04:	10bfffc4 	addi	r2,r2,-1
 101cc08:	1886703a 	and	r3,r3,r2
 101cc0c:	e0bff917 	ldw	r2,-28(fp)
 101cc10:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 101cc14:	e0bff617 	ldw	r2,-40(fp)
 101cc18:	1004c03a 	cmpne	r2,r2,zero
 101cc1c:	1000061e 	bne	r2,zero,101cc38 <open+0xec>
 101cc20:	e13ff917 	ldw	r4,-28(fp)
 101cc24:	101ca700 	call	101ca70 <alt_file_locked>
 101cc28:	e0bff715 	stw	r2,-36(fp)
 101cc2c:	e0bff717 	ldw	r2,-36(fp)
 101cc30:	1004803a 	cmplt	r2,r2,zero
 101cc34:	1000131e 	bne	r2,zero,101cc84 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 101cc38:	e0bffa17 	ldw	r2,-24(fp)
 101cc3c:	10800317 	ldw	r2,12(r2)
 101cc40:	1005003a 	cmpeq	r2,r2,zero
 101cc44:	1000091e 	bne	r2,zero,101cc6c <open+0x120>
 101cc48:	e0bffa17 	ldw	r2,-24(fp)
 101cc4c:	10800317 	ldw	r2,12(r2)
 101cc50:	e13ff917 	ldw	r4,-28(fp)
 101cc54:	e17ffb17 	ldw	r5,-20(fp)
 101cc58:	e1bffc17 	ldw	r6,-16(fp)
 101cc5c:	e1fffd17 	ldw	r7,-12(fp)
 101cc60:	103ee83a 	callr	r2
 101cc64:	e0bfff15 	stw	r2,-4(fp)
 101cc68:	00000106 	br	101cc70 <open+0x124>
 101cc6c:	e03fff15 	stw	zero,-4(fp)
 101cc70:	e0bfff17 	ldw	r2,-4(fp)
 101cc74:	e0bff715 	stw	r2,-36(fp)
 101cc78:	00000206 	br	101cc84 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 101cc7c:	00bffb44 	movi	r2,-19
 101cc80:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 101cc84:	e0bff717 	ldw	r2,-36(fp)
 101cc88:	1004403a 	cmpge	r2,r2,zero
 101cc8c:	1000091e 	bne	r2,zero,101ccb4 <open+0x168>
  {
    alt_release_fd (index);  
 101cc90:	e13ff817 	ldw	r4,-32(fp)
 101cc94:	1013e840 	call	1013e84 <alt_release_fd>
    ALT_ERRNO = -status;
 101cc98:	101ccd40 	call	101ccd4 <alt_get_errno>
 101cc9c:	e0fff717 	ldw	r3,-36(fp)
 101cca0:	00c7c83a 	sub	r3,zero,r3
 101cca4:	10c00015 	stw	r3,0(r2)
    return -1;
 101cca8:	00bfffc4 	movi	r2,-1
 101ccac:	e0bffe15 	stw	r2,-8(fp)
 101ccb0:	00000206 	br	101ccbc <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 101ccb4:	e0bff817 	ldw	r2,-32(fp)
 101ccb8:	e0bffe15 	stw	r2,-8(fp)
 101ccbc:	e0bffe17 	ldw	r2,-8(fp)
}
 101ccc0:	e037883a 	mov	sp,fp
 101ccc4:	dfc00117 	ldw	ra,4(sp)
 101ccc8:	df000017 	ldw	fp,0(sp)
 101cccc:	dec00204 	addi	sp,sp,8
 101ccd0:	f800283a 	ret

0101ccd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 101ccd4:	defffd04 	addi	sp,sp,-12
 101ccd8:	dfc00215 	stw	ra,8(sp)
 101ccdc:	df000115 	stw	fp,4(sp)
 101cce0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 101cce4:	008040b4 	movhi	r2,258
 101cce8:	1086ce04 	addi	r2,r2,6968
 101ccec:	10800017 	ldw	r2,0(r2)
 101ccf0:	1005003a 	cmpeq	r2,r2,zero
 101ccf4:	1000061e 	bne	r2,zero,101cd10 <alt_get_errno+0x3c>
 101ccf8:	008040b4 	movhi	r2,258
 101ccfc:	1086ce04 	addi	r2,r2,6968
 101cd00:	10800017 	ldw	r2,0(r2)
 101cd04:	103ee83a 	callr	r2
 101cd08:	e0bfff15 	stw	r2,-4(fp)
 101cd0c:	00000306 	br	101cd1c <alt_get_errno+0x48>
 101cd10:	008040b4 	movhi	r2,258
 101cd14:	108e8304 	addi	r2,r2,14860
 101cd18:	e0bfff15 	stw	r2,-4(fp)
 101cd1c:	e0bfff17 	ldw	r2,-4(fp)
}
 101cd20:	e037883a 	mov	sp,fp
 101cd24:	dfc00117 	ldw	ra,4(sp)
 101cd28:	df000017 	ldw	fp,0(sp)
 101cd2c:	dec00204 	addi	sp,sp,8
 101cd30:	f800283a 	ret

0101cd34 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 101cd34:	deffff04 	addi	sp,sp,-4
 101cd38:	df000015 	stw	fp,0(sp)
 101cd3c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 101cd40:	000170fa 	wrctl	ienable,zero
}
 101cd44:	e037883a 	mov	sp,fp
 101cd48:	df000017 	ldw	fp,0(sp)
 101cd4c:	dec00104 	addi	sp,sp,4
 101cd50:	f800283a 	ret

0101cd54 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 101cd54:	defffa04 	addi	sp,sp,-24
 101cd58:	dfc00515 	stw	ra,20(sp)
 101cd5c:	df000415 	stw	fp,16(sp)
 101cd60:	df000404 	addi	fp,sp,16
 101cd64:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 101cd68:	008040b4 	movhi	r2,258
 101cd6c:	1086c904 	addi	r2,r2,6948
 101cd70:	10800017 	ldw	r2,0(r2)
 101cd74:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 101cd78:	00003306 	br	101ce48 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 101cd7c:	e0bffd17 	ldw	r2,-12(fp)
 101cd80:	11000217 	ldw	r4,8(r2)
 101cd84:	10068940 	call	1006894 <strlen>
 101cd88:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 101cd8c:	e0bffd17 	ldw	r2,-12(fp)
 101cd90:	10c00217 	ldw	r3,8(r2)
 101cd94:	e0bffc17 	ldw	r2,-16(fp)
 101cd98:	1885883a 	add	r2,r3,r2
 101cd9c:	10bfffc4 	addi	r2,r2,-1
 101cda0:	10800003 	ldbu	r2,0(r2)
 101cda4:	10803fcc 	andi	r2,r2,255
 101cda8:	1080201c 	xori	r2,r2,128
 101cdac:	10bfe004 	addi	r2,r2,-128
 101cdb0:	10800bd8 	cmpnei	r2,r2,47
 101cdb4:	1000031e 	bne	r2,zero,101cdc4 <alt_find_file+0x70>
    {
      len -= 1;
 101cdb8:	e0bffc17 	ldw	r2,-16(fp)
 101cdbc:	10bfffc4 	addi	r2,r2,-1
 101cdc0:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 101cdc4:	e0bffc17 	ldw	r2,-16(fp)
 101cdc8:	1007883a 	mov	r3,r2
 101cdcc:	e0bffe17 	ldw	r2,-8(fp)
 101cdd0:	1885883a 	add	r2,r3,r2
 101cdd4:	10800003 	ldbu	r2,0(r2)
 101cdd8:	10803fcc 	andi	r2,r2,255
 101cddc:	1080201c 	xori	r2,r2,128
 101cde0:	10bfe004 	addi	r2,r2,-128
 101cde4:	10800be0 	cmpeqi	r2,r2,47
 101cde8:	10000a1e 	bne	r2,zero,101ce14 <alt_find_file+0xc0>
 101cdec:	e0bffc17 	ldw	r2,-16(fp)
 101cdf0:	1007883a 	mov	r3,r2
 101cdf4:	e0bffe17 	ldw	r2,-8(fp)
 101cdf8:	1885883a 	add	r2,r3,r2
 101cdfc:	10800003 	ldbu	r2,0(r2)
 101ce00:	10803fcc 	andi	r2,r2,255
 101ce04:	1080201c 	xori	r2,r2,128
 101ce08:	10bfe004 	addi	r2,r2,-128
 101ce0c:	1004c03a 	cmpne	r2,r2,zero
 101ce10:	10000a1e 	bne	r2,zero,101ce3c <alt_find_file+0xe8>
 101ce14:	e0bffd17 	ldw	r2,-12(fp)
 101ce18:	11000217 	ldw	r4,8(r2)
 101ce1c:	e1bffc17 	ldw	r6,-16(fp)
 101ce20:	e17ffe17 	ldw	r5,-8(fp)
 101ce24:	101d0ec0 	call	101d0ec <memcmp>
 101ce28:	1004c03a 	cmpne	r2,r2,zero
 101ce2c:	1000031e 	bne	r2,zero,101ce3c <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 101ce30:	e0bffd17 	ldw	r2,-12(fp)
 101ce34:	e0bfff15 	stw	r2,-4(fp)
 101ce38:	00000806 	br	101ce5c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 101ce3c:	e0bffd17 	ldw	r2,-12(fp)
 101ce40:	10800017 	ldw	r2,0(r2)
 101ce44:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 101ce48:	00c040b4 	movhi	r3,258
 101ce4c:	18c6c904 	addi	r3,r3,6948
 101ce50:	e0bffd17 	ldw	r2,-12(fp)
 101ce54:	10ffc91e 	bne	r2,r3,101cd7c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 101ce58:	e03fff15 	stw	zero,-4(fp)
 101ce5c:	e0bfff17 	ldw	r2,-4(fp)
}
 101ce60:	e037883a 	mov	sp,fp
 101ce64:	dfc00117 	ldw	ra,4(sp)
 101ce68:	df000017 	ldw	fp,0(sp)
 101ce6c:	dec00204 	addi	sp,sp,8
 101ce70:	f800283a 	ret

0101ce74 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 101ce74:	defffc04 	addi	sp,sp,-16
 101ce78:	df000315 	stw	fp,12(sp)
 101ce7c:	df000304 	addi	fp,sp,12
 101ce80:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 101ce84:	00bffa04 	movi	r2,-24
 101ce88:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 101ce8c:	e03ffe15 	stw	zero,-8(fp)
 101ce90:	00001e06 	br	101cf0c <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 101ce94:	e0bffe17 	ldw	r2,-8(fp)
 101ce98:	00c040b4 	movhi	r3,258
 101ce9c:	18c14004 	addi	r3,r3,1280
 101cea0:	10800324 	muli	r2,r2,12
 101cea4:	10c5883a 	add	r2,r2,r3
 101cea8:	10800017 	ldw	r2,0(r2)
 101ceac:	1004c03a 	cmpne	r2,r2,zero
 101ceb0:	1000131e 	bne	r2,zero,101cf00 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 101ceb4:	e0bffe17 	ldw	r2,-8(fp)
 101ceb8:	00c040b4 	movhi	r3,258
 101cebc:	18c14004 	addi	r3,r3,1280
 101cec0:	10800324 	muli	r2,r2,12
 101cec4:	10c7883a 	add	r3,r2,r3
 101cec8:	e0bfff17 	ldw	r2,-4(fp)
 101cecc:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 101ced0:	008040b4 	movhi	r2,258
 101ced4:	1086cd04 	addi	r2,r2,6964
 101ced8:	10c00017 	ldw	r3,0(r2)
 101cedc:	e0bffe17 	ldw	r2,-8(fp)
 101cee0:	1880040e 	bge	r3,r2,101cef4 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 101cee4:	00c040b4 	movhi	r3,258
 101cee8:	18c6cd04 	addi	r3,r3,6964
 101ceec:	e0bffe17 	ldw	r2,-8(fp)
 101cef0:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 101cef4:	e0bffe17 	ldw	r2,-8(fp)
 101cef8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 101cefc:	00000606 	br	101cf18 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 101cf00:	e0bffe17 	ldw	r2,-8(fp)
 101cf04:	10800044 	addi	r2,r2,1
 101cf08:	e0bffe15 	stw	r2,-8(fp)
 101cf0c:	e0bffe17 	ldw	r2,-8(fp)
 101cf10:	10800810 	cmplti	r2,r2,32
 101cf14:	103fdf1e 	bne	r2,zero,101ce94 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 101cf18:	e0bffd17 	ldw	r2,-12(fp)
}
 101cf1c:	e037883a 	mov	sp,fp
 101cf20:	df000017 	ldw	fp,0(sp)
 101cf24:	dec00104 	addi	sp,sp,4
 101cf28:	f800283a 	ret

0101cf2c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 101cf2c:	defffb04 	addi	sp,sp,-20
 101cf30:	df000415 	stw	fp,16(sp)
 101cf34:	df000404 	addi	fp,sp,16
 101cf38:	e13ffe15 	stw	r4,-8(fp)
 101cf3c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 101cf40:	e0bfff17 	ldw	r2,-4(fp)
 101cf44:	10840070 	cmpltui	r2,r2,4097
 101cf48:	1000021e 	bne	r2,zero,101cf54 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 101cf4c:	00840004 	movi	r2,4096
 101cf50:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 101cf54:	e0fffe17 	ldw	r3,-8(fp)
 101cf58:	e0bfff17 	ldw	r2,-4(fp)
 101cf5c:	1885883a 	add	r2,r3,r2
 101cf60:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 101cf64:	e0bffe17 	ldw	r2,-8(fp)
 101cf68:	e0bffd15 	stw	r2,-12(fp)
 101cf6c:	00000506 	br	101cf84 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 101cf70:	e0bffd17 	ldw	r2,-12(fp)
 101cf74:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 101cf78:	e0bffd17 	ldw	r2,-12(fp)
 101cf7c:	10800804 	addi	r2,r2,32
 101cf80:	e0bffd15 	stw	r2,-12(fp)
 101cf84:	e0fffd17 	ldw	r3,-12(fp)
 101cf88:	e0bffc17 	ldw	r2,-16(fp)
 101cf8c:	18bff836 	bltu	r3,r2,101cf70 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 101cf90:	e0bffe17 	ldw	r2,-8(fp)
 101cf94:	108007cc 	andi	r2,r2,31
 101cf98:	1005003a 	cmpeq	r2,r2,zero
 101cf9c:	1000021e 	bne	r2,zero,101cfa8 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 101cfa0:	e0bffd17 	ldw	r2,-12(fp)
 101cfa4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 101cfa8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 101cfac:	e037883a 	mov	sp,fp
 101cfb0:	df000017 	ldw	fp,0(sp)
 101cfb4:	dec00104 	addi	sp,sp,4
 101cfb8:	f800283a 	ret

0101cfbc <__assert_func>:
 101cfbc:	008040b4 	movhi	r2,258
 101cfc0:	1086c504 	addi	r2,r2,6932
 101cfc4:	10c00017 	ldw	r3,0(r2)
 101cfc8:	defffc04 	addi	sp,sp,-16
 101cfcc:	2011883a 	mov	r8,r4
 101cfd0:	dfc00315 	stw	ra,12(sp)
 101cfd4:	3005883a 	mov	r2,r6
 101cfd8:	2813883a 	mov	r9,r5
 101cfdc:	19000317 	ldw	r4,12(r3)
 101cfe0:	30000b26 	beq	r6,zero,101d010 <__assert_func+0x54>
 101cfe4:	00c040b4 	movhi	r3,258
 101cfe8:	18ff1b04 	addi	r3,r3,-916
 101cfec:	380d883a 	mov	r6,r7
 101cff0:	014040b4 	movhi	r5,258
 101cff4:	297f0f04 	addi	r5,r5,-964
 101cff8:	400f883a 	mov	r7,r8
 101cffc:	da400015 	stw	r9,0(sp)
 101d000:	d8c00115 	stw	r3,4(sp)
 101d004:	d8800215 	stw	r2,8(sp)
 101d008:	101d0800 	call	101d080 <fiprintf>
 101d00c:	101d4f00 	call	101d4f0 <abort>
 101d010:	008040b4 	movhi	r2,258
 101d014:	10bf1e04 	addi	r2,r2,-904
 101d018:	1007883a 	mov	r3,r2
 101d01c:	003ff306 	br	101cfec <__assert_func+0x30>

0101d020 <__assert>:
 101d020:	deffff04 	addi	sp,sp,-4
 101d024:	300f883a 	mov	r7,r6
 101d028:	000d883a 	mov	r6,zero
 101d02c:	dfc00015 	stw	ra,0(sp)
 101d030:	101cfbc0 	call	101cfbc <__assert_func>

0101d034 <atexit>:
 101d034:	200b883a 	mov	r5,r4
 101d038:	000d883a 	mov	r6,zero
 101d03c:	0009883a 	mov	r4,zero
 101d040:	000f883a 	mov	r7,zero
 101d044:	101d2081 	jmpi	101d208 <__register_exitproc>

0101d048 <exit>:
 101d048:	defffe04 	addi	sp,sp,-8
 101d04c:	000b883a 	mov	r5,zero
 101d050:	dc000015 	stw	r16,0(sp)
 101d054:	dfc00115 	stw	ra,4(sp)
 101d058:	2021883a 	mov	r16,r4
 101d05c:	101d3400 	call	101d340 <__call_exitprocs>
 101d060:	008040b4 	movhi	r2,258
 101d064:	1086c604 	addi	r2,r2,6936
 101d068:	11000017 	ldw	r4,0(r2)
 101d06c:	20800f17 	ldw	r2,60(r4)
 101d070:	10000126 	beq	r2,zero,101d078 <exit+0x30>
 101d074:	103ee83a 	callr	r2
 101d078:	8009883a 	mov	r4,r16
 101d07c:	101e9b80 	call	101e9b8 <_exit>

0101d080 <fiprintf>:
 101d080:	defffc04 	addi	sp,sp,-16
 101d084:	2007883a 	mov	r3,r4
 101d088:	dfc00115 	stw	ra,4(sp)
 101d08c:	d9800215 	stw	r6,8(sp)
 101d090:	d9c00315 	stw	r7,12(sp)
 101d094:	018040b4 	movhi	r6,258
 101d098:	3186c504 	addi	r6,r6,6932
 101d09c:	31000017 	ldw	r4,0(r6)
 101d0a0:	d8800204 	addi	r2,sp,8
 101d0a4:	280d883a 	mov	r6,r5
 101d0a8:	100f883a 	mov	r7,r2
 101d0ac:	180b883a 	mov	r5,r3
 101d0b0:	d8800015 	stw	r2,0(sp)
 101d0b4:	101d1ec0 	call	101d1ec <_vfiprintf_r>
 101d0b8:	dfc00117 	ldw	ra,4(sp)
 101d0bc:	dec00404 	addi	sp,sp,16
 101d0c0:	f800283a 	ret

0101d0c4 <_fiprintf_r>:
 101d0c4:	defffd04 	addi	sp,sp,-12
 101d0c8:	dfc00115 	stw	ra,4(sp)
 101d0cc:	d9c00215 	stw	r7,8(sp)
 101d0d0:	d8800204 	addi	r2,sp,8
 101d0d4:	100f883a 	mov	r7,r2
 101d0d8:	d8800015 	stw	r2,0(sp)
 101d0dc:	101d1ec0 	call	101d1ec <_vfiprintf_r>
 101d0e0:	dfc00117 	ldw	ra,4(sp)
 101d0e4:	dec00304 	addi	sp,sp,12
 101d0e8:	f800283a 	ret

0101d0ec <memcmp>:
 101d0ec:	00c000c4 	movi	r3,3
 101d0f0:	1980032e 	bgeu	r3,r6,101d100 <memcmp+0x14>
 101d0f4:	2144b03a 	or	r2,r4,r5
 101d0f8:	10c4703a 	and	r2,r2,r3
 101d0fc:	10000f26 	beq	r2,zero,101d13c <memcmp+0x50>
 101d100:	31ffffc4 	addi	r7,r6,-1
 101d104:	3000061e 	bne	r6,zero,101d120 <memcmp+0x34>
 101d108:	00000a06 	br	101d134 <memcmp+0x48>
 101d10c:	39ffffc4 	addi	r7,r7,-1
 101d110:	00bfffc4 	movi	r2,-1
 101d114:	21000044 	addi	r4,r4,1
 101d118:	29400044 	addi	r5,r5,1
 101d11c:	38800526 	beq	r7,r2,101d134 <memcmp+0x48>
 101d120:	20c00003 	ldbu	r3,0(r4)
 101d124:	28800003 	ldbu	r2,0(r5)
 101d128:	18bff826 	beq	r3,r2,101d10c <memcmp+0x20>
 101d12c:	1885c83a 	sub	r2,r3,r2
 101d130:	f800283a 	ret
 101d134:	0005883a 	mov	r2,zero
 101d138:	f800283a 	ret
 101d13c:	180f883a 	mov	r7,r3
 101d140:	20c00017 	ldw	r3,0(r4)
 101d144:	28800017 	ldw	r2,0(r5)
 101d148:	18bfed1e 	bne	r3,r2,101d100 <memcmp+0x14>
 101d14c:	31bfff04 	addi	r6,r6,-4
 101d150:	21000104 	addi	r4,r4,4
 101d154:	29400104 	addi	r5,r5,4
 101d158:	39bff936 	bltu	r7,r6,101d140 <memcmp+0x54>
 101d15c:	003fe806 	br	101d100 <memcmp+0x14>

0101d160 <strcpy>:
 101d160:	2904b03a 	or	r2,r5,r4
 101d164:	108000cc 	andi	r2,r2,3
 101d168:	10000826 	beq	r2,zero,101d18c <strcpy+0x2c>
 101d16c:	2007883a 	mov	r3,r4
 101d170:	28800003 	ldbu	r2,0(r5)
 101d174:	29400044 	addi	r5,r5,1
 101d178:	18800005 	stb	r2,0(r3)
 101d17c:	18c00044 	addi	r3,r3,1
 101d180:	103ffb1e 	bne	r2,zero,101d170 <strcpy+0x10>
 101d184:	2005883a 	mov	r2,r4
 101d188:	f800283a 	ret
 101d18c:	29800017 	ldw	r6,0(r5)
 101d190:	023fbff4 	movhi	r8,65279
 101d194:	423fbfc4 	addi	r8,r8,-257
 101d198:	02a02074 	movhi	r10,32897
 101d19c:	52a02004 	addi	r10,r10,-32640
 101d1a0:	3205883a 	add	r2,r6,r8
 101d1a4:	0186303a 	nor	r3,zero,r6
 101d1a8:	10c4703a 	and	r2,r2,r3
 101d1ac:	1284703a 	and	r2,r2,r10
 101d1b0:	200f883a 	mov	r7,r4
 101d1b4:	10000b1e 	bne	r2,zero,101d1e4 <strcpy+0x84>
 101d1b8:	4013883a 	mov	r9,r8
 101d1bc:	5011883a 	mov	r8,r10
 101d1c0:	39800015 	stw	r6,0(r7)
 101d1c4:	29400104 	addi	r5,r5,4
 101d1c8:	29800017 	ldw	r6,0(r5)
 101d1cc:	39c00104 	addi	r7,r7,4
 101d1d0:	3245883a 	add	r2,r6,r9
 101d1d4:	0186303a 	nor	r3,zero,r6
 101d1d8:	10c4703a 	and	r2,r2,r3
 101d1dc:	1204703a 	and	r2,r2,r8
 101d1e0:	103ff726 	beq	r2,zero,101d1c0 <strcpy+0x60>
 101d1e4:	3807883a 	mov	r3,r7
 101d1e8:	003fe106 	br	101d170 <strcpy+0x10>

0101d1ec <_vfiprintf_r>:
 101d1ec:	defffe04 	addi	sp,sp,-8
 101d1f0:	dfc00115 	stw	ra,4(sp)
 101d1f4:	d9c00015 	stw	r7,0(sp)
 101d1f8:	101d8b00 	call	101d8b0 <___vfiprintf_internal_r>
 101d1fc:	dfc00117 	ldw	ra,4(sp)
 101d200:	dec00204 	addi	sp,sp,8
 101d204:	f800283a 	ret

0101d208 <__register_exitproc>:
 101d208:	defffa04 	addi	sp,sp,-24
 101d20c:	008040b4 	movhi	r2,258
 101d210:	1086c604 	addi	r2,r2,6936
 101d214:	dc000015 	stw	r16,0(sp)
 101d218:	14000017 	ldw	r16,0(r2)
 101d21c:	dd000415 	stw	r20,16(sp)
 101d220:	2829883a 	mov	r20,r5
 101d224:	81405217 	ldw	r5,328(r16)
 101d228:	dcc00315 	stw	r19,12(sp)
 101d22c:	dc800215 	stw	r18,8(sp)
 101d230:	dc400115 	stw	r17,4(sp)
 101d234:	dfc00515 	stw	ra,20(sp)
 101d238:	2023883a 	mov	r17,r4
 101d23c:	3027883a 	mov	r19,r6
 101d240:	3825883a 	mov	r18,r7
 101d244:	28002526 	beq	r5,zero,101d2dc <__register_exitproc+0xd4>
 101d248:	29000117 	ldw	r4,4(r5)
 101d24c:	008007c4 	movi	r2,31
 101d250:	11002716 	blt	r2,r4,101d2f0 <__register_exitproc+0xe8>
 101d254:	8800101e 	bne	r17,zero,101d298 <__register_exitproc+0x90>
 101d258:	2105883a 	add	r2,r4,r4
 101d25c:	1085883a 	add	r2,r2,r2
 101d260:	20c00044 	addi	r3,r4,1
 101d264:	1145883a 	add	r2,r2,r5
 101d268:	0009883a 	mov	r4,zero
 101d26c:	15000215 	stw	r20,8(r2)
 101d270:	28c00115 	stw	r3,4(r5)
 101d274:	2005883a 	mov	r2,r4
 101d278:	dfc00517 	ldw	ra,20(sp)
 101d27c:	dd000417 	ldw	r20,16(sp)
 101d280:	dcc00317 	ldw	r19,12(sp)
 101d284:	dc800217 	ldw	r18,8(sp)
 101d288:	dc400117 	ldw	r17,4(sp)
 101d28c:	dc000017 	ldw	r16,0(sp)
 101d290:	dec00604 	addi	sp,sp,24
 101d294:	f800283a 	ret
 101d298:	29802204 	addi	r6,r5,136
 101d29c:	00800044 	movi	r2,1
 101d2a0:	110e983a 	sll	r7,r2,r4
 101d2a4:	30c04017 	ldw	r3,256(r6)
 101d2a8:	2105883a 	add	r2,r4,r4
 101d2ac:	1085883a 	add	r2,r2,r2
 101d2b0:	1185883a 	add	r2,r2,r6
 101d2b4:	19c6b03a 	or	r3,r3,r7
 101d2b8:	14802015 	stw	r18,128(r2)
 101d2bc:	14c00015 	stw	r19,0(r2)
 101d2c0:	00800084 	movi	r2,2
 101d2c4:	30c04015 	stw	r3,256(r6)
 101d2c8:	88bfe31e 	bne	r17,r2,101d258 <__register_exitproc+0x50>
 101d2cc:	30804117 	ldw	r2,260(r6)
 101d2d0:	11c4b03a 	or	r2,r2,r7
 101d2d4:	30804115 	stw	r2,260(r6)
 101d2d8:	003fdf06 	br	101d258 <__register_exitproc+0x50>
 101d2dc:	008040b4 	movhi	r2,258
 101d2e0:	10908404 	addi	r2,r2,16912
 101d2e4:	100b883a 	mov	r5,r2
 101d2e8:	80805215 	stw	r2,328(r16)
 101d2ec:	003fd606 	br	101d248 <__register_exitproc+0x40>
 101d2f0:	00804034 	movhi	r2,256
 101d2f4:	10977004 	addi	r2,r2,24000
 101d2f8:	1000021e 	bne	r2,zero,101d304 <__register_exitproc+0xfc>
 101d2fc:	013fffc4 	movi	r4,-1
 101d300:	003fdc06 	br	101d274 <__register_exitproc+0x6c>
 101d304:	01006404 	movi	r4,400
 101d308:	103ee83a 	callr	r2
 101d30c:	1007883a 	mov	r3,r2
 101d310:	103ffa26 	beq	r2,zero,101d2fc <__register_exitproc+0xf4>
 101d314:	80805217 	ldw	r2,328(r16)
 101d318:	180b883a 	mov	r5,r3
 101d31c:	18000115 	stw	zero,4(r3)
 101d320:	18800015 	stw	r2,0(r3)
 101d324:	80c05215 	stw	r3,328(r16)
 101d328:	18006215 	stw	zero,392(r3)
 101d32c:	18006315 	stw	zero,396(r3)
 101d330:	0009883a 	mov	r4,zero
 101d334:	883fc826 	beq	r17,zero,101d258 <__register_exitproc+0x50>
 101d338:	003fd706 	br	101d298 <__register_exitproc+0x90>

0101d33c <register_fini>:
 101d33c:	f800283a 	ret

0101d340 <__call_exitprocs>:
 101d340:	008040b4 	movhi	r2,258
 101d344:	1086c604 	addi	r2,r2,6936
 101d348:	10800017 	ldw	r2,0(r2)
 101d34c:	defff304 	addi	sp,sp,-52
 101d350:	df000b15 	stw	fp,44(sp)
 101d354:	d8800115 	stw	r2,4(sp)
 101d358:	00804034 	movhi	r2,256
 101d35c:	10976b04 	addi	r2,r2,23980
 101d360:	1005003a 	cmpeq	r2,r2,zero
 101d364:	d8800215 	stw	r2,8(sp)
 101d368:	d8800117 	ldw	r2,4(sp)
 101d36c:	dd400815 	stw	r21,32(sp)
 101d370:	dd000715 	stw	r20,28(sp)
 101d374:	10805204 	addi	r2,r2,328
 101d378:	dfc00c15 	stw	ra,48(sp)
 101d37c:	ddc00a15 	stw	r23,40(sp)
 101d380:	dd800915 	stw	r22,36(sp)
 101d384:	dcc00615 	stw	r19,24(sp)
 101d388:	dc800515 	stw	r18,20(sp)
 101d38c:	dc400415 	stw	r17,16(sp)
 101d390:	dc000315 	stw	r16,12(sp)
 101d394:	282b883a 	mov	r21,r5
 101d398:	2039883a 	mov	fp,r4
 101d39c:	d8800015 	stw	r2,0(sp)
 101d3a0:	2829003a 	cmpeq	r20,r5,zero
 101d3a4:	d8800117 	ldw	r2,4(sp)
 101d3a8:	14405217 	ldw	r17,328(r2)
 101d3ac:	88001026 	beq	r17,zero,101d3f0 <__call_exitprocs+0xb0>
 101d3b0:	ddc00017 	ldw	r23,0(sp)
 101d3b4:	88800117 	ldw	r2,4(r17)
 101d3b8:	8c802204 	addi	r18,r17,136
 101d3bc:	143fffc4 	addi	r16,r2,-1
 101d3c0:	80000916 	blt	r16,zero,101d3e8 <__call_exitprocs+0xa8>
 101d3c4:	05bfffc4 	movi	r22,-1
 101d3c8:	a000151e 	bne	r20,zero,101d420 <__call_exitprocs+0xe0>
 101d3cc:	8409883a 	add	r4,r16,r16
 101d3d0:	2105883a 	add	r2,r4,r4
 101d3d4:	1485883a 	add	r2,r2,r18
 101d3d8:	10c02017 	ldw	r3,128(r2)
 101d3dc:	a8c01126 	beq	r21,r3,101d424 <__call_exitprocs+0xe4>
 101d3e0:	843fffc4 	addi	r16,r16,-1
 101d3e4:	85bff81e 	bne	r16,r22,101d3c8 <__call_exitprocs+0x88>
 101d3e8:	d8800217 	ldw	r2,8(sp)
 101d3ec:	10003126 	beq	r2,zero,101d4b4 <__call_exitprocs+0x174>
 101d3f0:	dfc00c17 	ldw	ra,48(sp)
 101d3f4:	df000b17 	ldw	fp,44(sp)
 101d3f8:	ddc00a17 	ldw	r23,40(sp)
 101d3fc:	dd800917 	ldw	r22,36(sp)
 101d400:	dd400817 	ldw	r21,32(sp)
 101d404:	dd000717 	ldw	r20,28(sp)
 101d408:	dcc00617 	ldw	r19,24(sp)
 101d40c:	dc800517 	ldw	r18,20(sp)
 101d410:	dc400417 	ldw	r17,16(sp)
 101d414:	dc000317 	ldw	r16,12(sp)
 101d418:	dec00d04 	addi	sp,sp,52
 101d41c:	f800283a 	ret
 101d420:	8409883a 	add	r4,r16,r16
 101d424:	88c00117 	ldw	r3,4(r17)
 101d428:	2105883a 	add	r2,r4,r4
 101d42c:	1445883a 	add	r2,r2,r17
 101d430:	18ffffc4 	addi	r3,r3,-1
 101d434:	11800217 	ldw	r6,8(r2)
 101d438:	1c001526 	beq	r3,r16,101d490 <__call_exitprocs+0x150>
 101d43c:	10000215 	stw	zero,8(r2)
 101d440:	303fe726 	beq	r6,zero,101d3e0 <__call_exitprocs+0xa0>
 101d444:	00c00044 	movi	r3,1
 101d448:	1c06983a 	sll	r3,r3,r16
 101d44c:	90804017 	ldw	r2,256(r18)
 101d450:	8cc00117 	ldw	r19,4(r17)
 101d454:	1884703a 	and	r2,r3,r2
 101d458:	10001426 	beq	r2,zero,101d4ac <__call_exitprocs+0x16c>
 101d45c:	90804117 	ldw	r2,260(r18)
 101d460:	1884703a 	and	r2,r3,r2
 101d464:	10000c1e 	bne	r2,zero,101d498 <__call_exitprocs+0x158>
 101d468:	2105883a 	add	r2,r4,r4
 101d46c:	1485883a 	add	r2,r2,r18
 101d470:	11400017 	ldw	r5,0(r2)
 101d474:	e009883a 	mov	r4,fp
 101d478:	303ee83a 	callr	r6
 101d47c:	88800117 	ldw	r2,4(r17)
 101d480:	98bfc81e 	bne	r19,r2,101d3a4 <__call_exitprocs+0x64>
 101d484:	b8800017 	ldw	r2,0(r23)
 101d488:	147fd526 	beq	r2,r17,101d3e0 <__call_exitprocs+0xa0>
 101d48c:	003fc506 	br	101d3a4 <__call_exitprocs+0x64>
 101d490:	8c000115 	stw	r16,4(r17)
 101d494:	003fea06 	br	101d440 <__call_exitprocs+0x100>
 101d498:	2105883a 	add	r2,r4,r4
 101d49c:	1485883a 	add	r2,r2,r18
 101d4a0:	11000017 	ldw	r4,0(r2)
 101d4a4:	303ee83a 	callr	r6
 101d4a8:	003ff406 	br	101d47c <__call_exitprocs+0x13c>
 101d4ac:	303ee83a 	callr	r6
 101d4b0:	003ff206 	br	101d47c <__call_exitprocs+0x13c>
 101d4b4:	88800117 	ldw	r2,4(r17)
 101d4b8:	1000081e 	bne	r2,zero,101d4dc <__call_exitprocs+0x19c>
 101d4bc:	89000017 	ldw	r4,0(r17)
 101d4c0:	20000726 	beq	r4,zero,101d4e0 <__call_exitprocs+0x1a0>
 101d4c4:	b9000015 	stw	r4,0(r23)
 101d4c8:	8809883a 	mov	r4,r17
 101d4cc:	1005dac0 	call	1005dac <free>
 101d4d0:	bc400017 	ldw	r17,0(r23)
 101d4d4:	883fb71e 	bne	r17,zero,101d3b4 <__call_exitprocs+0x74>
 101d4d8:	003fc506 	br	101d3f0 <__call_exitprocs+0xb0>
 101d4dc:	89000017 	ldw	r4,0(r17)
 101d4e0:	882f883a 	mov	r23,r17
 101d4e4:	2023883a 	mov	r17,r4
 101d4e8:	883fb21e 	bne	r17,zero,101d3b4 <__call_exitprocs+0x74>
 101d4ec:	003fc006 	br	101d3f0 <__call_exitprocs+0xb0>

0101d4f0 <abort>:
 101d4f0:	deffff04 	addi	sp,sp,-4
 101d4f4:	01000184 	movi	r4,6
 101d4f8:	dfc00015 	stw	ra,0(sp)
 101d4fc:	101d5d40 	call	101d5d4 <raise>
 101d500:	01000044 	movi	r4,1
 101d504:	101e9b80 	call	101e9b8 <_exit>

0101d508 <_raise_r>:
 101d508:	defffd04 	addi	sp,sp,-12
 101d50c:	008007c4 	movi	r2,31
 101d510:	dc400115 	stw	r17,4(sp)
 101d514:	dc000015 	stw	r16,0(sp)
 101d518:	dfc00215 	stw	ra,8(sp)
 101d51c:	2821883a 	mov	r16,r5
 101d520:	2023883a 	mov	r17,r4
 101d524:	11402736 	bltu	r2,r5,101d5c4 <_raise_r+0xbc>
 101d528:	20c0b717 	ldw	r3,732(r4)
 101d52c:	18001326 	beq	r3,zero,101d57c <_raise_r+0x74>
 101d530:	2945883a 	add	r2,r5,r5
 101d534:	1085883a 	add	r2,r2,r2
 101d538:	188b883a 	add	r5,r3,r2
 101d53c:	28c00017 	ldw	r3,0(r5)
 101d540:	18000e26 	beq	r3,zero,101d57c <_raise_r+0x74>
 101d544:	01000044 	movi	r4,1
 101d548:	19000526 	beq	r3,r4,101d560 <_raise_r+0x58>
 101d54c:	00bfffc4 	movi	r2,-1
 101d550:	18801326 	beq	r3,r2,101d5a0 <_raise_r+0x98>
 101d554:	28000015 	stw	zero,0(r5)
 101d558:	8009883a 	mov	r4,r16
 101d55c:	183ee83a 	callr	r3
 101d560:	0007883a 	mov	r3,zero
 101d564:	1805883a 	mov	r2,r3
 101d568:	dfc00217 	ldw	ra,8(sp)
 101d56c:	dc400117 	ldw	r17,4(sp)
 101d570:	dc000017 	ldw	r16,0(sp)
 101d574:	dec00304 	addi	sp,sp,12
 101d578:	f800283a 	ret
 101d57c:	101d7e00 	call	101d7e0 <_getpid_r>
 101d580:	100b883a 	mov	r5,r2
 101d584:	8809883a 	mov	r4,r17
 101d588:	800d883a 	mov	r6,r16
 101d58c:	dfc00217 	ldw	ra,8(sp)
 101d590:	dc400117 	ldw	r17,4(sp)
 101d594:	dc000017 	ldw	r16,0(sp)
 101d598:	dec00304 	addi	sp,sp,12
 101d59c:	101d7e41 	jmpi	101d7e4 <_kill_r>
 101d5a0:	2007883a 	mov	r3,r4
 101d5a4:	00800584 	movi	r2,22
 101d5a8:	88800015 	stw	r2,0(r17)
 101d5ac:	1805883a 	mov	r2,r3
 101d5b0:	dfc00217 	ldw	ra,8(sp)
 101d5b4:	dc400117 	ldw	r17,4(sp)
 101d5b8:	dc000017 	ldw	r16,0(sp)
 101d5bc:	dec00304 	addi	sp,sp,12
 101d5c0:	f800283a 	ret
 101d5c4:	00800584 	movi	r2,22
 101d5c8:	00ffffc4 	movi	r3,-1
 101d5cc:	20800015 	stw	r2,0(r4)
 101d5d0:	003fe406 	br	101d564 <_raise_r+0x5c>

0101d5d4 <raise>:
 101d5d4:	008040b4 	movhi	r2,258
 101d5d8:	1086c504 	addi	r2,r2,6932
 101d5dc:	200b883a 	mov	r5,r4
 101d5e0:	11000017 	ldw	r4,0(r2)
 101d5e4:	101d5081 	jmpi	101d508 <_raise_r>

0101d5e8 <_init_signal_r>:
 101d5e8:	2080b717 	ldw	r2,732(r4)
 101d5ec:	defffe04 	addi	sp,sp,-8
 101d5f0:	dc000015 	stw	r16,0(sp)
 101d5f4:	dfc00115 	stw	ra,4(sp)
 101d5f8:	2021883a 	mov	r16,r4
 101d5fc:	10000526 	beq	r2,zero,101d614 <_init_signal_r+0x2c>
 101d600:	0005883a 	mov	r2,zero
 101d604:	dfc00117 	ldw	ra,4(sp)
 101d608:	dc000017 	ldw	r16,0(sp)
 101d60c:	dec00204 	addi	sp,sp,8
 101d610:	f800283a 	ret
 101d614:	01402004 	movi	r5,128
 101d618:	1005dd40 	call	1005dd4 <_malloc_r>
 101d61c:	1009883a 	mov	r4,r2
 101d620:	8080b715 	stw	r2,732(r16)
 101d624:	10000726 	beq	r2,zero,101d644 <_init_signal_r+0x5c>
 101d628:	0007883a 	mov	r3,zero
 101d62c:	01402004 	movi	r5,128
 101d630:	20c5883a 	add	r2,r4,r3
 101d634:	18c00104 	addi	r3,r3,4
 101d638:	10000015 	stw	zero,0(r2)
 101d63c:	197ffc1e 	bne	r3,r5,101d630 <_init_signal_r+0x48>
 101d640:	003fef06 	br	101d600 <_init_signal_r+0x18>
 101d644:	00bfffc4 	movi	r2,-1
 101d648:	003fee06 	br	101d604 <_init_signal_r+0x1c>

0101d64c <_init_signal>:
 101d64c:	008040b4 	movhi	r2,258
 101d650:	1086c504 	addi	r2,r2,6932
 101d654:	11000017 	ldw	r4,0(r2)
 101d658:	101d5e81 	jmpi	101d5e8 <_init_signal_r>

0101d65c <__sigtramp_r>:
 101d65c:	defffd04 	addi	sp,sp,-12
 101d660:	008007c4 	movi	r2,31
 101d664:	dc000115 	stw	r16,4(sp)
 101d668:	dfc00215 	stw	ra,8(sp)
 101d66c:	2021883a 	mov	r16,r4
 101d670:	11401336 	bltu	r2,r5,101d6c0 <__sigtramp_r+0x64>
 101d674:	20c0b717 	ldw	r3,732(r4)
 101d678:	18001f26 	beq	r3,zero,101d6f8 <__sigtramp_r+0x9c>
 101d67c:	2945883a 	add	r2,r5,r5
 101d680:	1085883a 	add	r2,r2,r2
 101d684:	10c9883a 	add	r4,r2,r3
 101d688:	20c00017 	ldw	r3,0(r4)
 101d68c:	18001626 	beq	r3,zero,101d6e8 <__sigtramp_r+0x8c>
 101d690:	00bfffc4 	movi	r2,-1
 101d694:	18801626 	beq	r3,r2,101d6f0 <__sigtramp_r+0x94>
 101d698:	00800044 	movi	r2,1
 101d69c:	18800d26 	beq	r3,r2,101d6d4 <__sigtramp_r+0x78>
 101d6a0:	20000015 	stw	zero,0(r4)
 101d6a4:	2809883a 	mov	r4,r5
 101d6a8:	183ee83a 	callr	r3
 101d6ac:	0005883a 	mov	r2,zero
 101d6b0:	dfc00217 	ldw	ra,8(sp)
 101d6b4:	dc000117 	ldw	r16,4(sp)
 101d6b8:	dec00304 	addi	sp,sp,12
 101d6bc:	f800283a 	ret
 101d6c0:	00bfffc4 	movi	r2,-1
 101d6c4:	dfc00217 	ldw	ra,8(sp)
 101d6c8:	dc000117 	ldw	r16,4(sp)
 101d6cc:	dec00304 	addi	sp,sp,12
 101d6d0:	f800283a 	ret
 101d6d4:	008000c4 	movi	r2,3
 101d6d8:	dfc00217 	ldw	ra,8(sp)
 101d6dc:	dc000117 	ldw	r16,4(sp)
 101d6e0:	dec00304 	addi	sp,sp,12
 101d6e4:	f800283a 	ret
 101d6e8:	00800044 	movi	r2,1
 101d6ec:	003ff006 	br	101d6b0 <__sigtramp_r+0x54>
 101d6f0:	00800084 	movi	r2,2
 101d6f4:	003fee06 	br	101d6b0 <__sigtramp_r+0x54>
 101d6f8:	d9400015 	stw	r5,0(sp)
 101d6fc:	101d5e80 	call	101d5e8 <_init_signal_r>
 101d700:	d9400017 	ldw	r5,0(sp)
 101d704:	103fee1e 	bne	r2,zero,101d6c0 <__sigtramp_r+0x64>
 101d708:	80c0b717 	ldw	r3,732(r16)
 101d70c:	003fdb06 	br	101d67c <__sigtramp_r+0x20>

0101d710 <__sigtramp>:
 101d710:	008040b4 	movhi	r2,258
 101d714:	1086c504 	addi	r2,r2,6932
 101d718:	200b883a 	mov	r5,r4
 101d71c:	11000017 	ldw	r4,0(r2)
 101d720:	101d65c1 	jmpi	101d65c <__sigtramp_r>

0101d724 <_signal_r>:
 101d724:	defffc04 	addi	sp,sp,-16
 101d728:	008007c4 	movi	r2,31
 101d72c:	dc800215 	stw	r18,8(sp)
 101d730:	dc400115 	stw	r17,4(sp)
 101d734:	dc000015 	stw	r16,0(sp)
 101d738:	dfc00315 	stw	ra,12(sp)
 101d73c:	2823883a 	mov	r17,r5
 101d740:	00ffffc4 	movi	r3,-1
 101d744:	3025883a 	mov	r18,r6
 101d748:	2021883a 	mov	r16,r4
 101d74c:	1140092e 	bgeu	r2,r5,101d774 <_signal_r+0x50>
 101d750:	00800584 	movi	r2,22
 101d754:	20800015 	stw	r2,0(r4)
 101d758:	1805883a 	mov	r2,r3
 101d75c:	dfc00317 	ldw	ra,12(sp)
 101d760:	dc800217 	ldw	r18,8(sp)
 101d764:	dc400117 	ldw	r17,4(sp)
 101d768:	dc000017 	ldw	r16,0(sp)
 101d76c:	dec00404 	addi	sp,sp,16
 101d770:	f800283a 	ret
 101d774:	2140b717 	ldw	r5,732(r4)
 101d778:	28000c26 	beq	r5,zero,101d7ac <_signal_r+0x88>
 101d77c:	8c45883a 	add	r2,r17,r17
 101d780:	1085883a 	add	r2,r2,r2
 101d784:	1145883a 	add	r2,r2,r5
 101d788:	10c00017 	ldw	r3,0(r2)
 101d78c:	14800015 	stw	r18,0(r2)
 101d790:	1805883a 	mov	r2,r3
 101d794:	dfc00317 	ldw	ra,12(sp)
 101d798:	dc800217 	ldw	r18,8(sp)
 101d79c:	dc400117 	ldw	r17,4(sp)
 101d7a0:	dc000017 	ldw	r16,0(sp)
 101d7a4:	dec00404 	addi	sp,sp,16
 101d7a8:	f800283a 	ret
 101d7ac:	101d5e80 	call	101d5e8 <_init_signal_r>
 101d7b0:	1000021e 	bne	r2,zero,101d7bc <_signal_r+0x98>
 101d7b4:	8140b717 	ldw	r5,732(r16)
 101d7b8:	003ff006 	br	101d77c <_signal_r+0x58>
 101d7bc:	00ffffc4 	movi	r3,-1
 101d7c0:	003fe506 	br	101d758 <_signal_r+0x34>

0101d7c4 <signal>:
 101d7c4:	018040b4 	movhi	r6,258
 101d7c8:	3186c504 	addi	r6,r6,6932
 101d7cc:	2007883a 	mov	r3,r4
 101d7d0:	31000017 	ldw	r4,0(r6)
 101d7d4:	280d883a 	mov	r6,r5
 101d7d8:	180b883a 	mov	r5,r3
 101d7dc:	101d7241 	jmpi	101d724 <_signal_r>

0101d7e0 <_getpid_r>:
 101d7e0:	101e9d81 	jmpi	101e9d8 <getpid>

0101d7e4 <_kill_r>:
 101d7e4:	defffd04 	addi	sp,sp,-12
 101d7e8:	dc000015 	stw	r16,0(sp)
 101d7ec:	040040b4 	movhi	r16,258
 101d7f0:	840e8304 	addi	r16,r16,14860
 101d7f4:	dc400115 	stw	r17,4(sp)
 101d7f8:	80000015 	stw	zero,0(r16)
 101d7fc:	2023883a 	mov	r17,r4
 101d800:	2809883a 	mov	r4,r5
 101d804:	300b883a 	mov	r5,r6
 101d808:	dfc00215 	stw	ra,8(sp)
 101d80c:	101e9f80 	call	101e9f8 <kill>
 101d810:	1007883a 	mov	r3,r2
 101d814:	00bfffc4 	movi	r2,-1
 101d818:	18800626 	beq	r3,r2,101d834 <_kill_r+0x50>
 101d81c:	1805883a 	mov	r2,r3
 101d820:	dfc00217 	ldw	ra,8(sp)
 101d824:	dc400117 	ldw	r17,4(sp)
 101d828:	dc000017 	ldw	r16,0(sp)
 101d82c:	dec00304 	addi	sp,sp,12
 101d830:	f800283a 	ret
 101d834:	80800017 	ldw	r2,0(r16)
 101d838:	103ff826 	beq	r2,zero,101d81c <_kill_r+0x38>
 101d83c:	88800015 	stw	r2,0(r17)
 101d840:	1805883a 	mov	r2,r3
 101d844:	dfc00217 	ldw	ra,8(sp)
 101d848:	dc400117 	ldw	r17,4(sp)
 101d84c:	dc000017 	ldw	r16,0(sp)
 101d850:	dec00304 	addi	sp,sp,12
 101d854:	f800283a 	ret

0101d858 <__sprint_r>:
 101d858:	30800217 	ldw	r2,8(r6)
 101d85c:	defffe04 	addi	sp,sp,-8
 101d860:	dc000015 	stw	r16,0(sp)
 101d864:	dfc00115 	stw	ra,4(sp)
 101d868:	3021883a 	mov	r16,r6
 101d86c:	0007883a 	mov	r3,zero
 101d870:	1000061e 	bne	r2,zero,101d88c <__sprint_r+0x34>
 101d874:	1805883a 	mov	r2,r3
 101d878:	30000115 	stw	zero,4(r6)
 101d87c:	dfc00117 	ldw	ra,4(sp)
 101d880:	dc000017 	ldw	r16,0(sp)
 101d884:	dec00204 	addi	sp,sp,8
 101d888:	f800283a 	ret
 101d88c:	100c4800 	call	100c480 <__sfvwrite_r>
 101d890:	1007883a 	mov	r3,r2
 101d894:	1805883a 	mov	r2,r3
 101d898:	80000115 	stw	zero,4(r16)
 101d89c:	80000215 	stw	zero,8(r16)
 101d8a0:	dfc00117 	ldw	ra,4(sp)
 101d8a4:	dc000017 	ldw	r16,0(sp)
 101d8a8:	dec00204 	addi	sp,sp,8
 101d8ac:	f800283a 	ret

0101d8b0 <___vfiprintf_internal_r>:
 101d8b0:	defeb604 	addi	sp,sp,-1320
 101d8b4:	dd814615 	stw	r22,1304(sp)
 101d8b8:	dd414515 	stw	r21,1300(sp)
 101d8bc:	dc014015 	stw	r16,1280(sp)
 101d8c0:	dfc14915 	stw	ra,1316(sp)
 101d8c4:	df014815 	stw	fp,1312(sp)
 101d8c8:	ddc14715 	stw	r23,1308(sp)
 101d8cc:	dd014415 	stw	r20,1296(sp)
 101d8d0:	dcc14315 	stw	r19,1292(sp)
 101d8d4:	dc814215 	stw	r18,1288(sp)
 101d8d8:	dc414115 	stw	r17,1284(sp)
 101d8dc:	202d883a 	mov	r22,r4
 101d8e0:	282b883a 	mov	r21,r5
 101d8e4:	3021883a 	mov	r16,r6
 101d8e8:	20000226 	beq	r4,zero,101d8f4 <___vfiprintf_internal_r+0x44>
 101d8ec:	20800e17 	ldw	r2,56(r4)
 101d8f0:	1001bc26 	beq	r2,zero,101dfe4 <___vfiprintf_internal_r+0x734>
 101d8f4:	a880030b 	ldhu	r2,12(r21)
 101d8f8:	1080020c 	andi	r2,r2,8
 101d8fc:	1001cb26 	beq	r2,zero,101e02c <___vfiprintf_internal_r+0x77c>
 101d900:	a8800417 	ldw	r2,16(r21)
 101d904:	1001c926 	beq	r2,zero,101e02c <___vfiprintf_internal_r+0x77c>
 101d908:	aa00030b 	ldhu	r8,12(r21)
 101d90c:	00800284 	movi	r2,10
 101d910:	40c0068c 	andi	r3,r8,26
 101d914:	18802f1e 	bne	r3,r2,101d9d4 <___vfiprintf_internal_r+0x124>
 101d918:	a880038f 	ldh	r2,14(r21)
 101d91c:	10002d16 	blt	r2,zero,101d9d4 <___vfiprintf_internal_r+0x124>
 101d920:	aa40038b 	ldhu	r9,14(r21)
 101d924:	aa800717 	ldw	r10,28(r21)
 101d928:	aac00917 	ldw	r11,36(r21)
 101d92c:	dc401e04 	addi	r17,sp,120
 101d930:	d8803504 	addi	r2,sp,212
 101d934:	00c10004 	movi	r3,1024
 101d938:	423fff4c 	andi	r8,r8,65533
 101d93c:	800d883a 	mov	r6,r16
 101d940:	b009883a 	mov	r4,r22
 101d944:	880b883a 	mov	r5,r17
 101d948:	da00210d 	sth	r8,132(sp)
 101d94c:	da40218d 	sth	r9,134(sp)
 101d950:	da802515 	stw	r10,148(sp)
 101d954:	dac02715 	stw	r11,156(sp)
 101d958:	d8802215 	stw	r2,136(sp)
 101d95c:	d8c02315 	stw	r3,140(sp)
 101d960:	d8801e15 	stw	r2,120(sp)
 101d964:	d8c02015 	stw	r3,128(sp)
 101d968:	d8002415 	stw	zero,144(sp)
 101d96c:	101d8b00 	call	101d8b0 <___vfiprintf_internal_r>
 101d970:	d8813a15 	stw	r2,1256(sp)
 101d974:	10000416 	blt	r2,zero,101d988 <___vfiprintf_internal_r+0xd8>
 101d978:	b009883a 	mov	r4,r22
 101d97c:	880b883a 	mov	r5,r17
 101d980:	100b9140 	call	100b914 <_fflush_r>
 101d984:	1001b01e 	bne	r2,zero,101e048 <___vfiprintf_internal_r+0x798>
 101d988:	d880210b 	ldhu	r2,132(sp)
 101d98c:	1080100c 	andi	r2,r2,64
 101d990:	10000326 	beq	r2,zero,101d9a0 <___vfiprintf_internal_r+0xf0>
 101d994:	a880030b 	ldhu	r2,12(r21)
 101d998:	10801014 	ori	r2,r2,64
 101d99c:	a880030d 	sth	r2,12(r21)
 101d9a0:	d8813a17 	ldw	r2,1256(sp)
 101d9a4:	dfc14917 	ldw	ra,1316(sp)
 101d9a8:	df014817 	ldw	fp,1312(sp)
 101d9ac:	ddc14717 	ldw	r23,1308(sp)
 101d9b0:	dd814617 	ldw	r22,1304(sp)
 101d9b4:	dd414517 	ldw	r21,1300(sp)
 101d9b8:	dd014417 	ldw	r20,1296(sp)
 101d9bc:	dcc14317 	ldw	r19,1292(sp)
 101d9c0:	dc814217 	ldw	r18,1288(sp)
 101d9c4:	dc414117 	ldw	r17,1284(sp)
 101d9c8:	dc014017 	ldw	r16,1280(sp)
 101d9cc:	dec14a04 	addi	sp,sp,1320
 101d9d0:	f800283a 	ret
 101d9d4:	d8c00e04 	addi	r3,sp,56
 101d9d8:	8029883a 	mov	r20,r16
 101d9dc:	d8c00115 	stw	r3,4(sp)
 101d9e0:	d8000315 	stw	zero,12(sp)
 101d9e4:	d8000215 	stw	zero,8(sp)
 101d9e8:	1825883a 	mov	r18,r3
 101d9ec:	d8013a15 	stw	zero,1256(sp)
 101d9f0:	d8013615 	stw	zero,1240(sp)
 101d9f4:	a0800007 	ldb	r2,0(r20)
 101d9f8:	10001926 	beq	r2,zero,101da60 <___vfiprintf_internal_r+0x1b0>
 101d9fc:	00c00944 	movi	r3,37
 101da00:	10c01726 	beq	r2,r3,101da60 <___vfiprintf_internal_r+0x1b0>
 101da04:	a021883a 	mov	r16,r20
 101da08:	00000106 	br	101da10 <___vfiprintf_internal_r+0x160>
 101da0c:	10c00326 	beq	r2,r3,101da1c <___vfiprintf_internal_r+0x16c>
 101da10:	84000044 	addi	r16,r16,1
 101da14:	80800007 	ldb	r2,0(r16)
 101da18:	103ffc1e 	bne	r2,zero,101da0c <___vfiprintf_internal_r+0x15c>
 101da1c:	8523c83a 	sub	r17,r16,r20
 101da20:	88000e26 	beq	r17,zero,101da5c <___vfiprintf_internal_r+0x1ac>
 101da24:	d9400317 	ldw	r5,12(sp)
 101da28:	d9000217 	ldw	r4,8(sp)
 101da2c:	008001c4 	movi	r2,7
 101da30:	2c4b883a 	add	r5,r5,r17
 101da34:	21000044 	addi	r4,r4,1
 101da38:	95000015 	stw	r20,0(r18)
 101da3c:	d9400315 	stw	r5,12(sp)
 101da40:	94400115 	stw	r17,4(r18)
 101da44:	d9000215 	stw	r4,8(sp)
 101da48:	1101e816 	blt	r2,r4,101e1ec <___vfiprintf_internal_r+0x93c>
 101da4c:	94800204 	addi	r18,r18,8
 101da50:	d9013a17 	ldw	r4,1256(sp)
 101da54:	2449883a 	add	r4,r4,r17
 101da58:	d9013a15 	stw	r4,1256(sp)
 101da5c:	8029883a 	mov	r20,r16
 101da60:	a0800007 	ldb	r2,0(r20)
 101da64:	10012e26 	beq	r2,zero,101df20 <___vfiprintf_internal_r+0x670>
 101da68:	a5000044 	addi	r20,r20,1
 101da6c:	d8000005 	stb	zero,0(sp)
 101da70:	a0c00007 	ldb	r3,0(r20)
 101da74:	05ffffc4 	movi	r23,-1
 101da78:	d8013915 	stw	zero,1252(sp)
 101da7c:	d8013b15 	stw	zero,1260(sp)
 101da80:	180b883a 	mov	r5,r3
 101da84:	a5000044 	addi	r20,r20,1
 101da88:	28fff804 	addi	r3,r5,-32
 101da8c:	00801604 	movi	r2,88
 101da90:	10c06036 	bltu	r2,r3,101dc14 <___vfiprintf_internal_r+0x364>
 101da94:	18c5883a 	add	r2,r3,r3
 101da98:	1085883a 	add	r2,r2,r2
 101da9c:	00c040b4 	movhi	r3,258
 101daa0:	18f6ac04 	addi	r3,r3,-9552
 101daa4:	10c5883a 	add	r2,r2,r3
 101daa8:	11000017 	ldw	r4,0(r2)
 101daac:	2000683a 	jmp	r4
 101dab0:	0101e318 	cmpnei	r4,zero,1932
 101dab4:	0101dc14 	movui	r4,1904
 101dab8:	0101dc14 	movui	r4,1904
 101dabc:	0101e3c0 	call	101e3c <__alt_mem_onchip+0x101e3c>
 101dac0:	0101dc14 	movui	r4,1904
 101dac4:	0101dc14 	movui	r4,1904
 101dac8:	0101dc14 	movui	r4,1904
 101dacc:	0101dc14 	movui	r4,1904
 101dad0:	0101dc14 	movui	r4,1904
 101dad4:	0101dc14 	movui	r4,1904
 101dad8:	0101e2a0 	cmpeqi	r4,zero,1930
 101dadc:	0101e3d4 	movui	r4,1935
 101dae0:	0101dc14 	movui	r4,1904
 101dae4:	0101e2b8 	rdprs	r4,zero,1930
 101dae8:	0101e370 	cmpltui	r4,zero,1933
 101daec:	0101dc14 	movui	r4,1904
 101daf0:	0101e35c 	xori	r4,zero,1933
 101daf4:	0101e330 	cmpltui	r4,zero,1932
 101daf8:	0101e330 	cmpltui	r4,zero,1932
 101dafc:	0101e330 	cmpltui	r4,zero,1932
 101db00:	0101e330 	cmpltui	r4,zero,1932
 101db04:	0101e330 	cmpltui	r4,zero,1932
 101db08:	0101e330 	cmpltui	r4,zero,1932
 101db0c:	0101e330 	cmpltui	r4,zero,1932
 101db10:	0101e330 	cmpltui	r4,zero,1932
 101db14:	0101e330 	cmpltui	r4,zero,1932
 101db18:	0101dc14 	movui	r4,1904
 101db1c:	0101dc14 	movui	r4,1904
 101db20:	0101dc14 	movui	r4,1904
 101db24:	0101dc14 	movui	r4,1904
 101db28:	0101dc14 	movui	r4,1904
 101db2c:	0101dc14 	movui	r4,1904
 101db30:	0101dc14 	movui	r4,1904
 101db34:	0101dc14 	movui	r4,1904
 101db38:	0101dc14 	movui	r4,1904
 101db3c:	0101dc14 	movui	r4,1904
 101db40:	0101e07c 	xorhi	r4,zero,1921
 101db44:	0101dc14 	movui	r4,1904
 101db48:	0101dc14 	movui	r4,1904
 101db4c:	0101dc14 	movui	r4,1904
 101db50:	0101dc14 	movui	r4,1904
 101db54:	0101dc14 	movui	r4,1904
 101db58:	0101dc14 	movui	r4,1904
 101db5c:	0101dc14 	movui	r4,1904
 101db60:	0101dc14 	movui	r4,1904
 101db64:	0101dc14 	movui	r4,1904
 101db68:	0101dc14 	movui	r4,1904
 101db6c:	0101e130 	cmpltui	r4,zero,1924
 101db70:	0101dc14 	movui	r4,1904
 101db74:	0101dc14 	movui	r4,1904
 101db78:	0101dc14 	movui	r4,1904
 101db7c:	0101dc14 	movui	r4,1904
 101db80:	0101dc14 	movui	r4,1904
 101db84:	0101e17c 	xorhi	r4,zero,1925
 101db88:	0101dc14 	movui	r4,1904
 101db8c:	0101dc14 	movui	r4,1904
 101db90:	0101e46c 	andhi	r4,zero,1937
 101db94:	0101dc14 	movui	r4,1904
 101db98:	0101dc14 	movui	r4,1904
 101db9c:	0101dc14 	movui	r4,1904
 101dba0:	0101dc14 	movui	r4,1904
 101dba4:	0101dc14 	movui	r4,1904
 101dba8:	0101dc14 	movui	r4,1904
 101dbac:	0101dc14 	movui	r4,1904
 101dbb0:	0101dc14 	movui	r4,1904
 101dbb4:	0101dc14 	movui	r4,1904
 101dbb8:	0101dc14 	movui	r4,1904
 101dbbc:	0101e444 	movi	r4,1937
 101dbc0:	0101e088 	cmpgei	r4,zero,1922
 101dbc4:	0101dc14 	movui	r4,1904
 101dbc8:	0101dc14 	movui	r4,1904
 101dbcc:	0101dc14 	movui	r4,1904
 101dbd0:	0101e550 	cmplti	r4,zero,1941
 101dbd4:	0101e088 	cmpgei	r4,zero,1922
 101dbd8:	0101dc14 	movui	r4,1904
 101dbdc:	0101dc14 	movui	r4,1904
 101dbe0:	0101e4a4 	muli	r4,zero,1938
 101dbe4:	0101dc14 	movui	r4,1904
 101dbe8:	0101e47c 	xorhi	r4,zero,1937
 101dbec:	0101e13c 	xorhi	r4,zero,1924
 101dbf0:	0101e50c 	andi	r4,zero,1940
 101dbf4:	0101e564 	muli	r4,zero,1941
 101dbf8:	0101dc14 	movui	r4,1904
 101dbfc:	0101e4c0 	call	101e4c <__alt_mem_onchip+0x101e4c>
 101dc00:	0101dc14 	movui	r4,1904
 101dc04:	0101e188 	cmpgei	r4,zero,1926
 101dc08:	0101dc14 	movui	r4,1904
 101dc0c:	0101dc14 	movui	r4,1904
 101dc10:	0101e3e4 	muli	r4,zero,1935
 101dc14:	2800c226 	beq	r5,zero,101df20 <___vfiprintf_internal_r+0x670>
 101dc18:	07000044 	movi	fp,1
 101dc1c:	d9000404 	addi	r4,sp,16
 101dc20:	d9c13515 	stw	r7,1236(sp)
 101dc24:	d9013c15 	stw	r4,1264(sp)
 101dc28:	df013715 	stw	fp,1244(sp)
 101dc2c:	d9400405 	stb	r5,16(sp)
 101dc30:	d8000005 	stb	zero,0(sp)
 101dc34:	d8013815 	stw	zero,1248(sp)
 101dc38:	d9813b17 	ldw	r6,1260(sp)
 101dc3c:	3080008c 	andi	r2,r6,2
 101dc40:	1005003a 	cmpeq	r2,r2,zero
 101dc44:	d8813e15 	stw	r2,1272(sp)
 101dc48:	1000011e 	bne	r2,zero,101dc50 <___vfiprintf_internal_r+0x3a0>
 101dc4c:	e7000084 	addi	fp,fp,2
 101dc50:	d8813b17 	ldw	r2,1260(sp)
 101dc54:	1080210c 	andi	r2,r2,132
 101dc58:	d8813d15 	stw	r2,1268(sp)
 101dc5c:	10002a1e 	bne	r2,zero,101dd08 <___vfiprintf_internal_r+0x458>
 101dc60:	d8c13917 	ldw	r3,1252(sp)
 101dc64:	1f21c83a 	sub	r16,r3,fp
 101dc68:	0400270e 	bge	zero,r16,101dd08 <___vfiprintf_internal_r+0x458>
 101dc6c:	00800404 	movi	r2,16
 101dc70:	1402c80e 	bge	r2,r16,101e794 <___vfiprintf_internal_r+0xee4>
 101dc74:	d9400317 	ldw	r5,12(sp)
 101dc78:	d9000217 	ldw	r4,8(sp)
 101dc7c:	1023883a 	mov	r17,r2
 101dc80:	05c040b4 	movhi	r23,258
 101dc84:	bdff2304 	addi	r23,r23,-884
 101dc88:	04c001c4 	movi	r19,7
 101dc8c:	00000306 	br	101dc9c <___vfiprintf_internal_r+0x3ec>
 101dc90:	843ffc04 	addi	r16,r16,-16
 101dc94:	94800204 	addi	r18,r18,8
 101dc98:	8c00110e 	bge	r17,r16,101dce0 <___vfiprintf_internal_r+0x430>
 101dc9c:	29400404 	addi	r5,r5,16
 101dca0:	21000044 	addi	r4,r4,1
 101dca4:	95c00015 	stw	r23,0(r18)
 101dca8:	94400115 	stw	r17,4(r18)
 101dcac:	d9400315 	stw	r5,12(sp)
 101dcb0:	d9000215 	stw	r4,8(sp)
 101dcb4:	993ff60e 	bge	r19,r4,101dc90 <___vfiprintf_internal_r+0x3e0>
 101dcb8:	b009883a 	mov	r4,r22
 101dcbc:	a80b883a 	mov	r5,r21
 101dcc0:	d9800104 	addi	r6,sp,4
 101dcc4:	101d8580 	call	101d858 <__sprint_r>
 101dcc8:	1000981e 	bne	r2,zero,101df2c <___vfiprintf_internal_r+0x67c>
 101dccc:	843ffc04 	addi	r16,r16,-16
 101dcd0:	d9400317 	ldw	r5,12(sp)
 101dcd4:	d9000217 	ldw	r4,8(sp)
 101dcd8:	dc800e04 	addi	r18,sp,56
 101dcdc:	8c3fef16 	blt	r17,r16,101dc9c <___vfiprintf_internal_r+0x3ec>
 101dce0:	2c0b883a 	add	r5,r5,r16
 101dce4:	21000044 	addi	r4,r4,1
 101dce8:	008001c4 	movi	r2,7
 101dcec:	95c00015 	stw	r23,0(r18)
 101dcf0:	94000115 	stw	r16,4(r18)
 101dcf4:	d9400315 	stw	r5,12(sp)
 101dcf8:	d9000215 	stw	r4,8(sp)
 101dcfc:	11015616 	blt	r2,r4,101e258 <___vfiprintf_internal_r+0x9a8>
 101dd00:	94800204 	addi	r18,r18,8
 101dd04:	00000206 	br	101dd10 <___vfiprintf_internal_r+0x460>
 101dd08:	d9400317 	ldw	r5,12(sp)
 101dd0c:	d9000217 	ldw	r4,8(sp)
 101dd10:	d8800007 	ldb	r2,0(sp)
 101dd14:	10000a26 	beq	r2,zero,101dd40 <___vfiprintf_internal_r+0x490>
 101dd18:	00800044 	movi	r2,1
 101dd1c:	29400044 	addi	r5,r5,1
 101dd20:	21000044 	addi	r4,r4,1
 101dd24:	90800115 	stw	r2,4(r18)
 101dd28:	008001c4 	movi	r2,7
 101dd2c:	96c00015 	stw	sp,0(r18)
 101dd30:	d9400315 	stw	r5,12(sp)
 101dd34:	d9000215 	stw	r4,8(sp)
 101dd38:	11013516 	blt	r2,r4,101e210 <___vfiprintf_internal_r+0x960>
 101dd3c:	94800204 	addi	r18,r18,8
 101dd40:	d9813e17 	ldw	r6,1272(sp)
 101dd44:	30000b1e 	bne	r6,zero,101dd74 <___vfiprintf_internal_r+0x4c4>
 101dd48:	d8800044 	addi	r2,sp,1
 101dd4c:	29400084 	addi	r5,r5,2
 101dd50:	21000044 	addi	r4,r4,1
 101dd54:	90800015 	stw	r2,0(r18)
 101dd58:	00c00084 	movi	r3,2
 101dd5c:	008001c4 	movi	r2,7
 101dd60:	90c00115 	stw	r3,4(r18)
 101dd64:	d9400315 	stw	r5,12(sp)
 101dd68:	d9000215 	stw	r4,8(sp)
 101dd6c:	11013116 	blt	r2,r4,101e234 <___vfiprintf_internal_r+0x984>
 101dd70:	94800204 	addi	r18,r18,8
 101dd74:	d8c13d17 	ldw	r3,1268(sp)
 101dd78:	00802004 	movi	r2,128
 101dd7c:	18807126 	beq	r3,r2,101df44 <___vfiprintf_internal_r+0x694>
 101dd80:	d8813817 	ldw	r2,1248(sp)
 101dd84:	d8c13717 	ldw	r3,1244(sp)
 101dd88:	10e1c83a 	sub	r16,r2,r3
 101dd8c:	0400240e 	bge	zero,r16,101de20 <___vfiprintf_internal_r+0x570>
 101dd90:	00800404 	movi	r2,16
 101dd94:	1402510e 	bge	r2,r16,101e6dc <___vfiprintf_internal_r+0xe2c>
 101dd98:	1023883a 	mov	r17,r2
 101dd9c:	05c040b4 	movhi	r23,258
 101dda0:	bdff1f04 	addi	r23,r23,-900
 101dda4:	04c001c4 	movi	r19,7
 101dda8:	00000306 	br	101ddb8 <___vfiprintf_internal_r+0x508>
 101ddac:	843ffc04 	addi	r16,r16,-16
 101ddb0:	94800204 	addi	r18,r18,8
 101ddb4:	8c00110e 	bge	r17,r16,101ddfc <___vfiprintf_internal_r+0x54c>
 101ddb8:	29400404 	addi	r5,r5,16
 101ddbc:	21000044 	addi	r4,r4,1
 101ddc0:	95c00015 	stw	r23,0(r18)
 101ddc4:	94400115 	stw	r17,4(r18)
 101ddc8:	d9400315 	stw	r5,12(sp)
 101ddcc:	d9000215 	stw	r4,8(sp)
 101ddd0:	993ff60e 	bge	r19,r4,101ddac <___vfiprintf_internal_r+0x4fc>
 101ddd4:	b009883a 	mov	r4,r22
 101ddd8:	a80b883a 	mov	r5,r21
 101dddc:	d9800104 	addi	r6,sp,4
 101dde0:	101d8580 	call	101d858 <__sprint_r>
 101dde4:	1000511e 	bne	r2,zero,101df2c <___vfiprintf_internal_r+0x67c>
 101dde8:	843ffc04 	addi	r16,r16,-16
 101ddec:	d9400317 	ldw	r5,12(sp)
 101ddf0:	d9000217 	ldw	r4,8(sp)
 101ddf4:	dc800e04 	addi	r18,sp,56
 101ddf8:	8c3fef16 	blt	r17,r16,101ddb8 <___vfiprintf_internal_r+0x508>
 101ddfc:	2c0b883a 	add	r5,r5,r16
 101de00:	21000044 	addi	r4,r4,1
 101de04:	008001c4 	movi	r2,7
 101de08:	95c00015 	stw	r23,0(r18)
 101de0c:	94000115 	stw	r16,4(r18)
 101de10:	d9400315 	stw	r5,12(sp)
 101de14:	d9000215 	stw	r4,8(sp)
 101de18:	1100eb16 	blt	r2,r4,101e1c8 <___vfiprintf_internal_r+0x918>
 101de1c:	94800204 	addi	r18,r18,8
 101de20:	d9813717 	ldw	r6,1244(sp)
 101de24:	d8813c17 	ldw	r2,1264(sp)
 101de28:	21000044 	addi	r4,r4,1
 101de2c:	298b883a 	add	r5,r5,r6
 101de30:	90800015 	stw	r2,0(r18)
 101de34:	008001c4 	movi	r2,7
 101de38:	91800115 	stw	r6,4(r18)
 101de3c:	d9400315 	stw	r5,12(sp)
 101de40:	d9000215 	stw	r4,8(sp)
 101de44:	11006b16 	blt	r2,r4,101dff4 <___vfiprintf_internal_r+0x744>
 101de48:	90c00204 	addi	r3,r18,8
 101de4c:	d9013b17 	ldw	r4,1260(sp)
 101de50:	2080010c 	andi	r2,r4,4
 101de54:	10002726 	beq	r2,zero,101def4 <___vfiprintf_internal_r+0x644>
 101de58:	d9813917 	ldw	r6,1252(sp)
 101de5c:	3721c83a 	sub	r16,r6,fp
 101de60:	0400240e 	bge	zero,r16,101def4 <___vfiprintf_internal_r+0x644>
 101de64:	00800404 	movi	r2,16
 101de68:	1402720e 	bge	r2,r16,101e834 <___vfiprintf_internal_r+0xf84>
 101de6c:	d9000217 	ldw	r4,8(sp)
 101de70:	1023883a 	mov	r17,r2
 101de74:	05c040b4 	movhi	r23,258
 101de78:	bdff2304 	addi	r23,r23,-884
 101de7c:	048001c4 	movi	r18,7
 101de80:	00000306 	br	101de90 <___vfiprintf_internal_r+0x5e0>
 101de84:	843ffc04 	addi	r16,r16,-16
 101de88:	18c00204 	addi	r3,r3,8
 101de8c:	8c00110e 	bge	r17,r16,101ded4 <___vfiprintf_internal_r+0x624>
 101de90:	29400404 	addi	r5,r5,16
 101de94:	21000044 	addi	r4,r4,1
 101de98:	1dc00015 	stw	r23,0(r3)
 101de9c:	1c400115 	stw	r17,4(r3)
 101dea0:	d9400315 	stw	r5,12(sp)
 101dea4:	d9000215 	stw	r4,8(sp)
 101dea8:	913ff60e 	bge	r18,r4,101de84 <___vfiprintf_internal_r+0x5d4>
 101deac:	b009883a 	mov	r4,r22
 101deb0:	a80b883a 	mov	r5,r21
 101deb4:	d9800104 	addi	r6,sp,4
 101deb8:	101d8580 	call	101d858 <__sprint_r>
 101debc:	10001b1e 	bne	r2,zero,101df2c <___vfiprintf_internal_r+0x67c>
 101dec0:	843ffc04 	addi	r16,r16,-16
 101dec4:	d9400317 	ldw	r5,12(sp)
 101dec8:	d9000217 	ldw	r4,8(sp)
 101decc:	d8c00e04 	addi	r3,sp,56
 101ded0:	8c3fef16 	blt	r17,r16,101de90 <___vfiprintf_internal_r+0x5e0>
 101ded4:	2c0b883a 	add	r5,r5,r16
 101ded8:	21000044 	addi	r4,r4,1
 101dedc:	008001c4 	movi	r2,7
 101dee0:	1dc00015 	stw	r23,0(r3)
 101dee4:	1c000115 	stw	r16,4(r3)
 101dee8:	d9400315 	stw	r5,12(sp)
 101deec:	d9000215 	stw	r4,8(sp)
 101def0:	11005b16 	blt	r2,r4,101e060 <___vfiprintf_internal_r+0x7b0>
 101def4:	d8813917 	ldw	r2,1252(sp)
 101def8:	1700010e 	bge	r2,fp,101df00 <___vfiprintf_internal_r+0x650>
 101defc:	e005883a 	mov	r2,fp
 101df00:	d8c13a17 	ldw	r3,1256(sp)
 101df04:	1887883a 	add	r3,r3,r2
 101df08:	d8c13a15 	stw	r3,1256(sp)
 101df0c:	2800411e 	bne	r5,zero,101e014 <___vfiprintf_internal_r+0x764>
 101df10:	d9c13517 	ldw	r7,1236(sp)
 101df14:	dc800e04 	addi	r18,sp,56
 101df18:	d8000215 	stw	zero,8(sp)
 101df1c:	003eb506 	br	101d9f4 <___vfiprintf_internal_r+0x144>
 101df20:	d8800317 	ldw	r2,12(sp)
 101df24:	1002521e 	bne	r2,zero,101e870 <___vfiprintf_internal_r+0xfc0>
 101df28:	d8000215 	stw	zero,8(sp)
 101df2c:	a880030b 	ldhu	r2,12(r21)
 101df30:	1080100c 	andi	r2,r2,64
 101df34:	103e9a26 	beq	r2,zero,101d9a0 <___vfiprintf_internal_r+0xf0>
 101df38:	013fffc4 	movi	r4,-1
 101df3c:	d9013a15 	stw	r4,1256(sp)
 101df40:	003e9706 	br	101d9a0 <___vfiprintf_internal_r+0xf0>
 101df44:	d9813917 	ldw	r6,1252(sp)
 101df48:	3721c83a 	sub	r16,r6,fp
 101df4c:	043f8c0e 	bge	zero,r16,101dd80 <___vfiprintf_internal_r+0x4d0>
 101df50:	00800404 	movi	r2,16
 101df54:	14024c0e 	bge	r2,r16,101e888 <___vfiprintf_internal_r+0xfd8>
 101df58:	1023883a 	mov	r17,r2
 101df5c:	05c040b4 	movhi	r23,258
 101df60:	bdff1f04 	addi	r23,r23,-900
 101df64:	04c001c4 	movi	r19,7
 101df68:	00000306 	br	101df78 <___vfiprintf_internal_r+0x6c8>
 101df6c:	843ffc04 	addi	r16,r16,-16
 101df70:	94800204 	addi	r18,r18,8
 101df74:	8c00110e 	bge	r17,r16,101dfbc <___vfiprintf_internal_r+0x70c>
 101df78:	29400404 	addi	r5,r5,16
 101df7c:	21000044 	addi	r4,r4,1
 101df80:	95c00015 	stw	r23,0(r18)
 101df84:	94400115 	stw	r17,4(r18)
 101df88:	d9400315 	stw	r5,12(sp)
 101df8c:	d9000215 	stw	r4,8(sp)
 101df90:	993ff60e 	bge	r19,r4,101df6c <___vfiprintf_internal_r+0x6bc>
 101df94:	b009883a 	mov	r4,r22
 101df98:	a80b883a 	mov	r5,r21
 101df9c:	d9800104 	addi	r6,sp,4
 101dfa0:	101d8580 	call	101d858 <__sprint_r>
 101dfa4:	103fe11e 	bne	r2,zero,101df2c <___vfiprintf_internal_r+0x67c>
 101dfa8:	843ffc04 	addi	r16,r16,-16
 101dfac:	d9400317 	ldw	r5,12(sp)
 101dfb0:	d9000217 	ldw	r4,8(sp)
 101dfb4:	dc800e04 	addi	r18,sp,56
 101dfb8:	8c3fef16 	blt	r17,r16,101df78 <___vfiprintf_internal_r+0x6c8>
 101dfbc:	2c0b883a 	add	r5,r5,r16
 101dfc0:	21000044 	addi	r4,r4,1
 101dfc4:	008001c4 	movi	r2,7
 101dfc8:	95c00015 	stw	r23,0(r18)
 101dfcc:	94000115 	stw	r16,4(r18)
 101dfd0:	d9400315 	stw	r5,12(sp)
 101dfd4:	d9000215 	stw	r4,8(sp)
 101dfd8:	1100a816 	blt	r2,r4,101e27c <___vfiprintf_internal_r+0x9cc>
 101dfdc:	94800204 	addi	r18,r18,8
 101dfe0:	003f6706 	br	101dd80 <___vfiprintf_internal_r+0x4d0>
 101dfe4:	d9c13f15 	stw	r7,1276(sp)
 101dfe8:	100bbac0 	call	100bbac <__sinit>
 101dfec:	d9c13f17 	ldw	r7,1276(sp)
 101dff0:	003e4006 	br	101d8f4 <___vfiprintf_internal_r+0x44>
 101dff4:	b009883a 	mov	r4,r22
 101dff8:	a80b883a 	mov	r5,r21
 101dffc:	d9800104 	addi	r6,sp,4
 101e000:	101d8580 	call	101d858 <__sprint_r>
 101e004:	103fc91e 	bne	r2,zero,101df2c <___vfiprintf_internal_r+0x67c>
 101e008:	d9400317 	ldw	r5,12(sp)
 101e00c:	d8c00e04 	addi	r3,sp,56
 101e010:	003f8e06 	br	101de4c <___vfiprintf_internal_r+0x59c>
 101e014:	b009883a 	mov	r4,r22
 101e018:	a80b883a 	mov	r5,r21
 101e01c:	d9800104 	addi	r6,sp,4
 101e020:	101d8580 	call	101d858 <__sprint_r>
 101e024:	103fba26 	beq	r2,zero,101df10 <___vfiprintf_internal_r+0x660>
 101e028:	003fc006 	br	101df2c <___vfiprintf_internal_r+0x67c>
 101e02c:	b009883a 	mov	r4,r22
 101e030:	a80b883a 	mov	r5,r21
 101e034:	d9c13f15 	stw	r7,1276(sp)
 101e038:	100a00c0 	call	100a00c <__swsetup_r>
 101e03c:	d9c13f17 	ldw	r7,1276(sp)
 101e040:	103e3126 	beq	r2,zero,101d908 <___vfiprintf_internal_r+0x58>
 101e044:	003fbc06 	br	101df38 <___vfiprintf_internal_r+0x688>
 101e048:	00bfffc4 	movi	r2,-1
 101e04c:	d8813a15 	stw	r2,1256(sp)
 101e050:	d880210b 	ldhu	r2,132(sp)
 101e054:	1080100c 	andi	r2,r2,64
 101e058:	103e4e1e 	bne	r2,zero,101d994 <___vfiprintf_internal_r+0xe4>
 101e05c:	003e5006 	br	101d9a0 <___vfiprintf_internal_r+0xf0>
 101e060:	b009883a 	mov	r4,r22
 101e064:	a80b883a 	mov	r5,r21
 101e068:	d9800104 	addi	r6,sp,4
 101e06c:	101d8580 	call	101d858 <__sprint_r>
 101e070:	103fae1e 	bne	r2,zero,101df2c <___vfiprintf_internal_r+0x67c>
 101e074:	d9400317 	ldw	r5,12(sp)
 101e078:	003f9e06 	br	101def4 <___vfiprintf_internal_r+0x644>
 101e07c:	d8813b17 	ldw	r2,1260(sp)
 101e080:	10800414 	ori	r2,r2,16
 101e084:	d8813b15 	stw	r2,1260(sp)
 101e088:	d8c13b17 	ldw	r3,1260(sp)
 101e08c:	1880080c 	andi	r2,r3,32
 101e090:	10009c1e 	bne	r2,zero,101e304 <___vfiprintf_internal_r+0xa54>
 101e094:	d9413b17 	ldw	r5,1260(sp)
 101e098:	2880040c 	andi	r2,r5,16
 101e09c:	1001b21e 	bne	r2,zero,101e768 <___vfiprintf_internal_r+0xeb8>
 101e0a0:	d9813b17 	ldw	r6,1260(sp)
 101e0a4:	3080100c 	andi	r2,r6,64
 101e0a8:	1001af26 	beq	r2,zero,101e768 <___vfiprintf_internal_r+0xeb8>
 101e0ac:	3880000f 	ldh	r2,0(r7)
 101e0b0:	39c00104 	addi	r7,r7,4
 101e0b4:	d9c13515 	stw	r7,1236(sp)
 101e0b8:	1023d7fa 	srai	r17,r2,31
 101e0bc:	1021883a 	mov	r16,r2
 101e0c0:	8801e016 	blt	r17,zero,101e844 <___vfiprintf_internal_r+0xf94>
 101e0c4:	01000044 	movi	r4,1
 101e0c8:	b8000416 	blt	r23,zero,101e0dc <___vfiprintf_internal_r+0x82c>
 101e0cc:	d9413b17 	ldw	r5,1260(sp)
 101e0d0:	00bfdfc4 	movi	r2,-129
 101e0d4:	288a703a 	and	r5,r5,r2
 101e0d8:	d9413b15 	stw	r5,1260(sp)
 101e0dc:	8444b03a 	or	r2,r16,r17
 101e0e0:	1001271e 	bne	r2,zero,101e580 <___vfiprintf_internal_r+0xcd0>
 101e0e4:	b801261e 	bne	r23,zero,101e580 <___vfiprintf_internal_r+0xcd0>
 101e0e8:	20803fcc 	andi	r2,r4,255
 101e0ec:	10017e26 	beq	r2,zero,101e6e8 <___vfiprintf_internal_r+0xe38>
 101e0f0:	d8c00e04 	addi	r3,sp,56
 101e0f4:	df000404 	addi	fp,sp,16
 101e0f8:	d8c13c15 	stw	r3,1264(sp)
 101e0fc:	d8c13c17 	ldw	r3,1264(sp)
 101e100:	ddc13815 	stw	r23,1248(sp)
 101e104:	e0c5c83a 	sub	r2,fp,r3
 101e108:	10800a04 	addi	r2,r2,40
 101e10c:	d8813715 	stw	r2,1244(sp)
 101e110:	df013817 	ldw	fp,1248(sp)
 101e114:	d9413717 	ldw	r5,1244(sp)
 101e118:	e140010e 	bge	fp,r5,101e120 <___vfiprintf_internal_r+0x870>
 101e11c:	2839883a 	mov	fp,r5
 101e120:	d8800007 	ldb	r2,0(sp)
 101e124:	103ec426 	beq	r2,zero,101dc38 <___vfiprintf_internal_r+0x388>
 101e128:	e7000044 	addi	fp,fp,1
 101e12c:	003ec206 	br	101dc38 <___vfiprintf_internal_r+0x388>
 101e130:	d9813b17 	ldw	r6,1260(sp)
 101e134:	31800414 	ori	r6,r6,16
 101e138:	d9813b15 	stw	r6,1260(sp)
 101e13c:	d8c13b17 	ldw	r3,1260(sp)
 101e140:	1880080c 	andi	r2,r3,32
 101e144:	1000681e 	bne	r2,zero,101e2e8 <___vfiprintf_internal_r+0xa38>
 101e148:	d9413b17 	ldw	r5,1260(sp)
 101e14c:	2880040c 	andi	r2,r5,16
 101e150:	1001771e 	bne	r2,zero,101e730 <___vfiprintf_internal_r+0xe80>
 101e154:	d9813b17 	ldw	r6,1260(sp)
 101e158:	3080100c 	andi	r2,r6,64
 101e15c:	10017426 	beq	r2,zero,101e730 <___vfiprintf_internal_r+0xe80>
 101e160:	3c00000b 	ldhu	r16,0(r7)
 101e164:	0009883a 	mov	r4,zero
 101e168:	39c00104 	addi	r7,r7,4
 101e16c:	0023883a 	mov	r17,zero
 101e170:	d9c13515 	stw	r7,1236(sp)
 101e174:	d8000005 	stb	zero,0(sp)
 101e178:	003fd306 	br	101e0c8 <___vfiprintf_internal_r+0x818>
 101e17c:	d8813b17 	ldw	r2,1260(sp)
 101e180:	10800414 	ori	r2,r2,16
 101e184:	d8813b15 	stw	r2,1260(sp)
 101e188:	d8c13b17 	ldw	r3,1260(sp)
 101e18c:	1880080c 	andi	r2,r3,32
 101e190:	10004e1e 	bne	r2,zero,101e2cc <___vfiprintf_internal_r+0xa1c>
 101e194:	d9413b17 	ldw	r5,1260(sp)
 101e198:	2880040c 	andi	r2,r5,16
 101e19c:	10016b1e 	bne	r2,zero,101e74c <___vfiprintf_internal_r+0xe9c>
 101e1a0:	d9813b17 	ldw	r6,1260(sp)
 101e1a4:	3080100c 	andi	r2,r6,64
 101e1a8:	10016826 	beq	r2,zero,101e74c <___vfiprintf_internal_r+0xe9c>
 101e1ac:	3c00000b 	ldhu	r16,0(r7)
 101e1b0:	01000044 	movi	r4,1
 101e1b4:	39c00104 	addi	r7,r7,4
 101e1b8:	0023883a 	mov	r17,zero
 101e1bc:	d9c13515 	stw	r7,1236(sp)
 101e1c0:	d8000005 	stb	zero,0(sp)
 101e1c4:	003fc006 	br	101e0c8 <___vfiprintf_internal_r+0x818>
 101e1c8:	b009883a 	mov	r4,r22
 101e1cc:	a80b883a 	mov	r5,r21
 101e1d0:	d9800104 	addi	r6,sp,4
 101e1d4:	101d8580 	call	101d858 <__sprint_r>
 101e1d8:	103f541e 	bne	r2,zero,101df2c <___vfiprintf_internal_r+0x67c>
 101e1dc:	d9400317 	ldw	r5,12(sp)
 101e1e0:	d9000217 	ldw	r4,8(sp)
 101e1e4:	dc800e04 	addi	r18,sp,56
 101e1e8:	003f0d06 	br	101de20 <___vfiprintf_internal_r+0x570>
 101e1ec:	b009883a 	mov	r4,r22
 101e1f0:	a80b883a 	mov	r5,r21
 101e1f4:	d9800104 	addi	r6,sp,4
 101e1f8:	d9c13f15 	stw	r7,1276(sp)
 101e1fc:	101d8580 	call	101d858 <__sprint_r>
 101e200:	d9c13f17 	ldw	r7,1276(sp)
 101e204:	103f491e 	bne	r2,zero,101df2c <___vfiprintf_internal_r+0x67c>
 101e208:	dc800e04 	addi	r18,sp,56
 101e20c:	003e1006 	br	101da50 <___vfiprintf_internal_r+0x1a0>
 101e210:	b009883a 	mov	r4,r22
 101e214:	a80b883a 	mov	r5,r21
 101e218:	d9800104 	addi	r6,sp,4
 101e21c:	101d8580 	call	101d858 <__sprint_r>
 101e220:	103f421e 	bne	r2,zero,101df2c <___vfiprintf_internal_r+0x67c>
 101e224:	d9400317 	ldw	r5,12(sp)
 101e228:	d9000217 	ldw	r4,8(sp)
 101e22c:	dc800e04 	addi	r18,sp,56
 101e230:	003ec306 	br	101dd40 <___vfiprintf_internal_r+0x490>
 101e234:	b009883a 	mov	r4,r22
 101e238:	a80b883a 	mov	r5,r21
 101e23c:	d9800104 	addi	r6,sp,4
 101e240:	101d8580 	call	101d858 <__sprint_r>
 101e244:	103f391e 	bne	r2,zero,101df2c <___vfiprintf_internal_r+0x67c>
 101e248:	d9400317 	ldw	r5,12(sp)
 101e24c:	d9000217 	ldw	r4,8(sp)
 101e250:	dc800e04 	addi	r18,sp,56
 101e254:	003ec706 	br	101dd74 <___vfiprintf_internal_r+0x4c4>
 101e258:	b009883a 	mov	r4,r22
 101e25c:	a80b883a 	mov	r5,r21
 101e260:	d9800104 	addi	r6,sp,4
 101e264:	101d8580 	call	101d858 <__sprint_r>
 101e268:	103f301e 	bne	r2,zero,101df2c <___vfiprintf_internal_r+0x67c>
 101e26c:	d9400317 	ldw	r5,12(sp)
 101e270:	d9000217 	ldw	r4,8(sp)
 101e274:	dc800e04 	addi	r18,sp,56
 101e278:	003ea506 	br	101dd10 <___vfiprintf_internal_r+0x460>
 101e27c:	b009883a 	mov	r4,r22
 101e280:	a80b883a 	mov	r5,r21
 101e284:	d9800104 	addi	r6,sp,4
 101e288:	101d8580 	call	101d858 <__sprint_r>
 101e28c:	103f271e 	bne	r2,zero,101df2c <___vfiprintf_internal_r+0x67c>
 101e290:	d9400317 	ldw	r5,12(sp)
 101e294:	d9000217 	ldw	r4,8(sp)
 101e298:	dc800e04 	addi	r18,sp,56
 101e29c:	003eb806 	br	101dd80 <___vfiprintf_internal_r+0x4d0>
 101e2a0:	38c00017 	ldw	r3,0(r7)
 101e2a4:	39c00104 	addi	r7,r7,4
 101e2a8:	d8c13915 	stw	r3,1252(sp)
 101e2ac:	1800b20e 	bge	r3,zero,101e578 <___vfiprintf_internal_r+0xcc8>
 101e2b0:	00c7c83a 	sub	r3,zero,r3
 101e2b4:	d8c13915 	stw	r3,1252(sp)
 101e2b8:	d9013b17 	ldw	r4,1260(sp)
 101e2bc:	a0c00007 	ldb	r3,0(r20)
 101e2c0:	21000114 	ori	r4,r4,4
 101e2c4:	d9013b15 	stw	r4,1260(sp)
 101e2c8:	003ded06 	br	101da80 <___vfiprintf_internal_r+0x1d0>
 101e2cc:	3c000017 	ldw	r16,0(r7)
 101e2d0:	3c400117 	ldw	r17,4(r7)
 101e2d4:	39000204 	addi	r4,r7,8
 101e2d8:	d9013515 	stw	r4,1236(sp)
 101e2dc:	01000044 	movi	r4,1
 101e2e0:	d8000005 	stb	zero,0(sp)
 101e2e4:	003f7806 	br	101e0c8 <___vfiprintf_internal_r+0x818>
 101e2e8:	3c000017 	ldw	r16,0(r7)
 101e2ec:	3c400117 	ldw	r17,4(r7)
 101e2f0:	39000204 	addi	r4,r7,8
 101e2f4:	d9013515 	stw	r4,1236(sp)
 101e2f8:	0009883a 	mov	r4,zero
 101e2fc:	d8000005 	stb	zero,0(sp)
 101e300:	003f7106 	br	101e0c8 <___vfiprintf_internal_r+0x818>
 101e304:	3c000017 	ldw	r16,0(r7)
 101e308:	3c400117 	ldw	r17,4(r7)
 101e30c:	39000204 	addi	r4,r7,8
 101e310:	d9013515 	stw	r4,1236(sp)
 101e314:	003f6a06 	br	101e0c0 <___vfiprintf_internal_r+0x810>
 101e318:	d8800007 	ldb	r2,0(sp)
 101e31c:	1000961e 	bne	r2,zero,101e578 <___vfiprintf_internal_r+0xcc8>
 101e320:	00800804 	movi	r2,32
 101e324:	d8800005 	stb	r2,0(sp)
 101e328:	a0c00007 	ldb	r3,0(r20)
 101e32c:	003dd406 	br	101da80 <___vfiprintf_internal_r+0x1d0>
 101e330:	0007883a 	mov	r3,zero
 101e334:	01000244 	movi	r4,9
 101e338:	188002a4 	muli	r2,r3,10
 101e33c:	2885883a 	add	r2,r5,r2
 101e340:	a1400007 	ldb	r5,0(r20)
 101e344:	10fff404 	addi	r3,r2,-48
 101e348:	a5000044 	addi	r20,r20,1
 101e34c:	28bff404 	addi	r2,r5,-48
 101e350:	20bff92e 	bgeu	r4,r2,101e338 <___vfiprintf_internal_r+0xa88>
 101e354:	d8c13915 	stw	r3,1252(sp)
 101e358:	003dcb06 	br	101da88 <___vfiprintf_internal_r+0x1d8>
 101e35c:	d9413b17 	ldw	r5,1260(sp)
 101e360:	a0c00007 	ldb	r3,0(r20)
 101e364:	29402014 	ori	r5,r5,128
 101e368:	d9413b15 	stw	r5,1260(sp)
 101e36c:	003dc406 	br	101da80 <___vfiprintf_internal_r+0x1d0>
 101e370:	a0c00007 	ldb	r3,0(r20)
 101e374:	00800a84 	movi	r2,42
 101e378:	a5000044 	addi	r20,r20,1
 101e37c:	18816f26 	beq	r3,r2,101e93c <___vfiprintf_internal_r+0x108c>
 101e380:	180b883a 	mov	r5,r3
 101e384:	18bff404 	addi	r2,r3,-48
 101e388:	00c00244 	movi	r3,9
 101e38c:	18816936 	bltu	r3,r2,101e934 <___vfiprintf_internal_r+0x1084>
 101e390:	000d883a 	mov	r6,zero
 101e394:	308002a4 	muli	r2,r6,10
 101e398:	1145883a 	add	r2,r2,r5
 101e39c:	a1400007 	ldb	r5,0(r20)
 101e3a0:	11bff404 	addi	r6,r2,-48
 101e3a4:	a5000044 	addi	r20,r20,1
 101e3a8:	28bff404 	addi	r2,r5,-48
 101e3ac:	18bff92e 	bgeu	r3,r2,101e394 <___vfiprintf_internal_r+0xae4>
 101e3b0:	302f883a 	mov	r23,r6
 101e3b4:	303db40e 	bge	r6,zero,101da88 <___vfiprintf_internal_r+0x1d8>
 101e3b8:	05ffffc4 	movi	r23,-1
 101e3bc:	003db206 	br	101da88 <___vfiprintf_internal_r+0x1d8>
 101e3c0:	d8813b17 	ldw	r2,1260(sp)
 101e3c4:	a0c00007 	ldb	r3,0(r20)
 101e3c8:	10800054 	ori	r2,r2,1
 101e3cc:	d8813b15 	stw	r2,1260(sp)
 101e3d0:	003dab06 	br	101da80 <___vfiprintf_internal_r+0x1d0>
 101e3d4:	00800ac4 	movi	r2,43
 101e3d8:	d8800005 	stb	r2,0(sp)
 101e3dc:	a0c00007 	ldb	r3,0(r20)
 101e3e0:	003da706 	br	101da80 <___vfiprintf_internal_r+0x1d0>
 101e3e4:	018040b4 	movhi	r6,258
 101e3e8:	31bceb04 	addi	r6,r6,-3156
 101e3ec:	d9813615 	stw	r6,1240(sp)
 101e3f0:	d8c13b17 	ldw	r3,1260(sp)
 101e3f4:	1880080c 	andi	r2,r3,32
 101e3f8:	1000c226 	beq	r2,zero,101e704 <___vfiprintf_internal_r+0xe54>
 101e3fc:	3c000017 	ldw	r16,0(r7)
 101e400:	3c400117 	ldw	r17,4(r7)
 101e404:	39000204 	addi	r4,r7,8
 101e408:	d9013515 	stw	r4,1236(sp)
 101e40c:	d9013b17 	ldw	r4,1260(sp)
 101e410:	2080004c 	andi	r2,r4,1
 101e414:	1005003a 	cmpeq	r2,r2,zero
 101e418:	1000931e 	bne	r2,zero,101e668 <___vfiprintf_internal_r+0xdb8>
 101e41c:	8444b03a 	or	r2,r16,r17
 101e420:	10009126 	beq	r2,zero,101e668 <___vfiprintf_internal_r+0xdb8>
 101e424:	21000094 	ori	r4,r4,2
 101e428:	d9013b15 	stw	r4,1260(sp)
 101e42c:	00800c04 	movi	r2,48
 101e430:	01000084 	movi	r4,2
 101e434:	d8800045 	stb	r2,1(sp)
 101e438:	d9400085 	stb	r5,2(sp)
 101e43c:	d8000005 	stb	zero,0(sp)
 101e440:	003f2106 	br	101e0c8 <___vfiprintf_internal_r+0x818>
 101e444:	38800017 	ldw	r2,0(r7)
 101e448:	07000044 	movi	fp,1
 101e44c:	39c00104 	addi	r7,r7,4
 101e450:	d9800404 	addi	r6,sp,16
 101e454:	d9c13515 	stw	r7,1236(sp)
 101e458:	d9813c15 	stw	r6,1264(sp)
 101e45c:	df013715 	stw	fp,1244(sp)
 101e460:	d8800405 	stb	r2,16(sp)
 101e464:	d8000005 	stb	zero,0(sp)
 101e468:	003df206 	br	101dc34 <___vfiprintf_internal_r+0x384>
 101e46c:	008040b4 	movhi	r2,258
 101e470:	10bcf604 	addi	r2,r2,-3112
 101e474:	d8813615 	stw	r2,1240(sp)
 101e478:	003fdd06 	br	101e3f0 <___vfiprintf_internal_r+0xb40>
 101e47c:	d8c13b17 	ldw	r3,1260(sp)
 101e480:	1880080c 	andi	r2,r3,32
 101e484:	1000e326 	beq	r2,zero,101e814 <___vfiprintf_internal_r+0xf64>
 101e488:	d9013a17 	ldw	r4,1256(sp)
 101e48c:	38800017 	ldw	r2,0(r7)
 101e490:	39c00104 	addi	r7,r7,4
 101e494:	2007d7fa 	srai	r3,r4,31
 101e498:	11000015 	stw	r4,0(r2)
 101e49c:	10c00115 	stw	r3,4(r2)
 101e4a0:	003d5406 	br	101d9f4 <___vfiprintf_internal_r+0x144>
 101e4a4:	a0c00007 	ldb	r3,0(r20)
 101e4a8:	00801b04 	movi	r2,108
 101e4ac:	1880f926 	beq	r3,r2,101e894 <___vfiprintf_internal_r+0xfe4>
 101e4b0:	d9013b17 	ldw	r4,1260(sp)
 101e4b4:	21000414 	ori	r4,r4,16
 101e4b8:	d9013b15 	stw	r4,1260(sp)
 101e4bc:	003d7006 	br	101da80 <___vfiprintf_internal_r+0x1d0>
 101e4c0:	d8000005 	stb	zero,0(sp)
 101e4c4:	39000017 	ldw	r4,0(r7)
 101e4c8:	39c00104 	addi	r7,r7,4
 101e4cc:	d9c13515 	stw	r7,1236(sp)
 101e4d0:	d9013c15 	stw	r4,1264(sp)
 101e4d4:	20010226 	beq	r4,zero,101e8e0 <___vfiprintf_internal_r+0x1030>
 101e4d8:	b800fc16 	blt	r23,zero,101e8cc <___vfiprintf_internal_r+0x101c>
 101e4dc:	d9013c17 	ldw	r4,1264(sp)
 101e4e0:	000b883a 	mov	r5,zero
 101e4e4:	b80d883a 	mov	r6,r23
 101e4e8:	100ce940 	call	100ce94 <memchr>
 101e4ec:	10000426 	beq	r2,zero,101e500 <___vfiprintf_internal_r+0xc50>
 101e4f0:	d9813c17 	ldw	r6,1264(sp)
 101e4f4:	1185c83a 	sub	r2,r2,r6
 101e4f8:	d8813715 	stw	r2,1244(sp)
 101e4fc:	b880010e 	bge	r23,r2,101e504 <___vfiprintf_internal_r+0xc54>
 101e500:	ddc13715 	stw	r23,1244(sp)
 101e504:	d8013815 	stw	zero,1248(sp)
 101e508:	003f0106 	br	101e110 <___vfiprintf_internal_r+0x860>
 101e50c:	d8813b17 	ldw	r2,1260(sp)
 101e510:	3c000017 	ldw	r16,0(r7)
 101e514:	00c040b4 	movhi	r3,258
 101e518:	18fceb04 	addi	r3,r3,-3156
 101e51c:	10800094 	ori	r2,r2,2
 101e520:	d8813b15 	stw	r2,1260(sp)
 101e524:	39c00104 	addi	r7,r7,4
 101e528:	d8c13615 	stw	r3,1240(sp)
 101e52c:	00800c04 	movi	r2,48
 101e530:	00c01e04 	movi	r3,120
 101e534:	0023883a 	mov	r17,zero
 101e538:	01000084 	movi	r4,2
 101e53c:	d9c13515 	stw	r7,1236(sp)
 101e540:	d8800045 	stb	r2,1(sp)
 101e544:	d8c00085 	stb	r3,2(sp)
 101e548:	d8000005 	stb	zero,0(sp)
 101e54c:	003ede06 	br	101e0c8 <___vfiprintf_internal_r+0x818>
 101e550:	d9813b17 	ldw	r6,1260(sp)
 101e554:	a0c00007 	ldb	r3,0(r20)
 101e558:	31801014 	ori	r6,r6,64
 101e55c:	d9813b15 	stw	r6,1260(sp)
 101e560:	003d4706 	br	101da80 <___vfiprintf_internal_r+0x1d0>
 101e564:	d9413b17 	ldw	r5,1260(sp)
 101e568:	a0c00007 	ldb	r3,0(r20)
 101e56c:	29400814 	ori	r5,r5,32
 101e570:	d9413b15 	stw	r5,1260(sp)
 101e574:	003d4206 	br	101da80 <___vfiprintf_internal_r+0x1d0>
 101e578:	a0c00007 	ldb	r3,0(r20)
 101e57c:	003d4006 	br	101da80 <___vfiprintf_internal_r+0x1d0>
 101e580:	20c03fcc 	andi	r3,r4,255
 101e584:	00800044 	movi	r2,1
 101e588:	18802b26 	beq	r3,r2,101e638 <___vfiprintf_internal_r+0xd88>
 101e58c:	18800b36 	bltu	r3,r2,101e5bc <___vfiprintf_internal_r+0xd0c>
 101e590:	00800084 	movi	r2,2
 101e594:	18808426 	beq	r3,r2,101e7a8 <___vfiprintf_internal_r+0xef8>
 101e598:	010040b4 	movhi	r4,258
 101e59c:	213cfb04 	addi	r4,r4,-3092
 101e5a0:	ddc13815 	stw	r23,1248(sp)
 101e5a4:	10068940 	call	1006894 <strlen>
 101e5a8:	d8813715 	stw	r2,1244(sp)
 101e5ac:	008040b4 	movhi	r2,258
 101e5b0:	10bcfb04 	addi	r2,r2,-3092
 101e5b4:	d8813c15 	stw	r2,1264(sp)
 101e5b8:	003ed506 	br	101e110 <___vfiprintf_internal_r+0x860>
 101e5bc:	d8800e04 	addi	r2,sp,56
 101e5c0:	df000404 	addi	fp,sp,16
 101e5c4:	d8813c15 	stw	r2,1264(sp)
 101e5c8:	880a977a 	slli	r5,r17,29
 101e5cc:	8004d0fa 	srli	r2,r16,3
 101e5d0:	8806d0fa 	srli	r3,r17,3
 101e5d4:	810001cc 	andi	r4,r16,7
 101e5d8:	2884b03a 	or	r2,r5,r2
 101e5dc:	d9413c17 	ldw	r5,1264(sp)
 101e5e0:	21000c04 	addi	r4,r4,48
 101e5e4:	1021883a 	mov	r16,r2
 101e5e8:	297fffc4 	addi	r5,r5,-1
 101e5ec:	d9413c15 	stw	r5,1264(sp)
 101e5f0:	29000005 	stb	r4,0(r5)
 101e5f4:	10cab03a 	or	r5,r2,r3
 101e5f8:	1823883a 	mov	r17,r3
 101e5fc:	283ff21e 	bne	r5,zero,101e5c8 <___vfiprintf_internal_r+0xd18>
 101e600:	d9813b17 	ldw	r6,1260(sp)
 101e604:	3080004c 	andi	r2,r6,1
 101e608:	1005003a 	cmpeq	r2,r2,zero
 101e60c:	103ebb1e 	bne	r2,zero,101e0fc <___vfiprintf_internal_r+0x84c>
 101e610:	20803fcc 	andi	r2,r4,255
 101e614:	1080201c 	xori	r2,r2,128
 101e618:	10bfe004 	addi	r2,r2,-128
 101e61c:	00c00c04 	movi	r3,48
 101e620:	10feb626 	beq	r2,r3,101e0fc <___vfiprintf_internal_r+0x84c>
 101e624:	d8813c17 	ldw	r2,1264(sp)
 101e628:	10bfffc4 	addi	r2,r2,-1
 101e62c:	d8813c15 	stw	r2,1264(sp)
 101e630:	10c00005 	stb	r3,0(r2)
 101e634:	003eb106 	br	101e0fc <___vfiprintf_internal_r+0x84c>
 101e638:	88800068 	cmpgeui	r2,r17,1
 101e63c:	10000d1e 	bne	r2,zero,101e674 <___vfiprintf_internal_r+0xdc4>
 101e640:	8800021e 	bne	r17,zero,101e64c <___vfiprintf_internal_r+0xd9c>
 101e644:	00800244 	movi	r2,9
 101e648:	14000a36 	bltu	r2,r16,101e674 <___vfiprintf_internal_r+0xdc4>
 101e64c:	d9800dc4 	addi	r6,sp,55
 101e650:	df000404 	addi	fp,sp,16
 101e654:	d9813c15 	stw	r6,1264(sp)
 101e658:	d8c13c17 	ldw	r3,1264(sp)
 101e65c:	80800c04 	addi	r2,r16,48
 101e660:	18800005 	stb	r2,0(r3)
 101e664:	003ea506 	br	101e0fc <___vfiprintf_internal_r+0x84c>
 101e668:	01000084 	movi	r4,2
 101e66c:	d8000005 	stb	zero,0(sp)
 101e670:	003e9506 	br	101e0c8 <___vfiprintf_internal_r+0x818>
 101e674:	df000404 	addi	fp,sp,16
 101e678:	dcc00e04 	addi	r19,sp,56
 101e67c:	8009883a 	mov	r4,r16
 101e680:	880b883a 	mov	r5,r17
 101e684:	01800284 	movi	r6,10
 101e688:	000f883a 	mov	r7,zero
 101e68c:	10126f80 	call	10126f8 <__umoddi3>
 101e690:	12000c04 	addi	r8,r2,48
 101e694:	9cffffc4 	addi	r19,r19,-1
 101e698:	8009883a 	mov	r4,r16
 101e69c:	880b883a 	mov	r5,r17
 101e6a0:	01800284 	movi	r6,10
 101e6a4:	000f883a 	mov	r7,zero
 101e6a8:	9a000005 	stb	r8,0(r19)
 101e6ac:	101211c0 	call	101211c <__udivdi3>
 101e6b0:	1009883a 	mov	r4,r2
 101e6b4:	1021883a 	mov	r16,r2
 101e6b8:	18800068 	cmpgeui	r2,r3,1
 101e6bc:	1823883a 	mov	r17,r3
 101e6c0:	103fee1e 	bne	r2,zero,101e67c <___vfiprintf_internal_r+0xdcc>
 101e6c4:	1800021e 	bne	r3,zero,101e6d0 <___vfiprintf_internal_r+0xe20>
 101e6c8:	00800244 	movi	r2,9
 101e6cc:	113feb36 	bltu	r2,r4,101e67c <___vfiprintf_internal_r+0xdcc>
 101e6d0:	9cffffc4 	addi	r19,r19,-1
 101e6d4:	dcc13c15 	stw	r19,1264(sp)
 101e6d8:	003fdf06 	br	101e658 <___vfiprintf_internal_r+0xda8>
 101e6dc:	05c040b4 	movhi	r23,258
 101e6e0:	bdff1f04 	addi	r23,r23,-900
 101e6e4:	003dc506 	br	101ddfc <___vfiprintf_internal_r+0x54c>
 101e6e8:	d9013b17 	ldw	r4,1260(sp)
 101e6ec:	2080004c 	andi	r2,r4,1
 101e6f0:	1000421e 	bne	r2,zero,101e7fc <___vfiprintf_internal_r+0xf4c>
 101e6f4:	d9400e04 	addi	r5,sp,56
 101e6f8:	df000404 	addi	fp,sp,16
 101e6fc:	d9413c15 	stw	r5,1264(sp)
 101e700:	003e7e06 	br	101e0fc <___vfiprintf_internal_r+0x84c>
 101e704:	d9813b17 	ldw	r6,1260(sp)
 101e708:	3080040c 	andi	r2,r6,16
 101e70c:	10001c1e 	bne	r2,zero,101e780 <___vfiprintf_internal_r+0xed0>
 101e710:	d8c13b17 	ldw	r3,1260(sp)
 101e714:	1880100c 	andi	r2,r3,64
 101e718:	10001926 	beq	r2,zero,101e780 <___vfiprintf_internal_r+0xed0>
 101e71c:	3c00000b 	ldhu	r16,0(r7)
 101e720:	0023883a 	mov	r17,zero
 101e724:	39c00104 	addi	r7,r7,4
 101e728:	d9c13515 	stw	r7,1236(sp)
 101e72c:	003f3706 	br	101e40c <___vfiprintf_internal_r+0xb5c>
 101e730:	3c000017 	ldw	r16,0(r7)
 101e734:	0009883a 	mov	r4,zero
 101e738:	39c00104 	addi	r7,r7,4
 101e73c:	0023883a 	mov	r17,zero
 101e740:	d9c13515 	stw	r7,1236(sp)
 101e744:	d8000005 	stb	zero,0(sp)
 101e748:	003e5f06 	br	101e0c8 <___vfiprintf_internal_r+0x818>
 101e74c:	3c000017 	ldw	r16,0(r7)
 101e750:	01000044 	movi	r4,1
 101e754:	39c00104 	addi	r7,r7,4
 101e758:	0023883a 	mov	r17,zero
 101e75c:	d9c13515 	stw	r7,1236(sp)
 101e760:	d8000005 	stb	zero,0(sp)
 101e764:	003e5806 	br	101e0c8 <___vfiprintf_internal_r+0x818>
 101e768:	38800017 	ldw	r2,0(r7)
 101e76c:	39c00104 	addi	r7,r7,4
 101e770:	d9c13515 	stw	r7,1236(sp)
 101e774:	1023d7fa 	srai	r17,r2,31
 101e778:	1021883a 	mov	r16,r2
 101e77c:	003e5006 	br	101e0c0 <___vfiprintf_internal_r+0x810>
 101e780:	3c000017 	ldw	r16,0(r7)
 101e784:	0023883a 	mov	r17,zero
 101e788:	39c00104 	addi	r7,r7,4
 101e78c:	d9c13515 	stw	r7,1236(sp)
 101e790:	003f1e06 	br	101e40c <___vfiprintf_internal_r+0xb5c>
 101e794:	d9400317 	ldw	r5,12(sp)
 101e798:	d9000217 	ldw	r4,8(sp)
 101e79c:	05c040b4 	movhi	r23,258
 101e7a0:	bdff2304 	addi	r23,r23,-884
 101e7a4:	003d4e06 	br	101dce0 <___vfiprintf_internal_r+0x430>
 101e7a8:	d9000e04 	addi	r4,sp,56
 101e7ac:	df000404 	addi	fp,sp,16
 101e7b0:	d9013c15 	stw	r4,1264(sp)
 101e7b4:	d9813617 	ldw	r6,1240(sp)
 101e7b8:	880a973a 	slli	r5,r17,28
 101e7bc:	8004d13a 	srli	r2,r16,4
 101e7c0:	810003cc 	andi	r4,r16,15
 101e7c4:	3109883a 	add	r4,r6,r4
 101e7c8:	2884b03a 	or	r2,r5,r2
 101e7cc:	21400003 	ldbu	r5,0(r4)
 101e7d0:	d9013c17 	ldw	r4,1264(sp)
 101e7d4:	8806d13a 	srli	r3,r17,4
 101e7d8:	1021883a 	mov	r16,r2
 101e7dc:	213fffc4 	addi	r4,r4,-1
 101e7e0:	d9013c15 	stw	r4,1264(sp)
 101e7e4:	d9813c17 	ldw	r6,1264(sp)
 101e7e8:	10c8b03a 	or	r4,r2,r3
 101e7ec:	1823883a 	mov	r17,r3
 101e7f0:	31400005 	stb	r5,0(r6)
 101e7f4:	203fef1e 	bne	r4,zero,101e7b4 <___vfiprintf_internal_r+0xf04>
 101e7f8:	003e4006 	br	101e0fc <___vfiprintf_internal_r+0x84c>
 101e7fc:	00800c04 	movi	r2,48
 101e800:	d9800dc4 	addi	r6,sp,55
 101e804:	df000404 	addi	fp,sp,16
 101e808:	d8800dc5 	stb	r2,55(sp)
 101e80c:	d9813c15 	stw	r6,1264(sp)
 101e810:	003e3a06 	br	101e0fc <___vfiprintf_internal_r+0x84c>
 101e814:	d9413b17 	ldw	r5,1260(sp)
 101e818:	2880040c 	andi	r2,r5,16
 101e81c:	10002326 	beq	r2,zero,101e8ac <___vfiprintf_internal_r+0xffc>
 101e820:	38800017 	ldw	r2,0(r7)
 101e824:	d9813a17 	ldw	r6,1256(sp)
 101e828:	39c00104 	addi	r7,r7,4
 101e82c:	11800015 	stw	r6,0(r2)
 101e830:	003c7006 	br	101d9f4 <___vfiprintf_internal_r+0x144>
 101e834:	d9000217 	ldw	r4,8(sp)
 101e838:	05c040b4 	movhi	r23,258
 101e83c:	bdff2304 	addi	r23,r23,-884
 101e840:	003da406 	br	101ded4 <___vfiprintf_internal_r+0x624>
 101e844:	0005883a 	mov	r2,zero
 101e848:	1409c83a 	sub	r4,r2,r16
 101e84c:	1105803a 	cmpltu	r2,r2,r4
 101e850:	044bc83a 	sub	r5,zero,r17
 101e854:	2885c83a 	sub	r2,r5,r2
 101e858:	2021883a 	mov	r16,r4
 101e85c:	1023883a 	mov	r17,r2
 101e860:	01000044 	movi	r4,1
 101e864:	00800b44 	movi	r2,45
 101e868:	d8800005 	stb	r2,0(sp)
 101e86c:	003e1606 	br	101e0c8 <___vfiprintf_internal_r+0x818>
 101e870:	b009883a 	mov	r4,r22
 101e874:	a80b883a 	mov	r5,r21
 101e878:	d9800104 	addi	r6,sp,4
 101e87c:	101d8580 	call	101d858 <__sprint_r>
 101e880:	103daa1e 	bne	r2,zero,101df2c <___vfiprintf_internal_r+0x67c>
 101e884:	003da806 	br	101df28 <___vfiprintf_internal_r+0x678>
 101e888:	05c040b4 	movhi	r23,258
 101e88c:	bdff1f04 	addi	r23,r23,-900
 101e890:	003dca06 	br	101dfbc <___vfiprintf_internal_r+0x70c>
 101e894:	d8813b17 	ldw	r2,1260(sp)
 101e898:	a5000044 	addi	r20,r20,1
 101e89c:	a0c00007 	ldb	r3,0(r20)
 101e8a0:	10800814 	ori	r2,r2,32
 101e8a4:	d8813b15 	stw	r2,1260(sp)
 101e8a8:	003c7506 	br	101da80 <___vfiprintf_internal_r+0x1d0>
 101e8ac:	d8c13b17 	ldw	r3,1260(sp)
 101e8b0:	1880100c 	andi	r2,r3,64
 101e8b4:	10001a26 	beq	r2,zero,101e920 <___vfiprintf_internal_r+0x1070>
 101e8b8:	38800017 	ldw	r2,0(r7)
 101e8bc:	d9013a17 	ldw	r4,1256(sp)
 101e8c0:	39c00104 	addi	r7,r7,4
 101e8c4:	1100000d 	sth	r4,0(r2)
 101e8c8:	003c4a06 	br	101d9f4 <___vfiprintf_internal_r+0x144>
 101e8cc:	d9013c17 	ldw	r4,1264(sp)
 101e8d0:	10068940 	call	1006894 <strlen>
 101e8d4:	d8813715 	stw	r2,1244(sp)
 101e8d8:	d8013815 	stw	zero,1248(sp)
 101e8dc:	003e0c06 	br	101e110 <___vfiprintf_internal_r+0x860>
 101e8e0:	00800184 	movi	r2,6
 101e8e4:	15c00836 	bltu	r2,r23,101e908 <___vfiprintf_internal_r+0x1058>
 101e8e8:	b839883a 	mov	fp,r23
 101e8ec:	b800010e 	bge	r23,zero,101e8f4 <___vfiprintf_internal_r+0x1044>
 101e8f0:	0039883a 	mov	fp,zero
 101e8f4:	014040b4 	movhi	r5,258
 101e8f8:	297cf404 	addi	r5,r5,-3120
 101e8fc:	ddc13715 	stw	r23,1244(sp)
 101e900:	d9413c15 	stw	r5,1264(sp)
 101e904:	003ccb06 	br	101dc34 <___vfiprintf_internal_r+0x384>
 101e908:	014040b4 	movhi	r5,258
 101e90c:	297cf404 	addi	r5,r5,-3120
 101e910:	1039883a 	mov	fp,r2
 101e914:	d9413c15 	stw	r5,1264(sp)
 101e918:	d8813715 	stw	r2,1244(sp)
 101e91c:	003cc506 	br	101dc34 <___vfiprintf_internal_r+0x384>
 101e920:	38800017 	ldw	r2,0(r7)
 101e924:	d9413a17 	ldw	r5,1256(sp)
 101e928:	39c00104 	addi	r7,r7,4
 101e92c:	11400015 	stw	r5,0(r2)
 101e930:	003c3006 	br	101d9f4 <___vfiprintf_internal_r+0x144>
 101e934:	002f883a 	mov	r23,zero
 101e938:	003c5306 	br	101da88 <___vfiprintf_internal_r+0x1d8>
 101e93c:	3dc00017 	ldw	r23,0(r7)
 101e940:	39c00104 	addi	r7,r7,4
 101e944:	b83f0c0e 	bge	r23,zero,101e578 <___vfiprintf_internal_r+0xcc8>
 101e948:	a0c00007 	ldb	r3,0(r20)
 101e94c:	05ffffc4 	movi	r23,-1
 101e950:	003c4b06 	br	101da80 <___vfiprintf_internal_r+0x1d0>

0101e954 <__vfiprintf_internal>:
 101e954:	008040b4 	movhi	r2,258
 101e958:	1086c504 	addi	r2,r2,6932
 101e95c:	2013883a 	mov	r9,r4
 101e960:	11000017 	ldw	r4,0(r2)
 101e964:	2805883a 	mov	r2,r5
 101e968:	300f883a 	mov	r7,r6
 101e96c:	480b883a 	mov	r5,r9
 101e970:	100d883a 	mov	r6,r2
 101e974:	101d8b01 	jmpi	101d8b0 <___vfiprintf_internal_r>

0101e978 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 101e978:	defffd04 	addi	sp,sp,-12
 101e97c:	df000215 	stw	fp,8(sp)
 101e980:	df000204 	addi	fp,sp,8
 101e984:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 101e988:	e0bfff17 	ldw	r2,-4(fp)
 101e98c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 101e990:	e0bffe17 	ldw	r2,-8(fp)
 101e994:	1005003a 	cmpeq	r2,r2,zero
 101e998:	1000021e 	bne	r2,zero,101e9a4 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 101e99c:	002af070 	cmpltui	zero,zero,43969
 101e9a0:	00000106 	br	101e9a8 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 101e9a4:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 101e9a8:	e037883a 	mov	sp,fp
 101e9ac:	df000017 	ldw	fp,0(sp)
 101e9b0:	dec00104 	addi	sp,sp,4
 101e9b4:	f800283a 	ret

0101e9b8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 101e9b8:	defffd04 	addi	sp,sp,-12
 101e9bc:	dfc00215 	stw	ra,8(sp)
 101e9c0:	df000115 	stw	fp,4(sp)
 101e9c4:	df000104 	addi	fp,sp,4
 101e9c8:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 101e9cc:	e13fff17 	ldw	r4,-4(fp)
 101e9d0:	101e9780 	call	101e978 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 101e9d4:	003fff06 	br	101e9d4 <_exit+0x1c>

0101e9d8 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 101e9d8:	deffff04 	addi	sp,sp,-4
 101e9dc:	df000015 	stw	fp,0(sp)
 101e9e0:	d839883a 	mov	fp,sp
  return 0;
 101e9e4:	0005883a 	mov	r2,zero
}
 101e9e8:	e037883a 	mov	sp,fp
 101e9ec:	df000017 	ldw	fp,0(sp)
 101e9f0:	dec00104 	addi	sp,sp,4
 101e9f4:	f800283a 	ret

0101e9f8 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 101e9f8:	defffa04 	addi	sp,sp,-24
 101e9fc:	dfc00515 	stw	ra,20(sp)
 101ea00:	df000415 	stw	fp,16(sp)
 101ea04:	df000404 	addi	fp,sp,16
 101ea08:	e13ffd15 	stw	r4,-12(fp)
 101ea0c:	e17ffe15 	stw	r5,-8(fp)
  int status = 0;
 101ea10:	e03ffc15 	stw	zero,-16(fp)

  if (pid <= 0)
 101ea14:	e0bffd17 	ldw	r2,-12(fp)
 101ea18:	10800048 	cmpgei	r2,r2,1
 101ea1c:	1000301e 	bne	r2,zero,101eae0 <kill+0xe8>
  {
    switch (sig)
 101ea20:	e0bffe17 	ldw	r2,-8(fp)
 101ea24:	10800828 	cmpgeui	r2,r2,32
 101ea28:	10002a1e 	bne	r2,zero,101ead4 <kill+0xdc>
 101ea2c:	e0bffe17 	ldw	r2,-8(fp)
 101ea30:	1085883a 	add	r2,r2,r2
 101ea34:	1087883a 	add	r3,r2,r2
 101ea38:	008040b4 	movhi	r2,258
 101ea3c:	10ba9304 	addi	r2,r2,-5556
 101ea40:	1885883a 	add	r2,r3,r2
 101ea44:	10800017 	ldw	r2,0(r2)
 101ea48:	1000683a 	jmp	r2
 101ea4c:	0101eaf4 	movhi	r4,1963
 101ea50:	0101ead4 	movui	r4,1963
 101ea54:	0101ead4 	movui	r4,1963
 101ea58:	0101eacc 	andi	r4,zero,1963
 101ea5c:	0101eacc 	andi	r4,zero,1963
 101ea60:	0101eacc 	andi	r4,zero,1963
 101ea64:	0101eacc 	andi	r4,zero,1963
 101ea68:	0101ead4 	movui	r4,1963
 101ea6c:	0101eacc 	andi	r4,zero,1963
 101ea70:	0101eacc 	andi	r4,zero,1963
 101ea74:	0101eacc 	andi	r4,zero,1963
 101ea78:	0101eacc 	andi	r4,zero,1963
 101ea7c:	0101eacc 	andi	r4,zero,1963
 101ea80:	0101eacc 	andi	r4,zero,1963
 101ea84:	0101eacc 	andi	r4,zero,1963
 101ea88:	0101eacc 	andi	r4,zero,1963
 101ea8c:	0101eaf4 	movhi	r4,1963
 101ea90:	0101ead4 	movui	r4,1963
 101ea94:	0101ead4 	movui	r4,1963
 101ea98:	0101ead4 	movui	r4,1963
 101ea9c:	0101eaf4 	movhi	r4,1963
 101eaa0:	0101ead4 	movui	r4,1963
 101eaa4:	0101ead4 	movui	r4,1963
 101eaa8:	0101eacc 	andi	r4,zero,1963
 101eaac:	0101eacc 	andi	r4,zero,1963
 101eab0:	0101eacc 	andi	r4,zero,1963
 101eab4:	0101eacc 	andi	r4,zero,1963
 101eab8:	0101eacc 	andi	r4,zero,1963
 101eabc:	0101ead4 	movui	r4,1963
 101eac0:	0101ead4 	movui	r4,1963
 101eac4:	0101eacc 	andi	r4,zero,1963
 101eac8:	0101eacc 	andi	r4,zero,1963
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 101eacc:	0009883a 	mov	r4,zero
 101ead0:	101e9b80 	call	101e9b8 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 101ead4:	00800584 	movi	r2,22
 101ead8:	e0bffc15 	stw	r2,-16(fp)
 101eadc:	00000506 	br	101eaf4 <kill+0xfc>
    }
  }

  else if (pid > 0)
 101eae0:	e0bffd17 	ldw	r2,-12(fp)
 101eae4:	10800050 	cmplti	r2,r2,1
 101eae8:	1000021e 	bne	r2,zero,101eaf4 <kill+0xfc>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 101eaec:	008000c4 	movi	r2,3
 101eaf0:	e0bffc15 	stw	r2,-16(fp)
  }

  if (status)
 101eaf4:	e0bffc17 	ldw	r2,-16(fp)
 101eaf8:	1005003a 	cmpeq	r2,r2,zero
 101eafc:	1000071e 	bne	r2,zero,101eb1c <kill+0x124>
  {
    ALT_ERRNO = status;
 101eb00:	101eb380 	call	101eb38 <alt_get_errno>
 101eb04:	1007883a 	mov	r3,r2
 101eb08:	e0bffc17 	ldw	r2,-16(fp)
 101eb0c:	18800015 	stw	r2,0(r3)
    return -1;
 101eb10:	00bfffc4 	movi	r2,-1
 101eb14:	e0bfff15 	stw	r2,-4(fp)
 101eb18:	00000106 	br	101eb20 <kill+0x128>
  }

  return 0;
 101eb1c:	e03fff15 	stw	zero,-4(fp)
 101eb20:	e0bfff17 	ldw	r2,-4(fp)
}
 101eb24:	e037883a 	mov	sp,fp
 101eb28:	dfc00117 	ldw	ra,4(sp)
 101eb2c:	df000017 	ldw	fp,0(sp)
 101eb30:	dec00204 	addi	sp,sp,8
 101eb34:	f800283a 	ret

0101eb38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 101eb38:	defffd04 	addi	sp,sp,-12
 101eb3c:	dfc00215 	stw	ra,8(sp)
 101eb40:	df000115 	stw	fp,4(sp)
 101eb44:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 101eb48:	008040b4 	movhi	r2,258
 101eb4c:	1086ce04 	addi	r2,r2,6968
 101eb50:	10800017 	ldw	r2,0(r2)
 101eb54:	1005003a 	cmpeq	r2,r2,zero
 101eb58:	1000061e 	bne	r2,zero,101eb74 <alt_get_errno+0x3c>
 101eb5c:	008040b4 	movhi	r2,258
 101eb60:	1086ce04 	addi	r2,r2,6968
 101eb64:	10800017 	ldw	r2,0(r2)
 101eb68:	103ee83a 	callr	r2
 101eb6c:	e0bfff15 	stw	r2,-4(fp)
 101eb70:	00000306 	br	101eb80 <alt_get_errno+0x48>
 101eb74:	008040b4 	movhi	r2,258
 101eb78:	108e8304 	addi	r2,r2,14860
 101eb7c:	e0bfff15 	stw	r2,-4(fp)
 101eb80:	e0bfff17 	ldw	r2,-4(fp)
}
 101eb84:	e037883a 	mov	sp,fp
 101eb88:	dfc00117 	ldw	ra,4(sp)
 101eb8c:	df000017 	ldw	fp,0(sp)
 101eb90:	dec00204 	addi	sp,sp,8
 101eb94:	f800283a 	ret
 101eb98:	0101d33c 	xorhi	r4,zero,1868
