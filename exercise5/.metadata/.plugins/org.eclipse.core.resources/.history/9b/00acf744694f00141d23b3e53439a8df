#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <Math.h>
#include "io.h"
#include "system.h"
#include "altera_up_avalon_video_pixel_buffer_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma.h"
#define drawer_base (volatile int *) 0x6000 //must be base address of pixel_drawer avalon_slave
#define BACKGROUND 0x00000

/* GIMP RGBA C-Source image dump (rand_image.c) */
#define GIMP_IMAGE_WIDTH (5)
#define GIMP_IMAGE_HEIGHT (5)
#define GIMP_IMAGE_BYTES_PER_PIXEL (4) /* 3:RGB, 4:RGBA */
#define GIMP_IMAGE_PIXEL_DATA ((unsigned char*) GIMP_IMAGE_pixel_data)
static const unsigned char GIMP_IMAGE_pixel_data[5 * 5 * 4 + 1] =
("\0\0\377\377\0\0\377\377\0\0\377\377\0\0\377\377\0\0\377\377\0\0\377\377\0"
 "\0\377\377\0\0\377\377\0\0\377\377\0\0\377\377\0\0\377\377\0\0\377\377\0\0");

void draw_image(alt_up_pixel_buffer_dma_dev* pixel_buffer, int x, int y );

static const struct {
  unsigned int 	 width;
  unsigned int 	 height;
  unsigned int 	 bytes_per_pixel; /* 2:RGB16, 3:RGB, 4:RGBA */
  unsigned char	 pixel_data[20 * 20 * 2 + 1];
} gimp_image = {
  20, 20, 2,
  "\377\377\377\377\377\377\37\2\37\2\37\2\377\377\377\377\0\370\377\377\377"
  "\377\377\377\377\377\0\370\0\370\377\377\377\377\377\377\0\370\0\370\37\2"
  "\377\377\377\377\377\377\377\377\377\377\377\377\0\370\377\377\377\377\377"
  "\377\0\370\0\370\377\377\377\377\0\370\0\370\0\370\377\377\0\370\377\377"
  "\377\377\0\370\0\370\0\370\0\370\0\370\0\370\0\370\0\370\340\347\0\370\0"
  "\370\0\370\0\370\377\377\377\377\377\377\0\370\0\370\377\377\0\370\0\370"
  "\377\377\377\377\0\370\0\370\0\370\0\370\340\347\377\377\377\377\377\377"
  "\377\377\377\377\377\377\377\377\0\370\0\370\377\377\377\377\0\370\377\377"
  "\0\370\0\370\0\370\0\370\0\370\340\347\340\347\340\347\340\347\0\370\0\370"
  "\0\370\0\370\0\370\377\377\377\377\377\377\377\377\0\370\0\370\0\370\0\370"
  "\377\377\37\2\340\347\340\347\340\347\340\347\340\347\340\347\0\370\0\370"
  "\0\370\377\377\377\377\377\377\377\377\377\377\0\370\0\370\377\377\0\370"
  "\0\370\37\2\340\347\340\347\340\347\340\347\340\347\340\347\0\370\0\370\377"
  "\377\0\370\0\370\377\377\377\377\377\377\0\370\0\370\0\370\0\370\377\377"
  "\37\2\340\347\340\347\340\347\340\347\340\347\340\347\0\370\0\370\377\377"
  "\377\377\377\377\0\370\377\377\37\2\0\370\0\370\377\377\0\370\0\370\37\2"
  "\340\347\340\347\340\347\340\347\340\347\340\347\377\377\0\370\377\377\377"
  "\377\377\377\0\370\377\377\37\2\0\370\0\370\0\370\0\370\0\370\37\2\340\347"
  "\340\347\340\347\340\347\340\347\37\2\377\377\0\370\377\377\377\377\377\377"
  "\0\370\377\377\37\2\377\377\0\370\377\377\0\370\0\370\37\2\0\370\340\347"
  "\340\347\340\347\0\370\37\2\0\370\0\370\0\370\377\377\377\377\0\370\377\377"
  "\37\2\377\377\0\370\377\377\0\370\0\370\37\2\0\370\0\370\0\370\0\370\0\370"
  "\0\370\37\2\0\370\0\370\377\377\377\377\0\370\377\377\37\2\377\377\0\370"
  "\0\370\0\370\0\370\0\370\377\377\0\370\377\377\377\377\0\370\0\370\37\2\377"
  "\377\0\370\0\370\0\370\377\377\377\377\0\370\0\370\0\370\0\370\0\370\0\370"
  "\0\370\0\370\0\370\0\370\0\370\0\370\0\370\37\2\0\370\0\370\0\370\377\377"
  "\377\377\377\377\0\370\377\377\377\377\0\370\0\370\0\370\377\377\0\370\0"
  "\370\0\370\0\370\0\370\0\370\37\2\0\370\0\370\377\377\377\377\377\377\377"
  "\377\377\377\0\370\0\370\0\370\0\370\0\370\377\377\0\370\377\377\0\370\377"
  "\377\0\370\0\370\37\2\377\377\377\377\377\377\377\377\377\377\377\377\0\370"
  "\0\370\0\370\0\370\377\377\0\370\0\370\0\370\0\370\0\370\0\370\0\370\0\370"
  "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\0\370\377\377\0"
  "\370\0\370\0\370\0\370\0\370\377\377\377\377\377\377\0\370\377\377\377\377"
  "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
  "\0\370\377\377\377\377\377\377\377\377\0\370\0\370\377\377\0\370\377\377"
  "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
  "\37\2\37\2\377\377\377\377\377\377\377\377\377\377\377\377\0\370\0\370\377"
  "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\37\2",
};

int main(void){
	alt_up_pixel_buffer_dma_dev* pixel_buffer;
	pixel_buffer = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");
	if (pixel_buffer == 0) {
		printf("error initializing pixel buffer (check name in alt_up_pixel_buffer_dma_open_dev)\n");
	}
	alt_up_pixel_buffer_dma_change_back_buffer_address(pixel_buffer, SRAM_0_BASE);
	alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer);
	while (alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buffer));
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 0);

	draw_image(pixel_buffer, 50, 50);
	return 0;
}

void draw_image(alt_up_pixel_buffer_dma_dev* pixel_buffer, int x, int y ){
	unsigned short * pixel_offset = malloc(sizeof(short)); //2 bytes
	pixel_offset = &gimp_image; //set pointer to start of image data
	int i, j;
	for(j=0; j <= gimp_image.height; j++){
		for(i=0; i <= gimp_image.width; i++){
			alt_up_pixel_buffer_dma_draw(pixel_buffer, pixel_offset, x+i, y+j);
			pixel_offset++;
		}
	}
}
